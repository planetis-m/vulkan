# Written by Leonardo Mariscal <leo@ldmd.mx>, 2019

## Vulkan Bindings
## ====
## WARNING: This is a generated file. Do not edit
## Any edits will be overwritten by the generator.

var vkGetProc: proc (procName: cstring): pointer {.cdecl.}
var currInst: pointer = nil

when not defined(vkCustomLoader):
  import dynlib

  when defined(windows):
    const vkDLL = "vulkan-1.dll"
  elif defined(macosx):
    const vkDLL = "libMoltenVK.dylib"
  else:
    const vkDLL = "libvulkan.so.1"

  let vkHandleDLL = loadLib(vkDLL)
  if isNil(vkHandleDLL):
    quit("could not load: " & vkDLL)

  let vkGetProcAddress = cast[proc (inst: pointer, s: cstring): pointer {.stdcall.}](symAddr(vkHandleDLL, "vkGetInstanceProcAddr"))
  if vkGetProcAddress == nil:
    quit("failed to load `vkGetInstanceProcAddr` from " & vkDLL)

  vkGetProc = proc (procName: cstring): pointer {.cdecl.} =
    when defined(windows):
      result = vkGetProcAddress(currInst, procName)
      if result != nil:
        return
    result = symAddr(vkHandleDLL, procName)
    if result == nil:
      raiseInvalidLibrary(procName)

proc setVKGetProc*(getProc: proc (procName: cstring): pointer {.cdecl.}) =
  vkGetProc = getProc

type
  VkHandle* = uint
  VkNonDispatchableHandle* = uint
  ANativeWindow* = object
  AHardwareBuffer* = object
  CAMetalLayer* = object
  MTLDevice_id* = object
  MTLCommandQueue_id* = object
  MTLBuffer_id* = object
  MTLTexture_id* = object
  MTLSharedEvent_id* = object
  IOSurfaceRef* = object

# Enums
const
  VK_MAX_PHYSICAL_DEVICE_NAME_SIZE* = 256
  VK_UUID_SIZE* = 16
  VK_LUID_SIZE* = 8
  VK_LUID_SIZE_KHR* = VK_LUID_SIZE
  VK_MAX_EXTENSION_NAME_SIZE* = 256
  VK_MAX_DESCRIPTION_SIZE* = 256
  VK_MAX_MEMORY_TYPES* = 32
  VK_MAX_MEMORY_HEAPS* = 16
  VK_LOD_CLAMP_NONE* = 1000.0F
  VK_REMAINING_MIP_LEVELS* = (not 0'u32)
  VK_REMAINING_ARRAY_LAYERS* = (not 0'u32)
  VK_REMAINING_3D_SLICES_EXT* = (not 0'u32)
  VK_WHOLE_SIZE* = (not 0'u64)
  VK_ATTACHMENT_UNUSED* = (not 0'u32)
  VK_TRUE* = 1
  VK_FALSE* = 0
  VK_QUEUE_FAMILY_IGNORED* = (not 0'u32)
  VK_QUEUE_FAMILY_EXTERNAL* = (not 1'u32)
  VK_QUEUE_FAMILY_EXTERNAL_KHR* = VK_QUEUE_FAMILY_EXTERNAL
  VK_QUEUE_FAMILY_FOREIGN_EXT* = (not 2'u32)
  VK_SUBPASS_EXTERNAL* = (not 0'u32)
  VK_MAX_DEVICE_GROUP_SIZE* = 32
  VK_MAX_DEVICE_GROUP_SIZE_KHR* = VK_MAX_DEVICE_GROUP_SIZE
  VK_MAX_DRIVER_NAME_SIZE* = 256
  VK_MAX_DRIVER_NAME_SIZE_KHR* = VK_MAX_DRIVER_NAME_SIZE
  VK_MAX_DRIVER_INFO_SIZE* = 256
  VK_MAX_DRIVER_INFO_SIZE_KHR* = VK_MAX_DRIVER_INFO_SIZE
  VK_SHADER_UNUSED_KHR* = (not 0'u32)
  VK_SHADER_UNUSED_NV* = VK_SHADER_UNUSED_KHR
  VK_MAX_GLOBAL_PRIORITY_SIZE_KHR* = 16
  VK_MAX_GLOBAL_PRIORITY_SIZE_EXT* = VK_MAX_GLOBAL_PRIORITY_SIZE_KHR
  VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT* = 32
  VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR* = 7
  VK_SHADER_INDEX_UNUSED_AMDX* = (not 0'u32)

type
  VkImageLayout* {.size: sizeof(int32).} = enum
    Undefined
    General
    ColorAttachmentOptimal
    DepthStencilAttachmentOptimal
    DepthStencilReadOnlyOptimal
    ShaderReadOnlyOptimal
    TransferSrcOptimal
    TransferDstOptimal
    Preinitialized

  VkAttachmentLoadOp* {.size: sizeof(int32).} = enum
    Load
    Clear
    DontCare

  VkAttachmentStoreOp* {.size: sizeof(int32).} = enum
    Store
    DontCare

  VkImageType* {.size: sizeof(int32).} = enum
    N1d
    N2d
    N3d

  VkImageTiling* {.size: sizeof(int32).} = enum
    Optimal
    Linear

  VkImageViewType* {.size: sizeof(int32).} = enum
    N1d
    N2d
    N3d
    Cube
    N1dArray
    N2dArray
    CubeArray

  VkCommandBufferLevel* {.size: sizeof(int32).} = enum
    Primary
    Secondary

  VkComponentSwizzle* {.size: sizeof(int32).} = enum
    Identity
    Zero
    One
    R
    G
    B
    A

  VkDescriptorType* {.size: sizeof(int32).} = enum
    Sampler
    CombinedImageSampler
    SampledImage
    StorageImage
    UniformTexelBuffer
    StorageTexelBuffer
    UniformBuffer
    StorageBuffer
    UniformBufferDynamic
    StorageBufferDynamic
    InputAttachment

  VkQueryType* {.size: sizeof(int32).} = enum
    Occlusion
    PipelineStatistics
    Timestamp

  VkBorderColor* {.size: sizeof(int32).} = enum
    FloatTransparentBlack
    IntTransparentBlack
    FloatOpaqueBlack
    IntOpaqueBlack
    FloatOpaqueWhite
    IntOpaqueWhite

  VkPipelineBindPoint* {.size: sizeof(int32).} = enum
    Graphics
    Compute

  VkPipelineCacheHeaderVersion* {.size: sizeof(int32).} = enum
    One = 1

  VkPrimitiveTopology* {.size: sizeof(int32).} = enum
    PointList
    LineList
    LineStrip
    TriangleList
    TriangleStrip
    TriangleFan
    LineListWithAdjacency
    LineStripWithAdjacency
    TriangleListWithAdjacency
    TriangleStripWithAdjacency
    PatchList

  VkSharingMode* {.size: sizeof(int32).} = enum
    Exclusive
    Concurrent

  VkIndexType* {.size: sizeof(int32).} = enum
    Uint16
    Uint32

  VkFilter* {.size: sizeof(int32).} = enum
    Nearest
    Linear

  VkSamplerMipmapMode* {.size: sizeof(int32).} = enum
    Nearest
    Linear

  VkSamplerAddressMode* {.size: sizeof(int32).} = enum
    Repeat
    MirroredRepeat
    ClampToEdge
    ClampToBorder

  VkCompareOp* {.size: sizeof(int32).} = enum
    Never
    Less
    Equal
    LessOrEqual
    Greater
    NotEqual
    GreaterOrEqual
    Always

  VkPolygonMode* {.size: sizeof(int32).} = enum
    Fill
    Line
    Point

  VkFrontFace* {.size: sizeof(int32).} = enum
    CounterClockwise
    Clockwise

  VkBlendFactor* {.size: sizeof(int32).} = enum
    Zero
    One
    SrcColor
    OneMinusSrcColor
    DstColor
    OneMinusDstColor
    SrcAlpha
    OneMinusSrcAlpha
    DstAlpha
    OneMinusDstAlpha
    ConstantColor
    OneMinusConstantColor
    ConstantAlpha
    OneMinusConstantAlpha
    SrcAlphaSaturate
    Src1Color
    OneMinusSrc1Color
    Src1Alpha
    OneMinusSrc1Alpha

  VkBlendOp* {.size: sizeof(int32).} = enum
    Add
    Subtract
    ReverseSubtract
    Min
    Max

  VkStencilOp* {.size: sizeof(int32).} = enum
    Keep
    Zero
    Replace
    IncrementAndClamp
    DecrementAndClamp
    Invert
    IncrementAndWrap
    DecrementAndWrap

  VkLogicOp* {.size: sizeof(int32).} = enum
    Clear
    And
    AndReverse
    Copy
    AndInverted
    NoOp
    Xor
    Or
    Nor
    Equivalent
    Invert
    OrReverse
    CopyInverted
    OrInverted
    Nand
    Set

  VkInternalAllocationType* {.size: sizeof(int32).} = enum
    Executable

  VkSystemAllocationScope* {.size: sizeof(int32).} = enum
    Command
    Object
    Cache
    Device
    Instance

  VkPhysicalDeviceType* {.size: sizeof(int32).} = enum
    Other
    IntegratedGpu
    DiscreteGpu
    VirtualGpu
    Cpu

  VkVertexInputRate* {.size: sizeof(int32).} = enum
    Vertex
    Instance

  VkFormat* {.size: sizeof(int32).} = enum
    Undefined
    R4g4UnormPack8
    R4g4b4a4UnormPack16
    B4g4r4a4UnormPack16
    R5g6b5UnormPack16
    B5g6r5UnormPack16
    R5g5b5a1UnormPack16
    B5g5r5a1UnormPack16
    A1r5g5b5UnormPack16
    R8Unorm
    R8Snorm
    R8Uscaled
    R8Sscaled
    R8Uint
    R8Sint
    R8Srgb
    R8g8Unorm
    R8g8Snorm
    R8g8Uscaled
    R8g8Sscaled
    R8g8Uint
    R8g8Sint
    R8g8Srgb
    R8g8b8Unorm
    R8g8b8Snorm
    R8g8b8Uscaled
    R8g8b8Sscaled
    R8g8b8Uint
    R8g8b8Sint
    R8g8b8Srgb
    B8g8r8Unorm
    B8g8r8Snorm
    B8g8r8Uscaled
    B8g8r8Sscaled
    B8g8r8Uint
    B8g8r8Sint
    B8g8r8Srgb
    R8g8b8a8Unorm
    R8g8b8a8Snorm
    R8g8b8a8Uscaled
    R8g8b8a8Sscaled
    R8g8b8a8Uint
    R8g8b8a8Sint
    R8g8b8a8Srgb
    B8g8r8a8Unorm
    B8g8r8a8Snorm
    B8g8r8a8Uscaled
    B8g8r8a8Sscaled
    B8g8r8a8Uint
    B8g8r8a8Sint
    B8g8r8a8Srgb
    A8b8g8r8UnormPack32
    A8b8g8r8SnormPack32
    A8b8g8r8UscaledPack32
    A8b8g8r8SscaledPack32
    A8b8g8r8UintPack32
    A8b8g8r8SintPack32
    A8b8g8r8SrgbPack32
    A2r10g10b10UnormPack32
    A2r10g10b10SnormPack32
    A2r10g10b10UscaledPack32
    A2r10g10b10SscaledPack32
    A2r10g10b10UintPack32
    A2r10g10b10SintPack32
    A2b10g10r10UnormPack32
    A2b10g10r10SnormPack32
    A2b10g10r10UscaledPack32
    A2b10g10r10SscaledPack32
    A2b10g10r10UintPack32
    A2b10g10r10SintPack32
    R16Unorm
    R16Snorm
    R16Uscaled
    R16Sscaled
    R16Uint
    R16Sint
    R16Sfloat
    R16g16Unorm
    R16g16Snorm
    R16g16Uscaled
    R16g16Sscaled
    R16g16Uint
    R16g16Sint
    R16g16Sfloat
    R16g16b16Unorm
    R16g16b16Snorm
    R16g16b16Uscaled
    R16g16b16Sscaled
    R16g16b16Uint
    R16g16b16Sint
    R16g16b16Sfloat
    R16g16b16a16Unorm
    R16g16b16a16Snorm
    R16g16b16a16Uscaled
    R16g16b16a16Sscaled
    R16g16b16a16Uint
    R16g16b16a16Sint
    R16g16b16a16Sfloat
    R32Uint
    R32Sint
    R32Sfloat
    R32g32Uint
    R32g32Sint
    R32g32Sfloat
    R32g32b32Uint
    R32g32b32Sint
    R32g32b32Sfloat
    R32g32b32a32Uint
    R32g32b32a32Sint
    R32g32b32a32Sfloat
    R64Uint
    R64Sint
    R64Sfloat
    R64g64Uint
    R64g64Sint
    R64g64Sfloat
    R64g64b64Uint
    R64g64b64Sint
    R64g64b64Sfloat
    R64g64b64a64Uint
    R64g64b64a64Sint
    R64g64b64a64Sfloat
    B10g11r11UfloatPack32
    E5b9g9r9UfloatPack32
    D16Unorm
    X8D24UnormPack32
    D32Sfloat
    S8Uint
    D16UnormS8Uint
    D24UnormS8Uint
    D32SfloatS8Uint
    Bc1RgbUnormBlock
    Bc1RgbSrgbBlock
    Bc1RgbaUnormBlock
    Bc1RgbaSrgbBlock
    Bc2UnormBlock
    Bc2SrgbBlock
    Bc3UnormBlock
    Bc3SrgbBlock
    Bc4UnormBlock
    Bc4SnormBlock
    Bc5UnormBlock
    Bc5SnormBlock
    Bc6hUfloatBlock
    Bc6hSfloatBlock
    Bc7UnormBlock
    Bc7SrgbBlock
    Etc2R8g8b8UnormBlock
    Etc2R8g8b8SrgbBlock
    Etc2R8g8b8a1UnormBlock
    Etc2R8g8b8a1SrgbBlock
    Etc2R8g8b8a8UnormBlock
    Etc2R8g8b8a8SrgbBlock
    EacR11UnormBlock
    EacR11SnormBlock
    EacR11g11UnormBlock
    EacR11g11SnormBlock
    Astc4x4UnormBlock
    Astc4x4SrgbBlock
    Astc5x4UnormBlock
    Astc5x4SrgbBlock
    Astc5x5UnormBlock
    Astc5x5SrgbBlock
    Astc6x5UnormBlock
    Astc6x5SrgbBlock
    Astc6x6UnormBlock
    Astc6x6SrgbBlock
    Astc8x5UnormBlock
    Astc8x5SrgbBlock
    Astc8x6UnormBlock
    Astc8x6SrgbBlock
    Astc8x8UnormBlock
    Astc8x8SrgbBlock
    Astc10x5UnormBlock
    Astc10x5SrgbBlock
    Astc10x6UnormBlock
    Astc10x6SrgbBlock
    Astc10x8UnormBlock
    Astc10x8SrgbBlock
    Astc10x10UnormBlock
    Astc10x10SrgbBlock
    Astc12x10UnormBlock
    Astc12x10SrgbBlock
    Astc12x12UnormBlock
    Astc12x12SrgbBlock

  VkStructureType* {.size: sizeof(int32).} = enum
    ApplicationInfo
    InstanceCreateInfo
    DeviceQueueCreateInfo
    DeviceCreateInfo
    SubmitInfo
    MemoryAllocateInfo
    MappedMemoryRange
    BindSparseInfo
    FenceCreateInfo
    SemaphoreCreateInfo
    EventCreateInfo
    QueryPoolCreateInfo
    BufferCreateInfo
    BufferViewCreateInfo
    ImageCreateInfo
    ImageViewCreateInfo
    ShaderModuleCreateInfo
    PipelineCacheCreateInfo
    PipelineShaderStageCreateInfo
    PipelineVertexInputStateCreateInfo
    PipelineInputAssemblyStateCreateInfo
    PipelineTessellationStateCreateInfo
    PipelineViewportStateCreateInfo
    PipelineRasterizationStateCreateInfo
    PipelineMultisampleStateCreateInfo
    PipelineDepthStencilStateCreateInfo
    PipelineColorBlendStateCreateInfo
    PipelineDynamicStateCreateInfo
    GraphicsPipelineCreateInfo
    ComputePipelineCreateInfo
    PipelineLayoutCreateInfo
    SamplerCreateInfo
    DescriptorSetLayoutCreateInfo
    DescriptorPoolCreateInfo
    DescriptorSetAllocateInfo
    WriteDescriptorSet
    CopyDescriptorSet
    FramebufferCreateInfo
    RenderPassCreateInfo
    CommandPoolCreateInfo
    CommandBufferAllocateInfo
    CommandBufferInheritanceInfo
    CommandBufferBeginInfo
    RenderPassBeginInfo
    BufferMemoryBarrier
    ImageMemoryBarrier
    MemoryBarrier
    LoaderInstanceCreateInfo
    LoaderDeviceCreateInfo

  VkSubpassContents* {.size: sizeof(int32).} = enum
    Inline
    SecondaryCommandBuffers

  VkResult* {.size: sizeof(int32).} = enum
    VkErrorUnknown = -13
    VkErrorFragmentedPool
    VkErrorFormatNotSupported
    VkErrorTooManyObjects
    VkErrorIncompatibleDriver
    VkErrorFeatureNotPresent
    VkErrorExtensionNotPresent
    VkErrorLayerNotPresent
    VkErrorMemoryMapFailed
    VkErrorDeviceLost
    VkErrorInitializationFailed
    VkErrorOutOfDeviceMemory
    VkErrorOutOfHostMemory
    VkSuccess
    VkNotReady
    VkTimeout
    VkEventSet
    VkEventReset
    VkIncomplete

  VkDynamicState* {.size: sizeof(int32).} = enum
    Viewport
    Scissor
    LineWidth
    DepthBias
    BlendConstants
    DepthBounds
    StencilCompareMask
    StencilWriteMask
    StencilReference

  VkDescriptorUpdateTemplateType* {.size: sizeof(int32).} = enum
    DescriptorSet

  VkObjectType* {.size: sizeof(int32).} = enum
    Unknown
    Instance
    PhysicalDevice
    Device
    Queue
    Semaphore
    CommandBuffer
    Fence
    DeviceMemory
    Buffer
    Image
    Event
    QueryPool
    BufferView
    ImageView
    ShaderModule
    PipelineCache
    PipelineLayout
    RenderPass
    Pipeline
    DescriptorSetLayout
    Sampler
    DescriptorPool
    DescriptorSet
    Framebuffer
    CommandPool

  VkRayTracingInvocationReorderModeNV* {.size: sizeof(int32).} = enum
    None
    Reorder

  VkDirectDriverLoadingModeLUNARG* {.size: sizeof(int32).} = enum
    VkDirectDriverLoadingModeExclusiveLunarg
    VkDirectDriverLoadingModeInclusiveLunarg

  VkQueueFlagBits* {.size: sizeof(int32).} = enum
    GraphicsBit = 1
    ComputeBit
    TransferBit = 4
    SparseBindingBit = 8

  VkCullModeFlagBits* {.size: sizeof(int32).} = enum
    None
    FrontBit
    BackBit
    FrontAndBack

  VkMemoryPropertyFlagBits* {.size: sizeof(int32).} = enum
    DeviceLocalBit = 1
    HostVisibleBit
    HostCoherentBit = 4
    HostCachedBit = 8
    LazilyAllocatedBit = 16

  VkMemoryHeapFlagBits* {.size: sizeof(int32).} = enum
    DeviceLocalBit = 1

  VkAccessFlagBits* {.size: sizeof(int32).} = enum
    IndirectCommandReadBit = 1
    IndexReadBit
    VertexAttributeReadBit = 4
    UniformReadBit = 8
    InputAttachmentReadBit = 16
    ShaderReadBit = 32
    ShaderWriteBit = 64
    ColorAttachmentReadBit = 128
    ColorAttachmentWriteBit = 256
    DepthStencilAttachmentReadBit = 512
    DepthStencilAttachmentWriteBit = 1024
    TransferReadBit = 2048
    TransferWriteBit = 4096
    HostReadBit = 8192
    HostWriteBit = 16384
    MemoryReadBit = 32768
    MemoryWriteBit = 65536

  VkBufferUsageFlagBits* {.size: sizeof(int32).} = enum
    TransferSrcBit = 1
    TransferDstBit
    UniformTexelBufferBit = 4
    StorageTexelBufferBit = 8
    UniformBufferBit = 16
    StorageBufferBit = 32
    IndexBufferBit = 64
    VertexBufferBit = 128
    IndirectBufferBit = 256

  VkBufferUsageFlagBits2KHR* {.size: sizeof(int32).} = enum
    N2TransferSrcBit = 1
    N2TransferDstBit
    N2UniformTexelBufferBit = 4
    N2StorageTexelBufferBit = 8
    N2UniformBufferBit = 16
    N2StorageBufferBit = 32
    N2IndexBufferBit = 64
    N2VertexBufferBit = 128
    N2IndirectBufferBit = 256

  VkBufferCreateFlagBits* {.size: sizeof(int32).} = enum
    SparseBindingBit = 1
    SparseResidencyBit
    SparseAliasedBit = 4

  VkShaderStageFlagBits* {.size: sizeof(int32).} = enum
    VertexBit = 1
    TessellationControlBit
    TessellationEvaluationBit = 4
    GeometryBit = 8
    FragmentBit = 16
    AllGraphics = 31
    ComputeBit
    All = 2147483647

  VkImageUsageFlagBits* {.size: sizeof(int32).} = enum
    TransferSrcBit = 1
    TransferDstBit
    SampledBit = 4
    StorageBit = 8
    ColorAttachmentBit = 16
    DepthStencilAttachmentBit = 32
    TransientAttachmentBit = 64
    InputAttachmentBit = 128

  VkImageCreateFlagBits* {.size: sizeof(int32).} = enum
    SparseBindingBit = 1
    SparseResidencyBit
    SparseAliasedBit = 4
    MutableFormatBit = 8
    CubeCompatibleBit = 16

  VkPipelineCreateFlagBits* {.size: sizeof(int32).} = enum
    DisableOptimizationBit = 1
    AllowDerivativesBit
    DerivativeBit = 4

  VkPipelineCreateFlagBits2KHR* {.size: sizeof(int32).} = enum
    N2DisableOptimizationBit = 1
    N2AllowDerivativesBit
    N2DerivativeBit = 4

  VkColorComponentFlagBits* {.size: sizeof(int32).} = enum
    RBit = 1
    GBit
    BBit = 4
    ABit = 8

  VkFenceCreateFlagBits* {.size: sizeof(int32).} = enum
    SignaledBit = 1

  VkFormatFeatureFlagBits* {.size: sizeof(int32).} = enum
    SampledImageBit = 1
    StorageImageBit
    StorageImageAtomicBit = 4
    UniformTexelBufferBit = 8
    StorageTexelBufferBit = 16
    StorageTexelBufferAtomicBit = 32
    VertexBufferBit = 64
    ColorAttachmentBit = 128
    ColorAttachmentBlendBit = 256
    DepthStencilAttachmentBit = 512
    BlitSrcBit = 1024
    BlitDstBit = 2048
    SampledImageFilterLinearBit = 4096

  VkQueryControlFlagBits* {.size: sizeof(int32).} = enum
    PreciseBit = 1

  VkQueryResultFlagBits* {.size: sizeof(int32).} = enum
    N64Bit = 1
    WaitBit
    WithAvailabilityBit = 4
    PartialBit = 8

  VkCommandBufferUsageFlagBits* {.size: sizeof(int32).} = enum
    OneTimeSubmitBit = 1
    RenderPassContinueBit
    SimultaneousUseBit = 4

  VkQueryPipelineStatisticFlagBits* {.size: sizeof(int32).} = enum
    InputAssemblyVerticesBit = 1
    InputAssemblyPrimitivesBit
    VertexShaderInvocationsBit = 4
    GeometryShaderInvocationsBit = 8
    GeometryShaderPrimitivesBit = 16
    ClippingInvocationsBit = 32
    ClippingPrimitivesBit = 64
    FragmentShaderInvocationsBit = 128
    TessellationControlShaderPatchesBit = 256
    TessellationEvaluationShaderInvocationsBit = 512
    ComputeShaderInvocationsBit = 1024

  VkImageAspectFlagBits* {.size: sizeof(int32).} = enum
    ColorBit = 1
    DepthBit
    StencilBit = 4
    MetadataBit = 8

  VkSparseImageFormatFlagBits* {.size: sizeof(int32).} = enum
    SingleMiptailBit = 1
    AlignedMipSizeBit
    NonstandardBlockSizeBit = 4

  VkSparseMemoryBindFlagBits* {.size: sizeof(int32).} = enum
    MetadataBit = 1

  VkPipelineStageFlagBits* {.size: sizeof(int32).} = enum
    TopOfPipeBit = 1
    DrawIndirectBit
    VertexInputBit = 4
    VertexShaderBit = 8
    TessellationControlShaderBit = 16
    TessellationEvaluationShaderBit = 32
    GeometryShaderBit = 64
    FragmentShaderBit = 128
    EarlyFragmentTestsBit = 256
    LateFragmentTestsBit = 512
    ColorAttachmentOutputBit = 1024
    ComputeShaderBit = 2048
    TransferBit = 4096
    BottomOfPipeBit = 8192
    HostBit = 16384
    AllGraphicsBit = 32768
    AllCommandsBit = 65536

  VkCommandPoolCreateFlagBits* {.size: sizeof(int32).} = enum
    TransientBit = 1
    ResetCommandBufferBit

  VkCommandPoolResetFlagBits* {.size: sizeof(int32).} = enum
    ReleaseResourcesBit = 1

  VkCommandBufferResetFlagBits* {.size: sizeof(int32).} = enum
    ReleaseResourcesBit = 1

  VkSampleCountFlagBits* {.size: sizeof(int32).} = enum
    N1Bit = 1
    N2Bit
    N4Bit = 4
    N8Bit = 8
    N16Bit = 16
    N32Bit = 32
    N64Bit = 64

  VkAttachmentDescriptionFlagBits* {.size: sizeof(int32).} = enum
    MayAliasBit = 1

  VkStencilFaceFlagBits* {.size: sizeof(int32).} = enum
    FrontBit = 1
    BackBit
    FrontAndBack

  VkDescriptorPoolCreateFlagBits* {.size: sizeof(int32).} = enum
    FreeDescriptorSetBit = 1

  VkDependencyFlagBits* {.size: sizeof(int32).} = enum
    ByRegionBit = 1

  VkSemaphoreType* {.size: sizeof(int32).} = enum
    Binary
    Timeline

  VkSemaphoreWaitFlagBits* {.size: sizeof(int32).} = enum
    AnyBit = 1

  VkPresentModeKHR* {.size: sizeof(int32).} = enum
    Immediate
    Mailbox
    Fifo
    FifoRelaxed

  VkColorSpaceKHR* {.size: sizeof(int32).} = enum
    SrgbNonlinear

  VkDisplayPlaneAlphaFlagBitsKHR* {.size: sizeof(int32).} = enum
    OpaqueBit = 1
    GlobalBit
    PerPixelBit = 4
    PerPixelPremultipliedBit = 8

  VkCompositeAlphaFlagBitsKHR* {.size: sizeof(int32).} = enum
    OpaqueBit = 1
    PreMultipliedBit
    PostMultipliedBit = 4
    InheritBit = 8

  VkSurfaceTransformFlagBitsKHR* {.size: sizeof(int32).} = enum
    IdentityBit = 1
    Rotate90Bit
    Rotate180Bit = 4
    Rotate270Bit = 8
    HorizontalMirrorBit = 16
    HorizontalMirrorRotate90Bit = 32
    HorizontalMirrorRotate180Bit = 64
    HorizontalMirrorRotate270Bit = 128
    InheritBit = 256

  VkSwapchainImageUsageFlagBitsANDROID* {.size: sizeof(int32).} = enum
    SharedBit = 1

  VkTimeDomainKHR* {.size: sizeof(int32).} = enum
    Device
    ClockMonotonic
    ClockMonotonicRaw
    QueryPerformanceCounter

  VkDebugReportFlagBitsEXT* {.size: sizeof(int32).} = enum
    InformationBit = 1
    WarningBit
    PerformanceWarningBit = 4
    ErrorBit = 8
    DebugBit = 16

  VkDebugReportObjectTypeEXT* {.size: sizeof(int32).} = enum
    Unknown
    Instance
    PhysicalDevice
    Device
    Queue
    Semaphore
    CommandBuffer
    Fence
    DeviceMemory
    Buffer
    Image
    Event
    QueryPool
    BufferView
    ImageView
    ShaderModule
    PipelineCache
    PipelineLayout
    RenderPass
    Pipeline
    DescriptorSetLayout
    Sampler
    DescriptorPool
    DescriptorSet
    Framebuffer
    CommandPool
    SurfaceKhr
    SwapchainKhr
    DebugReportCallbackExt
    DisplayKhr
    DisplayModeKhr
    ValidationCacheExt = 33

  VkDeviceMemoryReportEventTypeEXT* {.size: sizeof(int32).} = enum
    Allocate
    Free
    Import
    Unimport
    AllocationFailed

  VkRasterizationOrderAMD* {.size: sizeof(int32).} = enum
    Strict
    Relaxed

  VkExternalMemoryHandleTypeFlagBitsNV* {.size: sizeof(int32).} = enum
    OpaqueWin32Bit = 1
    OpaqueWin32KmtBit
    D3d11ImageBit = 4
    D3d11ImageKmtBit = 8

  VkExternalMemoryFeatureFlagBitsNV* {.size: sizeof(int32).} = enum
    DedicatedOnlyBit = 1
    ExportableBit
    ImportableBit = 4

  VkValidationCheckEXT* {.size: sizeof(int32).} = enum
    All
    Shaders

  VkValidationFeatureEnableEXT* {.size: sizeof(int32).} = enum
    GpuAssisted
    GpuAssistedReserveBindingSlot
    BestPractices
    DebugPrintf
    SynchronizationValidation

  VkValidationFeatureDisableEXT* {.size: sizeof(int32).} = enum
    All
    Shaders
    ThreadSafety
    ApiParameters
    ObjectLifetimes
    CoreChecks
    UniqueHandles
    ShaderValidationCache

  VkLayerSettingTypeEXT* {.size: sizeof(int32).} = enum
    Bool32
    Int32
    Int64
    Uint32
    Uint64
    Float32
    Float64
    String

  VkSubgroupFeatureFlagBits* {.size: sizeof(int32).} = enum
    BasicBit = 1
    VoteBit
    ArithmeticBit = 4
    BallotBit = 8
    ShuffleBit = 16
    ShuffleRelativeBit = 32
    ClusteredBit = 64
    QuadBit = 128

  VkIndirectCommandsLayoutUsageFlagBitsNV* {.size: sizeof(int32).} = enum
    ExplicitPreprocessBit = 1
    IndexedSequencesBit
    UnorderedSequencesBit = 4

  VkIndirectStateFlagBitsNV* {.size: sizeof(int32).} = enum
    FlagFrontfaceBit = 1

  VkIndirectCommandsTokenTypeNV* {.size: sizeof(int32).} = enum
    ShaderGroup
    StateFlags
    IndexBuffer
    VertexBuffer
    PushConstant
    DrawIndexed
    Draw
    DrawTasks

  VkExternalMemoryHandleTypeFlagBits* {.size: sizeof(int32).} = enum
    OpaqueFdBit = 1
    OpaqueWin32Bit
    OpaqueWin32KmtBit = 4
    D3d11TextureBit = 8
    D3d11TextureKmtBit = 16
    D3d12HeapBit = 32
    D3d12ResourceBit = 64

  VkExternalMemoryFeatureFlagBits* {.size: sizeof(int32).} = enum
    DedicatedOnlyBit = 1
    ExportableBit
    ImportableBit = 4

  VkExternalSemaphoreHandleTypeFlagBits* {.size: sizeof(int32).} = enum
    OpaqueFdBit = 1
    OpaqueWin32Bit
    OpaqueWin32KmtBit = 4
    D3d12FenceBit = 8
    SyncFdBit = 16

  VkExternalSemaphoreFeatureFlagBits* {.size: sizeof(int32).} = enum
    ExportableBit = 1
    ImportableBit

  VkSemaphoreImportFlagBits* {.size: sizeof(int32).} = enum
    TemporaryBit = 1

  VkExternalFenceHandleTypeFlagBits* {.size: sizeof(int32).} = enum
    OpaqueFdBit = 1
    OpaqueWin32Bit
    OpaqueWin32KmtBit = 4
    SyncFdBit = 8

  VkExternalFenceFeatureFlagBits* {.size: sizeof(int32).} = enum
    ExportableBit = 1
    ImportableBit

  VkFenceImportFlagBits* {.size: sizeof(int32).} = enum
    TemporaryBit = 1

  VkSurfaceCounterFlagBitsEXT* {.size: sizeof(int32).} = enum
    VblankBit = 1

  VkDisplayPowerStateEXT* {.size: sizeof(int32).} = enum
    Off
    Suspend
    On

  VkDeviceEventTypeEXT* {.size: sizeof(int32).} = enum
    DisplayHotplug

  VkDisplayEventTypeEXT* {.size: sizeof(int32).} = enum
    FirstPixelOut

  VkPeerMemoryFeatureFlagBits* {.size: sizeof(int32).} = enum
    CopySrcBit = 1
    CopyDstBit
    GenericSrcBit = 4
    GenericDstBit = 8

  VkMemoryAllocateFlagBits* {.size: sizeof(int32).} = enum
    DeviceMaskBit = 1

  VkDeviceGroupPresentModeFlagBitsKHR* {.size: sizeof(int32).} = enum
    LocalBit = 1
    RemoteBit
    SumBit = 4
    LocalMultiDeviceBit = 8

  VkViewportCoordinateSwizzleNV* {.size: sizeof(int32).} = enum
    PositiveX
    NegativeX
    PositiveY
    NegativeY
    PositiveZ
    NegativeZ
    PositiveW
    NegativeW

  VkDiscardRectangleModeEXT* {.size: sizeof(int32).} = enum
    Inclusive
    Exclusive

  VkPointClippingBehavior* {.size: sizeof(int32).} = enum
    AllClipPlanes
    UserClipPlanesOnly

  VkSamplerReductionMode* {.size: sizeof(int32).} = enum
    WeightedAverage
    Min
    Max

  VkTessellationDomainOrigin* {.size: sizeof(int32).} = enum
    UpperLeft
    LowerLeft

  VkSamplerYcbcrModelConversion* {.size: sizeof(int32).} = enum
    RgbIdentity
    YcbcrIdentity
    Ycbcr709
    Ycbcr601
    Ycbcr2020

  VkSamplerYcbcrRange* {.size: sizeof(int32).} = enum
    ItuFull
    ItuNarrow

  VkChromaLocation* {.size: sizeof(int32).} = enum
    CositedEven
    Midpoint

  VkBlendOverlapEXT* {.size: sizeof(int32).} = enum
    Uncorrelated
    Disjoint
    Conjoint

  VkCoverageModulationModeNV* {.size: sizeof(int32).} = enum
    None
    Rgb
    Alpha
    Rgba

  VkCoverageReductionModeNV* {.size: sizeof(int32).} = enum
    Merge
    Truncate

  VkValidationCacheHeaderVersionEXT* {.size: sizeof(int32).} = enum
    One = 1

  VkShaderInfoTypeAMD* {.size: sizeof(int32).} = enum
    Statistics
    Binary
    Disassembly

  VkQueueGlobalPriorityKHR* {.size: sizeof(int32).} = enum
    Low = 128
    Medium = 256
    High = 512
    Realtime = 1024

  VkDebugUtilsMessageSeverityFlagBitsEXT* {.size: sizeof(int32).} = enum
    VerboseBit = 1
    InfoBit = 16
    WarningBit = 256
    ErrorBit = 4096

  VkDebugUtilsMessageTypeFlagBitsEXT* {.size: sizeof(int32).} = enum
    GeneralBit = 1
    ValidationBit
    PerformanceBit = 4

  VkConservativeRasterizationModeEXT* {.size: sizeof(int32).} = enum
    Disabled
    Overestimate
    Underestimate

  VkDescriptorBindingFlagBits* {.size: sizeof(int32).} = enum
    UpdateAfterBindBit = 1
    UpdateUnusedWhilePendingBit
    PartiallyBoundBit = 4
    VariableDescriptorCountBit = 8

  VkVendorId* {.size: sizeof(int32).} = enum
    Viv = 65537
    Vsi
    Kazan
    Codeplay
    Mesa
    Pocl
    Mobileye

  VkDriverId* {.size: sizeof(int32).} = enum
    AmdProprietary = 1
    AmdOpenSource
    MesaRadv
    NvidiaProprietary
    IntelProprietaryWindows
    IntelOpenSourceMesa
    ImaginationProprietary
    QualcommProprietary
    ArmProprietary
    GoogleSwiftshader
    GgpProprietary
    BroadcomProprietary
    MesaLlvmpipe
    Moltenvk
    CoreaviProprietary
    JuiceProprietary
    VerisiliconProprietary
    MesaTurnip
    MesaV3dv
    MesaPanvk
    SamsungProprietary
    MesaVenus
    MesaDozen
    MesaNvk
    ImaginationOpenSourceMesa
    MesaAgxv

  VkConditionalRenderingFlagBitsEXT* {.size: sizeof(int32).} = enum
    InvertedBit = 1

  VkResolveModeFlagBits* {.size: sizeof(int32).} = enum
    None
    SampleZeroBit
    AverageBit
    MinBit = 4
    MaxBit = 8

  VkShadingRatePaletteEntryNV* {.size: sizeof(int32).} = enum
    NoInvocations
    N16InvocationsPerPixel
    N8InvocationsPerPixel
    N4InvocationsPerPixel
    N2InvocationsPerPixel
    N1InvocationPerPixel
    N1InvocationPer2x1Pixels
    N1InvocationPer1x2Pixels
    N1InvocationPer2x2Pixels
    N1InvocationPer4x2Pixels
    N1InvocationPer2x4Pixels
    N1InvocationPer4x4Pixels

  VkCoarseSampleOrderTypeNV* {.size: sizeof(int32).} = enum
    Default
    Custom
    PixelMajor
    SampleMajor

  VkGeometryInstanceFlagBitsKHR* {.size: sizeof(int32).} = enum
    TriangleFacingCullDisableBit = 1
    TriangleFlipFacingBit
    ForceOpaqueBit = 4
    ForceNoOpaqueBit = 8

  VkGeometryFlagBitsKHR* {.size: sizeof(int32).} = enum
    OpaqueBit = 1
    NoDuplicateAnyHitInvocationBit

  VkBuildAccelerationStructureFlagBitsKHR* {.size: sizeof(int32).} = enum
    AllowUpdateBit = 1
    AllowCompactionBit
    PreferFastTraceBit = 4
    PreferFastBuildBit = 8
    LowMemoryBit = 16

  VkAccelerationStructureCreateFlagBitsKHR* {.size: sizeof(int32).} = enum
    DeviceAddressCaptureReplayBit = 1

  VkCopyAccelerationStructureModeKHR* {.size: sizeof(int32).} = enum
    Clone
    Compact
    Serialize
    Deserialize

  VkBuildAccelerationStructureModeKHR* {.size: sizeof(int32).} = enum
    Build
    Update

  VkAccelerationStructureTypeKHR* {.size: sizeof(int32).} = enum
    TopLevel
    BottomLevel
    Generic

  VkGeometryTypeKHR* {.size: sizeof(int32).} = enum
    Triangles
    Aabbs
    Instances

  VkAccelerationStructureMemoryRequirementsTypeNV* {.size: sizeof(int32).} = enum
    Object
    BuildScratch
    UpdateScratch

  VkAccelerationStructureBuildTypeKHR* {.size: sizeof(int32).} = enum
    Host
    Device
    HostOrDevice

  VkRayTracingShaderGroupTypeKHR* {.size: sizeof(int32).} = enum
    General
    TrianglesHitGroup
    ProceduralHitGroup

  VkAccelerationStructureCompatibilityKHR* {.size: sizeof(int32).} = enum
    Compatible
    Incompatible

  VkShaderGroupShaderKHR* {.size: sizeof(int32).} = enum
    General
    ClosestHit
    AnyHit
    Intersection

  VkMemoryOverallocationBehaviorAMD* {.size: sizeof(int32).} = enum
    Default
    Allowed
    Disallowed

  VkDeviceDiagnosticsConfigFlagBitsNV* {.size: sizeof(int32).} = enum
    EnableShaderDebugInfoBit = 1
    EnableResourceTrackingBit
    EnableAutomaticCheckpointsBit = 4
    EnableShaderErrorReportingBit = 8

  VkPipelineCreationFeedbackFlagBits* {.size: sizeof(int32).} = enum
    ValidBit = 1
    ApplicationPipelineCacheHitBit
    BasePipelineAccelerationBit = 4

  VkFullScreenExclusiveEXT* {.size: sizeof(int32).} = enum
    Default
    Allowed
    Disallowed
    ApplicationControlled

  VkPerformanceCounterScopeKHR* {.size: sizeof(int32).} = enum
    CommandBuffer
    RenderPass
    Command

  VkMemoryDecompressionMethodFlagBitsNV* {.size: sizeof(int32).} = enum
    Gdeflate10Bit = 1

  VkPerformanceCounterUnitKHR* {.size: sizeof(int32).} = enum
    Generic
    Percentage
    Nanoseconds
    Bytes
    BytesPerSecond
    Kelvin
    Watts
    Volts
    Amps
    Hertz
    Cycles

  VkPerformanceCounterStorageKHR* {.size: sizeof(int32).} = enum
    Int32
    Int64
    Uint32
    Uint64
    Float32
    Float64

  VkPerformanceCounterDescriptionFlagBitsKHR* {.size: sizeof(int32).} = enum
    PerformanceImpactingBit = 1
    ConcurrentlyImpactedBit

  VkPerformanceConfigurationTypeINTEL* {.size: sizeof(int32).} = enum
    CommandQueueMetricsDiscoveryActivated

  VkQueryPoolSamplingModeINTEL* {.size: sizeof(int32).} = enum
    Manual

  VkPerformanceOverrideTypeINTEL* {.size: sizeof(int32).} = enum
    NullHardware
    FlushGpuCaches

  VkPerformanceParameterTypeINTEL* {.size: sizeof(int32).} = enum
    HwCountersSupported
    StreamMarkerValidBits

  VkPerformanceValueTypeINTEL* {.size: sizeof(int32).} = enum
    Uint32
    Uint64
    Float
    Bool
    String

  VkShaderFloatControlsIndependence* {.size: sizeof(int32).} = enum
    N32BitOnly
    All
    None

  VkPipelineExecutableStatisticFormatKHR* {.size: sizeof(int32).} = enum
    Bool32
    Int64
    Uint64
    Float64

  VkLineRasterizationModeKHR* {.size: sizeof(int32).} = enum
    Default
    Rectangular
    Bresenham
    RectangularSmooth

  VkFaultLevel* {.size: sizeof(int32).} = enum
    Unassigned
    Critical
    Recoverable
    Warning

  VkFaultType* {.size: sizeof(int32).} = enum
    Invalid
    Unassigned
    Implementation
    System
    PhysicalDevice
    CommandBufferFull
    InvalidApiUsage

  VkFaultQueryBehavior* {.size: sizeof(int32).} = enum
    GetAndClearAllFaults

  VkToolPurposeFlagBits* {.size: sizeof(int32).} = enum
    ValidationBit = 1
    ProfilingBit
    TracingBit = 4
    AdditionalFeaturesBit = 8
    ModifyingFeaturesBit = 16

  VkPipelineMatchControl* {.size: sizeof(int32).} = enum
    ApplicationUuidExactMatch

  VkFragmentShadingRateCombinerOpKHR* {.size: sizeof(int32).} = enum
    Keep
    Replace
    Min
    Max
    Mul

  VkFragmentShadingRateNV* {.size: sizeof(int32).} = enum
    N1InvocationPerPixel
    N1InvocationPer1x2Pixels
    N1InvocationPer2x1Pixels = 4
    N1InvocationPer2x2Pixels
    N1InvocationPer2x4Pixels
    N1InvocationPer4x2Pixels = 9
    N1InvocationPer4x4Pixels
    N2InvocationsPerPixel
    N4InvocationsPerPixel
    N8InvocationsPerPixel
    N16InvocationsPerPixel
    NoInvocations

  VkFragmentShadingRateTypeNV* {.size: sizeof(int32).} = enum
    FragmentSize
    Enums

  VkSubpassMergeStatusEXT* {.size: sizeof(int32).} = enum
    Merged
    Disallowed
    NotMergedSideEffects
    NotMergedSamplesMismatch
    NotMergedViewsMismatch
    NotMergedAliasing
    NotMergedDependencies
    NotMergedIncompatibleInputAttachment
    NotMergedTooManyAttachments
    NotMergedInsufficientStorage
    NotMergedDepthStencilCount
    NotMergedResolveAttachmentReuse
    NotMergedSingleSubpass
    NotMergedUnspecified

  VkAccessFlagBits2* {.size: sizeof(int32).} = enum
    N2None
    N2IndirectCommandReadBit
    N2IndexReadBit
    N2VertexAttributeReadBit = 4
    N2UniformReadBit = 8
    N2InputAttachmentReadBit = 16
    N2ShaderReadBit = 32
    N2ShaderWriteBit = 64
    N2ColorAttachmentReadBit = 128
    N2ColorAttachmentWriteBit = 256
    N2DepthStencilAttachmentReadBit = 512
    N2DepthStencilAttachmentWriteBit = 1024
    N2TransferReadBit = 2048
    N2TransferWriteBit = 4096
    N2HostReadBit = 8192
    N2HostWriteBit = 16384
    N2MemoryReadBit = 32768
    N2MemoryWriteBit = 65536
    N2ShaderSampledReadBit = 4294967296
    N2ShaderStorageReadBit = 8589934592
    N2ShaderStorageWriteBit = 17179869184

  VkPipelineStageFlagBits2* {.size: sizeof(int32).} = enum
    N2None
    N2TopOfPipeBit
    N2DrawIndirectBit
    N2VertexInputBit = 4
    N2VertexShaderBit = 8
    N2TessellationControlShaderBit = 16
    N2TessellationEvaluationShaderBit = 32
    N2GeometryShaderBit = 64
    N2FragmentShaderBit = 128
    N2EarlyFragmentTestsBit = 256
    N2LateFragmentTestsBit = 512
    N2ColorAttachmentOutputBit = 1024
    N2ComputeShaderBit = 2048
    N2AllTransferBit = 4096
    N2BottomOfPipeBit = 8192
    N2HostBit = 16384
    N2AllGraphicsBit = 32768
    N2AllCommandsBit = 65536
    N2CopyBit = 4294967296
    N2ResolveBit = 8589934592
    N2BlitBit = 17179869184
    N2ClearBit = 34359738368
    N2IndexInputBit = 68719476736
    N2VertexAttributeInputBit = 137438953472
    N2PreRasterizationShadersBit = 274877906944

  VkSubmitFlagBits* {.size: sizeof(int32).} = enum
    ProtectedBit = 1

  VkSciSyncClientTypeNV* {.size: sizeof(int32).} = enum
    Signaler
    Waiter
    SignalerWaiter

  VkSciSyncPrimitiveTypeNV* {.size: sizeof(int32).} = enum
    Fence
    Semaphore

  VkProvokingVertexModeEXT* {.size: sizeof(int32).} = enum
    FirstVertex
    LastVertex

  VkPipelineCacheValidationVersion* {.size: sizeof(int32).} = enum
    SafetyCriticalOne = 1

  VkAccelerationStructureMotionInstanceTypeNV* {.size: sizeof(int32).} = enum
    Static
    MatrixMotion
    SrtMotion

  VkGraphicsPipelineLibraryFlagBitsEXT* {.size: sizeof(int32).} = enum
    VertexInputInterfaceBit = 1
    PreRasterizationShadersBit
    FragmentShaderBit = 4
    FragmentOutputInterfaceBit = 8

  VkDeviceAddressBindingFlagBitsEXT* {.size: sizeof(int32).} = enum
    InternalObjectBit = 1

  VkDeviceAddressBindingTypeEXT* {.size: sizeof(int32).} = enum
    Bind
    Unbind

  VkFrameBoundaryFlagBitsEXT* {.size: sizeof(int32).} = enum
    FrameEndBit = 1

  VkPresentScalingFlagBitsEXT* {.size: sizeof(int32).} = enum
    OneToOneBit = 1
    AspectRatioStretchBit
    StretchBit = 4

  VkPresentGravityFlagBitsEXT* {.size: sizeof(int32).} = enum
    MinBit = 1
    MaxBit
    CenteredBit = 4

  VkPhysicalDeviceSchedulingControlsFlagBitsARM* {.size: sizeof(int32).} = enum
    VkPhysicalDeviceSchedulingControlsShaderCoreCountArm = 1

  VkVideoCodecOperationFlagBitsKHR* {.size: sizeof(int32).} = enum
    None

  VkVideoChromaSubsamplingFlagBitsKHR* {.size: sizeof(int32).} = enum
    Invalid
    MonochromeBit
    N420Bit
    N422Bit = 4
    N444Bit = 8

  VkVideoComponentBitDepthFlagBitsKHR* {.size: sizeof(int32).} = enum
    Invalid
    N8Bit
    N10Bit = 4
    N12Bit = 16

  VkVideoCapabilityFlagBitsKHR* {.size: sizeof(int32).} = enum
    ProtectedContentBit = 1
    SeparateReferenceImagesBit

  VkVideoSessionCreateFlagBitsKHR* {.size: sizeof(int32).} = enum
    ProtectedContentBit = 1

  VkVideoDecodeH264PictureLayoutFlagBitsKHR* {.size: sizeof(int32).} = enum
    Progressive
    InterlacedInterleavedLinesBit
    InterlacedSeparatePlanesBit

  VkVideoCodingControlFlagBitsKHR* {.size: sizeof(int32).} = enum
    ResetBit = 1

  VkQueryResultStatusKHR* {.size: sizeof(int32).} = enum
    Error = -1
    NotReady
    Complete

  VkVideoDecodeUsageFlagBitsKHR* {.size: sizeof(int32).} = enum
    Default
    TranscodingBit
    OfflineBit
    StreamingBit = 4

  VkVideoDecodeCapabilityFlagBitsKHR* {.size: sizeof(int32).} = enum
    DpbAndOutputCoincideBit = 1
    DpbAndOutputDistinctBit

  VkVideoEncodeUsageFlagBitsKHR* {.size: sizeof(int32).} = enum
    Default
    TranscodingBit
    StreamingBit
    RecordingBit = 4
    ConferencingBit = 8

  VkVideoEncodeContentFlagBitsKHR* {.size: sizeof(int32).} = enum
    Default
    CameraBit
    DesktopBit
    RenderedBit = 4

  VkVideoEncodeTuningModeKHR* {.size: sizeof(int32).} = enum
    Default
    HighQuality
    LowLatency
    UltraLowLatency
    Lossless

  VkVideoEncodeCapabilityFlagBitsKHR* {.size: sizeof(int32).} = enum
    PrecedingExternallyEncodedBytesBit = 1
    InsufficientBitstreamBufferRangeDetectionBit

  VkVideoEncodeFeedbackFlagBitsKHR* {.size: sizeof(int32).} = enum
    BitstreamBufferOffsetBit = 1
    BitstreamBytesWrittenBit
    BitstreamHasOverridesBit = 4

  VkVideoEncodeRateControlModeFlagBitsKHR* {.size: sizeof(int32).} = enum
    Default
    DisabledBit
    CbrBit
    VbrBit = 4

  VkVideoEncodeH264CapabilityFlagBitsKHR* {.size: sizeof(int32).} = enum
    HrdComplianceBit = 1
    PredictionWeightTableGeneratedBit
    RowUnalignedSliceBit = 4
    DifferentSliceTypeBit = 8
    BFrameInL0ListBit = 16
    BFrameInL1ListBit = 32
    PerPictureTypeMinMaxQpBit = 64
    PerSliceConstantQpBit = 128
    GeneratePrefixNaluBit = 256

  VkVideoEncodeH264StdFlagBitsKHR* {.size: sizeof(int32).} = enum
    SeparateColorPlaneFlagSetBit = 1
    QpprimeYZeroTransformBypassFlagSetBit
    ScalingMatrixPresentFlagSetBit = 4
    ChromaQpIndexOffsetBit = 8
    SecondChromaQpIndexOffsetBit = 16
    PicInitQpMinus26Bit = 32
    WeightedPredFlagSetBit = 64
    WeightedBipredIdcExplicitBit = 128
    WeightedBipredIdcImplicitBit = 256
    Transform8x8ModeFlagSetBit = 512
    DirectSpatialMvPredFlagUnsetBit = 1024
    EntropyCodingModeFlagUnsetBit = 2048
    EntropyCodingModeFlagSetBit = 4096
    Direct8x8InferenceFlagUnsetBit = 8192
    ConstrainedIntraPredFlagSetBit = 16384
    DeblockingFilterDisabledBit = 32768
    DeblockingFilterEnabledBit = 65536
    DeblockingFilterPartialBit = 131072
    SliceQpDeltaBit = 524288
    DifferentSliceQpDeltaBit = 1048576

  VkVideoEncodeH264RateControlFlagBitsKHR* {.size: sizeof(int32).} = enum
    AttemptHrdComplianceBit = 1
    RegularGopBit
    ReferencePatternFlatBit = 4
    ReferencePatternDyadicBit = 8
    TemporalLayerPatternDyadicBit = 16

  VkHostImageCopyFlagBitsEXT* {.size: sizeof(int32).} = enum
    Memcpy = 1

  VkImageConstraintsInfoFlagBitsFUCHSIA* {.size: sizeof(int32).} = enum
    VkImageConstraintsInfoCpuReadRarelyFuchsia = 1
    VkImageConstraintsInfoCpuReadOftenFuchsia
    VkImageConstraintsInfoCpuWriteRarelyFuchsia = 4
    VkImageConstraintsInfoCpuWriteOftenFuchsia = 8
    VkImageConstraintsInfoProtectedOptionalFuchsia = 16

  VkFormatFeatureFlagBits2* {.size: sizeof(int32).} = enum
    N2SampledImageBit = 1
    N2StorageImageBit
    N2StorageImageAtomicBit = 4
    N2UniformTexelBufferBit = 8
    N2StorageTexelBufferBit = 16
    N2StorageTexelBufferAtomicBit = 32
    N2VertexBufferBit = 64
    N2ColorAttachmentBit = 128
    N2ColorAttachmentBlendBit = 256
    N2DepthStencilAttachmentBit = 512
    N2BlitSrcBit = 1024
    N2BlitDstBit = 2048
    N2SampledImageFilterLinearBit = 4096
    N2SampledImageFilterCubicBit = 8192
    N2TransferSrcBit = 16384
    N2TransferDstBit = 32768
    N2SampledImageFilterMinmaxBit = 65536
    N2MidpointChromaSamplesBit = 131072
    N2SampledImageYcbcrConversionLinearFilterBit = 262144
    N2SampledImageYcbcrConversionSeparateReconstructionFilterBit = 524288
    N2SampledImageYcbcrConversionChromaReconstructionExplicitBit = 1048576
    N2SampledImageYcbcrConversionChromaReconstructionExplicitForceableBit = 2097152
    N2DisjointBit = 4194304
    N2CositedChromaSamplesBit = 8388608
    N2StorageReadWithoutFormatBit = 2147483648
    N2StorageWriteWithoutFormatBit = 4294967296
    N2SampledImageDepthComparisonBit = 8589934592

  VkRenderingFlagBits* {.size: sizeof(int32).} = enum
    ContentsSecondaryCommandBuffersBit = 1
    SuspendingBit
    ResumingBit = 4

  VkVideoEncodeH265CapabilityFlagBitsKHR* {.size: sizeof(int32).} = enum
    HrdComplianceBit = 1
    PredictionWeightTableGeneratedBit
    RowUnalignedSliceSegmentBit = 4
    DifferentSliceSegmentTypeBit = 8
    BFrameInL0ListBit = 16
    BFrameInL1ListBit = 32
    PerPictureTypeMinMaxQpBit = 64
    PerSliceSegmentConstantQpBit = 128
    MultipleTilesPerSliceSegmentBit = 256
    MultipleSliceSegmentsPerTileBit = 512

  VkVideoEncodeH265StdFlagBitsKHR* {.size: sizeof(int32).} = enum
    SeparateColorPlaneFlagSetBit = 1
    SampleAdaptiveOffsetEnabledFlagSetBit
    ScalingListDataPresentFlagSetBit = 4
    PcmEnabledFlagSetBit = 8
    SpsTemporalMvpEnabledFlagSetBit = 16
    InitQpMinus26Bit = 32
    WeightedPredFlagSetBit = 64
    WeightedBipredFlagSetBit = 128
    Log2ParallelMergeLevelMinus2Bit = 256
    SignDataHidingEnabledFlagSetBit = 512
    TransformSkipEnabledFlagSetBit = 1024
    TransformSkipEnabledFlagUnsetBit = 2048
    PpsSliceChromaQpOffsetsPresentFlagSetBit = 4096
    TransquantBypassEnabledFlagSetBit = 8192
    ConstrainedIntraPredFlagSetBit = 16384
    EntropyCodingSyncEnabledFlagSetBit = 32768
    DeblockingFilterOverrideEnabledFlagSetBit = 65536
    DependentSliceSegmentsEnabledFlagSetBit = 131072
    DependentSliceSegmentFlagSetBit = 262144
    SliceQpDeltaBit = 524288
    DifferentSliceQpDeltaBit = 1048576

  VkVideoEncodeH265RateControlFlagBitsKHR* {.size: sizeof(int32).} = enum
    AttemptHrdComplianceBit = 1
    RegularGopBit
    ReferencePatternFlatBit = 4
    ReferencePatternDyadicBit = 8
    TemporalSubLayerPatternDyadicBit = 16

  VkVideoEncodeH265CtbSizeFlagBitsKHR* {.size: sizeof(int32).} = enum
    N16Bit = 1
    N32Bit
    N64Bit = 4

  VkVideoEncodeH265TransformBlockSizeFlagBitsKHR* {.size: sizeof(int32).} = enum
    N4Bit = 1
    N8Bit
    N16Bit = 4
    N32Bit = 8

  VkExportMetalObjectTypeFlagBitsEXT* {.size: sizeof(int32).} = enum
    MetalDeviceBit = 1
    MetalCommandQueueBit
    MetalBufferBit = 4
    MetalTextureBit = 8
    MetalIosurfaceBit = 16
    MetalSharedEventBit = 32

  VkImageCompressionFlagBitsEXT* {.size: sizeof(int32).} = enum
    Default
    FixedRateDefault
    FixedRateExplicit
    Disabled = 4

  VkImageCompressionFixedRateFlagBitsEXT* {.size: sizeof(int32).} = enum
    None
    N1bpcBit
    N2bpcBit
    N3bpcBit = 4
    N4bpcBit = 8
    N5bpcBit = 16
    N6bpcBit = 32
    N7bpcBit = 64
    N8bpcBit = 128
    N9bpcBit = 256
    N10bpcBit = 512
    N11bpcBit = 1024
    N12bpcBit = 2048
    N13bpcBit = 4096
    N14bpcBit = 8192
    N15bpcBit = 16384
    N16bpcBit = 32768
    N17bpcBit = 65536
    N18bpcBit = 131072
    N19bpcBit = 262144
    N20bpcBit = 524288
    N21bpcBit = 1048576
    N22bpcBit = 2097152
    N23bpcBit = 4194304
    N24bpcBit = 8388608

  VkPipelineRobustnessBufferBehaviorEXT* {.size: sizeof(int32).} = enum
    DeviceDefault
    Disabled
    RobustBufferAccess
    RobustBufferAccess2

  VkPipelineRobustnessImageBehaviorEXT* {.size: sizeof(int32).} = enum
    DeviceDefault
    Disabled
    RobustImageAccess
    RobustImageAccess2

  VkOpticalFlowGridSizeFlagBitsNV* {.size: sizeof(int32).} = enum
    Unknown
    N1x1Bit
    N2x2Bit
    N4x4Bit = 4
    N8x8Bit = 8

  VkOpticalFlowUsageFlagBitsNV* {.size: sizeof(int32).} = enum
    Unknown
    InputBit
    OutputBit
    HintBit = 4
    CostBit = 8
    GlobalFlowBit = 16

  VkOpticalFlowPerformanceLevelNV* {.size: sizeof(int32).} = enum
    Unknown
    Slow
    Medium
    Fast

  VkOpticalFlowSessionBindingPointNV* {.size: sizeof(int32).} = enum
    Unknown
    Input
    Reference
    Hint
    FlowVector
    BackwardFlowVector
    Cost
    BackwardCost
    GlobalFlow

  VkOpticalFlowSessionCreateFlagBitsNV* {.size: sizeof(int32).} = enum
    EnableHintBit = 1
    EnableCostBit
    EnableGlobalFlowBit = 4
    AllowRegionsBit = 8
    BothDirectionsBit = 16

  VkOpticalFlowExecuteFlagBitsNV* {.size: sizeof(int32).} = enum
    DisableTemporalHintsBit = 1

  VkMicromapTypeEXT* {.size: sizeof(int32).} = enum
    OpacityMicromap

  VkBuildMicromapFlagBitsEXT* {.size: sizeof(int32).} = enum
    PreferFastTraceBit = 1
    PreferFastBuildBit
    AllowCompactionBit = 4

  VkMicromapCreateFlagBitsEXT* {.size: sizeof(int32).} = enum
    DeviceAddressCaptureReplayBit = 1

  VkCopyMicromapModeEXT* {.size: sizeof(int32).} = enum
    Clone
    Serialize
    Deserialize
    Compact

  VkBuildMicromapModeEXT* {.size: sizeof(int32).} = enum
    Build

  VkOpacityMicromapFormatEXT* {.size: sizeof(int32).} = enum
    N2State = 1
    N4State

  VkOpacityMicromapSpecialIndexEXT* {.size: sizeof(int32).} = enum
    FullyUnknownOpaque = -4
    FullyUnknownTransparent
    FullyOpaque
    FullyTransparent

  VkDepthBiasRepresentationEXT* {.size: sizeof(int32).} = enum
    LeastRepresentableValueFormat
    LeastRepresentableValueForceUnorm
    Float

  VkDeviceFaultAddressTypeEXT* {.size: sizeof(int32).} = enum
    None
    ReadInvalid
    WriteInvalid
    ExecuteInvalid
    InstructionPointerUnknown
    InstructionPointerInvalid
    InstructionPointerFault

  VkDeviceFaultVendorBinaryHeaderVersionEXT* {.size: sizeof(int32).} = enum
    One = 1

  VkDisplacementMicromapFormatNV* {.size: sizeof(int32).} = enum
    N64Triangles64Bytes = 1
    N256Triangles128Bytes
    N1024Triangles128Bytes

  VkShaderCreateFlagBitsEXT* {.size: sizeof(int32).} = enum
    LinkStageBit = 1

  VkShaderCodeTypeEXT* {.size: sizeof(int32).} = enum
    Binary
    Spirv

  VkScopeKHR* {.size: sizeof(int32).} = enum
    Device = 1
    Workgroup
    Subgroup
    QueueFamily = 5

  VkComponentTypeKHR* {.size: sizeof(int32).} = enum
    Float16
    Float32
    Float64
    Sint8
    Sint16
    Sint32
    Sint64
    Uint8
    Uint16
    Uint32
    Uint64

  VkCubicFilterWeightsQCOM* {.size: sizeof(int32).} = enum
    CatmullRom
    ZeroTangentCardinal
    BSpline
    MitchellNetravali

  VkBlockMatchWindowCompareModeQCOM* {.size: sizeof(int32).} = enum
    Min
    Max

  VkLayeredDriverUnderlyingApiMSFT* {.size: sizeof(int32).} = enum
    None
    D3d12

  VkLatencyMarkerNV* {.size: sizeof(int32).} = enum
    SimulationStart
    SimulationEnd
    RendersubmitStart
    RendersubmitEnd
    PresentStart
    PresentEnd
    InputSample
    TriggerFlash
    OutOfBandRendersubmitStart
    OutOfBandRendersubmitEnd
    OutOfBandPresentStart
    OutOfBandPresentEnd

  VkOutOfBandQueueTypeNV* {.size: sizeof(int32).} = enum
    Render
    Present


# Types

type
  Display* {.nodecl.} = object
  VisualID* {.nodecl.} = object
  Window* {.nodecl.} = object
  RROutput* {.nodecl.} = object
  wl_display* {.nodecl.} = object
  wl_surface* {.nodecl.} = object
  HINSTANCE* {.nodecl.} = object
  HWND* {.nodecl.} = object
  HMONITOR* {.nodecl.} = object
  HANDLE* {.nodecl.} = object
  SECURITY_ATTRIBUTES* {.nodecl.} = object
  DWORD* {.nodecl.} = object
  LPCWSTR* {.nodecl.} = object
  xcb_connection_t* {.nodecl.} = object
  xcb_visualid_t* {.nodecl.} = object
  xcb_window_t* {.nodecl.} = object
  IDirectFB* {.nodecl.} = object
  IDirectFBSurface* {.nodecl.} = object
  zx_handle_t* {.nodecl.} = object
  GgpStreamDescriptor* {.nodecl.} = object
  GgpFrameToken* {.nodecl.} = object
  screen_context* {.nodecl.} = object
  screen_window* {.nodecl.} = object
  screen_buffer* {.nodecl.} = object
  NvSciSyncAttrList* {.nodecl.} = object
  NvSciSyncObj* {.nodecl.} = object
  NvSciSyncFence* {.nodecl.} = object
  NvSciBufAttrList* {.nodecl.} = object
  NvSciBufObj* {.nodecl.} = object

template vkMakeVersion*(variant, major, minor, patch: untyped): untyped =
  (variant shl 29) or (major shl 22) or (minor shl 12) or patch

template vkVersionVariant*(version: untyped): untyped =
  uint32(version) shr 29

template vkVersionMajor*(version: untyped): untyped =
  uint32(version) shr 22

template vkVersionMinor*(version: untyped): untyped =
  (uint32(version) shr 12) and 0x000003FF

template vkVersionPatch*(version: untyped): untyped =
  uint32(version) and 0x00000FFF

const vkApiVersion1_0* = vkMakeVersion(0, 1, 0, 0)
const vkApiVersion1_1* = vkMakeVersion(0, 1, 1, 0)
const vkApiVersion1_2* = vkMakeVersion(0, 1, 2, 0)
const vkApiVersion1_3* = vkMakeVersion(0, 1, 3, 0)
const vkHeaderVersion* = 279
const vkHeaderVersionComplete* = vkMakeVersion(0, 1, 3, vkHeaderVersion)

type
  VkSampleMask* = distinct uint32
  VkBool32* = distinct uint32
  VkFlags* = distinct uint32
  VkFlags64* = distinct uint64
  VkDeviceSize* = distinct uint64
  VkDeviceAddress* = distinct uint64
  VkFramebufferCreateFlags* = distinct VkFlags
  VkQueryPoolCreateFlags* = distinct VkFlags
  VkRenderPassCreateFlags* = distinct VkFlags
  VkSamplerCreateFlags* = distinct VkFlags
  VkPipelineLayoutCreateFlags* = distinct VkFlags
  VkPipelineCacheCreateFlags* = distinct VkFlags
  VkPipelineDepthStencilStateCreateFlags* = distinct VkFlags
  VkPipelineDynamicStateCreateFlags* = distinct VkFlags
  VkPipelineColorBlendStateCreateFlags* = distinct VkFlags
  VkPipelineMultisampleStateCreateFlags* = distinct VkFlags
  VkPipelineRasterizationStateCreateFlags* = distinct VkFlags
  VkPipelineViewportStateCreateFlags* = distinct VkFlags
  VkPipelineTessellationStateCreateFlags* = distinct VkFlags
  VkPipelineInputAssemblyStateCreateFlags* = distinct VkFlags
  VkPipelineVertexInputStateCreateFlags* = distinct VkFlags
  VkPipelineShaderStageCreateFlags* = distinct VkFlags
  VkDescriptorSetLayoutCreateFlags* = distinct VkFlags
  VkBufferViewCreateFlags* = distinct VkFlags
  VkInstanceCreateFlags* = distinct VkFlags
  VkDeviceCreateFlags* = distinct VkFlags
  VkDeviceQueueCreateFlags* = distinct VkFlags
  VkQueueFlags* = distinct VkFlags
  VkMemoryPropertyFlags* = distinct VkFlags
  VkMemoryHeapFlags* = distinct VkFlags
  VkAccessFlags* = distinct VkFlags
  VkBufferUsageFlags* = distinct VkFlags
  VkBufferCreateFlags* = distinct VkFlags
  VkShaderStageFlags* = distinct VkFlags
  VkImageUsageFlags* = distinct VkFlags
  VkImageCreateFlags* = distinct VkFlags
  VkImageViewCreateFlags* = distinct VkFlags
  VkPipelineCreateFlags* = distinct VkFlags
  VkColorComponentFlags* = distinct VkFlags
  VkFenceCreateFlags* = distinct VkFlags
  VkSemaphoreCreateFlags* = distinct VkFlags
  VkFormatFeatureFlags* = distinct VkFlags
  VkQueryControlFlags* = distinct VkFlags
  VkQueryResultFlags* = distinct VkFlags
  VkShaderModuleCreateFlags* = distinct VkFlags
  VkEventCreateFlags* = distinct VkFlags
  VkCommandPoolCreateFlags* = distinct VkFlags
  VkCommandPoolResetFlags* = distinct VkFlags
  VkCommandBufferResetFlags* = distinct VkFlags
  VkCommandBufferUsageFlags* = distinct VkFlags
  VkQueryPipelineStatisticFlags* = distinct VkFlags
  VkMemoryMapFlags* = distinct VkFlags
  VkMemoryUnmapFlagsKHR* = distinct VkFlags
  VkImageAspectFlags* = distinct VkFlags
  VkSparseMemoryBindFlags* = distinct VkFlags
  VkSparseImageFormatFlags* = distinct VkFlags
  VkSubpassDescriptionFlags* = distinct VkFlags
  VkPipelineStageFlags* = distinct VkFlags
  VkSampleCountFlags* = distinct VkFlags
  VkAttachmentDescriptionFlags* = distinct VkFlags
  VkStencilFaceFlags* = distinct VkFlags
  VkCullModeFlags* = distinct VkFlags
  VkDescriptorPoolCreateFlags* = distinct VkFlags
  VkDescriptorPoolResetFlags* = distinct VkFlags
  VkDependencyFlags* = distinct VkFlags
  VkSubgroupFeatureFlags* = distinct VkFlags
  VkIndirectCommandsLayoutUsageFlagsNV* = distinct VkFlags
  VkIndirectStateFlagsNV* = distinct VkFlags
  VkGeometryFlagsKHR* = distinct VkFlags
  VkGeometryFlagsNV* = VkGeometryFlagsKHR
  VkGeometryInstanceFlagsKHR* = distinct VkFlags
  VkGeometryInstanceFlagsNV* = VkGeometryInstanceFlagsKHR
  VkBuildAccelerationStructureFlagsKHR* = distinct VkFlags
  VkBuildAccelerationStructureFlagsNV* = VkBuildAccelerationStructureFlagsKHR
  VkPrivateDataSlotCreateFlags* = distinct VkFlags
  VkPrivateDataSlotCreateFlagsEXT* = VkPrivateDataSlotCreateFlags
  VkAccelerationStructureCreateFlagsKHR* = distinct VkFlags
  VkDescriptorUpdateTemplateCreateFlags* = distinct VkFlags
  VkDescriptorUpdateTemplateCreateFlagsKHR* = VkDescriptorUpdateTemplateCreateFlags
  VkPipelineCreationFeedbackFlags* = distinct VkFlags
  VkPipelineCreationFeedbackFlagsEXT* = VkPipelineCreationFeedbackFlags
  VkPerformanceCounterDescriptionFlagsKHR* = distinct VkFlags
  VkAcquireProfilingLockFlagsKHR* = distinct VkFlags
  VkSemaphoreWaitFlags* = distinct VkFlags
  VkSemaphoreWaitFlagsKHR* = VkSemaphoreWaitFlags
  VkPipelineCompilerControlFlagsAMD* = distinct VkFlags
  VkShaderCorePropertiesFlagsAMD* = distinct VkFlags
  VkDeviceDiagnosticsConfigFlagsNV* = distinct VkFlags
  VkRefreshObjectFlagsKHR* = distinct VkFlags
  VkAccessFlags2* = distinct VkFlags64
  VkAccessFlags2KHR* = VkAccessFlags2
  VkPipelineStageFlags2* = distinct VkFlags64
  VkPipelineStageFlags2KHR* = VkPipelineStageFlags2
  VkAccelerationStructureMotionInfoFlagsNV* = distinct VkFlags
  VkAccelerationStructureMotionInstanceFlagsNV* = distinct VkFlags
  VkFormatFeatureFlags2* = distinct VkFlags64
  VkFormatFeatureFlags2KHR* = VkFormatFeatureFlags2
  VkRenderingFlags* = distinct VkFlags
  VkMemoryDecompressionMethodFlagsNV* = distinct VkFlags64
  VkRenderingFlagsKHR* = VkRenderingFlags
  VkBuildMicromapFlagsEXT* = distinct VkFlags
  VkMicromapCreateFlagsEXT* = distinct VkFlags
  VkDirectDriverLoadingFlagsLUNARG* = distinct VkFlags
  VkPipelineCreateFlags2KHR* = distinct VkFlags64
  VkBufferUsageFlags2KHR* = distinct VkFlags64
  VkCompositeAlphaFlagsKHR* = distinct VkFlags
  VkDisplayPlaneAlphaFlagsKHR* = distinct VkFlags
  VkSurfaceTransformFlagsKHR* = distinct VkFlags
  VkSwapchainCreateFlagsKHR* = distinct VkFlags
  VkDisplayModeCreateFlagsKHR* = distinct VkFlags
  VkDisplaySurfaceCreateFlagsKHR* = distinct VkFlags
  VkAndroidSurfaceCreateFlagsKHR* = distinct VkFlags
  VkViSurfaceCreateFlagsNN* = distinct VkFlags
  VkWaylandSurfaceCreateFlagsKHR* = distinct VkFlags
  VkWin32SurfaceCreateFlagsKHR* = distinct VkFlags
  VkXlibSurfaceCreateFlagsKHR* = distinct VkFlags
  VkXcbSurfaceCreateFlagsKHR* = distinct VkFlags
  VkDirectFBSurfaceCreateFlagsEXT* = distinct VkFlags
  VkIOSSurfaceCreateFlagsMVK* = distinct VkFlags
  VkMacOSSurfaceCreateFlagsMVK* = distinct VkFlags
  VkMetalSurfaceCreateFlagsEXT* = distinct VkFlags
  VkImagePipeSurfaceCreateFlagsFUCHSIA* = distinct VkFlags
  VkStreamDescriptorSurfaceCreateFlagsGGP* = distinct VkFlags
  VkHeadlessSurfaceCreateFlagsEXT* = distinct VkFlags
  VkScreenSurfaceCreateFlagsQNX* = distinct VkFlags
  VkPeerMemoryFeatureFlags* = distinct VkFlags
  VkPeerMemoryFeatureFlagsKHR* = VkPeerMemoryFeatureFlags
  VkMemoryAllocateFlags* = distinct VkFlags
  VkMemoryAllocateFlagsKHR* = VkMemoryAllocateFlags
  VkDeviceGroupPresentModeFlagsKHR* = distinct VkFlags
  VkDebugReportFlagsEXT* = distinct VkFlags
  VkCommandPoolTrimFlags* = distinct VkFlags
  VkCommandPoolTrimFlagsKHR* = VkCommandPoolTrimFlags
  VkExternalMemoryHandleTypeFlagsNV* = distinct VkFlags
  VkExternalMemoryFeatureFlagsNV* = distinct VkFlags
  VkExternalMemoryHandleTypeFlags* = distinct VkFlags
  VkExternalMemoryHandleTypeFlagsKHR* = VkExternalMemoryHandleTypeFlags
  VkExternalMemoryFeatureFlags* = distinct VkFlags
  VkExternalMemoryFeatureFlagsKHR* = VkExternalMemoryFeatureFlags
  VkExternalSemaphoreHandleTypeFlags* = distinct VkFlags
  VkExternalSemaphoreHandleTypeFlagsKHR* = VkExternalSemaphoreHandleTypeFlags
  VkExternalSemaphoreFeatureFlags* = distinct VkFlags
  VkExternalSemaphoreFeatureFlagsKHR* = VkExternalSemaphoreFeatureFlags
  VkSemaphoreImportFlags* = distinct VkFlags
  VkSemaphoreImportFlagsKHR* = VkSemaphoreImportFlags
  VkExternalFenceHandleTypeFlags* = distinct VkFlags
  VkExternalFenceHandleTypeFlagsKHR* = VkExternalFenceHandleTypeFlags
  VkExternalFenceFeatureFlags* = distinct VkFlags
  VkExternalFenceFeatureFlagsKHR* = VkExternalFenceFeatureFlags
  VkFenceImportFlags* = distinct VkFlags
  VkFenceImportFlagsKHR* = VkFenceImportFlags
  VkSurfaceCounterFlagsEXT* = distinct VkFlags
  VkPipelineViewportSwizzleStateCreateFlagsNV* = distinct VkFlags
  VkPipelineDiscardRectangleStateCreateFlagsEXT* = distinct VkFlags
  VkPipelineCoverageToColorStateCreateFlagsNV* = distinct VkFlags
  VkPipelineCoverageModulationStateCreateFlagsNV* = distinct VkFlags
  VkPipelineCoverageReductionStateCreateFlagsNV* = distinct VkFlags
  VkValidationCacheCreateFlagsEXT* = distinct VkFlags
  VkDebugUtilsMessageSeverityFlagsEXT* = distinct VkFlags
  VkDebugUtilsMessageTypeFlagsEXT* = distinct VkFlags
  VkDebugUtilsMessengerCreateFlagsEXT* = distinct VkFlags
  VkDebugUtilsMessengerCallbackDataFlagsEXT* = distinct VkFlags
  VkDeviceMemoryReportFlagsEXT* = distinct VkFlags
  VkPipelineRasterizationConservativeStateCreateFlagsEXT* = distinct VkFlags
  VkDescriptorBindingFlags* = distinct VkFlags
  VkDescriptorBindingFlagsEXT* = VkDescriptorBindingFlags
  VkConditionalRenderingFlagsEXT* = distinct VkFlags
  VkResolveModeFlags* = distinct VkFlags
  VkResolveModeFlagsKHR* = VkResolveModeFlags
  VkPipelineRasterizationStateStreamCreateFlagsEXT* = distinct VkFlags
  VkPipelineRasterizationDepthClipStateCreateFlagsEXT* = distinct VkFlags
  VkSwapchainImageUsageFlagsANDROID* = distinct VkFlags
  VkToolPurposeFlags* = distinct VkFlags
  VkToolPurposeFlagsEXT* = VkToolPurposeFlags
  VkSubmitFlags* = distinct VkFlags
  VkSubmitFlagsKHR* = VkSubmitFlags
  VkImageFormatConstraintsFlagsFUCHSIA* = distinct VkFlags
  VkHostImageCopyFlagsEXT* = distinct VkFlags
  VkImageConstraintsInfoFlagsFUCHSIA* = distinct VkFlags
  VkGraphicsPipelineLibraryFlagsEXT* = distinct VkFlags
  VkImageCompressionFlagsEXT* = distinct VkFlags
  VkImageCompressionFixedRateFlagsEXT* = distinct VkFlags
  VkExportMetalObjectTypeFlagsEXT* = distinct VkFlags
  VkDeviceAddressBindingFlagsEXT* = distinct VkFlags
  VkOpticalFlowGridSizeFlagsNV* = distinct VkFlags
  VkOpticalFlowUsageFlagsNV* = distinct VkFlags
  VkOpticalFlowSessionCreateFlagsNV* = distinct VkFlags
  VkOpticalFlowExecuteFlagsNV* = distinct VkFlags
  VkFrameBoundaryFlagsEXT* = distinct VkFlags
  VkPresentScalingFlagsEXT* = distinct VkFlags
  VkPresentGravityFlagsEXT* = distinct VkFlags
  VkShaderCreateFlagsEXT* = distinct VkFlags
  VkPhysicalDeviceSchedulingControlsFlagsARM* = distinct VkFlags64
  VkVideoCodecOperationFlagsKHR* = distinct VkFlags
  VkVideoCapabilityFlagsKHR* = distinct VkFlags
  VkVideoSessionCreateFlagsKHR* = distinct VkFlags
  VkVideoSessionParametersCreateFlagsKHR* = distinct VkFlags
  VkVideoBeginCodingFlagsKHR* = distinct VkFlags
  VkVideoEndCodingFlagsKHR* = distinct VkFlags
  VkVideoCodingControlFlagsKHR* = distinct VkFlags
  VkVideoDecodeUsageFlagsKHR* = distinct VkFlags
  VkVideoDecodeCapabilityFlagsKHR* = distinct VkFlags
  VkVideoDecodeFlagsKHR* = distinct VkFlags
  VkVideoDecodeH264PictureLayoutFlagsKHR* = distinct VkFlags
  VkVideoEncodeFlagsKHR* = distinct VkFlags
  VkVideoEncodeUsageFlagsKHR* = distinct VkFlags
  VkVideoEncodeContentFlagsKHR* = distinct VkFlags
  VkVideoEncodeCapabilityFlagsKHR* = distinct VkFlags
  VkVideoEncodeFeedbackFlagsKHR* = distinct VkFlags
  VkVideoEncodeRateControlFlagsKHR* = distinct VkFlags
  VkVideoEncodeRateControlModeFlagsKHR* = distinct VkFlags
  VkVideoChromaSubsamplingFlagsKHR* = distinct VkFlags
  VkVideoComponentBitDepthFlagsKHR* = distinct VkFlags
  VkVideoEncodeH264CapabilityFlagsKHR* = distinct VkFlags
  VkVideoEncodeH264StdFlagsKHR* = distinct VkFlags
  VkVideoEncodeH264RateControlFlagsKHR* = distinct VkFlags
  VkVideoEncodeH265CapabilityFlagsKHR* = distinct VkFlags
  VkVideoEncodeH265StdFlagsKHR* = distinct VkFlags
  VkVideoEncodeH265RateControlFlagsKHR* = distinct VkFlags
  VkVideoEncodeH265CtbSizeFlagsKHR* = distinct VkFlags
  VkVideoEncodeH265TransformBlockSizeFlagsKHR* = distinct VkFlags
  VkInstance* = distinct VkHandle
  VkPhysicalDevice* = distinct VkHandle
  VkDevice* = distinct VkHandle
  VkQueue* = distinct VkHandle
  VkCommandBuffer* = distinct VkHandle
  VkDeviceMemory* = distinct VkNonDispatchableHandle
  VkCommandPool* = distinct VkNonDispatchableHandle
  VkBuffer* = distinct VkNonDispatchableHandle
  VkBufferView* = distinct VkNonDispatchableHandle
  VkImage* = distinct VkNonDispatchableHandle
  VkImageView* = distinct VkNonDispatchableHandle
  VkShaderModule* = distinct VkNonDispatchableHandle
  VkPipeline* = distinct VkNonDispatchableHandle
  VkPipelineLayout* = distinct VkNonDispatchableHandle
  VkSampler* = distinct VkNonDispatchableHandle
  VkDescriptorSet* = distinct VkNonDispatchableHandle
  VkDescriptorSetLayout* = distinct VkNonDispatchableHandle
  VkDescriptorPool* = distinct VkNonDispatchableHandle
  VkFence* = distinct VkNonDispatchableHandle
  VkSemaphore* = distinct VkNonDispatchableHandle
  VkEvent* = distinct VkNonDispatchableHandle
  VkQueryPool* = distinct VkNonDispatchableHandle
  VkFramebuffer* = distinct VkNonDispatchableHandle
  VkRenderPass* = distinct VkNonDispatchableHandle
  VkPipelineCache* = distinct VkNonDispatchableHandle
  VkIndirectCommandsLayoutNV* = distinct VkNonDispatchableHandle
  VkDescriptorUpdateTemplate* = distinct VkNonDispatchableHandle
  VkDescriptorUpdateTemplateKHR* = VkDescriptorUpdateTemplate
  VkSamplerYcbcrConversion* = distinct VkNonDispatchableHandle
  VkSamplerYcbcrConversionKHR* = VkSamplerYcbcrConversion
  VkValidationCacheEXT* = distinct VkNonDispatchableHandle
  VkAccelerationStructureKHR* = distinct VkNonDispatchableHandle
  VkAccelerationStructureNV* = distinct VkNonDispatchableHandle
  VkPerformanceConfigurationINTEL* = distinct VkNonDispatchableHandle
  VkBufferCollectionFUCHSIA* = distinct VkNonDispatchableHandle
  VkDeferredOperationKHR* = distinct VkNonDispatchableHandle
  VkPrivateDataSlot* = distinct VkNonDispatchableHandle
  VkPrivateDataSlotEXT* = VkPrivateDataSlot
  VkCuModuleNVX* = distinct VkNonDispatchableHandle
  VkCuFunctionNVX* = distinct VkNonDispatchableHandle
  VkOpticalFlowSessionNV* = distinct VkNonDispatchableHandle
  VkMicromapEXT* = distinct VkNonDispatchableHandle
  VkShaderEXT* = distinct VkNonDispatchableHandle
  VkDisplayKHR* = distinct VkNonDispatchableHandle
  VkDisplayModeKHR* = distinct VkNonDispatchableHandle
  VkSurfaceKHR* = distinct VkNonDispatchableHandle
  VkSwapchainKHR* = distinct VkNonDispatchableHandle
  VkDebugReportCallbackEXT* = distinct VkNonDispatchableHandle
  VkDebugUtilsMessengerEXT* = distinct VkNonDispatchableHandle
  VkVideoSessionKHR* = distinct VkNonDispatchableHandle
  VkVideoSessionParametersKHR* = distinct VkNonDispatchableHandle
  VkSemaphoreSciSyncPoolNV* = distinct VkNonDispatchableHandle
  VkDescriptorUpdateTemplateTypeKHR* = VkDescriptorUpdateTemplateType
  VkPointClippingBehaviorKHR* = VkPointClippingBehavior
  VkQueueGlobalPriorityEXT* = VkQueueGlobalPriorityKHR
  VkTimeDomainEXT* = VkTimeDomainKHR
  VkResolveModeFlagBitsKHR* = VkResolveModeFlagBits
  VkDescriptorBindingFlagBitsEXT* = VkDescriptorBindingFlagBits
  VkSemaphoreTypeKHR* = VkSemaphoreType
  VkGeometryFlagBitsNV* = VkGeometryFlagBitsKHR
  VkGeometryInstanceFlagBitsNV* = VkGeometryInstanceFlagBitsKHR
  VkBuildAccelerationStructureFlagBitsNV* = VkBuildAccelerationStructureFlagBitsKHR
  VkCopyAccelerationStructureModeNV* = VkCopyAccelerationStructureModeKHR
  VkAccelerationStructureTypeNV* = VkAccelerationStructureTypeKHR
  VkGeometryTypeNV* = VkGeometryTypeKHR
  VkRayTracingShaderGroupTypeNV* = VkRayTracingShaderGroupTypeKHR
  VkPipelineCreationFeedbackFlagBitsEXT* = VkPipelineCreationFeedbackFlagBits
  VkSemaphoreWaitFlagBitsKHR* = VkSemaphoreWaitFlagBits
  VkLineRasterizationModeEXT* = VkLineRasterizationModeKHR
  VkToolPurposeFlagBitsEXT* = VkToolPurposeFlagBits
  VkAccessFlagBits2KHR* = VkAccessFlagBits2
  VkPipelineStageFlagBits2KHR* = VkPipelineStageFlagBits2
  VkFormatFeatureFlagBits2KHR* = VkFormatFeatureFlagBits2
  VkRenderingFlagBitsKHR* = VkRenderingFlagBits
  VkScopeNV* = VkScopeKHR
  VkComponentTypeNV* = VkComponentTypeKHR
  VkExternalMemoryHandleTypeFlagBitsKHR* = VkExternalMemoryHandleTypeFlagBits
  VkExternalMemoryFeatureFlagBitsKHR* = VkExternalMemoryFeatureFlagBits
  VkExternalSemaphoreHandleTypeFlagBitsKHR* = VkExternalSemaphoreHandleTypeFlagBits
  VkExternalSemaphoreFeatureFlagBitsKHR* = VkExternalSemaphoreFeatureFlagBits
  VkSemaphoreImportFlagBitsKHR* = VkSemaphoreImportFlagBits
  VkExternalFenceHandleTypeFlagBitsKHR* = VkExternalFenceHandleTypeFlagBits
  VkExternalFenceFeatureFlagBitsKHR* = VkExternalFenceFeatureFlagBits
  VkFenceImportFlagBitsKHR* = VkFenceImportFlagBits
  VkPeerMemoryFeatureFlagBitsKHR* = VkPeerMemoryFeatureFlagBits
  VkMemoryAllocateFlagBitsKHR* = VkMemoryAllocateFlagBits
  VkTessellationDomainOriginKHR* = VkTessellationDomainOrigin
  VkSamplerYcbcrModelConversionKHR* = VkSamplerYcbcrModelConversion
  VkSamplerYcbcrRangeKHR* = VkSamplerYcbcrRange
  VkChromaLocationKHR* = VkChromaLocation
  VkSamplerReductionModeEXT* = VkSamplerReductionMode
  VkShaderFloatControlsIndependenceKHR* = VkShaderFloatControlsIndependence
  VkSubmitFlagBitsKHR* = VkSubmitFlagBits
  VkDriverIdKHR* = VkDriverId
  PFN_vkInternalAllocationNotification* = proc (pUserData: pointer; size: csize; allocationType: VkInternalAllocationType; allocationScope: VkSystemAllocationScope) {.cdecl.}
  PFN_vkInternalFreeNotification* = proc (pUserData: pointer; size: csize; allocationType: VkInternalAllocationType; allocationScope: VkSystemAllocationScope) {.cdecl.}
  PFN_vkReallocationFunction* = proc (pUserData: pointer; pOriginal: pointer; size: csize; alignment: csize; allocationScope: VkSystemAllocationScope): pointer {.cdecl.}
  PFN_vkAllocationFunction* = proc (pUserData: pointer; size: csize; alignment: csize; allocationScope: VkSystemAllocationScope): pointer {.cdecl.}
  PFN_vkFreeFunction* = proc (pUserData: pointer; pMemory: pointer) {.cdecl.}
  PFN_vkVoidFunction* = proc () {.cdecl.}
  PFN_vkDebugReportCallbackEXT* = proc (flags: VkDebugReportFlagsEXT; objectType: VkDebugReportObjectTypeEXT; cbObject: uint64; location: csize; messageCode: int32; pLayerPrefix: cstring; pMessage: cstring; pUserData: pointer): VkBool32 {.cdecl.}
  PFN_vkDebugUtilsMessengerCallbackEXT* = proc (messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT, messageTypes: VkDebugUtilsMessageTypeFlagsEXT, pCallbackData: VkDebugUtilsMessengerCallbackDataEXT, userData: pointer): VkBool32 {.cdecl.}
  PFN_vkFaultCallbackFunction* = proc (unrecordedFaults: VkBool32; faultCount: uint32; pFaults: ptr VkFaultData) {.cdecl.}
  PFN_vkDeviceMemoryReportCallbackEXT* = proc (pCallbackData: ptr VkDeviceMemoryReportCallbackDataEXT; pUserData: pointer) {.cdecl.}
  PFN_vkGetInstanceProcAddrLUNARG* = proc (instance: VkInstance; pName: cstring): PFN_vkVoidFunction {.cdecl.}

  VkBaseOutStructure* = object
    sType*: VkStructureType
    pNext*: ptr VkBaseOutStructure

  VkBaseInStructure* = object
    sType*: VkStructureType
    pNext*: ptr VkBaseInStructure

  VkOffset2D* = object
    x*: int32
    y*: int32

  VkOffset3D* = object
    x*: int32
    y*: int32
    z*: int32

  VkExtent2D* = object
    width*: uint32
    height*: uint32

  VkExtent3D* = object
    width*: uint32
    height*: uint32
    depth*: uint32

  VkViewport* = object
    x*: float32
    y*: float32
    width*: float32
    height*: float32
    minDepth*: float32
    maxDepth*: float32

  VkRect2D* = object
    offset*: VkOffset2D
    extent*: VkExtent2D

  VkClearRect* = object
    rect*: VkRect2D
    baseArrayLayer*: uint32
    layerCount*: uint32

  VkComponentMapping* = object
    r*: VkComponentSwizzle
    g*: VkComponentSwizzle
    b*: VkComponentSwizzle
    a*: VkComponentSwizzle

  VkPhysicalDeviceProperties* = object
    apiVersion*: uint32
    driverVersion*: uint32
    vendorID*: uint32
    deviceID*: uint32
    deviceType*: VkPhysicalDeviceType
    deviceName*: array[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE, char]
    pipelineCacheUUID*: array[VK_UUID_SIZE, uint8]
    limits*: VkPhysicalDeviceLimits
    sparseProperties*: VkPhysicalDeviceSparseProperties

  VkExtensionProperties* = object
    extensionName*: array[VK_MAX_EXTENSION_NAME_SIZE, char]
    specVersion*: uint32

  VkLayerProperties* = object
    layerName*: array[VK_MAX_EXTENSION_NAME_SIZE, char]
    specVersion*: uint32
    implementationVersion*: uint32
    description*: array[VK_MAX_DESCRIPTION_SIZE, char]

  VkApplicationInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    pApplicationName*: cstring
    applicationVersion*: uint32
    pEngineName*: cstring
    engineVersion*: uint32
    apiVersion*: uint32

  VkAllocationCallbacks* = object
    pUserData*: pointer
    pfnAllocation*: PFN_vkAllocationFunction
    pfnReallocation*: PFN_vkReallocationFunction
    pfnFree*: PFN_vkFreeFunction
    pfnInternalAllocation*: PFN_vkInternalAllocationNotification
    pfnInternalFree*: PFN_vkInternalFreeNotification

  VkDeviceQueueCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDeviceQueueCreateFlags
    queueFamilyIndex*: uint32
    queueCount*: uint32
    pQueuePriorities*: ptr float32

  VkDeviceCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDeviceCreateFlags
    queueCreateInfoCount*: uint32
    pQueueCreateInfos*: ptr VkDeviceQueueCreateInfo
    enabledLayerCount*: uint32
    ppEnabledLayerNames*: cstringArray
    enabledExtensionCount*: uint32
    ppEnabledExtensionNames*: cstringArray
    pEnabledFeatures*: ptr VkPhysicalDeviceFeatures

  VkInstanceCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkInstanceCreateFlags
    pApplicationInfo*: ptr VkApplicationInfo
    enabledLayerCount*: uint32
    ppEnabledLayerNames*: cstringArray
    enabledExtensionCount*: uint32
    ppEnabledExtensionNames*: cstringArray

  VkQueueFamilyProperties* = object
    queueFlags*: VkQueueFlags
    queueCount*: uint32
    timestampValidBits*: uint32
    minImageTransferGranularity*: VkExtent3D

  VkPhysicalDeviceMemoryProperties* = object
    memoryTypeCount*: uint32
    memoryTypes*: array[VK_MAX_MEMORY_TYPES, VkMemoryType]
    memoryHeapCount*: uint32
    memoryHeaps*: array[VK_MAX_MEMORY_HEAPS, VkMemoryHeap]

  VkMemoryAllocateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    allocationSize*: VkDeviceSize
    memoryTypeIndex*: uint32

  VkMemoryRequirements* = object
    size*: VkDeviceSize
    alignment*: VkDeviceSize
    memoryTypeBits*: uint32

  VkSparseImageFormatProperties* = object
    aspectMask*: VkImageAspectFlags
    imageGranularity*: VkExtent3D
    flags*: VkSparseImageFormatFlags

  VkSparseImageMemoryRequirements* = object
    formatProperties*: VkSparseImageFormatProperties
    imageMipTailFirstLod*: uint32
    imageMipTailSize*: VkDeviceSize
    imageMipTailOffset*: VkDeviceSize
    imageMipTailStride*: VkDeviceSize

  VkMemoryType* = object
    propertyFlags*: VkMemoryPropertyFlags
    heapIndex*: uint32

  VkMemoryHeap* = object
    size*: VkDeviceSize
    flags*: VkMemoryHeapFlags

  VkMappedMemoryRange* = object
    sType*: VkStructureType
    pNext*: pointer
    memory*: VkDeviceMemory
    offset*: VkDeviceSize
    size*: VkDeviceSize

  VkFormatProperties* = object
    linearTilingFeatures*: VkFormatFeatureFlags
    optimalTilingFeatures*: VkFormatFeatureFlags
    bufferFeatures*: VkFormatFeatureFlags

  VkImageFormatProperties* = object
    maxExtent*: VkExtent3D
    maxMipLevels*: uint32
    maxArrayLayers*: uint32
    sampleCounts*: VkSampleCountFlags
    maxResourceSize*: VkDeviceSize

  VkDescriptorBufferInfo* = object
    buffer*: VkBuffer
    offset*: VkDeviceSize
    range*: VkDeviceSize

  VkDescriptorImageInfo* = object
    sampler*: VkSampler
    imageView*: VkImageView
    imageLayout*: VkImageLayout

  VkWriteDescriptorSet* = object
    sType*: VkStructureType
    pNext*: pointer
    dstSet*: VkDescriptorSet
    dstBinding*: uint32
    dstArrayElement*: uint32
    descriptorCount*: uint32
    descriptorType*: VkDescriptorType
    pImageInfo*: ptr VkDescriptorImageInfo
    pBufferInfo*: ptr ptr VkDescriptorBufferInfo
    pTexelBufferView*: ptr VkBufferView

  VkCopyDescriptorSet* = object
    sType*: VkStructureType
    pNext*: pointer
    srcSet*: VkDescriptorSet
    srcBinding*: uint32
    srcArrayElement*: uint32
    dstSet*: VkDescriptorSet
    dstBinding*: uint32
    dstArrayElement*: uint32
    descriptorCount*: uint32

  VkBufferUsageFlags2CreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    usage*: VkBufferUsageFlags2KHR

  VkBufferCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkBufferCreateFlags
    size*: VkDeviceSize
    usage*: VkBufferUsageFlags
    sharingMode*: VkSharingMode
    queueFamilyIndexCount*: uint32
    pQueueFamilyIndices*: ptr uint32

  VkBufferViewCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkBufferViewCreateFlags
    buffer*: VkBuffer
    format*: VkFormat
    offset*: VkDeviceSize
    range*: VkDeviceSize

  VkImageSubresource* = object
    aspectMask*: VkImageAspectFlags
    mipLevel*: uint32
    arrayLayer*: uint32

  VkImageSubresourceLayers* = object
    aspectMask*: VkImageAspectFlags
    mipLevel*: uint32
    baseArrayLayer*: uint32
    layerCount*: uint32

  VkImageSubresourceRange* = object
    aspectMask*: VkImageAspectFlags
    baseMipLevel*: uint32
    levelCount*: uint32
    baseArrayLayer*: uint32
    layerCount*: uint32

  VkMemoryBarrier* = object
    sType*: VkStructureType
    pNext*: pointer
    srcAccessMask*: VkAccessFlags
    dstAccessMask*: VkAccessFlags

  VkBufferMemoryBarrier* = object
    sType*: VkStructureType
    pNext*: pointer
    srcAccessMask*: VkAccessFlags
    dstAccessMask*: VkAccessFlags
    srcQueueFamilyIndex*: uint32
    dstQueueFamilyIndex*: uint32
    buffer*: VkBuffer
    offset*: VkDeviceSize
    size*: VkDeviceSize

  VkImageMemoryBarrier* = object
    sType*: VkStructureType
    pNext*: pointer
    srcAccessMask*: VkAccessFlags
    dstAccessMask*: VkAccessFlags
    oldLayout*: VkImageLayout
    newLayout*: VkImageLayout
    srcQueueFamilyIndex*: uint32
    dstQueueFamilyIndex*: uint32
    image*: VkImage
    subresourceRange*: VkImageSubresourceRange

  VkImageCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkImageCreateFlags
    imageType*: VkImageType
    format*: VkFormat
    extent*: VkExtent3D
    mipLevels*: uint32
    arrayLayers*: uint32
    samples*: VkSampleCountFlagBits
    tiling*: VkImageTiling
    usage*: VkImageUsageFlags
    sharingMode*: VkSharingMode
    queueFamilyIndexCount*: uint32
    pQueueFamilyIndices*: ptr uint32
    initialLayout*: VkImageLayout

  VkSubresourceLayout* = object
    offset*: VkDeviceSize
    size*: VkDeviceSize
    rowPitch*: VkDeviceSize
    arrayPitch*: VkDeviceSize
    depthPitch*: VkDeviceSize

  VkImageViewCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkImageViewCreateFlags
    image*: VkImage
    viewType*: VkImageViewType
    format*: VkFormat
    components*: VkComponentMapping
    subresourceRange*: VkImageSubresourceRange

  VkBufferCopy* = object
    srcOffset*: VkDeviceSize
    dstOffset*: VkDeviceSize
    size*: VkDeviceSize

  VkSparseMemoryBind* = object
    resourceOffset*: VkDeviceSize
    size*: VkDeviceSize
    memory*: VkDeviceMemory
    memoryOffset*: VkDeviceSize
    flags*: VkSparseMemoryBindFlags

  VkSparseImageMemoryBind* = object
    subresource*: VkImageSubresource
    offset*: VkOffset3D
    extent*: VkExtent3D
    memory*: VkDeviceMemory
    memoryOffset*: VkDeviceSize
    flags*: VkSparseMemoryBindFlags

  VkSparseBufferMemoryBindInfo* = object
    buffer*: VkBuffer
    bindCount*: uint32
    pBinds*: ptr VkSparseMemoryBind

  VkSparseImageOpaqueMemoryBindInfo* = object
    image*: VkImage
    bindCount*: uint32
    pBinds*: ptr VkSparseMemoryBind

  VkSparseImageMemoryBindInfo* = object
    image*: VkImage
    bindCount*: uint32
    pBinds*: ptr VkSparseImageMemoryBind

  VkBindSparseInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    waitSemaphoreCount*: uint32
    pWaitSemaphores*: ptr VkSemaphore
    bufferBindCount*: uint32
    pBufferBinds*: ptr VkSparseBufferMemoryBindInfo
    imageOpaqueBindCount*: uint32
    pImageOpaqueBinds*: ptr VkSparseImageOpaqueMemoryBindInfo
    imageBindCount*: uint32
    pImageBinds*: ptr VkSparseImageMemoryBindInfo
    signalSemaphoreCount*: uint32
    pSignalSemaphores*: ptr VkSemaphore

  VkImageCopy* = object
    srcSubresource*: VkImageSubresourceLayers
    srcOffset*: VkOffset3D
    dstSubresource*: VkImageSubresourceLayers
    dstOffset*: VkOffset3D
    extent*: VkExtent3D

  VkImageBlit* = object
    srcSubresource*: VkImageSubresourceLayers
    srcOffsets*: array[2, VkOffset3D]
    dstSubresource*: VkImageSubresourceLayers
    dstOffsets*: array[2, VkOffset3D]

  VkBufferImageCopy* = object
    bufferOffset*: VkDeviceSize
    bufferRowLength*: uint32
    bufferImageHeight*: uint32
    imageSubresource*: VkImageSubresourceLayers
    imageOffset*: VkOffset3D
    imageExtent*: VkExtent3D

  VkCopyMemoryIndirectCommandNV* = object
    srcAddress*: VkDeviceAddress
    dstAddress*: VkDeviceAddress
    size*: VkDeviceSize

  VkCopyMemoryToImageIndirectCommandNV* = object
    srcAddress*: VkDeviceAddress
    bufferRowLength*: uint32
    bufferImageHeight*: uint32
    imageSubresource*: VkImageSubresourceLayers
    imageOffset*: VkOffset3D
    imageExtent*: VkExtent3D

  VkImageResolve* = object
    srcSubresource*: VkImageSubresourceLayers
    srcOffset*: VkOffset3D
    dstSubresource*: VkImageSubresourceLayers
    dstOffset*: VkOffset3D
    extent*: VkExtent3D

  VkShaderModuleCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkShaderModuleCreateFlags
    codeSize*: uint
    pCode*: ptr uint32

  VkDescriptorSetLayoutBinding* = object
    binding*: uint32
    descriptorType*: VkDescriptorType
    descriptorCount*: uint32
    stageFlags*: VkShaderStageFlags
    pImmutableSamplers*: ptr VkSampler

  VkDescriptorSetLayoutCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDescriptorSetLayoutCreateFlags
    bindingCount*: uint32
    pBindings*: ptr VkDescriptorSetLayoutBinding

  VkDescriptorPoolSize* = object
    `type`*: VkDescriptorType
    descriptorCount*: uint32

  VkDescriptorPoolCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDescriptorPoolCreateFlags
    maxSets*: uint32
    poolSizeCount*: uint32
    pPoolSizes*: ptr VkDescriptorPoolSize

  VkDescriptorSetAllocateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    descriptorPool*: VkDescriptorPool
    descriptorSetCount*: uint32
    pSetLayouts*: ptr VkDescriptorSetLayout

  VkSpecializationMapEntry* = object
    constantID*: uint32
    offset*: uint32
    size*: uint

  VkSpecializationInfo* = object
    mapEntryCount*: uint32
    pMapEntries*: ptr VkSpecializationMapEntry
    dataSize*: uint
    pData*: pointer

  VkPipelineShaderStageCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineShaderStageCreateFlags
    stage*: VkShaderStageFlagBits
    module*: VkShaderModule
    pName*: cstring
    pSpecializationInfo*: ptr VkSpecializationInfo

  VkComputePipelineCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineCreateFlags
    stage*: VkPipelineShaderStageCreateInfo
    layout*: VkPipelineLayout
    basePipelineHandle*: VkPipeline
    basePipelineIndex*: int32

  VkComputePipelineIndirectBufferInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    deviceAddress*: VkDeviceAddress
    size*: VkDeviceSize
    pipelineDeviceAddressCaptureReplay*: VkDeviceAddress

  VkPipelineCreateFlags2CreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineCreateFlags2KHR

  VkVertexInputBindingDescription* = object
    binding*: uint32
    stride*: uint32
    inputRate*: VkVertexInputRate

  VkVertexInputAttributeDescription* = object
    location*: uint32
    binding*: uint32
    format*: VkFormat
    offset*: uint32

  VkPipelineVertexInputStateCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineVertexInputStateCreateFlags
    vertexBindingDescriptionCount*: uint32
    pVertexBindingDescriptions*: ptr VkVertexInputBindingDescription
    vertexAttributeDescriptionCount*: uint32
    pVertexAttributeDescriptions*: ptr VkVertexInputAttributeDescription

  VkPipelineInputAssemblyStateCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineInputAssemblyStateCreateFlags
    topology*: VkPrimitiveTopology
    primitiveRestartEnable*: VkBool32

  VkPipelineTessellationStateCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineTessellationStateCreateFlags
    patchControlPoints*: uint32

  VkPipelineViewportStateCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineViewportStateCreateFlags
    viewportCount*: uint32
    pViewports*: ptr VkViewport
    scissorCount*: uint32
    pScissors*: ptr VkRect2D

  VkPipelineRasterizationStateCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineRasterizationStateCreateFlags
    depthClampEnable*: VkBool32
    rasterizerDiscardEnable*: VkBool32
    polygonMode*: VkPolygonMode
    cullMode*: VkCullModeFlags
    frontFace*: VkFrontFace
    depthBiasEnable*: VkBool32
    depthBiasConstantFactor*: float32
    depthBiasClamp*: float32
    depthBiasSlopeFactor*: float32
    lineWidth*: float32

  VkPipelineMultisampleStateCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineMultisampleStateCreateFlags
    rasterizationSamples*: VkSampleCountFlagBits
    sampleShadingEnable*: VkBool32
    minSampleShading*: float32
    pSampleMask*: ptr VkSampleMask
    alphaToCoverageEnable*: VkBool32
    alphaToOneEnable*: VkBool32

  VkPipelineColorBlendAttachmentState* = object
    blendEnable*: VkBool32
    srcColorBlendFactor*: VkBlendFactor
    dstColorBlendFactor*: VkBlendFactor
    colorBlendOp*: VkBlendOp
    srcAlphaBlendFactor*: VkBlendFactor
    dstAlphaBlendFactor*: VkBlendFactor
    alphaBlendOp*: VkBlendOp
    colorWriteMask*: VkColorComponentFlags

  VkPipelineColorBlendStateCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineColorBlendStateCreateFlags
    logicOpEnable*: VkBool32
    logicOp*: VkLogicOp
    attachmentCount*: uint32
    pAttachments*: ptr VkPipelineColorBlendAttachmentState
    blendConstants*: array[4, float32]

  VkPipelineDynamicStateCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineDynamicStateCreateFlags
    dynamicStateCount*: uint32
    pDynamicStates*: ptr VkDynamicState

  VkStencilOpState* = object
    failOp*: VkStencilOp
    passOp*: VkStencilOp
    depthFailOp*: VkStencilOp
    compareOp*: VkCompareOp
    compareMask*: uint32
    writeMask*: uint32
    reference*: uint32

  VkPipelineDepthStencilStateCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineDepthStencilStateCreateFlags
    depthTestEnable*: VkBool32
    depthWriteEnable*: VkBool32
    depthCompareOp*: VkCompareOp
    depthBoundsTestEnable*: VkBool32
    stencilTestEnable*: VkBool32
    front*: VkStencilOpState
    back*: VkStencilOpState
    minDepthBounds*: float32
    maxDepthBounds*: float32

  VkGraphicsPipelineCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineCreateFlags
    stageCount*: uint32
    pStages*: ptr VkPipelineShaderStageCreateInfo
    pVertexInputState*: ptr VkPipelineVertexInputStateCreateInfo
    pInputAssemblyState*: ptr VkPipelineInputAssemblyStateCreateInfo
    pTessellationState*: ptr VkPipelineTessellationStateCreateInfo
    pViewportState*: ptr VkPipelineViewportStateCreateInfo
    pRasterizationState*: ptr VkPipelineRasterizationStateCreateInfo
    pMultisampleState*: ptr VkPipelineMultisampleStateCreateInfo
    pDepthStencilState*: ptr VkPipelineDepthStencilStateCreateInfo
    pColorBlendState*: ptr VkPipelineColorBlendStateCreateInfo
    pDynamicState*: ptr VkPipelineDynamicStateCreateInfo
    layout*: VkPipelineLayout
    renderPass*: VkRenderPass
    subpass*: uint32
    basePipelineHandle*: VkPipeline
    basePipelineIndex*: int32

  VkPipelineCacheCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineCacheCreateFlags
    initialDataSize*: uint
    pInitialData*: pointer

  VkPipelineCacheHeaderVersionOne* = object
    headerSize*: uint32
    headerVersion*: VkPipelineCacheHeaderVersion
    vendorID*: uint32
    deviceID*: uint32
    pipelineCacheUUID*: array[VK_UUID_SIZE, uint8]

  VkPipelineCacheStageValidationIndexEntry* = object
    codeSize*: uint64
    codeOffset*: uint64

  VkPipelineCacheSafetyCriticalIndexEntry* = object
    pipelineIdentifier*: array[VK_UUID_SIZE, uint8]
    pipelineMemorySize*: uint64
    jsonSize*: uint64
    jsonOffset*: uint64
    stageIndexCount*: uint32
    stageIndexStride*: uint32
    stageIndexOffset*: uint64

  VkPipelineCacheHeaderVersionSafetyCriticalOne* = object
    headerVersionOne*: VkPipelineCacheHeaderVersionOne
    validationVersion*: VkPipelineCacheValidationVersion
    implementationData*: uint32
    pipelineIndexCount*: uint32
    pipelineIndexStride*: uint32
    pipelineIndexOffset*: uint64

  VkPushConstantRange* = object
    stageFlags*: VkShaderStageFlags
    offset*: uint32
    size*: uint32

  VkPipelineLayoutCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineLayoutCreateFlags
    setLayoutCount*: uint32
    pSetLayouts*: ptr VkDescriptorSetLayout
    pushConstantRangeCount*: uint32
    pPushConstantRanges*: ptr VkPushConstantRange

  VkSamplerCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkSamplerCreateFlags
    magFilter*: VkFilter
    minFilter*: VkFilter
    mipmapMode*: VkSamplerMipmapMode
    addressModeU*: VkSamplerAddressMode
    addressModeV*: VkSamplerAddressMode
    addressModeW*: VkSamplerAddressMode
    mipLodBias*: float32
    anisotropyEnable*: VkBool32
    maxAnisotropy*: float32
    compareEnable*: VkBool32
    compareOp*: VkCompareOp
    minLod*: float32
    maxLod*: float32
    borderColor*: VkBorderColor
    unnormalizedCoordinates*: VkBool32

  VkCommandPoolCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkCommandPoolCreateFlags
    queueFamilyIndex*: uint32

  VkCommandBufferAllocateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    commandPool*: VkCommandPool
    level*: VkCommandBufferLevel
    commandBufferCount*: uint32

  VkCommandBufferInheritanceInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    renderPass*: VkRenderPass
    subpass*: uint32
    framebuffer*: VkFramebuffer
    occlusionQueryEnable*: VkBool32
    queryFlags*: VkQueryControlFlags
    pipelineStatistics*: VkQueryPipelineStatisticFlags

  VkCommandBufferBeginInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkCommandBufferUsageFlags
    pInheritanceInfo*: ptr VkCommandBufferInheritanceInfo

  VkRenderPassBeginInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    renderPass*: VkRenderPass
    framebuffer*: VkFramebuffer
    renderArea*: VkRect2D
    clearValueCount*: uint32
    pClearValues*: ptr VkClearValue

  VkClearColorValue* {.union.} = object
    float32*: array[4, float32]
    int32*: array[4, int32]
    uint32*: array[4, uint32]

  VkClearDepthStencilValue* = object
    depth*: float32
    stencil*: uint32

  VkClearValue* {.union.} = object
    color*: VkClearColorValue
    depthStencil*: VkClearDepthStencilValue

  VkClearAttachment* = object
    aspectMask*: VkImageAspectFlags
    colorAttachment*: uint32
    clearValue*: VkClearValue

  VkAttachmentDescription* = object
    flags*: VkAttachmentDescriptionFlags
    format*: VkFormat
    samples*: VkSampleCountFlagBits
    loadOp*: VkAttachmentLoadOp
    storeOp*: VkAttachmentStoreOp
    stencilLoadOp*: VkAttachmentLoadOp
    stencilStoreOp*: VkAttachmentStoreOp
    initialLayout*: VkImageLayout
    finalLayout*: VkImageLayout

  VkAttachmentReference* = object
    attachment*: uint32
    layout*: VkImageLayout

  VkSubpassDescription* = object
    flags*: VkSubpassDescriptionFlags
    pipelineBindPoint*: VkPipelineBindPoint
    inputAttachmentCount*: uint32
    pInputAttachments*: ptr VkAttachmentReference
    colorAttachmentCount*: uint32
    pColorAttachments*: ptr VkAttachmentReference
    pResolveAttachments*: ptr VkAttachmentReference
    pDepthStencilAttachment*: ptr VkAttachmentReference
    preserveAttachmentCount*: uint32
    pPreserveAttachments*: ptr uint32

  VkSubpassDependency* = object
    srcSubpass*: uint32
    dstSubpass*: uint32
    srcStageMask*: VkPipelineStageFlags
    dstStageMask*: VkPipelineStageFlags
    srcAccessMask*: VkAccessFlags
    dstAccessMask*: VkAccessFlags
    dependencyFlags*: VkDependencyFlags

  VkRenderPassCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkRenderPassCreateFlags
    attachmentCount*: uint32
    pAttachments*: ptr VkAttachmentDescription
    subpassCount*: uint32
    pSubpasses*: ptr VkSubpassDescription
    dependencyCount*: uint32
    pDependencies*: ptr VkSubpassDependency

  VkEventCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkEventCreateFlags

  VkFenceCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkFenceCreateFlags

  VkPhysicalDeviceFeatures* = object
    robustBufferAccess*: VkBool32
    fullDrawIndexUint32*: VkBool32
    imageCubeArray*: VkBool32
    independentBlend*: VkBool32
    geometryShader*: VkBool32
    tessellationShader*: VkBool32
    sampleRateShading*: VkBool32
    dualSrcBlend*: VkBool32
    logicOp*: VkBool32
    multiDrawIndirect*: VkBool32
    drawIndirectFirstInstance*: VkBool32
    depthClamp*: VkBool32
    depthBiasClamp*: VkBool32
    fillModeNonSolid*: VkBool32
    depthBounds*: VkBool32
    wideLines*: VkBool32
    largePoints*: VkBool32
    alphaToOne*: VkBool32
    multiViewport*: VkBool32
    samplerAnisotropy*: VkBool32
    textureCompressionETC2*: VkBool32
    textureCompressionASTC_LDR*: VkBool32
    textureCompressionBC*: VkBool32
    occlusionQueryPrecise*: VkBool32
    pipelineStatisticsQuery*: VkBool32
    vertexPipelineStoresAndAtomics*: VkBool32
    fragmentStoresAndAtomics*: VkBool32
    shaderTessellationAndGeometryPointSize*: VkBool32
    shaderImageGatherExtended*: VkBool32
    shaderStorageImageExtendedFormats*: VkBool32
    shaderStorageImageMultisample*: VkBool32
    shaderStorageImageReadWithoutFormat*: VkBool32
    shaderStorageImageWriteWithoutFormat*: VkBool32
    shaderUniformBufferArrayDynamicIndexing*: VkBool32
    shaderSampledImageArrayDynamicIndexing*: VkBool32
    shaderStorageBufferArrayDynamicIndexing*: VkBool32
    shaderStorageImageArrayDynamicIndexing*: VkBool32
    shaderClipDistance*: VkBool32
    shaderCullDistance*: VkBool32
    shaderFloat64*: VkBool32
    shaderInt64*: VkBool32
    shaderInt16*: VkBool32
    shaderResourceResidency*: VkBool32
    shaderResourceMinLod*: VkBool32
    sparseBinding*: VkBool32
    sparseResidencyBuffer*: VkBool32
    sparseResidencyImage2D*: VkBool32
    sparseResidencyImage3D*: VkBool32
    sparseResidency2Samples*: VkBool32
    sparseResidency4Samples*: VkBool32
    sparseResidency8Samples*: VkBool32
    sparseResidency16Samples*: VkBool32
    sparseResidencyAliased*: VkBool32
    variableMultisampleRate*: VkBool32
    inheritedQueries*: VkBool32

  VkPhysicalDeviceSparseProperties* = object
    residencyStandard2DBlockShape*: VkBool32
    residencyStandard2DMultisampleBlockShape*: VkBool32
    residencyStandard3DBlockShape*: VkBool32
    residencyAlignedMipSize*: VkBool32
    residencyNonResidentStrict*: VkBool32

  VkPhysicalDeviceLimits* = object
    maxImageDimension1D*: uint32
    maxImageDimension2D*: uint32
    maxImageDimension3D*: uint32
    maxImageDimensionCube*: uint32
    maxImageArrayLayers*: uint32
    maxTexelBufferElements*: uint32
    maxUniformBufferRange*: uint32
    maxStorageBufferRange*: uint32
    maxPushConstantsSize*: uint32
    maxMemoryAllocationCount*: uint32
    maxSamplerAllocationCount*: uint32
    bufferImageGranularity*: VkDeviceSize
    sparseAddressSpaceSize*: VkDeviceSize
    maxBoundDescriptorSets*: uint32
    maxPerStageDescriptorSamplers*: uint32
    maxPerStageDescriptorUniformBuffers*: uint32
    maxPerStageDescriptorStorageBuffers*: uint32
    maxPerStageDescriptorSampledImages*: uint32
    maxPerStageDescriptorStorageImages*: uint32
    maxPerStageDescriptorInputAttachments*: uint32
    maxPerStageResources*: uint32
    maxDescriptorSetSamplers*: uint32
    maxDescriptorSetUniformBuffers*: uint32
    maxDescriptorSetUniformBuffersDynamic*: uint32
    maxDescriptorSetStorageBuffers*: uint32
    maxDescriptorSetStorageBuffersDynamic*: uint32
    maxDescriptorSetSampledImages*: uint32
    maxDescriptorSetStorageImages*: uint32
    maxDescriptorSetInputAttachments*: uint32
    maxVertexInputAttributes*: uint32
    maxVertexInputBindings*: uint32
    maxVertexInputAttributeOffset*: uint32
    maxVertexInputBindingStride*: uint32
    maxVertexOutputComponents*: uint32
    maxTessellationGenerationLevel*: uint32
    maxTessellationPatchSize*: uint32
    maxTessellationControlPerVertexInputComponents*: uint32
    maxTessellationControlPerVertexOutputComponents*: uint32
    maxTessellationControlPerPatchOutputComponents*: uint32
    maxTessellationControlTotalOutputComponents*: uint32
    maxTessellationEvaluationInputComponents*: uint32
    maxTessellationEvaluationOutputComponents*: uint32
    maxGeometryShaderInvocations*: uint32
    maxGeometryInputComponents*: uint32
    maxGeometryOutputComponents*: uint32
    maxGeometryOutputVertices*: uint32
    maxGeometryTotalOutputComponents*: uint32
    maxFragmentInputComponents*: uint32
    maxFragmentOutputAttachments*: uint32
    maxFragmentDualSrcAttachments*: uint32
    maxFragmentCombinedOutputResources*: uint32
    maxComputeSharedMemorySize*: uint32
    maxComputeWorkGroupCount*: array[3, uint32]
    maxComputeWorkGroupInvocations*: uint32
    maxComputeWorkGroupSize*: array[3, uint32]
    subPixelPrecisionBits*: uint32
    subTexelPrecisionBits*: uint32
    mipmapPrecisionBits*: uint32
    maxDrawIndexedIndexValue*: uint32
    maxDrawIndirectCount*: uint32
    maxSamplerLodBias*: float32
    maxSamplerAnisotropy*: float32
    maxViewports*: uint32
    maxViewportDimensions*: array[2, uint32]
    viewportBoundsRange*: array[2, float32]
    viewportSubPixelBits*: uint32
    minMemoryMapAlignment*: uint
    minTexelBufferOffsetAlignment*: VkDeviceSize
    minUniformBufferOffsetAlignment*: VkDeviceSize
    minStorageBufferOffsetAlignment*: VkDeviceSize
    minTexelOffset*: int32
    maxTexelOffset*: uint32
    minTexelGatherOffset*: int32
    maxTexelGatherOffset*: uint32
    minInterpolationOffset*: float32
    maxInterpolationOffset*: float32
    subPixelInterpolationOffsetBits*: uint32
    maxFramebufferWidth*: uint32
    maxFramebufferHeight*: uint32
    maxFramebufferLayers*: uint32
    framebufferColorSampleCounts*: VkSampleCountFlags
    framebufferDepthSampleCounts*: VkSampleCountFlags
    framebufferStencilSampleCounts*: VkSampleCountFlags
    framebufferNoAttachmentsSampleCounts*: VkSampleCountFlags
    maxColorAttachments*: uint32
    sampledImageColorSampleCounts*: VkSampleCountFlags
    sampledImageIntegerSampleCounts*: VkSampleCountFlags
    sampledImageDepthSampleCounts*: VkSampleCountFlags
    sampledImageStencilSampleCounts*: VkSampleCountFlags
    storageImageSampleCounts*: VkSampleCountFlags
    maxSampleMaskWords*: uint32
    timestampComputeAndGraphics*: VkBool32
    timestampPeriod*: float32
    maxClipDistances*: uint32
    maxCullDistances*: uint32
    maxCombinedClipAndCullDistances*: uint32
    discreteQueuePriorities*: uint32
    pointSizeRange*: array[2, float32]
    lineWidthRange*: array[2, float32]
    pointSizeGranularity*: float32
    lineWidthGranularity*: float32
    strictLines*: VkBool32
    standardSampleLocations*: VkBool32
    optimalBufferCopyOffsetAlignment*: VkDeviceSize
    optimalBufferCopyRowPitchAlignment*: VkDeviceSize
    nonCoherentAtomSize*: VkDeviceSize

  VkSemaphoreCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkSemaphoreCreateFlags

  VkQueryPoolCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkQueryPoolCreateFlags
    queryType*: VkQueryType
    queryCount*: uint32
    pipelineStatistics*: VkQueryPipelineStatisticFlags

  VkFramebufferCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkFramebufferCreateFlags
    renderPass*: VkRenderPass
    attachmentCount*: uint32
    pAttachments*: ptr VkImageView
    width*: uint32
    height*: uint32
    layers*: uint32

  VkDrawIndirectCommand* = object
    vertexCount*: uint32
    instanceCount*: uint32
    firstVertex*: uint32
    firstInstance*: uint32

  VkDrawIndexedIndirectCommand* = object
    indexCount*: uint32
    instanceCount*: uint32
    firstIndex*: uint32
    vertexOffset*: int32
    firstInstance*: uint32

  VkDispatchIndirectCommand* = object
    x*: uint32
    y*: uint32
    z*: uint32

  VkMultiDrawInfoEXT* = object
    firstVertex*: uint32
    vertexCount*: uint32

  VkMultiDrawIndexedInfoEXT* = object
    firstIndex*: uint32
    indexCount*: uint32
    vertexOffset*: int32

  VkSubmitInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    waitSemaphoreCount*: uint32
    pWaitSemaphores*: ptr VkSemaphore
    pWaitDstStageMask*: ptr VkPipelineStageFlags
    commandBufferCount*: uint32
    pCommandBuffers*: ptr VkCommandBuffer
    signalSemaphoreCount*: uint32
    pSignalSemaphores*: ptr VkSemaphore

  VkDisplayPropertiesKHR* = object
    display*: VkDisplayKHR
    displayName*: cstring
    physicalDimensions*: VkExtent2D
    physicalResolution*: VkExtent2D
    supportedTransforms*: VkSurfaceTransformFlagsKHR
    planeReorderPossible*: VkBool32
    persistentContent*: VkBool32

  VkDisplayPlanePropertiesKHR* = object
    currentDisplay*: VkDisplayKHR
    currentStackIndex*: uint32

  VkDisplayModeParametersKHR* = object
    visibleRegion*: VkExtent2D
    refreshRate*: uint32

  VkDisplayModePropertiesKHR* = object
    displayMode*: VkDisplayModeKHR
    parameters*: VkDisplayModeParametersKHR

  VkDisplayModeCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDisplayModeCreateFlagsKHR
    parameters*: VkDisplayModeParametersKHR

  VkDisplayPlaneCapabilitiesKHR* = object
    supportedAlpha*: VkDisplayPlaneAlphaFlagsKHR
    minSrcPosition*: VkOffset2D
    maxSrcPosition*: VkOffset2D
    minSrcExtent*: VkExtent2D
    maxSrcExtent*: VkExtent2D
    minDstPosition*: VkOffset2D
    maxDstPosition*: VkOffset2D
    minDstExtent*: VkExtent2D
    maxDstExtent*: VkExtent2D

  VkDisplaySurfaceCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDisplaySurfaceCreateFlagsKHR
    displayMode*: VkDisplayModeKHR
    planeIndex*: uint32
    planeStackIndex*: uint32
    transform*: VkSurfaceTransformFlagBitsKHR
    globalAlpha*: float32
    alphaMode*: VkDisplayPlaneAlphaFlagBitsKHR
    imageExtent*: VkExtent2D

  VkDisplayPresentInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    srcRect*: VkRect2D
    dstRect*: VkRect2D
    persistent*: VkBool32

  VkSurfaceCapabilitiesKHR* = object
    minImageCount*: uint32
    maxImageCount*: uint32
    currentExtent*: VkExtent2D
    minImageExtent*: VkExtent2D
    maxImageExtent*: VkExtent2D
    maxImageArrayLayers*: uint32
    supportedTransforms*: VkSurfaceTransformFlagsKHR
    currentTransform*: VkSurfaceTransformFlagBitsKHR
    supportedCompositeAlpha*: VkCompositeAlphaFlagsKHR
    supportedUsageFlags*: VkImageUsageFlags

  VkAndroidSurfaceCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkAndroidSurfaceCreateFlagsKHR
    window*: ptr ANativeWindow

  VkViSurfaceCreateInfoNN* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkViSurfaceCreateFlagsNN
    window*: pointer

  VkWaylandSurfaceCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkWaylandSurfaceCreateFlagsKHR
    display*: ptr wl_display
    surface*: ptr wl_surface

  VkWin32SurfaceCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkWin32SurfaceCreateFlagsKHR
    hinstance*: HINSTANCE
    hwnd*: HWND

  VkXlibSurfaceCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkXlibSurfaceCreateFlagsKHR
    dpy*: ptr Display
    window*: Window

  VkXcbSurfaceCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkXcbSurfaceCreateFlagsKHR
    connection*: ptr xcb_connection_t
    window*: xcb_window_t

  VkDirectFBSurfaceCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDirectFBSurfaceCreateFlagsEXT
    dfb*: ptr IDirectFB
    surface*: ptr IDirectFBSurface

  VkImagePipeSurfaceCreateInfoFUCHSIA* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkImagePipeSurfaceCreateFlagsFUCHSIA
    imagePipeHandle*: zx_handle_t

  VkStreamDescriptorSurfaceCreateInfoGGP* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkStreamDescriptorSurfaceCreateFlagsGGP
    streamDescriptor*: GgpStreamDescriptor

  VkScreenSurfaceCreateInfoQNX* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkScreenSurfaceCreateFlagsQNX
    context*: ptr screen_context
    window*: ptr screen_window

  VkSurfaceFormatKHR* = object
    format*: VkFormat
    colorSpace*: VkColorSpaceKHR

  VkSwapchainCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkSwapchainCreateFlagsKHR
    surface*: VkSurfaceKHR
    minImageCount*: uint32
    imageFormat*: VkFormat
    imageColorSpace*: VkColorSpaceKHR
    imageExtent*: VkExtent2D
    imageArrayLayers*: uint32
    imageUsage*: VkImageUsageFlags
    imageSharingMode*: VkSharingMode
    queueFamilyIndexCount*: uint32
    pQueueFamilyIndices*: ptr uint32
    preTransform*: VkSurfaceTransformFlagBitsKHR
    compositeAlpha*: VkCompositeAlphaFlagBitsKHR
    presentMode*: VkPresentModeKHR
    clipped*: VkBool32
    oldSwapchain*: VkSwapchainKHR

  VkPresentInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    waitSemaphoreCount*: uint32
    pWaitSemaphores*: ptr VkSemaphore
    swapchainCount*: uint32
    pSwapchains*: ptr VkSwapchainKHR
    pImageIndices*: ptr uint32
    pResults*: ptr VkResult

  VkDebugReportCallbackCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDebugReportFlagsEXT
    pfnCallback*: PFN_vkDebugReportCallbackEXT
    pUserData*: pointer

  VkValidationFlagsEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    disabledValidationCheckCount*: uint32
    pDisabledValidationChecks*: ptr VkValidationCheckEXT

  VkValidationFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    enabledValidationFeatureCount*: uint32
    pEnabledValidationFeatures*: ptr VkValidationFeatureEnableEXT
    disabledValidationFeatureCount*: uint32
    pDisabledValidationFeatures*: ptr VkValidationFeatureDisableEXT

  VkLayerSettingsCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    settingCount*: uint32
    pSettings*: ptr VkLayerSettingEXT

  VkLayerSettingEXT* = object
    pLayerName*: cstring
    pSettingName*: cstring
    `type`*: VkLayerSettingTypeEXT
    valueCount*: uint32
    pValues*: pointer

  VkApplicationParametersEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    vendorID*: uint32
    deviceID*: uint32
    key*: uint32
    value*: uint64

  VkPipelineRasterizationStateRasterizationOrderAMD* = object
    sType*: VkStructureType
    pNext*: pointer
    rasterizationOrder*: VkRasterizationOrderAMD

  VkDebugMarkerObjectNameInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    objectType*: VkDebugReportObjectTypeEXT
    `object`*: uint64
    pObjectName*: cstring

  VkDebugMarkerObjectTagInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    objectType*: VkDebugReportObjectTypeEXT
    `object`*: uint64
    tagName*: uint64
    tagSize*: uint
    pTag*: pointer

  VkDebugMarkerMarkerInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    pMarkerName*: cstring
    color*: array[4, float32]

  VkDedicatedAllocationImageCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    dedicatedAllocation*: VkBool32

  VkDedicatedAllocationBufferCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    dedicatedAllocation*: VkBool32

  VkDedicatedAllocationMemoryAllocateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    image*: VkImage
    buffer*: VkBuffer

  VkExternalImageFormatPropertiesNV* = object
    imageFormatProperties*: VkImageFormatProperties
    externalMemoryFeatures*: VkExternalMemoryFeatureFlagsNV
    exportFromImportedHandleTypes*: VkExternalMemoryHandleTypeFlagsNV
    compatibleHandleTypes*: VkExternalMemoryHandleTypeFlagsNV

  VkExternalMemoryImageCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    handleTypes*: VkExternalMemoryHandleTypeFlagsNV

  VkExportMemoryAllocateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    handleTypes*: VkExternalMemoryHandleTypeFlagsNV

  VkImportMemoryWin32HandleInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    handleType*: VkExternalMemoryHandleTypeFlagsNV
    handle*: HANDLE

  VkExportMemoryWin32HandleInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    pAttributes*: ptr SECURITY_ATTRIBUTES
    dwAccess*: DWORD

  VkExportMemorySciBufInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    pAttributes*: NvSciBufAttrList

  VkImportMemorySciBufInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    handleType*: VkExternalMemoryHandleTypeFlagBits
    handle*: NvSciBufObj

  VkMemoryGetSciBufInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    memory*: VkDeviceMemory
    handleType*: VkExternalMemoryHandleTypeFlagBits

  VkMemorySciBufPropertiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    memoryTypeBits*: uint32

  VkPhysicalDeviceExternalMemorySciBufFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    sciBufImport*: VkBool32
    sciBufExport*: VkBool32

  VkPhysicalDeviceExternalSciBufFeaturesNV* = VkPhysicalDeviceExternalMemorySciBufFeaturesNV

  VkWin32KeyedMutexAcquireReleaseInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    acquireCount*: uint32
    pAcquireSyncs*: ptr VkDeviceMemory
    pAcquireKeys*: ptr uint64
    pAcquireTimeoutMilliseconds*: ptr uint32
    releaseCount*: uint32
    pReleaseSyncs*: ptr VkDeviceMemory
    pReleaseKeys*: ptr uint64

  VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    deviceGeneratedCommands*: VkBool32

  VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    deviceGeneratedCompute*: VkBool32
    deviceGeneratedComputePipelines*: VkBool32
    deviceGeneratedComputeCaptureReplay*: VkBool32

  VkDevicePrivateDataCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    privateDataSlotRequestCount*: uint32

  VkDevicePrivateDataCreateInfoEXT* = VkDevicePrivateDataCreateInfo

  VkPrivateDataSlotCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPrivateDataSlotCreateFlags

  VkPrivateDataSlotCreateInfoEXT* = VkPrivateDataSlotCreateInfo

  VkPhysicalDevicePrivateDataFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    privateData*: VkBool32

  VkPhysicalDevicePrivateDataFeaturesEXT* = VkPhysicalDevicePrivateDataFeatures

  VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    maxGraphicsShaderGroupCount*: uint32
    maxIndirectSequenceCount*: uint32
    maxIndirectCommandsTokenCount*: uint32
    maxIndirectCommandsStreamCount*: uint32
    maxIndirectCommandsTokenOffset*: uint32
    maxIndirectCommandsStreamStride*: uint32
    minSequencesCountBufferOffsetAlignment*: uint32
    minSequencesIndexBufferOffsetAlignment*: uint32
    minIndirectCommandsBufferOffsetAlignment*: uint32

  VkPhysicalDeviceMultiDrawPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    maxMultiDrawCount*: uint32

  VkGraphicsShaderGroupCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    stageCount*: uint32
    pStages*: ptr VkPipelineShaderStageCreateInfo
    pVertexInputState*: ptr VkPipelineVertexInputStateCreateInfo
    pTessellationState*: ptr VkPipelineTessellationStateCreateInfo

  VkGraphicsPipelineShaderGroupsCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    groupCount*: uint32
    pGroups*: ptr VkGraphicsShaderGroupCreateInfoNV
    pipelineCount*: uint32
    pPipelines*: ptr VkPipeline

  VkBindShaderGroupIndirectCommandNV* = object
    groupIndex*: uint32

  VkBindIndexBufferIndirectCommandNV* = object
    bufferAddress*: VkDeviceAddress
    size*: uint32
    indexType*: VkIndexType

  VkBindVertexBufferIndirectCommandNV* = object
    bufferAddress*: VkDeviceAddress
    size*: uint32
    stride*: uint32

  VkSetStateFlagsIndirectCommandNV* = object
    data*: uint32

  VkIndirectCommandsStreamNV* = object
    buffer*: VkBuffer
    offset*: VkDeviceSize

  VkIndirectCommandsLayoutTokenNV* = object
    sType*: VkStructureType
    pNext*: pointer
    tokenType*: VkIndirectCommandsTokenTypeNV
    stream*: uint32
    offset*: uint32
    vertexBindingUnit*: uint32
    vertexDynamicStride*: VkBool32
    pushconstantPipelineLayout*: VkPipelineLayout
    pushconstantShaderStageFlags*: VkShaderStageFlags
    pushconstantOffset*: uint32
    pushconstantSize*: uint32
    indirectStateFlags*: VkIndirectStateFlagsNV
    indexTypeCount*: uint32
    pIndexTypes*: ptr VkIndexType
    pIndexTypeValues*: ptr uint32

  VkIndirectCommandsLayoutCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkIndirectCommandsLayoutUsageFlagsNV
    pipelineBindPoint*: VkPipelineBindPoint
    tokenCount*: uint32
    pTokens*: ptr VkIndirectCommandsLayoutTokenNV
    streamCount*: uint32
    pStreamStrides*: ptr uint32

  VkGeneratedCommandsInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    pipelineBindPoint*: VkPipelineBindPoint
    pipeline*: VkPipeline
    indirectCommandsLayout*: VkIndirectCommandsLayoutNV
    streamCount*: uint32
    pStreams*: ptr VkIndirectCommandsStreamNV
    sequencesCount*: uint32
    preprocessBuffer*: VkBuffer
    preprocessOffset*: VkDeviceSize
    preprocessSize*: VkDeviceSize
    sequencesCountBuffer*: VkBuffer
    sequencesCountOffset*: VkDeviceSize
    sequencesIndexBuffer*: VkBuffer
    sequencesIndexOffset*: VkDeviceSize

  VkGeneratedCommandsMemoryRequirementsInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    pipelineBindPoint*: VkPipelineBindPoint
    pipeline*: VkPipeline
    indirectCommandsLayout*: VkIndirectCommandsLayoutNV
    maxSequencesCount*: uint32

  VkPipelineIndirectDeviceAddressInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    pipelineBindPoint*: VkPipelineBindPoint
    pipeline*: VkPipeline

  VkBindPipelineIndirectCommandNV* = object
    pipelineAddress*: VkDeviceAddress

  VkPhysicalDeviceFeatures2* = object
    sType*: VkStructureType
    pNext*: pointer
    features*: VkPhysicalDeviceFeatures

  VkPhysicalDeviceFeatures2KHR* = VkPhysicalDeviceFeatures2

  VkPhysicalDeviceProperties2* = object
    sType*: VkStructureType
    pNext*: pointer
    properties*: VkPhysicalDeviceProperties

  VkPhysicalDeviceProperties2KHR* = VkPhysicalDeviceProperties2

  VkFormatProperties2* = object
    sType*: VkStructureType
    pNext*: pointer
    formatProperties*: VkFormatProperties

  VkFormatProperties2KHR* = VkFormatProperties2

  VkImageFormatProperties2* = object
    sType*: VkStructureType
    pNext*: pointer
    imageFormatProperties*: VkImageFormatProperties

  VkImageFormatProperties2KHR* = VkImageFormatProperties2

  VkPhysicalDeviceImageFormatInfo2* = object
    sType*: VkStructureType
    pNext*: pointer
    format*: VkFormat
    `type`*: VkImageType
    tiling*: VkImageTiling
    usage*: VkImageUsageFlags
    flags*: VkImageCreateFlags

  VkPhysicalDeviceImageFormatInfo2KHR* = VkPhysicalDeviceImageFormatInfo2

  VkQueueFamilyProperties2* = object
    sType*: VkStructureType
    pNext*: pointer
    queueFamilyProperties*: VkQueueFamilyProperties

  VkQueueFamilyProperties2KHR* = VkQueueFamilyProperties2

  VkPhysicalDeviceMemoryProperties2* = object
    sType*: VkStructureType
    pNext*: pointer
    memoryProperties*: VkPhysicalDeviceMemoryProperties

  VkPhysicalDeviceMemoryProperties2KHR* = VkPhysicalDeviceMemoryProperties2

  VkSparseImageFormatProperties2* = object
    sType*: VkStructureType
    pNext*: pointer
    properties*: VkSparseImageFormatProperties

  VkSparseImageFormatProperties2KHR* = VkSparseImageFormatProperties2

  VkPhysicalDeviceSparseImageFormatInfo2* = object
    sType*: VkStructureType
    pNext*: pointer
    format*: VkFormat
    `type`*: VkImageType
    samples*: VkSampleCountFlagBits
    usage*: VkImageUsageFlags
    tiling*: VkImageTiling

  VkPhysicalDeviceSparseImageFormatInfo2KHR* = VkPhysicalDeviceSparseImageFormatInfo2

  VkPhysicalDevicePushDescriptorPropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    maxPushDescriptors*: uint32

  VkConformanceVersion* = object
    major*: uint8
    minor*: uint8
    subminor*: uint8
    patch*: uint8

  VkConformanceVersionKHR* = VkConformanceVersion

  VkPhysicalDeviceDriverProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    driverID*: VkDriverId
    driverName*: array[VK_MAX_DRIVER_NAME_SIZE, char]
    driverInfo*: array[VK_MAX_DRIVER_INFO_SIZE, char]
    conformanceVersion*: VkConformanceVersion

  VkPhysicalDeviceDriverPropertiesKHR* = VkPhysicalDeviceDriverProperties

  VkPresentRegionsKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    swapchainCount*: uint32
    pRegions*: ptr VkPresentRegionKHR

  VkPresentRegionKHR* = object
    rectangleCount*: uint32
    pRectangles*: ptr VkRectLayerKHR

  VkRectLayerKHR* = object
    offset*: VkOffset2D
    extent*: VkExtent2D
    layer*: uint32

  VkPhysicalDeviceVariablePointersFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    variablePointersStorageBuffer*: VkBool32
    variablePointers*: VkBool32

  VkPhysicalDeviceVariablePointersFeaturesKHR* = VkPhysicalDeviceVariablePointersFeatures

  VkPhysicalDeviceVariablePointerFeaturesKHR* = VkPhysicalDeviceVariablePointersFeatures

  VkPhysicalDeviceVariablePointerFeatures* = VkPhysicalDeviceVariablePointersFeatures

  VkExternalMemoryProperties* = object
    externalMemoryFeatures*: VkExternalMemoryFeatureFlags
    exportFromImportedHandleTypes*: VkExternalMemoryHandleTypeFlags
    compatibleHandleTypes*: VkExternalMemoryHandleTypeFlags

  VkExternalMemoryPropertiesKHR* = VkExternalMemoryProperties

  VkPhysicalDeviceExternalImageFormatInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    handleType*: VkExternalMemoryHandleTypeFlagBits

  VkPhysicalDeviceExternalImageFormatInfoKHR* = VkPhysicalDeviceExternalImageFormatInfo

  VkExternalImageFormatProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    externalMemoryProperties*: VkExternalMemoryProperties

  VkExternalImageFormatPropertiesKHR* = VkExternalImageFormatProperties

  VkPhysicalDeviceExternalBufferInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkBufferCreateFlags
    usage*: VkBufferUsageFlags
    handleType*: VkExternalMemoryHandleTypeFlagBits

  VkPhysicalDeviceExternalBufferInfoKHR* = VkPhysicalDeviceExternalBufferInfo

  VkExternalBufferProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    externalMemoryProperties*: VkExternalMemoryProperties

  VkExternalBufferPropertiesKHR* = VkExternalBufferProperties

  VkPhysicalDeviceIDProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    deviceUUID*: array[VK_UUID_SIZE, uint8]
    driverUUID*: array[VK_UUID_SIZE, uint8]
    deviceLUID*: array[VK_LUID_SIZE, uint8]
    deviceNodeMask*: uint32
    deviceLUIDValid*: VkBool32

  VkPhysicalDeviceIDPropertiesKHR* = VkPhysicalDeviceIDProperties

  VkExternalMemoryImageCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    handleTypes*: VkExternalMemoryHandleTypeFlags

  VkExternalMemoryImageCreateInfoKHR* = VkExternalMemoryImageCreateInfo

  VkExternalMemoryBufferCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    handleTypes*: VkExternalMemoryHandleTypeFlags

  VkExternalMemoryBufferCreateInfoKHR* = VkExternalMemoryBufferCreateInfo

  VkExportMemoryAllocateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    handleTypes*: VkExternalMemoryHandleTypeFlags

  VkExportMemoryAllocateInfoKHR* = VkExportMemoryAllocateInfo

  VkImportMemoryWin32HandleInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    handleType*: VkExternalMemoryHandleTypeFlagBits
    handle*: HANDLE
    name*: LPCWSTR

  VkExportMemoryWin32HandleInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pAttributes*: ptr SECURITY_ATTRIBUTES
    dwAccess*: DWORD
    name*: LPCWSTR

  VkImportMemoryZirconHandleInfoFUCHSIA* = object
    sType*: VkStructureType
    pNext*: pointer
    handleType*: VkExternalMemoryHandleTypeFlagBits
    handle*: zx_handle_t

  VkMemoryZirconHandlePropertiesFUCHSIA* = object
    sType*: VkStructureType
    pNext*: pointer
    memoryTypeBits*: uint32

  VkMemoryGetZirconHandleInfoFUCHSIA* = object
    sType*: VkStructureType
    pNext*: pointer
    memory*: VkDeviceMemory
    handleType*: VkExternalMemoryHandleTypeFlagBits

  VkMemoryWin32HandlePropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    memoryTypeBits*: uint32

  VkMemoryGetWin32HandleInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    memory*: VkDeviceMemory
    handleType*: VkExternalMemoryHandleTypeFlagBits

  VkImportMemoryFdInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    handleType*: VkExternalMemoryHandleTypeFlagBits
    fd*: int

  VkMemoryFdPropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    memoryTypeBits*: uint32

  VkMemoryGetFdInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    memory*: VkDeviceMemory
    handleType*: VkExternalMemoryHandleTypeFlagBits

  VkWin32KeyedMutexAcquireReleaseInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    acquireCount*: uint32
    pAcquireSyncs*: ptr VkDeviceMemory
    pAcquireKeys*: ptr uint64
    pAcquireTimeouts*: ptr uint32
    releaseCount*: uint32
    pReleaseSyncs*: ptr VkDeviceMemory
    pReleaseKeys*: ptr uint64

  VkPhysicalDeviceExternalSemaphoreInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    handleType*: VkExternalSemaphoreHandleTypeFlagBits

  VkPhysicalDeviceExternalSemaphoreInfoKHR* = VkPhysicalDeviceExternalSemaphoreInfo

  VkExternalSemaphoreProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    exportFromImportedHandleTypes*: VkExternalSemaphoreHandleTypeFlags
    compatibleHandleTypes*: VkExternalSemaphoreHandleTypeFlags
    externalSemaphoreFeatures*: VkExternalSemaphoreFeatureFlags

  VkExternalSemaphorePropertiesKHR* = VkExternalSemaphoreProperties

  VkExportSemaphoreCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    handleTypes*: VkExternalSemaphoreHandleTypeFlags

  VkExportSemaphoreCreateInfoKHR* = VkExportSemaphoreCreateInfo

  VkImportSemaphoreWin32HandleInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    semaphore*: VkSemaphore
    flags*: VkSemaphoreImportFlags
    handleType*: VkExternalSemaphoreHandleTypeFlagBits
    handle*: HANDLE
    name*: LPCWSTR

  VkExportSemaphoreWin32HandleInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pAttributes*: ptr SECURITY_ATTRIBUTES
    dwAccess*: DWORD
    name*: LPCWSTR

  VkD3D12FenceSubmitInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    waitSemaphoreValuesCount*: uint32
    pWaitSemaphoreValues*: ptr uint64
    signalSemaphoreValuesCount*: uint32
    pSignalSemaphoreValues*: ptr uint64

  VkSemaphoreGetWin32HandleInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    semaphore*: VkSemaphore
    handleType*: VkExternalSemaphoreHandleTypeFlagBits

  VkImportSemaphoreFdInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    semaphore*: VkSemaphore
    flags*: VkSemaphoreImportFlags
    handleType*: VkExternalSemaphoreHandleTypeFlagBits
    fd*: int

  VkSemaphoreGetFdInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    semaphore*: VkSemaphore
    handleType*: VkExternalSemaphoreHandleTypeFlagBits

  VkImportSemaphoreZirconHandleInfoFUCHSIA* = object
    sType*: VkStructureType
    pNext*: pointer
    semaphore*: VkSemaphore
    flags*: VkSemaphoreImportFlags
    handleType*: VkExternalSemaphoreHandleTypeFlagBits
    zirconHandle*: zx_handle_t

  VkSemaphoreGetZirconHandleInfoFUCHSIA* = object
    sType*: VkStructureType
    pNext*: pointer
    semaphore*: VkSemaphore
    handleType*: VkExternalSemaphoreHandleTypeFlagBits

  VkPhysicalDeviceExternalFenceInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    handleType*: VkExternalFenceHandleTypeFlagBits

  VkPhysicalDeviceExternalFenceInfoKHR* = VkPhysicalDeviceExternalFenceInfo

  VkExternalFenceProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    exportFromImportedHandleTypes*: VkExternalFenceHandleTypeFlags
    compatibleHandleTypes*: VkExternalFenceHandleTypeFlags
    externalFenceFeatures*: VkExternalFenceFeatureFlags

  VkExternalFencePropertiesKHR* = VkExternalFenceProperties

  VkExportFenceCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    handleTypes*: VkExternalFenceHandleTypeFlags

  VkExportFenceCreateInfoKHR* = VkExportFenceCreateInfo

  VkImportFenceWin32HandleInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    fence*: VkFence
    flags*: VkFenceImportFlags
    handleType*: VkExternalFenceHandleTypeFlagBits
    handle*: HANDLE
    name*: LPCWSTR

  VkExportFenceWin32HandleInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pAttributes*: ptr SECURITY_ATTRIBUTES
    dwAccess*: DWORD
    name*: LPCWSTR

  VkFenceGetWin32HandleInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    fence*: VkFence
    handleType*: VkExternalFenceHandleTypeFlagBits

  VkImportFenceFdInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    fence*: VkFence
    flags*: VkFenceImportFlags
    handleType*: VkExternalFenceHandleTypeFlagBits
    fd*: int

  VkFenceGetFdInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    fence*: VkFence
    handleType*: VkExternalFenceHandleTypeFlagBits

  VkExportFenceSciSyncInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    pAttributes*: NvSciSyncAttrList

  VkImportFenceSciSyncInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    fence*: VkFence
    handleType*: VkExternalFenceHandleTypeFlagBits
    handle*: pointer

  VkFenceGetSciSyncInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    fence*: VkFence
    handleType*: VkExternalFenceHandleTypeFlagBits

  VkExportSemaphoreSciSyncInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    pAttributes*: NvSciSyncAttrList

  VkImportSemaphoreSciSyncInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    semaphore*: VkSemaphore
    handleType*: VkExternalSemaphoreHandleTypeFlagBits
    handle*: pointer

  VkSemaphoreGetSciSyncInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    semaphore*: VkSemaphore
    handleType*: VkExternalSemaphoreHandleTypeFlagBits

  VkSciSyncAttributesInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    clientType*: VkSciSyncClientTypeNV
    primitiveType*: VkSciSyncPrimitiveTypeNV

  VkPhysicalDeviceExternalSciSyncFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    sciSyncFence*: VkBool32
    sciSyncSemaphore*: VkBool32
    sciSyncImport*: VkBool32
    sciSyncExport*: VkBool32

  VkPhysicalDeviceExternalSciSync2FeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    sciSyncFence*: VkBool32
    sciSyncSemaphore2*: VkBool32
    sciSyncImport*: VkBool32
    sciSyncExport*: VkBool32

  VkSemaphoreSciSyncPoolCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    handle*: NvSciSyncObj

  VkSemaphoreSciSyncCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    semaphorePool*: VkSemaphoreSciSyncPoolNV
    pFence*: ptr NvSciSyncFence

  VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    semaphoreSciSyncPoolRequestCount*: uint32

  VkPhysicalDeviceMultiviewFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    multiview*: VkBool32
    multiviewGeometryShader*: VkBool32
    multiviewTessellationShader*: VkBool32

  VkPhysicalDeviceMultiviewFeaturesKHR* = VkPhysicalDeviceMultiviewFeatures

  VkPhysicalDeviceMultiviewProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    maxMultiviewViewCount*: uint32
    maxMultiviewInstanceIndex*: uint32

  VkPhysicalDeviceMultiviewPropertiesKHR* = VkPhysicalDeviceMultiviewProperties

  VkRenderPassMultiviewCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    subpassCount*: uint32
    pViewMasks*: ptr uint32
    dependencyCount*: uint32
    pViewOffsets*: ptr int32
    correlationMaskCount*: uint32
    pCorrelationMasks*: ptr uint32

  VkRenderPassMultiviewCreateInfoKHR* = VkRenderPassMultiviewCreateInfo

  VkSurfaceCapabilities2EXT* = object
    sType*: VkStructureType
    pNext*: pointer
    minImageCount*: uint32
    maxImageCount*: uint32
    currentExtent*: VkExtent2D
    minImageExtent*: VkExtent2D
    maxImageExtent*: VkExtent2D
    maxImageArrayLayers*: uint32
    supportedTransforms*: VkSurfaceTransformFlagsKHR
    currentTransform*: VkSurfaceTransformFlagBitsKHR
    supportedCompositeAlpha*: VkCompositeAlphaFlagsKHR
    supportedUsageFlags*: VkImageUsageFlags
    supportedSurfaceCounters*: VkSurfaceCounterFlagsEXT

  VkDisplayPowerInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    powerState*: VkDisplayPowerStateEXT

  VkDeviceEventInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    deviceEvent*: VkDeviceEventTypeEXT

  VkDisplayEventInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    displayEvent*: VkDisplayEventTypeEXT

  VkSwapchainCounterCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    surfaceCounters*: VkSurfaceCounterFlagsEXT

  VkPhysicalDeviceGroupProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    physicalDeviceCount*: uint32
    physicalDevices*: array[VK_MAX_DEVICE_GROUP_SIZE, VkPhysicalDevice]
    subsetAllocation*: VkBool32

  VkPhysicalDeviceGroupPropertiesKHR* = VkPhysicalDeviceGroupProperties

  VkMemoryAllocateFlagsInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkMemoryAllocateFlags
    deviceMask*: uint32

  VkMemoryAllocateFlagsInfoKHR* = VkMemoryAllocateFlagsInfo

  VkBindBufferMemoryInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    buffer*: VkBuffer
    memory*: VkDeviceMemory
    memoryOffset*: VkDeviceSize

  VkBindBufferMemoryInfoKHR* = VkBindBufferMemoryInfo

  VkBindBufferMemoryDeviceGroupInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    deviceIndexCount*: uint32
    pDeviceIndices*: ptr uint32

  VkBindBufferMemoryDeviceGroupInfoKHR* = VkBindBufferMemoryDeviceGroupInfo

  VkBindImageMemoryInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    image*: VkImage
    memory*: VkDeviceMemory
    memoryOffset*: VkDeviceSize

  VkBindImageMemoryInfoKHR* = VkBindImageMemoryInfo

  VkBindImageMemoryDeviceGroupInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    deviceIndexCount*: uint32
    pDeviceIndices*: ptr uint32
    splitInstanceBindRegionCount*: uint32
    pSplitInstanceBindRegions*: ptr VkRect2D

  VkBindImageMemoryDeviceGroupInfoKHR* = VkBindImageMemoryDeviceGroupInfo

  VkDeviceGroupRenderPassBeginInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    deviceMask*: uint32
    deviceRenderAreaCount*: uint32
    pDeviceRenderAreas*: ptr VkRect2D

  VkDeviceGroupRenderPassBeginInfoKHR* = VkDeviceGroupRenderPassBeginInfo

  VkDeviceGroupCommandBufferBeginInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    deviceMask*: uint32

  VkDeviceGroupCommandBufferBeginInfoKHR* = VkDeviceGroupCommandBufferBeginInfo

  VkDeviceGroupSubmitInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    waitSemaphoreCount*: uint32
    pWaitSemaphoreDeviceIndices*: ptr uint32
    commandBufferCount*: uint32
    pCommandBufferDeviceMasks*: ptr uint32
    signalSemaphoreCount*: uint32
    pSignalSemaphoreDeviceIndices*: ptr uint32

  VkDeviceGroupSubmitInfoKHR* = VkDeviceGroupSubmitInfo

  VkDeviceGroupBindSparseInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    resourceDeviceIndex*: uint32
    memoryDeviceIndex*: uint32

  VkDeviceGroupBindSparseInfoKHR* = VkDeviceGroupBindSparseInfo

  VkDeviceGroupPresentCapabilitiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    presentMask*: array[VK_MAX_DEVICE_GROUP_SIZE, uint32]
    modes*: VkDeviceGroupPresentModeFlagsKHR

  VkImageSwapchainCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    swapchain*: VkSwapchainKHR

  VkBindImageMemorySwapchainInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    swapchain*: VkSwapchainKHR
    imageIndex*: uint32

  VkAcquireNextImageInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    swapchain*: VkSwapchainKHR
    timeout*: uint64
    semaphore*: VkSemaphore
    fence*: VkFence
    deviceMask*: uint32

  VkDeviceGroupPresentInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    swapchainCount*: uint32
    pDeviceMasks*: ptr uint32
    mode*: VkDeviceGroupPresentModeFlagBitsKHR

  VkDeviceGroupDeviceCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    physicalDeviceCount*: uint32
    pPhysicalDevices*: ptr VkPhysicalDevice

  VkDeviceGroupDeviceCreateInfoKHR* = VkDeviceGroupDeviceCreateInfo

  VkDeviceGroupSwapchainCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    modes*: VkDeviceGroupPresentModeFlagsKHR

  VkDescriptorUpdateTemplateEntry* = object
    dstBinding*: uint32
    dstArrayElement*: uint32
    descriptorCount*: uint32
    descriptorType*: VkDescriptorType
    offset*: uint
    stride*: uint

  VkDescriptorUpdateTemplateEntryKHR* = VkDescriptorUpdateTemplateEntry

  VkDescriptorUpdateTemplateCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDescriptorUpdateTemplateCreateFlags
    descriptorUpdateEntryCount*: uint32
    pDescriptorUpdateEntries*: ptr VkDescriptorUpdateTemplateEntry
    templateType*: VkDescriptorUpdateTemplateType
    descriptorSetLayout*: VkDescriptorSetLayout
    pipelineBindPoint*: VkPipelineBindPoint
    pipelineLayout*: VkPipelineLayout
    set*: uint32

  VkDescriptorUpdateTemplateCreateInfoKHR* = VkDescriptorUpdateTemplateCreateInfo

  VkXYColorEXT* = object
    x*: float32
    y*: float32

  VkPhysicalDevicePresentIdFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    presentId*: VkBool32

  VkPresentIdKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    swapchainCount*: uint32
    pPresentIds*: ptr uint64

  VkPhysicalDevicePresentWaitFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    presentWait*: VkBool32

  VkHdrMetadataEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    displayPrimaryRed*: VkXYColorEXT
    displayPrimaryGreen*: VkXYColorEXT
    displayPrimaryBlue*: VkXYColorEXT
    whitePoint*: VkXYColorEXT
    maxLuminance*: float32
    minLuminance*: float32
    maxContentLightLevel*: float32
    maxFrameAverageLightLevel*: float32

  VkDisplayNativeHdrSurfaceCapabilitiesAMD* = object
    sType*: VkStructureType
    pNext*: pointer
    localDimmingSupport*: VkBool32

  VkSwapchainDisplayNativeHdrCreateInfoAMD* = object
    sType*: VkStructureType
    pNext*: pointer
    localDimmingEnable*: VkBool32

  VkRefreshCycleDurationGOOGLE* = object
    refreshDuration*: uint64

  VkPastPresentationTimingGOOGLE* = object
    presentID*: uint32
    desiredPresentTime*: uint64
    actualPresentTime*: uint64
    earliestPresentTime*: uint64
    presentMargin*: uint64

  VkPresentTimesInfoGOOGLE* = object
    sType*: VkStructureType
    pNext*: pointer
    swapchainCount*: uint32
    pTimes*: ptr VkPresentTimeGOOGLE

  VkPresentTimeGOOGLE* = object
    presentID*: uint32
    desiredPresentTime*: uint64

  VkIOSSurfaceCreateInfoMVK* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkIOSSurfaceCreateFlagsMVK
    pView*: pointer

  VkMacOSSurfaceCreateInfoMVK* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkMacOSSurfaceCreateFlagsMVK
    pView*: pointer

  VkMetalSurfaceCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkMetalSurfaceCreateFlagsEXT
    pLayer*: ptr CAMetalLayer

  VkViewportWScalingNV* = object
    xcoeff*: float32
    ycoeff*: float32

  VkPipelineViewportWScalingStateCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    viewportWScalingEnable*: VkBool32
    viewportCount*: uint32
    pViewportWScalings*: ptr VkViewportWScalingNV

  VkViewportSwizzleNV* = object
    x*: VkViewportCoordinateSwizzleNV
    y*: VkViewportCoordinateSwizzleNV
    z*: VkViewportCoordinateSwizzleNV
    w*: VkViewportCoordinateSwizzleNV

  VkPipelineViewportSwizzleStateCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineViewportSwizzleStateCreateFlagsNV
    viewportCount*: uint32
    pViewportSwizzles*: ptr VkViewportSwizzleNV

  VkPhysicalDeviceDiscardRectanglePropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    maxDiscardRectangles*: uint32

  VkPipelineDiscardRectangleStateCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineDiscardRectangleStateCreateFlagsEXT
    discardRectangleMode*: VkDiscardRectangleModeEXT
    discardRectangleCount*: uint32
    pDiscardRectangles*: ptr VkRect2D

  VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX* = object
    sType*: VkStructureType
    pNext*: pointer
    perViewPositionAllComponents*: VkBool32

  VkInputAttachmentAspectReference* = object
    subpass*: uint32
    inputAttachmentIndex*: uint32
    aspectMask*: VkImageAspectFlags

  VkInputAttachmentAspectReferenceKHR* = VkInputAttachmentAspectReference

  VkRenderPassInputAttachmentAspectCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    aspectReferenceCount*: uint32
    pAspectReferences*: ptr VkInputAttachmentAspectReference

  VkRenderPassInputAttachmentAspectCreateInfoKHR* = VkRenderPassInputAttachmentAspectCreateInfo

  VkPhysicalDeviceSurfaceInfo2KHR* = object
    sType*: VkStructureType
    pNext*: pointer
    surface*: VkSurfaceKHR

  VkSurfaceCapabilities2KHR* = object
    sType*: VkStructureType
    pNext*: pointer
    surfaceCapabilities*: VkSurfaceCapabilitiesKHR

  VkSurfaceFormat2KHR* = object
    sType*: VkStructureType
    pNext*: pointer
    surfaceFormat*: VkSurfaceFormatKHR

  VkDisplayProperties2KHR* = object
    sType*: VkStructureType
    pNext*: pointer
    displayProperties*: VkDisplayPropertiesKHR

  VkDisplayPlaneProperties2KHR* = object
    sType*: VkStructureType
    pNext*: pointer
    displayPlaneProperties*: VkDisplayPlanePropertiesKHR

  VkDisplayModeProperties2KHR* = object
    sType*: VkStructureType
    pNext*: pointer
    displayModeProperties*: VkDisplayModePropertiesKHR

  VkDisplayPlaneInfo2KHR* = object
    sType*: VkStructureType
    pNext*: pointer
    mode*: VkDisplayModeKHR
    planeIndex*: uint32

  VkDisplayPlaneCapabilities2KHR* = object
    sType*: VkStructureType
    pNext*: pointer
    capabilities*: VkDisplayPlaneCapabilitiesKHR

  VkSharedPresentSurfaceCapabilitiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    sharedPresentSupportedUsageFlags*: VkImageUsageFlags

  VkPhysicalDevice16BitStorageFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    storageBuffer16BitAccess*: VkBool32
    uniformAndStorageBuffer16BitAccess*: VkBool32
    storagePushConstant16*: VkBool32
    storageInputOutput16*: VkBool32

  VkPhysicalDevice16BitStorageFeaturesKHR* = VkPhysicalDevice16BitStorageFeatures

  VkPhysicalDeviceSubgroupProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    subgroupSize*: uint32
    supportedStages*: VkShaderStageFlags
    supportedOperations*: VkSubgroupFeatureFlags
    quadOperationsInAllStages*: VkBool32

  VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderSubgroupExtendedTypes*: VkBool32

  VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR* = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures

  VkBufferMemoryRequirementsInfo2* = object
    sType*: VkStructureType
    pNext*: pointer
    buffer*: VkBuffer

  VkBufferMemoryRequirementsInfo2KHR* = VkBufferMemoryRequirementsInfo2

  VkDeviceBufferMemoryRequirements* = object
    sType*: VkStructureType
    pNext*: pointer
    pCreateInfo*: ptr VkBufferCreateInfo

  VkDeviceBufferMemoryRequirementsKHR* = VkDeviceBufferMemoryRequirements

  VkImageMemoryRequirementsInfo2* = object
    sType*: VkStructureType
    pNext*: pointer
    image*: VkImage

  VkImageMemoryRequirementsInfo2KHR* = VkImageMemoryRequirementsInfo2

  VkImageSparseMemoryRequirementsInfo2* = object
    sType*: VkStructureType
    pNext*: pointer
    image*: VkImage

  VkImageSparseMemoryRequirementsInfo2KHR* = VkImageSparseMemoryRequirementsInfo2

  VkDeviceImageMemoryRequirements* = object
    sType*: VkStructureType
    pNext*: pointer
    pCreateInfo*: ptr VkImageCreateInfo
    planeAspect*: VkImageAspectFlagBits

  VkDeviceImageMemoryRequirementsKHR* = VkDeviceImageMemoryRequirements

  VkMemoryRequirements2* = object
    sType*: VkStructureType
    pNext*: pointer
    memoryRequirements*: VkMemoryRequirements

  VkMemoryRequirements2KHR* = VkMemoryRequirements2

  VkSparseImageMemoryRequirements2* = object
    sType*: VkStructureType
    pNext*: pointer
    memoryRequirements*: VkSparseImageMemoryRequirements

  VkSparseImageMemoryRequirements2KHR* = VkSparseImageMemoryRequirements2

  VkPhysicalDevicePointClippingProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    pointClippingBehavior*: VkPointClippingBehavior

  VkPhysicalDevicePointClippingPropertiesKHR* = VkPhysicalDevicePointClippingProperties

  VkMemoryDedicatedRequirements* = object
    sType*: VkStructureType
    pNext*: pointer
    prefersDedicatedAllocation*: VkBool32
    requiresDedicatedAllocation*: VkBool32

  VkMemoryDedicatedRequirementsKHR* = VkMemoryDedicatedRequirements

  VkMemoryDedicatedAllocateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    image*: VkImage
    buffer*: VkBuffer

  VkMemoryDedicatedAllocateInfoKHR* = VkMemoryDedicatedAllocateInfo

  VkImageViewUsageCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    usage*: VkImageUsageFlags

  VkImageViewSlicedCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    sliceOffset*: uint32
    sliceCount*: uint32

  VkImageViewUsageCreateInfoKHR* = VkImageViewUsageCreateInfo

  VkPipelineTessellationDomainOriginStateCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    domainOrigin*: VkTessellationDomainOrigin

  VkPipelineTessellationDomainOriginStateCreateInfoKHR* = VkPipelineTessellationDomainOriginStateCreateInfo

  VkSamplerYcbcrConversionInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    conversion*: VkSamplerYcbcrConversion

  VkSamplerYcbcrConversionInfoKHR* = VkSamplerYcbcrConversionInfo

  VkSamplerYcbcrConversionCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    format*: VkFormat
    ycbcrModel*: VkSamplerYcbcrModelConversion
    ycbcrRange*: VkSamplerYcbcrRange
    components*: VkComponentMapping
    xChromaOffset*: VkChromaLocation
    yChromaOffset*: VkChromaLocation
    chromaFilter*: VkFilter
    forceExplicitReconstruction*: VkBool32

  VkSamplerYcbcrConversionCreateInfoKHR* = VkSamplerYcbcrConversionCreateInfo

  VkBindImagePlaneMemoryInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    planeAspect*: VkImageAspectFlagBits

  VkBindImagePlaneMemoryInfoKHR* = VkBindImagePlaneMemoryInfo

  VkImagePlaneMemoryRequirementsInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    planeAspect*: VkImageAspectFlagBits

  VkImagePlaneMemoryRequirementsInfoKHR* = VkImagePlaneMemoryRequirementsInfo

  VkPhysicalDeviceSamplerYcbcrConversionFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    samplerYcbcrConversion*: VkBool32

  VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR* = VkPhysicalDeviceSamplerYcbcrConversionFeatures

  VkSamplerYcbcrConversionImageFormatProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    combinedImageSamplerDescriptorCount*: uint32

  VkSamplerYcbcrConversionImageFormatPropertiesKHR* = VkSamplerYcbcrConversionImageFormatProperties

  VkTextureLODGatherFormatPropertiesAMD* = object
    sType*: VkStructureType
    pNext*: pointer
    supportsTextureGatherLODBiasAMD*: VkBool32

  VkConditionalRenderingBeginInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    buffer*: VkBuffer
    offset*: VkDeviceSize
    flags*: VkConditionalRenderingFlagsEXT

  VkProtectedSubmitInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    protectedSubmit*: VkBool32

  VkPhysicalDeviceProtectedMemoryFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    protectedMemory*: VkBool32

  VkPhysicalDeviceProtectedMemoryProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    protectedNoFault*: VkBool32

  VkDeviceQueueInfo2* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDeviceQueueCreateFlags
    queueFamilyIndex*: uint32
    queueIndex*: uint32

  VkPipelineCoverageToColorStateCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineCoverageToColorStateCreateFlagsNV
    coverageToColorEnable*: VkBool32
    coverageToColorLocation*: uint32

  VkPhysicalDeviceSamplerFilterMinmaxProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    filterMinmaxSingleComponentFormats*: VkBool32
    filterMinmaxImageComponentMapping*: VkBool32

  VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT* = VkPhysicalDeviceSamplerFilterMinmaxProperties

  VkSampleLocationEXT* = object
    x*: float32
    y*: float32

  VkSampleLocationsInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    sampleLocationsPerPixel*: VkSampleCountFlagBits
    sampleLocationGridSize*: VkExtent2D
    sampleLocationsCount*: uint32
    pSampleLocations*: ptr VkSampleLocationEXT

  VkAttachmentSampleLocationsEXT* = object
    attachmentIndex*: uint32
    sampleLocationsInfo*: VkSampleLocationsInfoEXT

  VkSubpassSampleLocationsEXT* = object
    subpassIndex*: uint32
    sampleLocationsInfo*: VkSampleLocationsInfoEXT

  VkRenderPassSampleLocationsBeginInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    attachmentInitialSampleLocationsCount*: uint32
    pAttachmentInitialSampleLocations*: ptr VkAttachmentSampleLocationsEXT
    postSubpassSampleLocationsCount*: uint32
    pPostSubpassSampleLocations*: ptr VkSubpassSampleLocationsEXT

  VkPipelineSampleLocationsStateCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    sampleLocationsEnable*: VkBool32
    sampleLocationsInfo*: VkSampleLocationsInfoEXT

  VkPhysicalDeviceSampleLocationsPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    sampleLocationSampleCounts*: VkSampleCountFlags
    maxSampleLocationGridSize*: VkExtent2D
    sampleLocationCoordinateRange*: array[2, float32]
    sampleLocationSubPixelBits*: uint32
    variableSampleLocations*: VkBool32

  VkMultisamplePropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    maxSampleLocationGridSize*: VkExtent2D

  VkSamplerReductionModeCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    reductionMode*: VkSamplerReductionMode

  VkSamplerReductionModeCreateInfoEXT* = VkSamplerReductionModeCreateInfo

  VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    advancedBlendCoherentOperations*: VkBool32

  VkPhysicalDeviceMultiDrawFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    multiDraw*: VkBool32

  VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    advancedBlendMaxColorAttachments*: uint32
    advancedBlendIndependentBlend*: VkBool32
    advancedBlendNonPremultipliedSrcColor*: VkBool32
    advancedBlendNonPremultipliedDstColor*: VkBool32
    advancedBlendCorrelatedOverlap*: VkBool32
    advancedBlendAllOperations*: VkBool32

  VkPipelineColorBlendAdvancedStateCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    srcPremultiplied*: VkBool32
    dstPremultiplied*: VkBool32
    blendOverlap*: VkBlendOverlapEXT

  VkPhysicalDeviceInlineUniformBlockFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    inlineUniformBlock*: VkBool32
    descriptorBindingInlineUniformBlockUpdateAfterBind*: VkBool32

  VkPhysicalDeviceInlineUniformBlockFeaturesEXT* = VkPhysicalDeviceInlineUniformBlockFeatures

  VkPhysicalDeviceInlineUniformBlockProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    maxInlineUniformBlockSize*: uint32
    maxPerStageDescriptorInlineUniformBlocks*: uint32
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks*: uint32
    maxDescriptorSetInlineUniformBlocks*: uint32
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks*: uint32

  VkPhysicalDeviceInlineUniformBlockPropertiesEXT* = VkPhysicalDeviceInlineUniformBlockProperties

  VkWriteDescriptorSetInlineUniformBlock* = object
    sType*: VkStructureType
    pNext*: pointer
    dataSize*: uint32
    pData*: pointer

  VkWriteDescriptorSetInlineUniformBlockEXT* = VkWriteDescriptorSetInlineUniformBlock

  VkDescriptorPoolInlineUniformBlockCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    maxInlineUniformBlockBindings*: uint32

  VkDescriptorPoolInlineUniformBlockCreateInfoEXT* = VkDescriptorPoolInlineUniformBlockCreateInfo

  VkPipelineCoverageModulationStateCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineCoverageModulationStateCreateFlagsNV
    coverageModulationMode*: VkCoverageModulationModeNV
    coverageModulationTableEnable*: VkBool32
    coverageModulationTableCount*: uint32
    pCoverageModulationTable*: ptr float32

  VkImageFormatListCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    viewFormatCount*: uint32
    pViewFormats*: ptr VkFormat

  VkImageFormatListCreateInfoKHR* = VkImageFormatListCreateInfo

  VkValidationCacheCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkValidationCacheCreateFlagsEXT
    initialDataSize*: uint
    pInitialData*: pointer

  VkShaderModuleValidationCacheCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    validationCache*: VkValidationCacheEXT

  VkPhysicalDeviceMaintenance3Properties* = object
    sType*: VkStructureType
    pNext*: pointer
    maxPerSetDescriptors*: uint32
    maxMemoryAllocationSize*: VkDeviceSize

  VkPhysicalDeviceMaintenance3PropertiesKHR* = VkPhysicalDeviceMaintenance3Properties

  VkPhysicalDeviceMaintenance4Features* = object
    sType*: VkStructureType
    pNext*: pointer
    maintenance4*: VkBool32

  VkPhysicalDeviceMaintenance4FeaturesKHR* = VkPhysicalDeviceMaintenance4Features

  VkPhysicalDeviceMaintenance4Properties* = object
    sType*: VkStructureType
    pNext*: pointer
    maxBufferSize*: VkDeviceSize

  VkPhysicalDeviceMaintenance4PropertiesKHR* = VkPhysicalDeviceMaintenance4Properties

  VkPhysicalDeviceMaintenance5FeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    maintenance5*: VkBool32

  VkPhysicalDeviceMaintenance5PropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    earlyFragmentMultisampleCoverageAfterSampleCounting*: VkBool32
    earlyFragmentSampleMaskTestBeforeSampleCounting*: VkBool32
    depthStencilSwizzleOneSupport*: VkBool32
    polygonModePointSize*: VkBool32
    nonStrictSinglePixelWideLinesUseParallelogram*: VkBool32
    nonStrictWideLinesUseParallelogram*: VkBool32

  VkPhysicalDeviceMaintenance6FeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    maintenance6*: VkBool32

  VkPhysicalDeviceMaintenance6PropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    blockTexelViewCompatibleMultipleLayers*: VkBool32
    maxCombinedImageSamplerDescriptorCount*: uint32
    fragmentShadingRateClampCombinerInputs*: VkBool32

  VkRenderingAreaInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    viewMask*: uint32
    colorAttachmentCount*: uint32
    pColorAttachmentFormats*: ptr VkFormat
    depthAttachmentFormat*: VkFormat
    stencilAttachmentFormat*: VkFormat

  VkDescriptorSetLayoutSupport* = object
    sType*: VkStructureType
    pNext*: pointer
    supported*: VkBool32

  VkDescriptorSetLayoutSupportKHR* = VkDescriptorSetLayoutSupport

  VkPhysicalDeviceShaderDrawParametersFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderDrawParameters*: VkBool32

  VkPhysicalDeviceShaderDrawParameterFeatures* = VkPhysicalDeviceShaderDrawParametersFeatures

  VkPhysicalDeviceShaderFloat16Int8Features* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderFloat16*: VkBool32
    shaderInt8*: VkBool32

  VkPhysicalDeviceShaderFloat16Int8FeaturesKHR* = VkPhysicalDeviceShaderFloat16Int8Features

  VkPhysicalDeviceFloat16Int8FeaturesKHR* = VkPhysicalDeviceShaderFloat16Int8Features

  VkPhysicalDeviceFloatControlsProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    denormBehaviorIndependence*: VkShaderFloatControlsIndependence
    roundingModeIndependence*: VkShaderFloatControlsIndependence
    shaderSignedZeroInfNanPreserveFloat16*: VkBool32
    shaderSignedZeroInfNanPreserveFloat32*: VkBool32
    shaderSignedZeroInfNanPreserveFloat64*: VkBool32
    shaderDenormPreserveFloat16*: VkBool32
    shaderDenormPreserveFloat32*: VkBool32
    shaderDenormPreserveFloat64*: VkBool32
    shaderDenormFlushToZeroFloat16*: VkBool32
    shaderDenormFlushToZeroFloat32*: VkBool32
    shaderDenormFlushToZeroFloat64*: VkBool32
    shaderRoundingModeRTEFloat16*: VkBool32
    shaderRoundingModeRTEFloat32*: VkBool32
    shaderRoundingModeRTEFloat64*: VkBool32
    shaderRoundingModeRTZFloat16*: VkBool32
    shaderRoundingModeRTZFloat32*: VkBool32
    shaderRoundingModeRTZFloat64*: VkBool32

  VkPhysicalDeviceFloatControlsPropertiesKHR* = VkPhysicalDeviceFloatControlsProperties

  VkPhysicalDeviceHostQueryResetFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    hostQueryReset*: VkBool32

  VkPhysicalDeviceHostQueryResetFeaturesEXT* = VkPhysicalDeviceHostQueryResetFeatures

  VkNativeBufferUsage2ANDROID* = object
    consumer*: uint64
    producer*: uint64

  VkNativeBufferANDROID* = object
    sType*: VkStructureType
    pNext*: pointer
    handle*: pointer
    stride*: int
    format*: int
    usage*: int
    usage2*: VkNativeBufferUsage2ANDROID

  VkSwapchainImageCreateInfoANDROID* = object
    sType*: VkStructureType
    pNext*: pointer
    usage*: VkSwapchainImageUsageFlagsANDROID

  VkPhysicalDevicePresentationPropertiesANDROID* = object
    sType*: VkStructureType
    pNext*: pointer
    sharedImage*: VkBool32

  VkShaderResourceUsageAMD* = object
    numUsedVgprs*: uint32
    numUsedSgprs*: uint32
    ldsSizePerLocalWorkGroup*: uint32
    ldsUsageSizeInBytes*: uint
    scratchMemUsageInBytes*: uint

  VkShaderStatisticsInfoAMD* = object
    shaderStageMask*: VkShaderStageFlags
    resourceUsage*: VkShaderResourceUsageAMD
    numPhysicalVgprs*: uint32
    numPhysicalSgprs*: uint32
    numAvailableVgprs*: uint32
    numAvailableSgprs*: uint32
    computeWorkGroupSize*: array[3, uint32]

  VkDeviceQueueGlobalPriorityCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    globalPriority*: VkQueueGlobalPriorityKHR

  VkDeviceQueueGlobalPriorityCreateInfoEXT* = VkDeviceQueueGlobalPriorityCreateInfoKHR

  VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    globalPriorityQuery*: VkBool32

  VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT* = VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR

  VkQueueFamilyGlobalPriorityPropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    priorityCount*: uint32
    priorities*: array[VK_MAX_GLOBAL_PRIORITY_SIZE_KHR, VkQueueGlobalPriorityKHR]

  VkQueueFamilyGlobalPriorityPropertiesEXT* = VkQueueFamilyGlobalPriorityPropertiesKHR

  VkDebugUtilsObjectNameInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    objectType*: VkObjectType
    objectHandle*: uint64
    pObjectName*: cstring

  VkDebugUtilsObjectTagInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    objectType*: VkObjectType
    objectHandle*: uint64
    tagName*: uint64
    tagSize*: uint
    pTag*: pointer

  VkDebugUtilsLabelEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    pLabelName*: cstring
    color*: array[4, float32]

  VkDebugUtilsMessengerCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDebugUtilsMessengerCreateFlagsEXT
    messageSeverity*: VkDebugUtilsMessageSeverityFlagsEXT
    messageType*: VkDebugUtilsMessageTypeFlagsEXT
    pfnUserCallback*: PFN_vkDebugUtilsMessengerCallbackEXT
    pUserData*: pointer

  VkDebugUtilsMessengerCallbackDataEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDebugUtilsMessengerCallbackDataFlagsEXT
    pMessageIdName*: cstring
    messageIdNumber*: int32
    pMessage*: cstring
    queueLabelCount*: uint32
    pQueueLabels*: ptr VkDebugUtilsLabelEXT
    cmdBufLabelCount*: uint32
    pCmdBufLabels*: ptr VkDebugUtilsLabelEXT
    objectCount*: uint32
    pObjects*: ptr VkDebugUtilsObjectNameInfoEXT

  VkPhysicalDeviceDeviceMemoryReportFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    deviceMemoryReport*: VkBool32

  VkDeviceDeviceMemoryReportCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDeviceMemoryReportFlagsEXT
    pfnUserCallback*: PFN_vkDeviceMemoryReportCallbackEXT
    pUserData*: pointer

  VkDeviceMemoryReportCallbackDataEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDeviceMemoryReportFlagsEXT
    `type`*: VkDeviceMemoryReportEventTypeEXT
    memoryObjectId*: uint64
    size*: VkDeviceSize
    objectType*: VkObjectType
    objectHandle*: uint64
    heapIndex*: uint32

  VkImportMemoryHostPointerInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    handleType*: VkExternalMemoryHandleTypeFlagBits
    pHostPointer*: pointer

  VkMemoryHostPointerPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    memoryTypeBits*: uint32

  VkPhysicalDeviceExternalMemoryHostPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    minImportedHostPointerAlignment*: VkDeviceSize

  VkPhysicalDeviceConservativeRasterizationPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    primitiveOverestimationSize*: float32
    maxExtraPrimitiveOverestimationSize*: float32
    extraPrimitiveOverestimationSizeGranularity*: float32
    primitiveUnderestimation*: VkBool32
    conservativePointAndLineRasterization*: VkBool32
    degenerateTrianglesRasterized*: VkBool32
    degenerateLinesRasterized*: VkBool32
    fullyCoveredFragmentShaderInputVariable*: VkBool32
    conservativeRasterizationPostDepthCoverage*: VkBool32

  VkCalibratedTimestampInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    timeDomain*: VkTimeDomainKHR

  VkCalibratedTimestampInfoEXT* = VkCalibratedTimestampInfoKHR

  VkPhysicalDeviceShaderCorePropertiesAMD* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderEngineCount*: uint32
    shaderArraysPerEngineCount*: uint32
    computeUnitsPerShaderArray*: uint32
    simdPerComputeUnit*: uint32
    wavefrontsPerSimd*: uint32
    wavefrontSize*: uint32
    sgprsPerSimd*: uint32
    minSgprAllocation*: uint32
    maxSgprAllocation*: uint32
    sgprAllocationGranularity*: uint32
    vgprsPerSimd*: uint32
    minVgprAllocation*: uint32
    maxVgprAllocation*: uint32
    vgprAllocationGranularity*: uint32

  VkPhysicalDeviceShaderCoreProperties2AMD* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderCoreFeatures*: VkShaderCorePropertiesFlagsAMD
    activeComputeUnitCount*: uint32

  VkPipelineRasterizationConservativeStateCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineRasterizationConservativeStateCreateFlagsEXT
    conservativeRasterizationMode*: VkConservativeRasterizationModeEXT
    extraPrimitiveOverestimationSize*: float32

  VkPhysicalDeviceDescriptorIndexingFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderInputAttachmentArrayDynamicIndexing*: VkBool32
    shaderUniformTexelBufferArrayDynamicIndexing*: VkBool32
    shaderStorageTexelBufferArrayDynamicIndexing*: VkBool32
    shaderUniformBufferArrayNonUniformIndexing*: VkBool32
    shaderSampledImageArrayNonUniformIndexing*: VkBool32
    shaderStorageBufferArrayNonUniformIndexing*: VkBool32
    shaderStorageImageArrayNonUniformIndexing*: VkBool32
    shaderInputAttachmentArrayNonUniformIndexing*: VkBool32
    shaderUniformTexelBufferArrayNonUniformIndexing*: VkBool32
    shaderStorageTexelBufferArrayNonUniformIndexing*: VkBool32
    descriptorBindingUniformBufferUpdateAfterBind*: VkBool32
    descriptorBindingSampledImageUpdateAfterBind*: VkBool32
    descriptorBindingStorageImageUpdateAfterBind*: VkBool32
    descriptorBindingStorageBufferUpdateAfterBind*: VkBool32
    descriptorBindingUniformTexelBufferUpdateAfterBind*: VkBool32
    descriptorBindingStorageTexelBufferUpdateAfterBind*: VkBool32
    descriptorBindingUpdateUnusedWhilePending*: VkBool32
    descriptorBindingPartiallyBound*: VkBool32
    descriptorBindingVariableDescriptorCount*: VkBool32
    runtimeDescriptorArray*: VkBool32

  VkPhysicalDeviceDescriptorIndexingFeaturesEXT* = VkPhysicalDeviceDescriptorIndexingFeatures

  VkPhysicalDeviceDescriptorIndexingProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    maxUpdateAfterBindDescriptorsInAllPools*: uint32
    shaderUniformBufferArrayNonUniformIndexingNative*: VkBool32
    shaderSampledImageArrayNonUniformIndexingNative*: VkBool32
    shaderStorageBufferArrayNonUniformIndexingNative*: VkBool32
    shaderStorageImageArrayNonUniformIndexingNative*: VkBool32
    shaderInputAttachmentArrayNonUniformIndexingNative*: VkBool32
    robustBufferAccessUpdateAfterBind*: VkBool32
    quadDivergentImplicitLod*: VkBool32
    maxPerStageDescriptorUpdateAfterBindSamplers*: uint32
    maxPerStageDescriptorUpdateAfterBindUniformBuffers*: uint32
    maxPerStageDescriptorUpdateAfterBindStorageBuffers*: uint32
    maxPerStageDescriptorUpdateAfterBindSampledImages*: uint32
    maxPerStageDescriptorUpdateAfterBindStorageImages*: uint32
    maxPerStageDescriptorUpdateAfterBindInputAttachments*: uint32
    maxPerStageUpdateAfterBindResources*: uint32
    maxDescriptorSetUpdateAfterBindSamplers*: uint32
    maxDescriptorSetUpdateAfterBindUniformBuffers*: uint32
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic*: uint32
    maxDescriptorSetUpdateAfterBindStorageBuffers*: uint32
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic*: uint32
    maxDescriptorSetUpdateAfterBindSampledImages*: uint32
    maxDescriptorSetUpdateAfterBindStorageImages*: uint32
    maxDescriptorSetUpdateAfterBindInputAttachments*: uint32

  VkPhysicalDeviceDescriptorIndexingPropertiesEXT* = VkPhysicalDeviceDescriptorIndexingProperties

  VkDescriptorSetLayoutBindingFlagsCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    bindingCount*: uint32
    pBindingFlags*: ptr VkDescriptorBindingFlags

  VkDescriptorSetLayoutBindingFlagsCreateInfoEXT* = VkDescriptorSetLayoutBindingFlagsCreateInfo

  VkDescriptorSetVariableDescriptorCountAllocateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    descriptorSetCount*: uint32
    pDescriptorCounts*: ptr uint32

  VkDescriptorSetVariableDescriptorCountAllocateInfoEXT* = VkDescriptorSetVariableDescriptorCountAllocateInfo

  VkDescriptorSetVariableDescriptorCountLayoutSupport* = object
    sType*: VkStructureType
    pNext*: pointer
    maxVariableDescriptorCount*: uint32

  VkDescriptorSetVariableDescriptorCountLayoutSupportEXT* = VkDescriptorSetVariableDescriptorCountLayoutSupport

  VkAttachmentDescription2* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkAttachmentDescriptionFlags
    format*: VkFormat
    samples*: VkSampleCountFlagBits
    loadOp*: VkAttachmentLoadOp
    storeOp*: VkAttachmentStoreOp
    stencilLoadOp*: VkAttachmentLoadOp
    stencilStoreOp*: VkAttachmentStoreOp
    initialLayout*: VkImageLayout
    finalLayout*: VkImageLayout

  VkAttachmentDescription2KHR* = VkAttachmentDescription2

  VkAttachmentReference2* = object
    sType*: VkStructureType
    pNext*: pointer
    attachment*: uint32
    layout*: VkImageLayout
    aspectMask*: VkImageAspectFlags

  VkAttachmentReference2KHR* = VkAttachmentReference2

  VkSubpassDescription2* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkSubpassDescriptionFlags
    pipelineBindPoint*: VkPipelineBindPoint
    viewMask*: uint32
    inputAttachmentCount*: uint32
    pInputAttachments*: ptr VkAttachmentReference2
    colorAttachmentCount*: uint32
    pColorAttachments*: ptr VkAttachmentReference2
    pResolveAttachments*: ptr VkAttachmentReference2
    pDepthStencilAttachment*: ptr VkAttachmentReference2
    preserveAttachmentCount*: uint32
    pPreserveAttachments*: ptr uint32

  VkSubpassDescription2KHR* = VkSubpassDescription2

  VkSubpassDependency2* = object
    sType*: VkStructureType
    pNext*: pointer
    srcSubpass*: uint32
    dstSubpass*: uint32
    srcStageMask*: VkPipelineStageFlags
    dstStageMask*: VkPipelineStageFlags
    srcAccessMask*: VkAccessFlags
    dstAccessMask*: VkAccessFlags
    dependencyFlags*: VkDependencyFlags
    viewOffset*: int32

  VkSubpassDependency2KHR* = VkSubpassDependency2

  VkRenderPassCreateInfo2* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkRenderPassCreateFlags
    attachmentCount*: uint32
    pAttachments*: ptr VkAttachmentDescription2
    subpassCount*: uint32
    pSubpasses*: ptr VkSubpassDescription2
    dependencyCount*: uint32
    pDependencies*: ptr VkSubpassDependency2
    correlatedViewMaskCount*: uint32
    pCorrelatedViewMasks*: ptr uint32

  VkRenderPassCreateInfo2KHR* = VkRenderPassCreateInfo2

  VkSubpassBeginInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    contents*: VkSubpassContents

  VkSubpassBeginInfoKHR* = VkSubpassBeginInfo

  VkSubpassEndInfo* = object
    sType*: VkStructureType
    pNext*: pointer

  VkSubpassEndInfoKHR* = VkSubpassEndInfo

  VkPhysicalDeviceTimelineSemaphoreFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    timelineSemaphore*: VkBool32

  VkPhysicalDeviceTimelineSemaphoreFeaturesKHR* = VkPhysicalDeviceTimelineSemaphoreFeatures

  VkPhysicalDeviceTimelineSemaphoreProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    maxTimelineSemaphoreValueDifference*: uint64

  VkPhysicalDeviceTimelineSemaphorePropertiesKHR* = VkPhysicalDeviceTimelineSemaphoreProperties

  VkSemaphoreTypeCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    semaphoreType*: VkSemaphoreType
    initialValue*: uint64

  VkSemaphoreTypeCreateInfoKHR* = VkSemaphoreTypeCreateInfo

  VkTimelineSemaphoreSubmitInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    waitSemaphoreValueCount*: uint32
    pWaitSemaphoreValues*: ptr uint64
    signalSemaphoreValueCount*: uint32
    pSignalSemaphoreValues*: ptr uint64

  VkTimelineSemaphoreSubmitInfoKHR* = VkTimelineSemaphoreSubmitInfo

  VkSemaphoreWaitInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkSemaphoreWaitFlags
    semaphoreCount*: uint32
    pSemaphores*: ptr VkSemaphore
    pValues*: ptr uint64

  VkSemaphoreWaitInfoKHR* = VkSemaphoreWaitInfo

  VkSemaphoreSignalInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    semaphore*: VkSemaphore
    value*: uint64

  VkSemaphoreSignalInfoKHR* = VkSemaphoreSignalInfo

  VkVertexInputBindingDivisorDescriptionKHR* = object
    binding*: uint32
    divisor*: uint32

  VkVertexInputBindingDivisorDescriptionEXT* = VkVertexInputBindingDivisorDescriptionKHR

  VkPipelineVertexInputDivisorStateCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    vertexBindingDivisorCount*: uint32
    pVertexBindingDivisors*: ptr VkVertexInputBindingDivisorDescriptionKHR

  VkPipelineVertexInputDivisorStateCreateInfoEXT* = VkPipelineVertexInputDivisorStateCreateInfoKHR

  VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    maxVertexAttribDivisor*: uint32

  VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    maxVertexAttribDivisor*: uint32
    supportsNonZeroFirstInstance*: VkBool32

  VkPhysicalDevicePCIBusInfoPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    pciDomain*: uint32
    pciBus*: uint32
    pciDevice*: uint32
    pciFunction*: uint32

  VkImportAndroidHardwareBufferInfoANDROID* = object
    sType*: VkStructureType
    pNext*: pointer
    buffer*: ptr AHardwareBuffer

  VkAndroidHardwareBufferUsageANDROID* = object
    sType*: VkStructureType
    pNext*: pointer
    androidHardwareBufferUsage*: uint64

  VkAndroidHardwareBufferPropertiesANDROID* = object
    sType*: VkStructureType
    pNext*: pointer
    allocationSize*: VkDeviceSize
    memoryTypeBits*: uint32

  VkMemoryGetAndroidHardwareBufferInfoANDROID* = object
    sType*: VkStructureType
    pNext*: pointer
    memory*: VkDeviceMemory

  VkAndroidHardwareBufferFormatPropertiesANDROID* = object
    sType*: VkStructureType
    pNext*: pointer
    format*: VkFormat
    externalFormat*: uint64
    formatFeatures*: VkFormatFeatureFlags
    samplerYcbcrConversionComponents*: VkComponentMapping
    suggestedYcbcrModel*: VkSamplerYcbcrModelConversion
    suggestedYcbcrRange*: VkSamplerYcbcrRange
    suggestedXChromaOffset*: VkChromaLocation
    suggestedYChromaOffset*: VkChromaLocation

  VkCommandBufferInheritanceConditionalRenderingInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    conditionalRenderingEnable*: VkBool32

  VkExternalFormatANDROID* = object
    sType*: VkStructureType
    pNext*: pointer
    externalFormat*: uint64

  VkPhysicalDevice8BitStorageFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    storageBuffer8BitAccess*: VkBool32
    uniformAndStorageBuffer8BitAccess*: VkBool32
    storagePushConstant8*: VkBool32

  VkPhysicalDevice8BitStorageFeaturesKHR* = VkPhysicalDevice8BitStorageFeatures

  VkPhysicalDeviceConditionalRenderingFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    conditionalRendering*: VkBool32
    inheritedConditionalRendering*: VkBool32

  VkPhysicalDeviceVulkanMemoryModelFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    vulkanMemoryModel*: VkBool32
    vulkanMemoryModelDeviceScope*: VkBool32
    vulkanMemoryModelAvailabilityVisibilityChains*: VkBool32

  VkPhysicalDeviceVulkanMemoryModelFeaturesKHR* = VkPhysicalDeviceVulkanMemoryModelFeatures

  VkPhysicalDeviceShaderAtomicInt64Features* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderBufferInt64Atomics*: VkBool32
    shaderSharedInt64Atomics*: VkBool32

  VkPhysicalDeviceShaderAtomicInt64FeaturesKHR* = VkPhysicalDeviceShaderAtomicInt64Features

  VkPhysicalDeviceShaderAtomicFloatFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderBufferFloat32Atomics*: VkBool32
    shaderBufferFloat32AtomicAdd*: VkBool32
    shaderBufferFloat64Atomics*: VkBool32
    shaderBufferFloat64AtomicAdd*: VkBool32
    shaderSharedFloat32Atomics*: VkBool32
    shaderSharedFloat32AtomicAdd*: VkBool32
    shaderSharedFloat64Atomics*: VkBool32
    shaderSharedFloat64AtomicAdd*: VkBool32
    shaderImageFloat32Atomics*: VkBool32
    shaderImageFloat32AtomicAdd*: VkBool32
    sparseImageFloat32Atomics*: VkBool32
    sparseImageFloat32AtomicAdd*: VkBool32

  VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderBufferFloat16Atomics*: VkBool32
    shaderBufferFloat16AtomicAdd*: VkBool32
    shaderBufferFloat16AtomicMinMax*: VkBool32
    shaderBufferFloat32AtomicMinMax*: VkBool32
    shaderBufferFloat64AtomicMinMax*: VkBool32
    shaderSharedFloat16Atomics*: VkBool32
    shaderSharedFloat16AtomicAdd*: VkBool32
    shaderSharedFloat16AtomicMinMax*: VkBool32
    shaderSharedFloat32AtomicMinMax*: VkBool32
    shaderSharedFloat64AtomicMinMax*: VkBool32
    shaderImageFloat32AtomicMinMax*: VkBool32
    sparseImageFloat32AtomicMinMax*: VkBool32

  VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    vertexAttributeInstanceRateDivisor*: VkBool32
    vertexAttributeInstanceRateZeroDivisor*: VkBool32

  VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT* = VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR

  VkQueueFamilyCheckpointPropertiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    checkpointExecutionStageMask*: VkPipelineStageFlags

  VkCheckpointDataNV* = object
    sType*: VkStructureType
    pNext*: pointer
    stage*: VkPipelineStageFlagBits
    pCheckpointMarker*: pointer

  VkPhysicalDeviceDepthStencilResolveProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    supportedDepthResolveModes*: VkResolveModeFlags
    supportedStencilResolveModes*: VkResolveModeFlags
    independentResolveNone*: VkBool32
    independentResolve*: VkBool32

  VkPhysicalDeviceDepthStencilResolvePropertiesKHR* = VkPhysicalDeviceDepthStencilResolveProperties

  VkSubpassDescriptionDepthStencilResolve* = object
    sType*: VkStructureType
    pNext*: pointer
    depthResolveMode*: VkResolveModeFlagBits
    stencilResolveMode*: VkResolveModeFlagBits
    pDepthStencilResolveAttachment*: ptr VkAttachmentReference2

  VkSubpassDescriptionDepthStencilResolveKHR* = VkSubpassDescriptionDepthStencilResolve

  VkImageViewASTCDecodeModeEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    decodeMode*: VkFormat

  VkPhysicalDeviceASTCDecodeFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    decodeModeSharedExponent*: VkBool32

  VkPhysicalDeviceTransformFeedbackFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    transformFeedback*: VkBool32
    geometryStreams*: VkBool32

  VkPhysicalDeviceTransformFeedbackPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    maxTransformFeedbackStreams*: uint32
    maxTransformFeedbackBuffers*: uint32
    maxTransformFeedbackBufferSize*: VkDeviceSize
    maxTransformFeedbackStreamDataSize*: uint32
    maxTransformFeedbackBufferDataSize*: uint32
    maxTransformFeedbackBufferDataStride*: uint32
    transformFeedbackQueries*: VkBool32
    transformFeedbackStreamsLinesTriangles*: VkBool32
    transformFeedbackRasterizationStreamSelect*: VkBool32
    transformFeedbackDraw*: VkBool32

  VkPipelineRasterizationStateStreamCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineRasterizationStateStreamCreateFlagsEXT
    rasterizationStream*: uint32

  VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    representativeFragmentTest*: VkBool32

  VkPipelineRepresentativeFragmentTestStateCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    representativeFragmentTestEnable*: VkBool32

  VkPhysicalDeviceExclusiveScissorFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    exclusiveScissor*: VkBool32

  VkPipelineViewportExclusiveScissorStateCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    exclusiveScissorCount*: uint32
    pExclusiveScissors*: ptr VkRect2D

  VkPhysicalDeviceCornerSampledImageFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    cornerSampledImage*: VkBool32

  VkPhysicalDeviceComputeShaderDerivativesFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    computeDerivativeGroupQuads*: VkBool32
    computeDerivativeGroupLinear*: VkBool32

  VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV* = VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR

  VkPhysicalDeviceShaderImageFootprintFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    imageFootprint*: VkBool32

  VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    dedicatedAllocationImageAliasing*: VkBool32

  VkPhysicalDeviceCopyMemoryIndirectFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    indirectCopy*: VkBool32

  VkPhysicalDeviceCopyMemoryIndirectPropertiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    supportedQueues*: VkQueueFlags

  VkPhysicalDeviceMemoryDecompressionFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    memoryDecompression*: VkBool32

  VkPhysicalDeviceMemoryDecompressionPropertiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    decompressionMethods*: VkMemoryDecompressionMethodFlagsNV
    maxDecompressionIndirectCount*: uint64

  VkShadingRatePaletteNV* = object
    shadingRatePaletteEntryCount*: uint32
    pShadingRatePaletteEntries*: ptr VkShadingRatePaletteEntryNV

  VkPipelineViewportShadingRateImageStateCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    shadingRateImageEnable*: VkBool32
    viewportCount*: uint32
    pShadingRatePalettes*: ptr VkShadingRatePaletteNV

  VkPhysicalDeviceShadingRateImageFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    shadingRateImage*: VkBool32
    shadingRateCoarseSampleOrder*: VkBool32

  VkPhysicalDeviceShadingRateImagePropertiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    shadingRateTexelSize*: VkExtent2D
    shadingRatePaletteSize*: uint32
    shadingRateMaxCoarseSamples*: uint32

  VkPhysicalDeviceInvocationMaskFeaturesHUAWEI* = object
    sType*: VkStructureType
    pNext*: pointer
    invocationMask*: VkBool32

  VkCoarseSampleLocationNV* = object
    pixelX*: uint32
    pixelY*: uint32
    sample*: uint32

  VkCoarseSampleOrderCustomNV* = object
    shadingRate*: VkShadingRatePaletteEntryNV
    sampleCount*: uint32
    sampleLocationCount*: uint32
    pSampleLocations*: ptr VkCoarseSampleLocationNV

  VkPipelineViewportCoarseSampleOrderStateCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    sampleOrderType*: VkCoarseSampleOrderTypeNV
    customSampleOrderCount*: uint32
    pCustomSampleOrders*: ptr VkCoarseSampleOrderCustomNV

  VkPhysicalDeviceMeshShaderFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    taskShader*: VkBool32
    meshShader*: VkBool32

  VkPhysicalDeviceMeshShaderPropertiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    maxDrawMeshTasksCount*: uint32
    maxTaskWorkGroupInvocations*: uint32
    maxTaskWorkGroupSize*: array[3, uint32]
    maxTaskTotalMemorySize*: uint32
    maxTaskOutputCount*: uint32
    maxMeshWorkGroupInvocations*: uint32
    maxMeshWorkGroupSize*: array[3, uint32]
    maxMeshTotalMemorySize*: uint32
    maxMeshOutputVertices*: uint32
    maxMeshOutputPrimitives*: uint32
    maxMeshMultiviewViewCount*: uint32
    meshOutputPerVertexGranularity*: uint32
    meshOutputPerPrimitiveGranularity*: uint32

  VkDrawMeshTasksIndirectCommandNV* = object
    taskCount*: uint32
    firstTask*: uint32

  VkPhysicalDeviceMeshShaderFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    taskShader*: VkBool32
    meshShader*: VkBool32
    multiviewMeshShader*: VkBool32
    primitiveFragmentShadingRateMeshShader*: VkBool32
    meshShaderQueries*: VkBool32

  VkPhysicalDeviceMeshShaderPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    maxTaskWorkGroupTotalCount*: uint32
    maxTaskWorkGroupCount*: array[3, uint32]
    maxTaskWorkGroupInvocations*: uint32
    maxTaskWorkGroupSize*: array[3, uint32]
    maxTaskPayloadSize*: uint32
    maxTaskSharedMemorySize*: uint32
    maxTaskPayloadAndSharedMemorySize*: uint32
    maxMeshWorkGroupTotalCount*: uint32
    maxMeshWorkGroupCount*: array[3, uint32]
    maxMeshWorkGroupInvocations*: uint32
    maxMeshWorkGroupSize*: array[3, uint32]
    maxMeshSharedMemorySize*: uint32
    maxMeshPayloadAndSharedMemorySize*: uint32
    maxMeshOutputMemorySize*: uint32
    maxMeshPayloadAndOutputMemorySize*: uint32
    maxMeshOutputComponents*: uint32
    maxMeshOutputVertices*: uint32
    maxMeshOutputPrimitives*: uint32
    maxMeshOutputLayers*: uint32
    maxMeshMultiviewViewCount*: uint32
    meshOutputPerVertexGranularity*: uint32
    meshOutputPerPrimitiveGranularity*: uint32
    maxPreferredTaskWorkGroupInvocations*: uint32
    maxPreferredMeshWorkGroupInvocations*: uint32
    prefersLocalInvocationVertexOutput*: VkBool32
    prefersLocalInvocationPrimitiveOutput*: VkBool32
    prefersCompactVertexOutput*: VkBool32
    prefersCompactPrimitiveOutput*: VkBool32

  VkDrawMeshTasksIndirectCommandEXT* = object
    groupCountX*: uint32
    groupCountY*: uint32
    groupCountZ*: uint32

  VkRayTracingShaderGroupCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    `type`*: VkRayTracingShaderGroupTypeKHR
    generalShader*: uint32
    closestHitShader*: uint32
    anyHitShader*: uint32
    intersectionShader*: uint32

  VkRayTracingShaderGroupCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    `type`*: VkRayTracingShaderGroupTypeKHR
    generalShader*: uint32
    closestHitShader*: uint32
    anyHitShader*: uint32
    intersectionShader*: uint32
    pShaderGroupCaptureReplayHandle*: pointer

  VkRayTracingPipelineCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineCreateFlags
    stageCount*: uint32
    pStages*: ptr VkPipelineShaderStageCreateInfo
    groupCount*: uint32
    pGroups*: ptr VkRayTracingShaderGroupCreateInfoNV
    maxRecursionDepth*: uint32
    layout*: VkPipelineLayout
    basePipelineHandle*: VkPipeline
    basePipelineIndex*: int32

  VkRayTracingPipelineCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineCreateFlags
    stageCount*: uint32
    pStages*: ptr VkPipelineShaderStageCreateInfo
    groupCount*: uint32
    pGroups*: ptr VkRayTracingShaderGroupCreateInfoKHR
    maxPipelineRayRecursionDepth*: uint32
    pLibraryInfo*: ptr VkPipelineLibraryCreateInfoKHR
    pLibraryInterface*: ptr VkRayTracingPipelineInterfaceCreateInfoKHR
    pDynamicState*: ptr VkPipelineDynamicStateCreateInfo
    layout*: VkPipelineLayout
    basePipelineHandle*: VkPipeline
    basePipelineIndex*: int32

  VkGeometryTrianglesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    vertexData*: VkBuffer
    vertexOffset*: VkDeviceSize
    vertexCount*: uint32
    vertexStride*: VkDeviceSize
    vertexFormat*: VkFormat
    indexData*: VkBuffer
    indexOffset*: VkDeviceSize
    indexCount*: uint32
    indexType*: VkIndexType
    transformData*: VkBuffer
    transformOffset*: VkDeviceSize

  VkGeometryAABBNV* = object
    sType*: VkStructureType
    pNext*: pointer
    aabbData*: VkBuffer
    numAABBs*: uint32
    stride*: uint32
    offset*: VkDeviceSize

  VkGeometryDataNV* = object
    triangles*: VkGeometryTrianglesNV
    aabbs*: VkGeometryAABBNV

  VkGeometryNV* = object
    sType*: VkStructureType
    pNext*: pointer
    geometryType*: VkGeometryTypeKHR
    geometry*: VkGeometryDataNV
    flags*: VkGeometryFlagsKHR

  VkAccelerationStructureInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    `type`*: VkAccelerationStructureTypeNV
    flags*: VkBuildAccelerationStructureFlagsNV
    instanceCount*: uint32
    geometryCount*: uint32
    pGeometries*: ptr VkGeometryNV

  VkAccelerationStructureCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    compactedSize*: VkDeviceSize
    info*: VkAccelerationStructureInfoNV

  VkBindAccelerationStructureMemoryInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    accelerationStructure*: VkAccelerationStructureNV
    memory*: VkDeviceMemory
    memoryOffset*: VkDeviceSize
    deviceIndexCount*: uint32
    pDeviceIndices*: ptr uint32

  VkWriteDescriptorSetAccelerationStructureKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    accelerationStructureCount*: uint32
    pAccelerationStructures*: ptr VkAccelerationStructureKHR

  VkWriteDescriptorSetAccelerationStructureNV* = object
    sType*: VkStructureType
    pNext*: pointer
    accelerationStructureCount*: uint32
    pAccelerationStructures*: ptr VkAccelerationStructureNV

  VkAccelerationStructureMemoryRequirementsInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    `type`*: VkAccelerationStructureMemoryRequirementsTypeNV
    accelerationStructure*: VkAccelerationStructureNV

  VkPhysicalDeviceAccelerationStructureFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    accelerationStructure*: VkBool32
    accelerationStructureCaptureReplay*: VkBool32
    accelerationStructureIndirectBuild*: VkBool32
    accelerationStructureHostCommands*: VkBool32
    descriptorBindingAccelerationStructureUpdateAfterBind*: VkBool32

  VkPhysicalDeviceRayTracingPipelineFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    rayTracingPipeline*: VkBool32
    rayTracingPipelineShaderGroupHandleCaptureReplay*: VkBool32
    rayTracingPipelineShaderGroupHandleCaptureReplayMixed*: VkBool32
    rayTracingPipelineTraceRaysIndirect*: VkBool32
    rayTraversalPrimitiveCulling*: VkBool32

  VkPhysicalDeviceRayQueryFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    rayQuery*: VkBool32

  VkPhysicalDeviceAccelerationStructurePropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    maxGeometryCount*: uint64
    maxInstanceCount*: uint64
    maxPrimitiveCount*: uint64
    maxPerStageDescriptorAccelerationStructures*: uint32
    maxPerStageDescriptorUpdateAfterBindAccelerationStructures*: uint32
    maxDescriptorSetAccelerationStructures*: uint32
    maxDescriptorSetUpdateAfterBindAccelerationStructures*: uint32
    minAccelerationStructureScratchOffsetAlignment*: uint32

  VkPhysicalDeviceRayTracingPipelinePropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderGroupHandleSize*: uint32
    maxRayRecursionDepth*: uint32
    maxShaderGroupStride*: uint32
    shaderGroupBaseAlignment*: uint32
    shaderGroupHandleCaptureReplaySize*: uint32
    maxRayDispatchInvocationCount*: uint32
    shaderGroupHandleAlignment*: uint32
    maxRayHitAttributeSize*: uint32

  VkPhysicalDeviceRayTracingPropertiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderGroupHandleSize*: uint32
    maxRecursionDepth*: uint32
    maxShaderGroupStride*: uint32
    shaderGroupBaseAlignment*: uint32
    maxGeometryCount*: uint64
    maxInstanceCount*: uint64
    maxTriangleCount*: uint64
    maxDescriptorSetAccelerationStructures*: uint32

  VkStridedDeviceAddressRegionKHR* = object
    deviceAddress*: VkDeviceAddress
    stride*: VkDeviceSize
    size*: VkDeviceSize

  VkTraceRaysIndirectCommandKHR* = object
    width*: uint32
    height*: uint32
    depth*: uint32

  VkTraceRaysIndirectCommand2KHR* = object
    raygenShaderRecordAddress*: VkDeviceAddress
    raygenShaderRecordSize*: VkDeviceSize
    missShaderBindingTableAddress*: VkDeviceAddress
    missShaderBindingTableSize*: VkDeviceSize
    missShaderBindingTableStride*: VkDeviceSize
    hitShaderBindingTableAddress*: VkDeviceAddress
    hitShaderBindingTableSize*: VkDeviceSize
    hitShaderBindingTableStride*: VkDeviceSize
    callableShaderBindingTableAddress*: VkDeviceAddress
    callableShaderBindingTableSize*: VkDeviceSize
    callableShaderBindingTableStride*: VkDeviceSize
    width*: uint32
    height*: uint32
    depth*: uint32

  VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    rayTracingMaintenance1*: VkBool32
    rayTracingPipelineTraceRaysIndirect2*: VkBool32

  VkDrmFormatModifierPropertiesListEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    drmFormatModifierCount*: uint32
    pDrmFormatModifierProperties*: ptr VkDrmFormatModifierPropertiesEXT

  VkDrmFormatModifierPropertiesEXT* = object
    drmFormatModifier*: uint64
    drmFormatModifierPlaneCount*: uint32
    drmFormatModifierTilingFeatures*: VkFormatFeatureFlags

  VkPhysicalDeviceImageDrmFormatModifierInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    drmFormatModifier*: uint64
    sharingMode*: VkSharingMode
    queueFamilyIndexCount*: uint32
    pQueueFamilyIndices*: ptr uint32

  VkImageDrmFormatModifierListCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    drmFormatModifierCount*: uint32
    pDrmFormatModifiers*: ptr uint64

  VkImageDrmFormatModifierExplicitCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    drmFormatModifier*: uint64
    drmFormatModifierPlaneCount*: uint32
    pPlaneLayouts*: ptr VkSubresourceLayout

  VkImageDrmFormatModifierPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    drmFormatModifier*: uint64

  VkImageStencilUsageCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    stencilUsage*: VkImageUsageFlags

  VkImageStencilUsageCreateInfoEXT* = VkImageStencilUsageCreateInfo

  VkDeviceMemoryOverallocationCreateInfoAMD* = object
    sType*: VkStructureType
    pNext*: pointer
    overallocationBehavior*: VkMemoryOverallocationBehaviorAMD

  VkPhysicalDeviceFragmentDensityMapFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    fragmentDensityMap*: VkBool32
    fragmentDensityMapDynamic*: VkBool32
    fragmentDensityMapNonSubsampledImages*: VkBool32

  VkPhysicalDeviceFragmentDensityMap2FeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    fragmentDensityMapDeferred*: VkBool32

  VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    fragmentDensityMapOffset*: VkBool32

  VkPhysicalDeviceFragmentDensityMapPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    minFragmentDensityTexelSize*: VkExtent2D
    maxFragmentDensityTexelSize*: VkExtent2D
    fragmentDensityInvocations*: VkBool32

  VkPhysicalDeviceFragmentDensityMap2PropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    subsampledLoads*: VkBool32
    subsampledCoarseReconstructionEarlyAccess*: VkBool32
    maxSubsampledArrayLayers*: uint32
    maxDescriptorSetSubsampledSamplers*: uint32

  VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    fragmentDensityOffsetGranularity*: VkExtent2D

  VkRenderPassFragmentDensityMapCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    fragmentDensityMapAttachment*: VkAttachmentReference

  VkSubpassFragmentDensityMapOffsetEndInfoQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    fragmentDensityOffsetCount*: uint32
    pFragmentDensityOffsets*: ptr VkOffset2D

  VkPhysicalDeviceScalarBlockLayoutFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    scalarBlockLayout*: VkBool32

  VkPhysicalDeviceScalarBlockLayoutFeaturesEXT* = VkPhysicalDeviceScalarBlockLayoutFeatures

  VkSurfaceProtectedCapabilitiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    supportsProtected*: VkBool32

  VkPhysicalDeviceUniformBufferStandardLayoutFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    uniformBufferStandardLayout*: VkBool32

  VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR* = VkPhysicalDeviceUniformBufferStandardLayoutFeatures

  VkPhysicalDeviceDepthClipEnableFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    depthClipEnable*: VkBool32

  VkPipelineRasterizationDepthClipStateCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineRasterizationDepthClipStateCreateFlagsEXT
    depthClipEnable*: VkBool32

  VkPhysicalDeviceMemoryBudgetPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    heapBudget*: array[VK_MAX_MEMORY_HEAPS, VkDeviceSize]
    heapUsage*: array[VK_MAX_MEMORY_HEAPS, VkDeviceSize]

  VkPhysicalDeviceMemoryPriorityFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    memoryPriority*: VkBool32

  VkMemoryPriorityAllocateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    priority*: float32

  VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    pageableDeviceLocalMemory*: VkBool32

  VkPhysicalDeviceBufferDeviceAddressFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    bufferDeviceAddress*: VkBool32
    bufferDeviceAddressCaptureReplay*: VkBool32
    bufferDeviceAddressMultiDevice*: VkBool32

  VkPhysicalDeviceBufferDeviceAddressFeaturesKHR* = VkPhysicalDeviceBufferDeviceAddressFeatures

  VkPhysicalDeviceBufferDeviceAddressFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    bufferDeviceAddress*: VkBool32
    bufferDeviceAddressCaptureReplay*: VkBool32
    bufferDeviceAddressMultiDevice*: VkBool32

  VkPhysicalDeviceBufferAddressFeaturesEXT* = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT

  VkBufferDeviceAddressInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    buffer*: VkBuffer

  VkBufferDeviceAddressInfoKHR* = VkBufferDeviceAddressInfo

  VkBufferDeviceAddressInfoEXT* = VkBufferDeviceAddressInfo

  VkBufferOpaqueCaptureAddressCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    opaqueCaptureAddress*: uint64

  VkBufferOpaqueCaptureAddressCreateInfoKHR* = VkBufferOpaqueCaptureAddressCreateInfo

  VkBufferDeviceAddressCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    deviceAddress*: VkDeviceAddress

  VkPhysicalDeviceImageViewImageFormatInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    imageViewType*: VkImageViewType

  VkFilterCubicImageViewImageFormatPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    filterCubic*: VkBool32
    filterCubicMinmax*: VkBool32

  VkPhysicalDeviceImagelessFramebufferFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    imagelessFramebuffer*: VkBool32

  VkPhysicalDeviceImagelessFramebufferFeaturesKHR* = VkPhysicalDeviceImagelessFramebufferFeatures

  VkFramebufferAttachmentsCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    attachmentImageInfoCount*: uint32
    pAttachmentImageInfos*: ptr VkFramebufferAttachmentImageInfo

  VkFramebufferAttachmentsCreateInfoKHR* = VkFramebufferAttachmentsCreateInfo

  VkFramebufferAttachmentImageInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkImageCreateFlags
    usage*: VkImageUsageFlags
    width*: uint32
    height*: uint32
    layerCount*: uint32
    viewFormatCount*: uint32
    pViewFormats*: ptr VkFormat

  VkFramebufferAttachmentImageInfoKHR* = VkFramebufferAttachmentImageInfo

  VkRenderPassAttachmentBeginInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    attachmentCount*: uint32
    pAttachments*: ptr VkImageView

  VkRenderPassAttachmentBeginInfoKHR* = VkRenderPassAttachmentBeginInfo

  VkPhysicalDeviceTextureCompressionASTCHDRFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    textureCompressionASTC_HDR*: VkBool32

  VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT* = VkPhysicalDeviceTextureCompressionASTCHDRFeatures

  VkPhysicalDeviceCooperativeMatrixFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    cooperativeMatrix*: VkBool32
    cooperativeMatrixRobustBufferAccess*: VkBool32

  VkPhysicalDeviceCooperativeMatrixPropertiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    cooperativeMatrixSupportedStages*: VkShaderStageFlags

  VkCooperativeMatrixPropertiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    MSize*: uint32
    NSize*: uint32
    KSize*: uint32
    AType*: VkComponentTypeNV
    BType*: VkComponentTypeNV
    CType*: VkComponentTypeNV
    DType*: VkComponentTypeNV
    scope*: VkScopeNV

  VkPhysicalDeviceYcbcrImageArraysFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    ycbcrImageArrays*: VkBool32

  VkImageViewHandleInfoNVX* = object
    sType*: VkStructureType
    pNext*: pointer
    imageView*: VkImageView
    descriptorType*: VkDescriptorType
    sampler*: VkSampler

  VkImageViewAddressPropertiesNVX* = object
    sType*: VkStructureType
    pNext*: pointer
    deviceAddress*: VkDeviceAddress
    size*: VkDeviceSize

  VkPresentFrameTokenGGP* = object
    sType*: VkStructureType
    pNext*: pointer
    frameToken*: GgpFrameToken

  VkPipelineCreationFeedback* = object
    flags*: VkPipelineCreationFeedbackFlags
    duration*: uint64

  VkPipelineCreationFeedbackEXT* = VkPipelineCreationFeedback

  VkPipelineCreationFeedbackCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    pPipelineCreationFeedback*: ptr VkPipelineCreationFeedback
    pipelineStageCreationFeedbackCount*: uint32
    pPipelineStageCreationFeedbacks*: ptr ptr VkPipelineCreationFeedback

  VkPipelineCreationFeedbackCreateInfoEXT* = VkPipelineCreationFeedbackCreateInfo

  VkSurfaceFullScreenExclusiveInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    fullScreenExclusive*: VkFullScreenExclusiveEXT

  VkSurfaceFullScreenExclusiveWin32InfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    hmonitor*: HMONITOR

  VkSurfaceCapabilitiesFullScreenExclusiveEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    fullScreenExclusiveSupported*: VkBool32

  VkPhysicalDevicePresentBarrierFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    presentBarrier*: VkBool32

  VkSurfaceCapabilitiesPresentBarrierNV* = object
    sType*: VkStructureType
    pNext*: pointer
    presentBarrierSupported*: VkBool32

  VkSwapchainPresentBarrierCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    presentBarrierEnable*: VkBool32

  VkPhysicalDevicePerformanceQueryFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    performanceCounterQueryPools*: VkBool32
    performanceCounterMultipleQueryPools*: VkBool32

  VkPhysicalDevicePerformanceQueryPropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    allowCommandBufferQueryCopies*: VkBool32

  VkPerformanceCounterKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    unit*: VkPerformanceCounterUnitKHR
    scope*: VkPerformanceCounterScopeKHR
    storage*: VkPerformanceCounterStorageKHR
    uuid*: array[VK_UUID_SIZE, uint8]

  VkPerformanceCounterDescriptionKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPerformanceCounterDescriptionFlagsKHR
    name*: array[VK_MAX_DESCRIPTION_SIZE, char]
    category*: array[VK_MAX_DESCRIPTION_SIZE, char]
    description*: array[VK_MAX_DESCRIPTION_SIZE, char]

  VkQueryPoolPerformanceCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    queueFamilyIndex*: uint32
    counterIndexCount*: uint32
    pCounterIndices*: ptr uint32

  VkPerformanceCounterResultKHR* {.union.} = object
    int32*: int32
    int64*: int64
    uint32*: uint32
    uint64*: uint64
    float32*: float32
    float64*: float64

  VkAcquireProfilingLockInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkAcquireProfilingLockFlagsKHR
    timeout*: uint64

  VkPerformanceQuerySubmitInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    counterPassIndex*: uint32

  VkPerformanceQueryReservationInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    maxPerformanceQueriesPerPool*: uint32

  VkHeadlessSurfaceCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkHeadlessSurfaceCreateFlagsEXT

  VkPhysicalDeviceCoverageReductionModeFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    coverageReductionMode*: VkBool32

  VkPipelineCoverageReductionStateCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineCoverageReductionStateCreateFlagsNV
    coverageReductionMode*: VkCoverageReductionModeNV

  VkFramebufferMixedSamplesCombinationNV* = object
    sType*: VkStructureType
    pNext*: pointer
    coverageReductionMode*: VkCoverageReductionModeNV
    rasterizationSamples*: VkSampleCountFlagBits
    depthStencilSamples*: VkSampleCountFlags
    colorSamples*: VkSampleCountFlags

  VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderIntegerFunctions2*: VkBool32

  VkPerformanceValueDataINTEL* {.union.} = object
    value32*: uint32
    value64*: uint64
    valueFloat*: float32
    valueBool*: VkBool32
    valueString*: cstring

  VkPerformanceValueINTEL* = object
    `type`*: VkPerformanceValueTypeINTEL
    data*: VkPerformanceValueDataINTEL

  VkInitializePerformanceApiInfoINTEL* = object
    sType*: VkStructureType
    pNext*: pointer
    pUserData*: pointer

  VkQueryPoolPerformanceQueryCreateInfoINTEL* = object
    sType*: VkStructureType
    pNext*: pointer
    performanceCountersSampling*: VkQueryPoolSamplingModeINTEL

  VkQueryPoolCreateInfoINTEL* = VkQueryPoolPerformanceQueryCreateInfoINTEL

  VkPerformanceMarkerInfoINTEL* = object
    sType*: VkStructureType
    pNext*: pointer
    marker*: uint64

  VkPerformanceStreamMarkerInfoINTEL* = object
    sType*: VkStructureType
    pNext*: pointer
    marker*: uint32

  VkPerformanceOverrideInfoINTEL* = object
    sType*: VkStructureType
    pNext*: pointer
    `type`*: VkPerformanceOverrideTypeINTEL
    enable*: VkBool32
    parameter*: uint64

  VkPerformanceConfigurationAcquireInfoINTEL* = object
    sType*: VkStructureType
    pNext*: pointer
    `type`*: VkPerformanceConfigurationTypeINTEL

  VkPhysicalDeviceShaderClockFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderSubgroupClock*: VkBool32
    shaderDeviceClock*: VkBool32

  VkPhysicalDeviceIndexTypeUint8FeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    indexTypeUint8*: VkBool32

  VkPhysicalDeviceIndexTypeUint8FeaturesEXT* = VkPhysicalDeviceIndexTypeUint8FeaturesKHR

  VkPhysicalDeviceShaderSMBuiltinsPropertiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderSMCount*: uint32
    shaderWarpsPerSM*: uint32

  VkPhysicalDeviceShaderSMBuiltinsFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderSMBuiltins*: VkBool32

  VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    fragmentShaderSampleInterlock*: VkBool32
    fragmentShaderPixelInterlock*: VkBool32
    fragmentShaderShadingRateInterlock*: VkBool32

  VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    separateDepthStencilLayouts*: VkBool32

  VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR* = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures

  VkAttachmentReferenceStencilLayout* = object
    sType*: VkStructureType
    pNext*: pointer
    stencilLayout*: VkImageLayout

  VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    primitiveTopologyListRestart*: VkBool32
    primitiveTopologyPatchListRestart*: VkBool32

  VkAttachmentReferenceStencilLayoutKHR* = VkAttachmentReferenceStencilLayout

  VkAttachmentDescriptionStencilLayout* = object
    sType*: VkStructureType
    pNext*: pointer
    stencilInitialLayout*: VkImageLayout
    stencilFinalLayout*: VkImageLayout

  VkAttachmentDescriptionStencilLayoutKHR* = VkAttachmentDescriptionStencilLayout

  VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pipelineExecutableInfo*: VkBool32

  VkPipelineInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pipeline*: VkPipeline

  VkPipelineInfoEXT* = VkPipelineInfoKHR

  VkPipelineExecutablePropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    stages*: VkShaderStageFlags
    name*: array[VK_MAX_DESCRIPTION_SIZE, char]
    description*: array[VK_MAX_DESCRIPTION_SIZE, char]
    subgroupSize*: uint32

  VkPipelineExecutableInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pipeline*: VkPipeline
    executableIndex*: uint32

  VkPipelineExecutableStatisticValueKHR* {.union.} = object
    b32*: VkBool32
    i64*: int64
    u64*: uint64
    f64*: float64

  VkPipelineExecutableStatisticKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    name*: array[VK_MAX_DESCRIPTION_SIZE, char]
    description*: array[VK_MAX_DESCRIPTION_SIZE, char]
    format*: VkPipelineExecutableStatisticFormatKHR
    value*: VkPipelineExecutableStatisticValueKHR

  VkPipelineExecutableInternalRepresentationKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    name*: array[VK_MAX_DESCRIPTION_SIZE, char]
    description*: array[VK_MAX_DESCRIPTION_SIZE, char]
    isText*: VkBool32
    dataSize*: uint
    pData*: pointer

  VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderDemoteToHelperInvocation*: VkBool32

  VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT* = VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures

  VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    texelBufferAlignment*: VkBool32

  VkPhysicalDeviceTexelBufferAlignmentProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    storageTexelBufferOffsetAlignmentBytes*: VkDeviceSize
    storageTexelBufferOffsetSingleTexelAlignment*: VkBool32
    uniformTexelBufferOffsetAlignmentBytes*: VkDeviceSize
    uniformTexelBufferOffsetSingleTexelAlignment*: VkBool32

  VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT* = VkPhysicalDeviceTexelBufferAlignmentProperties

  VkPhysicalDeviceSubgroupSizeControlFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    subgroupSizeControl*: VkBool32
    computeFullSubgroups*: VkBool32

  VkPhysicalDeviceSubgroupSizeControlFeaturesEXT* = VkPhysicalDeviceSubgroupSizeControlFeatures

  VkPhysicalDeviceSubgroupSizeControlProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    minSubgroupSize*: uint32
    maxSubgroupSize*: uint32
    maxComputeWorkgroupSubgroups*: uint32
    requiredSubgroupSizeStages*: VkShaderStageFlags

  VkPhysicalDeviceSubgroupSizeControlPropertiesEXT* = VkPhysicalDeviceSubgroupSizeControlProperties

  VkPipelineShaderStageRequiredSubgroupSizeCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    requiredSubgroupSize*: uint32

  VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT* = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo

  VkShaderRequiredSubgroupSizeCreateInfoEXT* = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo

  VkSubpassShadingPipelineCreateInfoHUAWEI* = object
    sType*: VkStructureType
    pNext*: pointer
    renderPass*: VkRenderPass
    subpass*: uint32

  VkPhysicalDeviceSubpassShadingPropertiesHUAWEI* = object
    sType*: VkStructureType
    pNext*: pointer
    maxSubpassShadingWorkgroupSizeAspectRatio*: uint32

  VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI* = object
    sType*: VkStructureType
    pNext*: pointer
    maxWorkGroupCount*: array[3, uint32]
    maxWorkGroupSize*: array[3, uint32]
    maxOutputClusterCount*: uint32
    indirectBufferOffsetAlignment*: VkDeviceSize

  VkMemoryOpaqueCaptureAddressAllocateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    opaqueCaptureAddress*: uint64

  VkMemoryOpaqueCaptureAddressAllocateInfoKHR* = VkMemoryOpaqueCaptureAddressAllocateInfo

  VkDeviceMemoryOpaqueCaptureAddressInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    memory*: VkDeviceMemory

  VkDeviceMemoryOpaqueCaptureAddressInfoKHR* = VkDeviceMemoryOpaqueCaptureAddressInfo

  VkPhysicalDeviceLineRasterizationFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    rectangularLines*: VkBool32
    bresenhamLines*: VkBool32
    smoothLines*: VkBool32
    stippledRectangularLines*: VkBool32
    stippledBresenhamLines*: VkBool32
    stippledSmoothLines*: VkBool32

  VkPhysicalDeviceLineRasterizationFeaturesEXT* = VkPhysicalDeviceLineRasterizationFeaturesKHR

  VkPhysicalDeviceLineRasterizationPropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    lineSubPixelPrecisionBits*: uint32

  VkPhysicalDeviceLineRasterizationPropertiesEXT* = VkPhysicalDeviceLineRasterizationPropertiesKHR

  VkPipelineRasterizationLineStateCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    lineRasterizationMode*: VkLineRasterizationModeKHR
    stippledLineEnable*: VkBool32
    lineStippleFactor*: uint32
    lineStipplePattern*: uint16

  VkPipelineRasterizationLineStateCreateInfoEXT* = VkPipelineRasterizationLineStateCreateInfoKHR

  VkPhysicalDevicePipelineCreationCacheControlFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    pipelineCreationCacheControl*: VkBool32

  VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT* = VkPhysicalDevicePipelineCreationCacheControlFeatures

  VkPhysicalDeviceVulkan11Features* = object
    sType*: VkStructureType
    pNext*: pointer
    storageBuffer16BitAccess*: VkBool32
    uniformAndStorageBuffer16BitAccess*: VkBool32
    storagePushConstant16*: VkBool32
    storageInputOutput16*: VkBool32
    multiview*: VkBool32
    multiviewGeometryShader*: VkBool32
    multiviewTessellationShader*: VkBool32
    variablePointersStorageBuffer*: VkBool32
    variablePointers*: VkBool32
    protectedMemory*: VkBool32
    samplerYcbcrConversion*: VkBool32
    shaderDrawParameters*: VkBool32

  VkPhysicalDeviceVulkan11Properties* = object
    sType*: VkStructureType
    pNext*: pointer
    deviceUUID*: array[VK_UUID_SIZE, uint8]
    driverUUID*: array[VK_UUID_SIZE, uint8]
    deviceLUID*: array[VK_LUID_SIZE, uint8]
    deviceNodeMask*: uint32
    deviceLUIDValid*: VkBool32
    subgroupSize*: uint32
    subgroupSupportedStages*: VkShaderStageFlags
    subgroupSupportedOperations*: VkSubgroupFeatureFlags
    subgroupQuadOperationsInAllStages*: VkBool32
    pointClippingBehavior*: VkPointClippingBehavior
    maxMultiviewViewCount*: uint32
    maxMultiviewInstanceIndex*: uint32
    protectedNoFault*: VkBool32
    maxPerSetDescriptors*: uint32
    maxMemoryAllocationSize*: VkDeviceSize

  VkPhysicalDeviceVulkan12Features* = object
    sType*: VkStructureType
    pNext*: pointer
    samplerMirrorClampToEdge*: VkBool32
    drawIndirectCount*: VkBool32
    storageBuffer8BitAccess*: VkBool32
    uniformAndStorageBuffer8BitAccess*: VkBool32
    storagePushConstant8*: VkBool32
    shaderBufferInt64Atomics*: VkBool32
    shaderSharedInt64Atomics*: VkBool32
    shaderFloat16*: VkBool32
    shaderInt8*: VkBool32
    descriptorIndexing*: VkBool32
    shaderInputAttachmentArrayDynamicIndexing*: VkBool32
    shaderUniformTexelBufferArrayDynamicIndexing*: VkBool32
    shaderStorageTexelBufferArrayDynamicIndexing*: VkBool32
    shaderUniformBufferArrayNonUniformIndexing*: VkBool32
    shaderSampledImageArrayNonUniformIndexing*: VkBool32
    shaderStorageBufferArrayNonUniformIndexing*: VkBool32
    shaderStorageImageArrayNonUniformIndexing*: VkBool32
    shaderInputAttachmentArrayNonUniformIndexing*: VkBool32
    shaderUniformTexelBufferArrayNonUniformIndexing*: VkBool32
    shaderStorageTexelBufferArrayNonUniformIndexing*: VkBool32
    descriptorBindingUniformBufferUpdateAfterBind*: VkBool32
    descriptorBindingSampledImageUpdateAfterBind*: VkBool32
    descriptorBindingStorageImageUpdateAfterBind*: VkBool32
    descriptorBindingStorageBufferUpdateAfterBind*: VkBool32
    descriptorBindingUniformTexelBufferUpdateAfterBind*: VkBool32
    descriptorBindingStorageTexelBufferUpdateAfterBind*: VkBool32
    descriptorBindingUpdateUnusedWhilePending*: VkBool32
    descriptorBindingPartiallyBound*: VkBool32
    descriptorBindingVariableDescriptorCount*: VkBool32
    runtimeDescriptorArray*: VkBool32
    samplerFilterMinmax*: VkBool32
    scalarBlockLayout*: VkBool32
    imagelessFramebuffer*: VkBool32
    uniformBufferStandardLayout*: VkBool32
    shaderSubgroupExtendedTypes*: VkBool32
    separateDepthStencilLayouts*: VkBool32
    hostQueryReset*: VkBool32
    timelineSemaphore*: VkBool32
    bufferDeviceAddress*: VkBool32
    bufferDeviceAddressCaptureReplay*: VkBool32
    bufferDeviceAddressMultiDevice*: VkBool32
    vulkanMemoryModel*: VkBool32
    vulkanMemoryModelDeviceScope*: VkBool32
    vulkanMemoryModelAvailabilityVisibilityChains*: VkBool32
    shaderOutputViewportIndex*: VkBool32
    shaderOutputLayer*: VkBool32
    subgroupBroadcastDynamicId*: VkBool32

  VkPhysicalDeviceVulkan12Properties* = object
    sType*: VkStructureType
    pNext*: pointer
    driverID*: VkDriverId
    driverName*: array[VK_MAX_DRIVER_NAME_SIZE, char]
    driverInfo*: array[VK_MAX_DRIVER_INFO_SIZE, char]
    conformanceVersion*: VkConformanceVersion
    denormBehaviorIndependence*: VkShaderFloatControlsIndependence
    roundingModeIndependence*: VkShaderFloatControlsIndependence
    shaderSignedZeroInfNanPreserveFloat16*: VkBool32
    shaderSignedZeroInfNanPreserveFloat32*: VkBool32
    shaderSignedZeroInfNanPreserveFloat64*: VkBool32
    shaderDenormPreserveFloat16*: VkBool32
    shaderDenormPreserveFloat32*: VkBool32
    shaderDenormPreserveFloat64*: VkBool32
    shaderDenormFlushToZeroFloat16*: VkBool32
    shaderDenormFlushToZeroFloat32*: VkBool32
    shaderDenormFlushToZeroFloat64*: VkBool32
    shaderRoundingModeRTEFloat16*: VkBool32
    shaderRoundingModeRTEFloat32*: VkBool32
    shaderRoundingModeRTEFloat64*: VkBool32
    shaderRoundingModeRTZFloat16*: VkBool32
    shaderRoundingModeRTZFloat32*: VkBool32
    shaderRoundingModeRTZFloat64*: VkBool32
    maxUpdateAfterBindDescriptorsInAllPools*: uint32
    shaderUniformBufferArrayNonUniformIndexingNative*: VkBool32
    shaderSampledImageArrayNonUniformIndexingNative*: VkBool32
    shaderStorageBufferArrayNonUniformIndexingNative*: VkBool32
    shaderStorageImageArrayNonUniformIndexingNative*: VkBool32
    shaderInputAttachmentArrayNonUniformIndexingNative*: VkBool32
    robustBufferAccessUpdateAfterBind*: VkBool32
    quadDivergentImplicitLod*: VkBool32
    maxPerStageDescriptorUpdateAfterBindSamplers*: uint32
    maxPerStageDescriptorUpdateAfterBindUniformBuffers*: uint32
    maxPerStageDescriptorUpdateAfterBindStorageBuffers*: uint32
    maxPerStageDescriptorUpdateAfterBindSampledImages*: uint32
    maxPerStageDescriptorUpdateAfterBindStorageImages*: uint32
    maxPerStageDescriptorUpdateAfterBindInputAttachments*: uint32
    maxPerStageUpdateAfterBindResources*: uint32
    maxDescriptorSetUpdateAfterBindSamplers*: uint32
    maxDescriptorSetUpdateAfterBindUniformBuffers*: uint32
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic*: uint32
    maxDescriptorSetUpdateAfterBindStorageBuffers*: uint32
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic*: uint32
    maxDescriptorSetUpdateAfterBindSampledImages*: uint32
    maxDescriptorSetUpdateAfterBindStorageImages*: uint32
    maxDescriptorSetUpdateAfterBindInputAttachments*: uint32
    supportedDepthResolveModes*: VkResolveModeFlags
    supportedStencilResolveModes*: VkResolveModeFlags
    independentResolveNone*: VkBool32
    independentResolve*: VkBool32
    filterMinmaxSingleComponentFormats*: VkBool32
    filterMinmaxImageComponentMapping*: VkBool32
    maxTimelineSemaphoreValueDifference*: uint64
    framebufferIntegerColorSampleCounts*: VkSampleCountFlags

  VkPhysicalDeviceVulkan13Features* = object
    sType*: VkStructureType
    pNext*: pointer
    robustImageAccess*: VkBool32
    inlineUniformBlock*: VkBool32
    descriptorBindingInlineUniformBlockUpdateAfterBind*: VkBool32
    pipelineCreationCacheControl*: VkBool32
    privateData*: VkBool32
    shaderDemoteToHelperInvocation*: VkBool32
    shaderTerminateInvocation*: VkBool32
    subgroupSizeControl*: VkBool32
    computeFullSubgroups*: VkBool32
    synchronization2*: VkBool32
    textureCompressionASTC_HDR*: VkBool32
    shaderZeroInitializeWorkgroupMemory*: VkBool32
    dynamicRendering*: VkBool32
    shaderIntegerDotProduct*: VkBool32
    maintenance4*: VkBool32

  VkPhysicalDeviceVulkan13Properties* = object
    sType*: VkStructureType
    pNext*: pointer
    minSubgroupSize*: uint32
    maxSubgroupSize*: uint32
    maxComputeWorkgroupSubgroups*: uint32
    requiredSubgroupSizeStages*: VkShaderStageFlags
    maxInlineUniformBlockSize*: uint32
    maxPerStageDescriptorInlineUniformBlocks*: uint32
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks*: uint32
    maxDescriptorSetInlineUniformBlocks*: uint32
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks*: uint32
    maxInlineUniformTotalSize*: uint32
    integerDotProduct8BitUnsignedAccelerated*: VkBool32
    integerDotProduct8BitSignedAccelerated*: VkBool32
    integerDotProduct8BitMixedSignednessAccelerated*: VkBool32
    integerDotProduct4x8BitPackedUnsignedAccelerated*: VkBool32
    integerDotProduct4x8BitPackedSignedAccelerated*: VkBool32
    integerDotProduct4x8BitPackedMixedSignednessAccelerated*: VkBool32
    integerDotProduct16BitUnsignedAccelerated*: VkBool32
    integerDotProduct16BitSignedAccelerated*: VkBool32
    integerDotProduct16BitMixedSignednessAccelerated*: VkBool32
    integerDotProduct32BitUnsignedAccelerated*: VkBool32
    integerDotProduct32BitSignedAccelerated*: VkBool32
    integerDotProduct32BitMixedSignednessAccelerated*: VkBool32
    integerDotProduct64BitUnsignedAccelerated*: VkBool32
    integerDotProduct64BitSignedAccelerated*: VkBool32
    integerDotProduct64BitMixedSignednessAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating8BitSignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating16BitSignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating32BitSignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating64BitSignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated*: VkBool32
    storageTexelBufferOffsetAlignmentBytes*: VkDeviceSize
    storageTexelBufferOffsetSingleTexelAlignment*: VkBool32
    uniformTexelBufferOffsetAlignmentBytes*: VkDeviceSize
    uniformTexelBufferOffsetSingleTexelAlignment*: VkBool32
    maxBufferSize*: VkDeviceSize

  VkPipelineCompilerControlCreateInfoAMD* = object
    sType*: VkStructureType
    pNext*: pointer
    compilerControlFlags*: VkPipelineCompilerControlFlagsAMD

  VkPhysicalDeviceCoherentMemoryFeaturesAMD* = object
    sType*: VkStructureType
    pNext*: pointer
    deviceCoherentMemory*: VkBool32

  VkFaultData* = object
    sType*: VkStructureType
    pNext*: pointer
    faultLevel*: VkFaultLevel
    faultType*: VkFaultType

  VkFaultCallbackInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    faultCount*: uint32
    pFaults*: ptr VkFaultData
    pfnFaultCallback*: PFN_vkFaultCallbackFunction

  VkPhysicalDeviceToolProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    name*: array[VK_MAX_EXTENSION_NAME_SIZE, char]
    version*: array[VK_MAX_EXTENSION_NAME_SIZE, char]
    purposes*: VkToolPurposeFlags
    description*: array[VK_MAX_DESCRIPTION_SIZE, char]
    layer*: array[VK_MAX_EXTENSION_NAME_SIZE, char]

  VkPhysicalDeviceToolPropertiesEXT* = VkPhysicalDeviceToolProperties

  VkSamplerCustomBorderColorCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    customBorderColor*: VkClearColorValue
    format*: VkFormat

  VkPhysicalDeviceCustomBorderColorPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    maxCustomBorderColorSamplers*: uint32

  VkPhysicalDeviceCustomBorderColorFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    customBorderColors*: VkBool32
    customBorderColorWithoutFormat*: VkBool32

  VkSamplerBorderColorComponentMappingCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    components*: VkComponentMapping
    srgb*: VkBool32

  VkPhysicalDeviceBorderColorSwizzleFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    borderColorSwizzle*: VkBool32
    borderColorSwizzleFromImage*: VkBool32

  VkDeviceOrHostAddressKHR* {.union.} = object
    deviceAddress*: VkDeviceAddress
    hostAddress*: pointer

  VkDeviceOrHostAddressConstKHR* {.union.} = object
    deviceAddress*: VkDeviceAddress
    hostAddress*: pointer

  VkDeviceOrHostAddressConstAMDX* {.union.} = object
    deviceAddress*: VkDeviceAddress
    hostAddress*: pointer

  VkAccelerationStructureGeometryTrianglesDataKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    vertexFormat*: VkFormat
    vertexData*: VkDeviceOrHostAddressConstKHR
    vertexStride*: VkDeviceSize
    maxVertex*: uint32
    indexType*: VkIndexType
    indexData*: VkDeviceOrHostAddressConstKHR
    transformData*: VkDeviceOrHostAddressConstKHR

  VkAccelerationStructureGeometryAabbsDataKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    data*: VkDeviceOrHostAddressConstKHR
    stride*: VkDeviceSize

  VkAccelerationStructureGeometryInstancesDataKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    arrayOfPointers*: VkBool32
    data*: VkDeviceOrHostAddressConstKHR

  VkAccelerationStructureGeometryDataKHR* {.union.} = object
    triangles*: VkAccelerationStructureGeometryTrianglesDataKHR
    aabbs*: VkAccelerationStructureGeometryAabbsDataKHR
    instances*: VkAccelerationStructureGeometryInstancesDataKHR

  VkAccelerationStructureGeometryKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    geometryType*: VkGeometryTypeKHR
    geometry*: VkAccelerationStructureGeometryDataKHR
    flags*: VkGeometryFlagsKHR

  VkAccelerationStructureBuildGeometryInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    `type`*: VkAccelerationStructureTypeKHR
    flags*: VkBuildAccelerationStructureFlagsKHR
    mode*: VkBuildAccelerationStructureModeKHR
    srcAccelerationStructure*: VkAccelerationStructureKHR
    dstAccelerationStructure*: VkAccelerationStructureKHR
    geometryCount*: uint32
    pGeometries*: ptr VkAccelerationStructureGeometryKHR
    ppGeometries*: ptr ptr VkAccelerationStructureGeometryKHR
    scratchData*: VkDeviceOrHostAddressKHR

  VkAccelerationStructureBuildRangeInfoKHR* = object
    primitiveCount*: uint32
    primitiveOffset*: uint32
    firstVertex*: uint32
    transformOffset*: uint32

  VkAccelerationStructureCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    createFlags*: VkAccelerationStructureCreateFlagsKHR
    buffer*: VkBuffer
    offset*: VkDeviceSize
    size*: VkDeviceSize
    `type`*: VkAccelerationStructureTypeKHR
    deviceAddress*: VkDeviceAddress

  VkAabbPositionsKHR* = object
    minX*: float32
    minY*: float32
    minZ*: float32
    maxX*: float32
    maxY*: float32
    maxZ*: float32

  VkAabbPositionsNV* = VkAabbPositionsKHR

  VkTransformMatrixKHR* = object
    matrix*: array[3, float32]

  VkTransformMatrixNV* = VkTransformMatrixKHR

  VkAccelerationStructureInstanceKHR* = object
    transform*: VkTransformMatrixKHR
    instanceCustomIndex*: uint32
    mask*: uint32
    instanceShaderBindingTableRecordOffset*: uint32
    flags*: VkGeometryInstanceFlagsKHR
    accelerationStructureReference*: uint64

  VkAccelerationStructureInstanceNV* = VkAccelerationStructureInstanceKHR

  VkAccelerationStructureDeviceAddressInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    accelerationStructure*: VkAccelerationStructureKHR

  VkAccelerationStructureVersionInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pVersionData*: ptr uint8

  VkCopyAccelerationStructureInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    src*: VkAccelerationStructureKHR
    dst*: VkAccelerationStructureKHR
    mode*: VkCopyAccelerationStructureModeKHR

  VkCopyAccelerationStructureToMemoryInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    src*: VkAccelerationStructureKHR
    dst*: VkDeviceOrHostAddressKHR
    mode*: VkCopyAccelerationStructureModeKHR

  VkCopyMemoryToAccelerationStructureInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    src*: VkDeviceOrHostAddressConstKHR
    dst*: VkAccelerationStructureKHR
    mode*: VkCopyAccelerationStructureModeKHR

  VkRayTracingPipelineInterfaceCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    maxPipelineRayPayloadSize*: uint32
    maxPipelineRayHitAttributeSize*: uint32

  VkPipelineLibraryCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    libraryCount*: uint32
    pLibraries*: ptr VkPipeline

  VkRefreshObjectKHR* = object
    objectType*: VkObjectType
    objectHandle*: uint64
    flags*: VkRefreshObjectFlagsKHR

  VkRefreshObjectListKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    objectCount*: uint32
    pObjects*: ptr VkRefreshObjectKHR

  VkPhysicalDeviceExtendedDynamicStateFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    extendedDynamicState*: VkBool32

  VkPhysicalDeviceExtendedDynamicState2FeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    extendedDynamicState2*: VkBool32
    extendedDynamicState2LogicOp*: VkBool32
    extendedDynamicState2PatchControlPoints*: VkBool32

  VkPhysicalDeviceExtendedDynamicState3FeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    extendedDynamicState3TessellationDomainOrigin*: VkBool32
    extendedDynamicState3DepthClampEnable*: VkBool32
    extendedDynamicState3PolygonMode*: VkBool32
    extendedDynamicState3RasterizationSamples*: VkBool32
    extendedDynamicState3SampleMask*: VkBool32
    extendedDynamicState3AlphaToCoverageEnable*: VkBool32
    extendedDynamicState3AlphaToOneEnable*: VkBool32
    extendedDynamicState3LogicOpEnable*: VkBool32
    extendedDynamicState3ColorBlendEnable*: VkBool32
    extendedDynamicState3ColorBlendEquation*: VkBool32
    extendedDynamicState3ColorWriteMask*: VkBool32
    extendedDynamicState3RasterizationStream*: VkBool32
    extendedDynamicState3ConservativeRasterizationMode*: VkBool32
    extendedDynamicState3ExtraPrimitiveOverestimationSize*: VkBool32
    extendedDynamicState3DepthClipEnable*: VkBool32
    extendedDynamicState3SampleLocationsEnable*: VkBool32
    extendedDynamicState3ColorBlendAdvanced*: VkBool32
    extendedDynamicState3ProvokingVertexMode*: VkBool32
    extendedDynamicState3LineRasterizationMode*: VkBool32
    extendedDynamicState3LineStippleEnable*: VkBool32
    extendedDynamicState3DepthClipNegativeOneToOne*: VkBool32
    extendedDynamicState3ViewportWScalingEnable*: VkBool32
    extendedDynamicState3ViewportSwizzle*: VkBool32
    extendedDynamicState3CoverageToColorEnable*: VkBool32
    extendedDynamicState3CoverageToColorLocation*: VkBool32
    extendedDynamicState3CoverageModulationMode*: VkBool32
    extendedDynamicState3CoverageModulationTableEnable*: VkBool32
    extendedDynamicState3CoverageModulationTable*: VkBool32
    extendedDynamicState3CoverageReductionMode*: VkBool32
    extendedDynamicState3RepresentativeFragmentTestEnable*: VkBool32
    extendedDynamicState3ShadingRateImageEnable*: VkBool32

  VkPhysicalDeviceExtendedDynamicState3PropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    dynamicPrimitiveTopologyUnrestricted*: VkBool32

  VkColorBlendEquationEXT* = object
    srcColorBlendFactor*: VkBlendFactor
    dstColorBlendFactor*: VkBlendFactor
    colorBlendOp*: VkBlendOp
    srcAlphaBlendFactor*: VkBlendFactor
    dstAlphaBlendFactor*: VkBlendFactor
    alphaBlendOp*: VkBlendOp

  VkColorBlendAdvancedEXT* = object
    advancedBlendOp*: VkBlendOp
    srcPremultiplied*: VkBool32
    dstPremultiplied*: VkBool32
    blendOverlap*: VkBlendOverlapEXT
    clampResults*: VkBool32

  VkRenderPassTransformBeginInfoQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    transform*: VkSurfaceTransformFlagBitsKHR

  VkCopyCommandTransformInfoQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    transform*: VkSurfaceTransformFlagBitsKHR

  VkCommandBufferInheritanceRenderPassTransformInfoQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    transform*: VkSurfaceTransformFlagBitsKHR
    renderArea*: VkRect2D

  VkPhysicalDeviceDiagnosticsConfigFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    diagnosticsConfig*: VkBool32

  VkDeviceDiagnosticsConfigCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDeviceDiagnosticsConfigFlagsNV

  VkPipelineOfflineCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    pipelineIdentifier*: array[VK_UUID_SIZE, uint8]
    matchControl*: VkPipelineMatchControl
    poolEntrySize*: VkDeviceSize

  VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderZeroInitializeWorkgroupMemory*: VkBool32

  VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR* = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures

  VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderSubgroupUniformControlFlow*: VkBool32

  VkPhysicalDeviceRobustness2FeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    robustBufferAccess2*: VkBool32
    robustImageAccess2*: VkBool32
    nullDescriptor*: VkBool32

  VkPhysicalDeviceRobustness2PropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    robustStorageBufferAccessSizeAlignment*: VkDeviceSize
    robustUniformBufferAccessSizeAlignment*: VkDeviceSize

  VkPhysicalDeviceImageRobustnessFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    robustImageAccess*: VkBool32

  VkPhysicalDeviceImageRobustnessFeaturesEXT* = VkPhysicalDeviceImageRobustnessFeatures

  VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    workgroupMemoryExplicitLayout*: VkBool32
    workgroupMemoryExplicitLayoutScalarBlockLayout*: VkBool32
    workgroupMemoryExplicitLayout8BitAccess*: VkBool32
    workgroupMemoryExplicitLayout16BitAccess*: VkBool32

  VkPhysicalDevicePortabilitySubsetFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    constantAlphaColorBlendFactors*: VkBool32
    events*: VkBool32
    imageViewFormatReinterpretation*: VkBool32
    imageViewFormatSwizzle*: VkBool32
    imageView2DOn3DImage*: VkBool32
    multisampleArrayImage*: VkBool32
    mutableComparisonSamplers*: VkBool32
    pointPolygons*: VkBool32
    samplerMipLodBias*: VkBool32
    separateStencilMaskRef*: VkBool32
    shaderSampleRateInterpolationFunctions*: VkBool32
    tessellationIsolines*: VkBool32
    tessellationPointMode*: VkBool32
    triangleFans*: VkBool32
    vertexAttributeAccessBeyondStride*: VkBool32

  VkPhysicalDevicePortabilitySubsetPropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    minVertexInputBindingStrideAlignment*: uint32

  VkPhysicalDevice4444FormatsFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    formatA4R4G4B4*: VkBool32
    formatA4B4G4R4*: VkBool32

  VkPhysicalDeviceSubpassShadingFeaturesHUAWEI* = object
    sType*: VkStructureType
    pNext*: pointer
    subpassShading*: VkBool32

  VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI* = object
    sType*: VkStructureType
    pNext*: pointer
    clustercullingShader*: VkBool32
    multiviewClusterCullingShader*: VkBool32

  VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI* = object
    sType*: VkStructureType
    pNext*: pointer
    clusterShadingRate*: VkBool32

  VkBufferCopy2* = object
    sType*: VkStructureType
    pNext*: pointer
    srcOffset*: VkDeviceSize
    dstOffset*: VkDeviceSize
    size*: VkDeviceSize

  VkBufferCopy2KHR* = VkBufferCopy2

  VkImageCopy2* = object
    sType*: VkStructureType
    pNext*: pointer
    srcSubresource*: VkImageSubresourceLayers
    srcOffset*: VkOffset3D
    dstSubresource*: VkImageSubresourceLayers
    dstOffset*: VkOffset3D
    extent*: VkExtent3D

  VkImageCopy2KHR* = VkImageCopy2

  VkImageBlit2* = object
    sType*: VkStructureType
    pNext*: pointer
    srcSubresource*: VkImageSubresourceLayers
    srcOffsets*: array[2, VkOffset3D]
    dstSubresource*: VkImageSubresourceLayers
    dstOffsets*: array[2, VkOffset3D]

  VkImageBlit2KHR* = VkImageBlit2

  VkBufferImageCopy2* = object
    sType*: VkStructureType
    pNext*: pointer
    bufferOffset*: VkDeviceSize
    bufferRowLength*: uint32
    bufferImageHeight*: uint32
    imageSubresource*: VkImageSubresourceLayers
    imageOffset*: VkOffset3D
    imageExtent*: VkExtent3D

  VkBufferImageCopy2KHR* = VkBufferImageCopy2

  VkImageResolve2* = object
    sType*: VkStructureType
    pNext*: pointer
    srcSubresource*: VkImageSubresourceLayers
    srcOffset*: VkOffset3D
    dstSubresource*: VkImageSubresourceLayers
    dstOffset*: VkOffset3D
    extent*: VkExtent3D

  VkImageResolve2KHR* = VkImageResolve2

  VkCopyBufferInfo2* = object
    sType*: VkStructureType
    pNext*: pointer
    srcBuffer*: VkBuffer
    dstBuffer*: VkBuffer
    regionCount*: uint32
    pRegions*: ptr VkBufferCopy2

  VkCopyBufferInfo2KHR* = VkCopyBufferInfo2

  VkCopyImageInfo2* = object
    sType*: VkStructureType
    pNext*: pointer
    srcImage*: VkImage
    srcImageLayout*: VkImageLayout
    dstImage*: VkImage
    dstImageLayout*: VkImageLayout
    regionCount*: uint32
    pRegions*: ptr VkImageCopy2

  VkCopyImageInfo2KHR* = VkCopyImageInfo2

  VkBlitImageInfo2* = object
    sType*: VkStructureType
    pNext*: pointer
    srcImage*: VkImage
    srcImageLayout*: VkImageLayout
    dstImage*: VkImage
    dstImageLayout*: VkImageLayout
    regionCount*: uint32
    pRegions*: ptr VkImageBlit2
    filter*: VkFilter

  VkBlitImageInfo2KHR* = VkBlitImageInfo2

  VkCopyBufferToImageInfo2* = object
    sType*: VkStructureType
    pNext*: pointer
    srcBuffer*: VkBuffer
    dstImage*: VkImage
    dstImageLayout*: VkImageLayout
    regionCount*: uint32
    pRegions*: ptr VkBufferImageCopy2

  VkCopyBufferToImageInfo2KHR* = VkCopyBufferToImageInfo2

  VkCopyImageToBufferInfo2* = object
    sType*: VkStructureType
    pNext*: pointer
    srcImage*: VkImage
    srcImageLayout*: VkImageLayout
    dstBuffer*: VkBuffer
    regionCount*: uint32
    pRegions*: ptr VkBufferImageCopy2

  VkCopyImageToBufferInfo2KHR* = VkCopyImageToBufferInfo2

  VkResolveImageInfo2* = object
    sType*: VkStructureType
    pNext*: pointer
    srcImage*: VkImage
    srcImageLayout*: VkImageLayout
    dstImage*: VkImage
    dstImageLayout*: VkImageLayout
    regionCount*: uint32
    pRegions*: ptr VkImageResolve2

  VkResolveImageInfo2KHR* = VkResolveImageInfo2

  VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderImageInt64Atomics*: VkBool32
    sparseImageInt64Atomics*: VkBool32

  VkFragmentShadingRateAttachmentInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pFragmentShadingRateAttachment*: ptr VkAttachmentReference2
    shadingRateAttachmentTexelSize*: VkExtent2D

  VkPipelineFragmentShadingRateStateCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    fragmentSize*: VkExtent2D
    combinerOps*: array[2, VkFragmentShadingRateCombinerOpKHR]

  VkPhysicalDeviceFragmentShadingRateFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pipelineFragmentShadingRate*: VkBool32
    primitiveFragmentShadingRate*: VkBool32
    attachmentFragmentShadingRate*: VkBool32

  VkPhysicalDeviceFragmentShadingRatePropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    minFragmentShadingRateAttachmentTexelSize*: VkExtent2D
    maxFragmentShadingRateAttachmentTexelSize*: VkExtent2D
    maxFragmentShadingRateAttachmentTexelSizeAspectRatio*: uint32
    primitiveFragmentShadingRateWithMultipleViewports*: VkBool32
    layeredShadingRateAttachments*: VkBool32
    fragmentShadingRateNonTrivialCombinerOps*: VkBool32
    maxFragmentSize*: VkExtent2D
    maxFragmentSizeAspectRatio*: uint32
    maxFragmentShadingRateCoverageSamples*: uint32
    maxFragmentShadingRateRasterizationSamples*: VkSampleCountFlagBits
    fragmentShadingRateWithShaderDepthStencilWrites*: VkBool32
    fragmentShadingRateWithSampleMask*: VkBool32
    fragmentShadingRateWithShaderSampleMask*: VkBool32
    fragmentShadingRateWithConservativeRasterization*: VkBool32
    fragmentShadingRateWithFragmentShaderInterlock*: VkBool32
    fragmentShadingRateWithCustomSampleLocations*: VkBool32
    fragmentShadingRateStrictMultiplyCombiner*: VkBool32

  VkPhysicalDeviceFragmentShadingRateKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    sampleCounts*: VkSampleCountFlags
    fragmentSize*: VkExtent2D

  VkPhysicalDeviceShaderTerminateInvocationFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderTerminateInvocation*: VkBool32

  VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR* = VkPhysicalDeviceShaderTerminateInvocationFeatures

  VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    fragmentShadingRateEnums*: VkBool32
    supersampleFragmentShadingRates*: VkBool32
    noInvocationFragmentShadingRates*: VkBool32

  VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    maxFragmentShadingRateInvocationCount*: VkSampleCountFlagBits

  VkPipelineFragmentShadingRateEnumStateCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    shadingRateType*: VkFragmentShadingRateTypeNV
    shadingRate*: VkFragmentShadingRateNV
    combinerOps*: array[2, VkFragmentShadingRateCombinerOpKHR]

  VkAccelerationStructureBuildSizesInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    accelerationStructureSize*: VkDeviceSize
    updateScratchSize*: VkDeviceSize
    buildScratchSize*: VkDeviceSize

  VkPhysicalDeviceImage2DViewOf3DFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    image2DViewOf3D*: VkBool32
    sampler2DViewOf3D*: VkBool32

  VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    imageSlicedViewOf3D*: VkBool32

  VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    attachmentFeedbackLoopDynamicState*: VkBool32

  VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    mutableDescriptorType*: VkBool32

  VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE* = VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT

  VkMutableDescriptorTypeListEXT* = object
    descriptorTypeCount*: uint32
    pDescriptorTypes*: ptr VkDescriptorType

  VkMutableDescriptorTypeListVALVE* = VkMutableDescriptorTypeListEXT

  VkMutableDescriptorTypeCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    mutableDescriptorTypeListCount*: uint32
    pMutableDescriptorTypeLists*: ptr VkMutableDescriptorTypeListEXT

  VkMutableDescriptorTypeCreateInfoVALVE* = VkMutableDescriptorTypeCreateInfoEXT

  VkPhysicalDeviceDepthClipControlFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    depthClipControl*: VkBool32

  VkPipelineViewportDepthClipControlCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    negativeOneToOne*: VkBool32

  VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    vertexInputDynamicState*: VkBool32

  VkPhysicalDeviceExternalMemoryRDMAFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    externalMemoryRDMA*: VkBool32

  VkVertexInputBindingDescription2EXT* = object
    sType*: VkStructureType
    pNext*: pointer
    binding*: uint32
    stride*: uint32
    inputRate*: VkVertexInputRate
    divisor*: uint32

  VkVertexInputAttributeDescription2EXT* = object
    sType*: VkStructureType
    pNext*: pointer
    location*: uint32
    binding*: uint32
    format*: VkFormat
    offset*: uint32

  VkPhysicalDeviceColorWriteEnableFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    colorWriteEnable*: VkBool32

  VkPipelineColorWriteCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    attachmentCount*: uint32
    pColorWriteEnables*: ptr VkBool32

  VkMemoryBarrier2* = object
    sType*: VkStructureType
    pNext*: pointer
    srcStageMask*: VkPipelineStageFlags2
    srcAccessMask*: VkAccessFlags2
    dstStageMask*: VkPipelineStageFlags2
    dstAccessMask*: VkAccessFlags2

  VkMemoryBarrier2KHR* = VkMemoryBarrier2

  VkImageMemoryBarrier2* = object
    sType*: VkStructureType
    pNext*: pointer
    srcStageMask*: VkPipelineStageFlags2
    srcAccessMask*: VkAccessFlags2
    dstStageMask*: VkPipelineStageFlags2
    dstAccessMask*: VkAccessFlags2
    oldLayout*: VkImageLayout
    newLayout*: VkImageLayout
    srcQueueFamilyIndex*: uint32
    dstQueueFamilyIndex*: uint32
    image*: VkImage
    subresourceRange*: VkImageSubresourceRange

  VkImageMemoryBarrier2KHR* = VkImageMemoryBarrier2

  VkBufferMemoryBarrier2* = object
    sType*: VkStructureType
    pNext*: pointer
    srcStageMask*: VkPipelineStageFlags2
    srcAccessMask*: VkAccessFlags2
    dstStageMask*: VkPipelineStageFlags2
    dstAccessMask*: VkAccessFlags2
    srcQueueFamilyIndex*: uint32
    dstQueueFamilyIndex*: uint32
    buffer*: VkBuffer
    offset*: VkDeviceSize
    size*: VkDeviceSize

  VkBufferMemoryBarrier2KHR* = VkBufferMemoryBarrier2

  VkDependencyInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    dependencyFlags*: VkDependencyFlags
    memoryBarrierCount*: uint32
    pMemoryBarriers*: ptr VkMemoryBarrier2
    bufferMemoryBarrierCount*: uint32
    pBufferMemoryBarriers*: ptr VkBufferMemoryBarrier2
    imageMemoryBarrierCount*: uint32
    pImageMemoryBarriers*: ptr VkImageMemoryBarrier2

  VkDependencyInfoKHR* = VkDependencyInfo

  VkSemaphoreSubmitInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    semaphore*: VkSemaphore
    value*: uint64
    stageMask*: VkPipelineStageFlags2
    deviceIndex*: uint32

  VkSemaphoreSubmitInfoKHR* = VkSemaphoreSubmitInfo

  VkCommandBufferSubmitInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    commandBuffer*: VkCommandBuffer
    deviceMask*: uint32

  VkCommandBufferSubmitInfoKHR* = VkCommandBufferSubmitInfo

  VkSubmitInfo2* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkSubmitFlags
    waitSemaphoreInfoCount*: uint32
    pWaitSemaphoreInfos*: ptr VkSemaphoreSubmitInfo
    commandBufferInfoCount*: uint32
    pCommandBufferInfos*: ptr VkCommandBufferSubmitInfo
    signalSemaphoreInfoCount*: uint32
    pSignalSemaphoreInfos*: ptr VkSemaphoreSubmitInfo

  VkSubmitInfo2KHR* = VkSubmitInfo2

  VkQueueFamilyCheckpointProperties2NV* = object
    sType*: VkStructureType
    pNext*: pointer
    checkpointExecutionStageMask*: VkPipelineStageFlags2

  VkCheckpointData2NV* = object
    sType*: VkStructureType
    pNext*: pointer
    stage*: VkPipelineStageFlags2
    pCheckpointMarker*: pointer

  VkPhysicalDeviceSynchronization2Features* = object
    sType*: VkStructureType
    pNext*: pointer
    synchronization2*: VkBool32

  VkPhysicalDeviceSynchronization2FeaturesKHR* = VkPhysicalDeviceSynchronization2Features

  VkPhysicalDeviceHostImageCopyFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    hostImageCopy*: VkBool32

  VkPhysicalDeviceHostImageCopyPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    copySrcLayoutCount*: uint32
    pCopySrcLayouts*: ptr VkImageLayout
    copyDstLayoutCount*: uint32
    pCopyDstLayouts*: ptr VkImageLayout
    optimalTilingLayoutUUID*: array[VK_UUID_SIZE, uint8]
    identicalMemoryTypeRequirements*: VkBool32

  VkMemoryToImageCopyEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    pHostPointer*: pointer
    memoryRowLength*: uint32
    memoryImageHeight*: uint32
    imageSubresource*: VkImageSubresourceLayers
    imageOffset*: VkOffset3D
    imageExtent*: VkExtent3D

  VkImageToMemoryCopyEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    pHostPointer*: pointer
    memoryRowLength*: uint32
    memoryImageHeight*: uint32
    imageSubresource*: VkImageSubresourceLayers
    imageOffset*: VkOffset3D
    imageExtent*: VkExtent3D

  VkCopyMemoryToImageInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkHostImageCopyFlagsEXT
    dstImage*: VkImage
    dstImageLayout*: VkImageLayout
    regionCount*: uint32
    pRegions*: ptr VkMemoryToImageCopyEXT

  VkCopyImageToMemoryInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkHostImageCopyFlagsEXT
    srcImage*: VkImage
    srcImageLayout*: VkImageLayout
    regionCount*: uint32
    pRegions*: ptr VkImageToMemoryCopyEXT

  VkCopyImageToImageInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkHostImageCopyFlagsEXT
    srcImage*: VkImage
    srcImageLayout*: VkImageLayout
    dstImage*: VkImage
    dstImageLayout*: VkImageLayout
    regionCount*: uint32
    pRegions*: ptr VkImageCopy2

  VkHostImageLayoutTransitionInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    image*: VkImage
    oldLayout*: VkImageLayout
    newLayout*: VkImageLayout
    subresourceRange*: VkImageSubresourceRange

  VkSubresourceHostMemcpySizeEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    size*: VkDeviceSize

  VkHostImageCopyDevicePerformanceQueryEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    optimalDeviceAccess*: VkBool32
    identicalMemoryLayout*: VkBool32

  VkPhysicalDeviceVulkanSC10Properties* = object
    sType*: VkStructureType
    pNext*: pointer
    deviceNoDynamicHostAllocations*: VkBool32
    deviceDestroyFreesMemory*: VkBool32
    commandPoolMultipleCommandBuffersRecording*: VkBool32
    commandPoolResetCommandBuffer*: VkBool32
    commandBufferSimultaneousUse*: VkBool32
    secondaryCommandBufferNullOrImagelessFramebuffer*: VkBool32
    recycleDescriptorSetMemory*: VkBool32
    recyclePipelineMemory*: VkBool32
    maxRenderPassSubpasses*: uint32
    maxRenderPassDependencies*: uint32
    maxSubpassInputAttachments*: uint32
    maxSubpassPreserveAttachments*: uint32
    maxFramebufferAttachments*: uint32
    maxDescriptorSetLayoutBindings*: uint32
    maxQueryFaultCount*: uint32
    maxCallbackFaultCount*: uint32
    maxCommandPoolCommandBuffers*: uint32
    maxCommandBufferSize*: VkDeviceSize

  VkPipelinePoolSize* = object
    sType*: VkStructureType
    pNext*: pointer
    poolEntrySize*: VkDeviceSize
    poolEntryCount*: uint32

  VkDeviceObjectReservationCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    pipelineCacheCreateInfoCount*: uint32
    pPipelineCacheCreateInfos*: ptr VkPipelineCacheCreateInfo
    pipelinePoolSizeCount*: uint32
    pPipelinePoolSizes*: ptr VkPipelinePoolSize
    semaphoreRequestCount*: uint32
    commandBufferRequestCount*: uint32
    fenceRequestCount*: uint32
    deviceMemoryRequestCount*: uint32
    bufferRequestCount*: uint32
    imageRequestCount*: uint32
    eventRequestCount*: uint32
    queryPoolRequestCount*: uint32
    bufferViewRequestCount*: uint32
    imageViewRequestCount*: uint32
    layeredImageViewRequestCount*: uint32
    pipelineCacheRequestCount*: uint32
    pipelineLayoutRequestCount*: uint32
    renderPassRequestCount*: uint32
    graphicsPipelineRequestCount*: uint32
    computePipelineRequestCount*: uint32
    descriptorSetLayoutRequestCount*: uint32
    samplerRequestCount*: uint32
    descriptorPoolRequestCount*: uint32
    descriptorSetRequestCount*: uint32
    framebufferRequestCount*: uint32
    commandPoolRequestCount*: uint32
    samplerYcbcrConversionRequestCount*: uint32
    surfaceRequestCount*: uint32
    swapchainRequestCount*: uint32
    displayModeRequestCount*: uint32
    subpassDescriptionRequestCount*: uint32
    attachmentDescriptionRequestCount*: uint32
    descriptorSetLayoutBindingRequestCount*: uint32
    descriptorSetLayoutBindingLimit*: uint32
    maxImageViewMipLevels*: uint32
    maxImageViewArrayLayers*: uint32
    maxLayeredImageViewMipLevels*: uint32
    maxOcclusionQueriesPerPool*: uint32
    maxPipelineStatisticsQueriesPerPool*: uint32
    maxTimestampQueriesPerPool*: uint32
    maxImmutableSamplersPerDescriptorSetLayout*: uint32

  VkCommandPoolMemoryReservationCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    commandPoolReservedSize*: VkDeviceSize
    commandPoolMaxCommandBuffers*: uint32

  VkCommandPoolMemoryConsumption* = object
    sType*: VkStructureType
    pNext*: pointer
    commandPoolAllocated*: VkDeviceSize
    commandPoolReservedSize*: VkDeviceSize
    commandBufferAllocated*: VkDeviceSize

  VkPhysicalDeviceVulkanSC10Features* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderAtomicInstructions*: VkBool32

  VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    primitivesGeneratedQuery*: VkBool32
    primitivesGeneratedQueryWithRasterizerDiscard*: VkBool32
    primitivesGeneratedQueryWithNonZeroStreams*: VkBool32

  VkPhysicalDeviceLegacyDitheringFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    legacyDithering*: VkBool32

  VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    multisampledRenderToSingleSampled*: VkBool32

  VkSubpassResolvePerformanceQueryEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    optimal*: VkBool32

  VkMultisampledRenderToSingleSampledInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    multisampledRenderToSingleSampledEnable*: VkBool32
    rasterizationSamples*: VkSampleCountFlagBits

  VkPhysicalDevicePipelineProtectedAccessFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    pipelineProtectedAccess*: VkBool32

  VkQueueFamilyVideoPropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    videoCodecOperations*: VkVideoCodecOperationFlagsKHR

  VkQueueFamilyQueryResultStatusPropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    queryResultStatusSupport*: VkBool32

  VkVideoProfileListInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    profileCount*: uint32
    pProfiles*: ptr VkVideoProfileInfoKHR

  VkPhysicalDeviceVideoFormatInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    imageUsage*: VkImageUsageFlags

  VkVideoFormatPropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    format*: VkFormat
    componentMapping*: VkComponentMapping
    imageCreateFlags*: VkImageCreateFlags
    imageType*: VkImageType
    imageTiling*: VkImageTiling
    imageUsageFlags*: VkImageUsageFlags

  VkVideoProfileInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    videoCodecOperation*: VkVideoCodecOperationFlagBitsKHR
    chromaSubsampling*: VkVideoChromaSubsamplingFlagsKHR
    lumaBitDepth*: VkVideoComponentBitDepthFlagsKHR
    chromaBitDepth*: VkVideoComponentBitDepthFlagsKHR

  VkVideoCapabilitiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkVideoCapabilityFlagsKHR
    minBitstreamBufferOffsetAlignment*: VkDeviceSize
    minBitstreamBufferSizeAlignment*: VkDeviceSize
    pictureAccessGranularity*: VkExtent2D
    minCodedExtent*: VkExtent2D
    maxCodedExtent*: VkExtent2D
    maxDpbSlots*: uint32
    maxActiveReferencePictures*: uint32
    stdHeaderVersion*: VkExtensionProperties

  VkVideoSessionMemoryRequirementsKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    memoryBindIndex*: uint32
    memoryRequirements*: VkMemoryRequirements

  VkBindVideoSessionMemoryInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    memoryBindIndex*: uint32
    memory*: VkDeviceMemory
    memoryOffset*: VkDeviceSize
    memorySize*: VkDeviceSize

  VkVideoPictureResourceInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    codedOffset*: VkOffset2D
    codedExtent*: VkExtent2D
    baseArrayLayer*: uint32
    imageViewBinding*: VkImageView

  VkVideoReferenceSlotInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    slotIndex*: int32
    pPictureResource*: ptr VkVideoPictureResourceInfoKHR

  VkVideoDecodeCapabilitiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkVideoDecodeCapabilityFlagsKHR

  VkVideoDecodeUsageInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    videoUsageHints*: VkVideoDecodeUsageFlagsKHR

  VkVideoDecodeInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkVideoDecodeFlagsKHR
    srcBuffer*: VkBuffer
    srcBufferOffset*: VkDeviceSize
    srcBufferRange*: VkDeviceSize
    dstPictureResource*: VkVideoPictureResourceInfoKHR
    pSetupReferenceSlot*: ptr VkVideoReferenceSlotInfoKHR
    referenceSlotCount*: uint32
    pReferenceSlots*: ptr VkVideoReferenceSlotInfoKHR

  VkPhysicalDeviceVideoMaintenance1FeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    videoMaintenance1*: VkBool32

  VkVideoInlineQueryInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    queryPool*: VkQueryPool
    firstQuery*: uint32
    queryCount*: uint32
  StdVideoH264ProfileIdc* {.nodecl.} = object
  StdVideoH264LevelIdc* {.nodecl.} = object
  StdVideoH264ChromaFormatIdc* {.nodecl.} = object
  StdVideoH264PocType* {.nodecl.} = object
  StdVideoH264SpsFlags* {.nodecl.} = object
  StdVideoH264ScalingLists* {.nodecl.} = object
  StdVideoH264SequenceParameterSetVui* {.nodecl.} = object
  StdVideoH264AspectRatioIdc* {.nodecl.} = object
  StdVideoH264HrdParameters* {.nodecl.} = object
  StdVideoH264SpsVuiFlags* {.nodecl.} = object
  StdVideoH264WeightedBipredIdc* {.nodecl.} = object
  StdVideoH264PpsFlags* {.nodecl.} = object
  StdVideoH264SliceType* {.nodecl.} = object
  StdVideoH264CabacInitIdc* {.nodecl.} = object
  StdVideoH264DisableDeblockingFilterIdc* {.nodecl.} = object
  StdVideoH264PictureType* {.nodecl.} = object
  StdVideoH264ModificationOfPicNumsIdc* {.nodecl.} = object
  StdVideoH264MemMgmtControlOp* {.nodecl.} = object
  StdVideoDecodeH264PictureInfo* {.nodecl.} = object
  StdVideoDecodeH264ReferenceInfo* {.nodecl.} = object
  StdVideoDecodeH264PictureInfoFlags* {.nodecl.} = object
  StdVideoDecodeH264ReferenceInfoFlags* {.nodecl.} = object

  VkVideoDecodeH264ProfileInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    stdProfileIdc*: StdVideoH264ProfileIdc
    pictureLayout*: VkVideoDecodeH264PictureLayoutFlagBitsKHR

  VkVideoDecodeH264CapabilitiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    maxLevelIdc*: StdVideoH264LevelIdc
    fieldOffsetGranularity*: VkOffset2D
  StdVideoH264SequenceParameterSet* {.nodecl.} = object
  StdVideoH264PictureParameterSet* {.nodecl.} = object

  VkVideoDecodeH264SessionParametersAddInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    stdSPSCount*: uint32
    pStdSPSs*: ptr StdVideoH264SequenceParameterSet
    stdPPSCount*: uint32
    pStdPPSs*: ptr StdVideoH264PictureParameterSet

  VkVideoDecodeH264SessionParametersCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    maxStdSPSCount*: uint32
    maxStdPPSCount*: uint32
    pParametersAddInfo*: ptr VkVideoDecodeH264SessionParametersAddInfoKHR

  VkVideoDecodeH264PictureInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pStdPictureInfo*: ptr StdVideoDecodeH264PictureInfo
    sliceCount*: uint32
    pSliceOffsets*: ptr uint32

  VkVideoDecodeH264DpbSlotInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pStdReferenceInfo*: ptr StdVideoDecodeH264ReferenceInfo
  StdVideoH265ProfileIdc* {.nodecl.} = object
  StdVideoH265VideoParameterSet* {.nodecl.} = object
  StdVideoH265SequenceParameterSet* {.nodecl.} = object
  StdVideoH265PictureParameterSet* {.nodecl.} = object
  StdVideoH265DecPicBufMgr* {.nodecl.} = object
  StdVideoH265HrdParameters* {.nodecl.} = object
  StdVideoH265VpsFlags* {.nodecl.} = object
  StdVideoH265LevelIdc* {.nodecl.} = object
  StdVideoH265SpsFlags* {.nodecl.} = object
  StdVideoH265ScalingLists* {.nodecl.} = object
  StdVideoH265SequenceParameterSetVui* {.nodecl.} = object
  StdVideoH265PredictorPaletteEntries* {.nodecl.} = object
  StdVideoH265PpsFlags* {.nodecl.} = object
  StdVideoH265SubLayerHrdParameters* {.nodecl.} = object
  StdVideoH265HrdFlags* {.nodecl.} = object
  StdVideoH265SpsVuiFlags* {.nodecl.} = object
  StdVideoH265SliceType* {.nodecl.} = object
  StdVideoH265PictureType* {.nodecl.} = object
  StdVideoDecodeH265PictureInfo* {.nodecl.} = object
  StdVideoDecodeH265ReferenceInfo* {.nodecl.} = object
  StdVideoDecodeH265PictureInfoFlags* {.nodecl.} = object
  StdVideoDecodeH265ReferenceInfoFlags* {.nodecl.} = object

  VkVideoDecodeH265ProfileInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    stdProfileIdc*: StdVideoH265ProfileIdc

  VkVideoDecodeH265CapabilitiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    maxLevelIdc*: StdVideoH265LevelIdc

  VkVideoDecodeH265SessionParametersAddInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    stdVPSCount*: uint32
    pStdVPSs*: ptr StdVideoH265VideoParameterSet
    stdSPSCount*: uint32
    pStdSPSs*: ptr StdVideoH265SequenceParameterSet
    stdPPSCount*: uint32
    pStdPPSs*: ptr StdVideoH265PictureParameterSet

  VkVideoDecodeH265SessionParametersCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    maxStdVPSCount*: uint32
    maxStdSPSCount*: uint32
    maxStdPPSCount*: uint32
    pParametersAddInfo*: ptr VkVideoDecodeH265SessionParametersAddInfoKHR

  VkVideoDecodeH265PictureInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pStdPictureInfo*: ptr StdVideoDecodeH265PictureInfo
    sliceSegmentCount*: uint32
    pSliceSegmentOffsets*: ptr uint32

  VkVideoDecodeH265DpbSlotInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pStdReferenceInfo*: ptr StdVideoDecodeH265ReferenceInfo
  StdVideoAV1Profile* {.nodecl.} = object
  StdVideoAV1Level* {.nodecl.} = object
  StdVideoAV1SequenceHeader* {.nodecl.} = object
  StdVideoDecodeAV1PictureInfo* {.nodecl.} = object
  StdVideoDecodeAV1ReferenceInfo* {.nodecl.} = object

  VkVideoDecodeAV1ProfileInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    stdProfile*: StdVideoAV1Profile
    filmGrainSupport*: VkBool32

  VkVideoDecodeAV1CapabilitiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    maxLevel*: StdVideoAV1Level

  VkVideoDecodeAV1SessionParametersCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pStdSequenceHeader*: ptr StdVideoAV1SequenceHeader

  VkVideoDecodeAV1PictureInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pStdPictureInfo*: ptr StdVideoDecodeAV1PictureInfo
    referenceNameSlotIndices*: array[VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR, int32]
    frameHeaderOffset*: uint32
    tileCount*: uint32
    pTileOffsets*: ptr uint32
    pTileSizes*: ptr uint32

  VkVideoDecodeAV1DpbSlotInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pStdReferenceInfo*: ptr StdVideoDecodeAV1ReferenceInfo

  VkVideoSessionCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    queueFamilyIndex*: uint32
    flags*: VkVideoSessionCreateFlagsKHR
    pVideoProfile*: ptr VkVideoProfileInfoKHR
    pictureFormat*: VkFormat
    maxCodedExtent*: VkExtent2D
    referencePictureFormat*: VkFormat
    maxDpbSlots*: uint32
    maxActiveReferencePictures*: uint32
    pStdHeaderVersion*: ptr VkExtensionProperties

  VkVideoSessionParametersCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkVideoSessionParametersCreateFlagsKHR
    videoSessionParametersTemplate*: VkVideoSessionParametersKHR
    videoSession*: VkVideoSessionKHR

  VkVideoSessionParametersUpdateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    updateSequenceCount*: uint32

  VkVideoEncodeSessionParametersGetInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    videoSessionParameters*: VkVideoSessionParametersKHR

  VkVideoEncodeSessionParametersFeedbackInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    hasOverrides*: VkBool32

  VkVideoBeginCodingInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkVideoBeginCodingFlagsKHR
    videoSession*: VkVideoSessionKHR
    videoSessionParameters*: VkVideoSessionParametersKHR
    referenceSlotCount*: uint32
    pReferenceSlots*: ptr VkVideoReferenceSlotInfoKHR

  VkVideoEndCodingInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkVideoEndCodingFlagsKHR

  VkVideoCodingControlInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkVideoCodingControlFlagsKHR

  VkVideoEncodeUsageInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    videoUsageHints*: VkVideoEncodeUsageFlagsKHR
    videoContentHints*: VkVideoEncodeContentFlagsKHR
    tuningMode*: VkVideoEncodeTuningModeKHR

  VkVideoEncodeInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkVideoEncodeFlagsKHR
    dstBuffer*: VkBuffer
    dstBufferOffset*: VkDeviceSize
    dstBufferRange*: VkDeviceSize
    srcPictureResource*: VkVideoPictureResourceInfoKHR
    pSetupReferenceSlot*: ptr VkVideoReferenceSlotInfoKHR
    referenceSlotCount*: uint32
    pReferenceSlots*: ptr VkVideoReferenceSlotInfoKHR
    precedingExternallyEncodedBytes*: uint32

  VkQueryPoolVideoEncodeFeedbackCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    encodeFeedbackFlags*: VkVideoEncodeFeedbackFlagsKHR

  VkVideoEncodeQualityLevelInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    qualityLevel*: uint32

  VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pVideoProfile*: ptr VkVideoProfileInfoKHR
    qualityLevel*: uint32

  VkVideoEncodeQualityLevelPropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    preferredRateControlMode*: VkVideoEncodeRateControlModeFlagBitsKHR
    preferredRateControlLayerCount*: uint32

  VkVideoEncodeRateControlInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkVideoEncodeRateControlFlagsKHR
    rateControlMode*: VkVideoEncodeRateControlModeFlagBitsKHR
    layerCount*: uint32
    pLayers*: ptr VkVideoEncodeRateControlLayerInfoKHR
    virtualBufferSizeInMs*: uint32
    initialVirtualBufferSizeInMs*: uint32

  VkVideoEncodeRateControlLayerInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    averageBitrate*: uint64
    maxBitrate*: uint64
    frameRateNumerator*: uint32
    frameRateDenominator*: uint32

  VkVideoEncodeCapabilitiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkVideoEncodeCapabilityFlagsKHR
    rateControlModes*: VkVideoEncodeRateControlModeFlagsKHR
    maxRateControlLayers*: uint32
    maxBitrate*: uint64
    maxQualityLevels*: uint32
    encodeInputPictureGranularity*: VkExtent2D
    supportedEncodeFeedbackFlags*: VkVideoEncodeFeedbackFlagsKHR

  VkVideoEncodeH264CapabilitiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkVideoEncodeH264CapabilityFlagsKHR
    maxLevelIdc*: StdVideoH264LevelIdc
    maxSliceCount*: uint32
    maxPPictureL0ReferenceCount*: uint32
    maxBPictureL0ReferenceCount*: uint32
    maxL1ReferenceCount*: uint32
    maxTemporalLayerCount*: uint32
    expectDyadicTemporalLayerPattern*: VkBool32
    minQp*: int32
    maxQp*: int32
    prefersGopRemainingFrames*: VkBool32
    requiresGopRemainingFrames*: VkBool32
    stdSyntaxFlags*: VkVideoEncodeH264StdFlagsKHR

  VkVideoEncodeH264QualityLevelPropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    preferredRateControlFlags*: VkVideoEncodeH264RateControlFlagsKHR
    preferredGopFrameCount*: uint32
    preferredIdrPeriod*: uint32
    preferredConsecutiveBFrameCount*: uint32
    preferredTemporalLayerCount*: uint32
    preferredConstantQp*: VkVideoEncodeH264QpKHR
    preferredMaxL0ReferenceCount*: uint32
    preferredMaxL1ReferenceCount*: uint32
    preferredStdEntropyCodingModeFlag*: VkBool32
  StdVideoEncodeH264SliceHeader* {.nodecl.} = object
  StdVideoEncodeH264PictureInfo* {.nodecl.} = object
  StdVideoEncodeH264ReferenceInfo* {.nodecl.} = object
  StdVideoEncodeH264SliceHeaderFlags* {.nodecl.} = object
  StdVideoEncodeH264ReferenceListsInfo* {.nodecl.} = object
  StdVideoEncodeH264PictureInfoFlags* {.nodecl.} = object
  StdVideoEncodeH264ReferenceInfoFlags* {.nodecl.} = object
  StdVideoEncodeH264RefMgmtFlags* {.nodecl.} = object
  StdVideoEncodeH264RefListModEntry* {.nodecl.} = object
  StdVideoEncodeH264RefPicMarkingEntry* {.nodecl.} = object

  VkVideoEncodeH264SessionCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    useMaxLevelIdc*: VkBool32
    maxLevelIdc*: StdVideoH264LevelIdc

  VkVideoEncodeH264SessionParametersAddInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    stdSPSCount*: uint32
    pStdSPSs*: ptr StdVideoH264SequenceParameterSet
    stdPPSCount*: uint32
    pStdPPSs*: ptr StdVideoH264PictureParameterSet

  VkVideoEncodeH264SessionParametersCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    maxStdSPSCount*: uint32
    maxStdPPSCount*: uint32
    pParametersAddInfo*: ptr VkVideoEncodeH264SessionParametersAddInfoKHR

  VkVideoEncodeH264SessionParametersGetInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    writeStdSPS*: VkBool32
    writeStdPPS*: VkBool32
    stdSPSId*: uint32
    stdPPSId*: uint32

  VkVideoEncodeH264SessionParametersFeedbackInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    hasStdSPSOverrides*: VkBool32
    hasStdPPSOverrides*: VkBool32

  VkVideoEncodeH264DpbSlotInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pStdReferenceInfo*: ptr StdVideoEncodeH264ReferenceInfo

  VkVideoEncodeH264PictureInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    naluSliceEntryCount*: uint32
    pNaluSliceEntries*: ptr VkVideoEncodeH264NaluSliceInfoKHR
    pStdPictureInfo*: ptr StdVideoEncodeH264PictureInfo
    generatePrefixNalu*: VkBool32

  VkVideoEncodeH264ProfileInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    stdProfileIdc*: StdVideoH264ProfileIdc

  VkVideoEncodeH264NaluSliceInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    constantQp*: int32
    pStdSliceHeader*: ptr StdVideoEncodeH264SliceHeader

  VkVideoEncodeH264RateControlInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkVideoEncodeH264RateControlFlagsKHR
    gopFrameCount*: uint32
    idrPeriod*: uint32
    consecutiveBFrameCount*: uint32
    temporalLayerCount*: uint32

  VkVideoEncodeH264QpKHR* = object
    qpI*: int32
    qpP*: int32
    qpB*: int32

  VkVideoEncodeH264FrameSizeKHR* = object
    frameISize*: uint32
    framePSize*: uint32
    frameBSize*: uint32

  VkVideoEncodeH264GopRemainingFrameInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    useGopRemainingFrames*: VkBool32
    gopRemainingI*: uint32
    gopRemainingP*: uint32
    gopRemainingB*: uint32

  VkVideoEncodeH264RateControlLayerInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    useMinQp*: VkBool32
    minQp*: VkVideoEncodeH264QpKHR
    useMaxQp*: VkBool32
    maxQp*: VkVideoEncodeH264QpKHR
    useMaxFrameSize*: VkBool32
    maxFrameSize*: VkVideoEncodeH264FrameSizeKHR

  VkVideoEncodeH265CapabilitiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkVideoEncodeH265CapabilityFlagsKHR
    maxLevelIdc*: StdVideoH265LevelIdc
    maxSliceSegmentCount*: uint32
    maxTiles*: VkExtent2D
    ctbSizes*: VkVideoEncodeH265CtbSizeFlagsKHR
    transformBlockSizes*: VkVideoEncodeH265TransformBlockSizeFlagsKHR
    maxPPictureL0ReferenceCount*: uint32
    maxBPictureL0ReferenceCount*: uint32
    maxL1ReferenceCount*: uint32
    maxSubLayerCount*: uint32
    expectDyadicTemporalSubLayerPattern*: VkBool32
    minQp*: int32
    maxQp*: int32
    prefersGopRemainingFrames*: VkBool32
    requiresGopRemainingFrames*: VkBool32
    stdSyntaxFlags*: VkVideoEncodeH265StdFlagsKHR

  VkVideoEncodeH265QualityLevelPropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    preferredRateControlFlags*: VkVideoEncodeH265RateControlFlagsKHR
    preferredGopFrameCount*: uint32
    preferredIdrPeriod*: uint32
    preferredConsecutiveBFrameCount*: uint32
    preferredSubLayerCount*: uint32
    preferredConstantQp*: VkVideoEncodeH265QpKHR
    preferredMaxL0ReferenceCount*: uint32
    preferredMaxL1ReferenceCount*: uint32
  StdVideoEncodeH265PictureInfoFlags* {.nodecl.} = object
  StdVideoEncodeH265PictureInfo* {.nodecl.} = object
  StdVideoEncodeH265SliceSegmentHeader* {.nodecl.} = object
  StdVideoEncodeH265ReferenceInfo* {.nodecl.} = object
  StdVideoEncodeH265ReferenceListsInfo* {.nodecl.} = object
  StdVideoEncodeH265SliceSegmentHeaderFlags* {.nodecl.} = object
  StdVideoEncodeH265ReferenceInfoFlags* {.nodecl.} = object
  StdVideoEncodeH265ReferenceModificationFlags* {.nodecl.} = object

  VkVideoEncodeH265SessionCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    useMaxLevelIdc*: VkBool32
    maxLevelIdc*: StdVideoH265LevelIdc

  VkVideoEncodeH265SessionParametersAddInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    stdVPSCount*: uint32
    pStdVPSs*: ptr StdVideoH265VideoParameterSet
    stdSPSCount*: uint32
    pStdSPSs*: ptr StdVideoH265SequenceParameterSet
    stdPPSCount*: uint32
    pStdPPSs*: ptr StdVideoH265PictureParameterSet

  VkVideoEncodeH265SessionParametersCreateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    maxStdVPSCount*: uint32
    maxStdSPSCount*: uint32
    maxStdPPSCount*: uint32
    pParametersAddInfo*: ptr VkVideoEncodeH265SessionParametersAddInfoKHR

  VkVideoEncodeH265SessionParametersGetInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    writeStdVPS*: VkBool32
    writeStdSPS*: VkBool32
    writeStdPPS*: VkBool32
    stdVPSId*: uint32
    stdSPSId*: uint32
    stdPPSId*: uint32

  VkVideoEncodeH265SessionParametersFeedbackInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    hasStdVPSOverrides*: VkBool32
    hasStdSPSOverrides*: VkBool32
    hasStdPPSOverrides*: VkBool32

  VkVideoEncodeH265PictureInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    naluSliceSegmentEntryCount*: uint32
    pNaluSliceSegmentEntries*: ptr VkVideoEncodeH265NaluSliceSegmentInfoKHR
    pStdPictureInfo*: ptr StdVideoEncodeH265PictureInfo

  VkVideoEncodeH265NaluSliceSegmentInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    constantQp*: int32
    pStdSliceSegmentHeader*: ptr StdVideoEncodeH265SliceSegmentHeader

  VkVideoEncodeH265RateControlInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkVideoEncodeH265RateControlFlagsKHR
    gopFrameCount*: uint32
    idrPeriod*: uint32
    consecutiveBFrameCount*: uint32
    subLayerCount*: uint32

  VkVideoEncodeH265QpKHR* = object
    qpI*: int32
    qpP*: int32
    qpB*: int32

  VkVideoEncodeH265FrameSizeKHR* = object
    frameISize*: uint32
    framePSize*: uint32
    frameBSize*: uint32

  VkVideoEncodeH265GopRemainingFrameInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    useGopRemainingFrames*: VkBool32
    gopRemainingI*: uint32
    gopRemainingP*: uint32
    gopRemainingB*: uint32

  VkVideoEncodeH265RateControlLayerInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    useMinQp*: VkBool32
    minQp*: VkVideoEncodeH265QpKHR
    useMaxQp*: VkBool32
    maxQp*: VkVideoEncodeH265QpKHR
    useMaxFrameSize*: VkBool32
    maxFrameSize*: VkVideoEncodeH265FrameSizeKHR

  VkVideoEncodeH265ProfileInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    stdProfileIdc*: StdVideoH265ProfileIdc

  VkVideoEncodeH265DpbSlotInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pStdReferenceInfo*: ptr StdVideoEncodeH265ReferenceInfo

  VkPhysicalDeviceInheritedViewportScissorFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    inheritedViewportScissor2D*: VkBool32

  VkCommandBufferInheritanceViewportScissorInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    viewportScissor2D*: VkBool32
    viewportDepthCount*: uint32
    pViewportDepths*: ptr VkViewport

  VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    ycbcr2plane444Formats*: VkBool32

  VkPhysicalDeviceProvokingVertexFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    provokingVertexLast*: VkBool32
    transformFeedbackPreservesProvokingVertex*: VkBool32

  VkPhysicalDeviceProvokingVertexPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    provokingVertexModePerPipeline*: VkBool32
    transformFeedbackPreservesTriangleFanProvokingVertex*: VkBool32

  VkPipelineRasterizationProvokingVertexStateCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    provokingVertexMode*: VkProvokingVertexModeEXT

  VkCuModuleCreateInfoNVX* = object
    sType*: VkStructureType
    pNext*: pointer
    dataSize*: uint
    pData*: pointer

  VkCuFunctionCreateInfoNVX* = object
    sType*: VkStructureType
    pNext*: pointer
    module*: VkCuModuleNVX
    pName*: cstring

  VkCuLaunchInfoNVX* = object
    sType*: VkStructureType
    pNext*: pointer
    function*: VkCuFunctionNVX
    gridDimX*: uint32
    gridDimY*: uint32
    gridDimZ*: uint32
    blockDimX*: uint32
    blockDimY*: uint32
    blockDimZ*: uint32
    sharedMemBytes*: uint32
    paramCount*: uint
    pParams*: ptr pointer
    extraCount*: uint
    pExtras*: ptr pointer

  VkPhysicalDeviceDescriptorBufferFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    descriptorBuffer*: VkBool32
    descriptorBufferCaptureReplay*: VkBool32
    descriptorBufferImageLayoutIgnored*: VkBool32
    descriptorBufferPushDescriptors*: VkBool32

  VkPhysicalDeviceDescriptorBufferPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    combinedImageSamplerDescriptorSingleArray*: VkBool32
    bufferlessPushDescriptors*: VkBool32
    allowSamplerImageViewPostSubmitCreation*: VkBool32
    descriptorBufferOffsetAlignment*: VkDeviceSize
    maxDescriptorBufferBindings*: uint32
    maxResourceDescriptorBufferBindings*: uint32
    maxSamplerDescriptorBufferBindings*: uint32
    maxEmbeddedImmutableSamplerBindings*: uint32
    maxEmbeddedImmutableSamplers*: uint32
    bufferCaptureReplayDescriptorDataSize*: uint
    imageCaptureReplayDescriptorDataSize*: uint
    imageViewCaptureReplayDescriptorDataSize*: uint
    samplerCaptureReplayDescriptorDataSize*: uint
    accelerationStructureCaptureReplayDescriptorDataSize*: uint
    samplerDescriptorSize*: uint
    combinedImageSamplerDescriptorSize*: uint
    sampledImageDescriptorSize*: uint
    storageImageDescriptorSize*: uint
    uniformTexelBufferDescriptorSize*: uint
    robustUniformTexelBufferDescriptorSize*: uint
    storageTexelBufferDescriptorSize*: uint
    robustStorageTexelBufferDescriptorSize*: uint
    uniformBufferDescriptorSize*: uint
    robustUniformBufferDescriptorSize*: uint
    storageBufferDescriptorSize*: uint
    robustStorageBufferDescriptorSize*: uint
    inputAttachmentDescriptorSize*: uint
    accelerationStructureDescriptorSize*: uint
    maxSamplerDescriptorBufferRange*: VkDeviceSize
    maxResourceDescriptorBufferRange*: VkDeviceSize
    samplerDescriptorBufferAddressSpaceSize*: VkDeviceSize
    resourceDescriptorBufferAddressSpaceSize*: VkDeviceSize
    descriptorBufferAddressSpaceSize*: VkDeviceSize

  VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    combinedImageSamplerDensityMapDescriptorSize*: uint

  VkDescriptorAddressInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    address*: VkDeviceAddress
    range*: VkDeviceSize
    format*: VkFormat

  VkDescriptorBufferBindingInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    address*: VkDeviceAddress
    usage*: VkBufferUsageFlags

  VkDescriptorBufferBindingPushDescriptorBufferHandleEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    buffer*: VkBuffer

  VkDescriptorDataEXT* {.union.} = object
    pSampler*: ptr VkSampler
    pCombinedImageSampler*: ptr VkDescriptorImageInfo
    pInputAttachmentImage*: ptr VkDescriptorImageInfo
    pSampledImage*: ptr VkDescriptorImageInfo
    pStorageImage*: ptr VkDescriptorImageInfo
    pUniformTexelBuffer*: ptr VkDescriptorAddressInfoEXT
    pStorageTexelBuffer*: ptr VkDescriptorAddressInfoEXT
    pUniformBuffer*: ptr VkDescriptorAddressInfoEXT
    pStorageBuffer*: ptr VkDescriptorAddressInfoEXT
    accelerationStructure*: VkDeviceAddress

  VkDescriptorGetInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    `type`*: VkDescriptorType
    data*: VkDescriptorDataEXT

  VkBufferCaptureDescriptorDataInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    buffer*: VkBuffer

  VkImageCaptureDescriptorDataInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    image*: VkImage

  VkImageViewCaptureDescriptorDataInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    imageView*: VkImageView

  VkSamplerCaptureDescriptorDataInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    sampler*: VkSampler

  VkAccelerationStructureCaptureDescriptorDataInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    accelerationStructure*: VkAccelerationStructureKHR
    accelerationStructureNV*: VkAccelerationStructureNV

  VkOpaqueCaptureDescriptorDataCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    opaqueCaptureDescriptorData*: pointer

  VkPhysicalDeviceShaderIntegerDotProductFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderIntegerDotProduct*: VkBool32

  VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR* = VkPhysicalDeviceShaderIntegerDotProductFeatures

  VkPhysicalDeviceShaderIntegerDotProductProperties* = object
    sType*: VkStructureType
    pNext*: pointer
    integerDotProduct8BitUnsignedAccelerated*: VkBool32
    integerDotProduct8BitSignedAccelerated*: VkBool32
    integerDotProduct8BitMixedSignednessAccelerated*: VkBool32
    integerDotProduct4x8BitPackedUnsignedAccelerated*: VkBool32
    integerDotProduct4x8BitPackedSignedAccelerated*: VkBool32
    integerDotProduct4x8BitPackedMixedSignednessAccelerated*: VkBool32
    integerDotProduct16BitUnsignedAccelerated*: VkBool32
    integerDotProduct16BitSignedAccelerated*: VkBool32
    integerDotProduct16BitMixedSignednessAccelerated*: VkBool32
    integerDotProduct32BitUnsignedAccelerated*: VkBool32
    integerDotProduct32BitSignedAccelerated*: VkBool32
    integerDotProduct32BitMixedSignednessAccelerated*: VkBool32
    integerDotProduct64BitUnsignedAccelerated*: VkBool32
    integerDotProduct64BitSignedAccelerated*: VkBool32
    integerDotProduct64BitMixedSignednessAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating8BitSignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating16BitSignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating32BitSignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating64BitSignedAccelerated*: VkBool32
    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated*: VkBool32

  VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR* = VkPhysicalDeviceShaderIntegerDotProductProperties

  VkPhysicalDeviceDrmPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    hasPrimary*: VkBool32
    hasRender*: VkBool32
    primaryMajor*: int64
    primaryMinor*: int64
    renderMajor*: int64
    renderMinor*: int64

  VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    fragmentShaderBarycentric*: VkBool32

  VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    triStripVertexOrderIndependentOfProvokingVertex*: VkBool32

  VkPhysicalDeviceRayTracingMotionBlurFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    rayTracingMotionBlur*: VkBool32
    rayTracingMotionBlurPipelineTraceRaysIndirect*: VkBool32

  VkAccelerationStructureGeometryMotionTrianglesDataNV* = object
    sType*: VkStructureType
    pNext*: pointer
    vertexData*: VkDeviceOrHostAddressConstKHR

  VkAccelerationStructureMotionInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    maxInstances*: uint32
    flags*: VkAccelerationStructureMotionInfoFlagsNV

  VkSRTDataNV* = object
    sx*: float32
    a*: float32
    b*: float32
    pvx*: float32
    sy*: float32
    c*: float32
    pvy*: float32
    sz*: float32
    pvz*: float32
    qx*: float32
    qy*: float32
    qz*: float32
    qw*: float32
    tx*: float32
    ty*: float32
    tz*: float32

  VkAccelerationStructureSRTMotionInstanceNV* = object
    transformT0*: VkSRTDataNV
    transformT1*: VkSRTDataNV
    instanceCustomIndex*: uint32
    mask*: uint32
    instanceShaderBindingTableRecordOffset*: uint32
    flags*: VkGeometryInstanceFlagsKHR
    accelerationStructureReference*: uint64

  VkAccelerationStructureMatrixMotionInstanceNV* = object
    transformT0*: VkTransformMatrixKHR
    transformT1*: VkTransformMatrixKHR
    instanceCustomIndex*: uint32
    mask*: uint32
    instanceShaderBindingTableRecordOffset*: uint32
    flags*: VkGeometryInstanceFlagsKHR
    accelerationStructureReference*: uint64

  VkAccelerationStructureMotionInstanceDataNV* {.union.} = object
    staticInstance*: VkAccelerationStructureInstanceKHR
    matrixMotionInstance*: VkAccelerationStructureMatrixMotionInstanceNV
    srtMotionInstance*: VkAccelerationStructureSRTMotionInstanceNV

  VkAccelerationStructureMotionInstanceNV* = object
    `type`*: VkAccelerationStructureMotionInstanceTypeNV
    flags*: VkAccelerationStructureMotionInstanceFlagsNV
    data*: VkAccelerationStructureMotionInstanceDataNV
  VkRemoteAddressNV* = distinct pointer

  VkMemoryGetRemoteAddressInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    memory*: VkDeviceMemory
    handleType*: VkExternalMemoryHandleTypeFlagBits

  VkImportMemoryBufferCollectionFUCHSIA* = object
    sType*: VkStructureType
    pNext*: pointer
    collection*: VkBufferCollectionFUCHSIA
    index*: uint32

  VkBufferCollectionImageCreateInfoFUCHSIA* = object
    sType*: VkStructureType
    pNext*: pointer
    collection*: VkBufferCollectionFUCHSIA
    index*: uint32

  VkBufferCollectionBufferCreateInfoFUCHSIA* = object
    sType*: VkStructureType
    pNext*: pointer
    collection*: VkBufferCollectionFUCHSIA
    index*: uint32

  VkBufferCollectionCreateInfoFUCHSIA* = object
    sType*: VkStructureType
    pNext*: pointer
    collectionToken*: zx_handle_t

  VkBufferCollectionPropertiesFUCHSIA* = object
    sType*: VkStructureType
    pNext*: pointer
    memoryTypeBits*: uint32
    bufferCount*: uint32
    createInfoIndex*: uint32
    sysmemPixelFormat*: uint64
    formatFeatures*: VkFormatFeatureFlags
    sysmemColorSpaceIndex*: VkSysmemColorSpaceFUCHSIA
    samplerYcbcrConversionComponents*: VkComponentMapping
    suggestedYcbcrModel*: VkSamplerYcbcrModelConversion
    suggestedYcbcrRange*: VkSamplerYcbcrRange
    suggestedXChromaOffset*: VkChromaLocation
    suggestedYChromaOffset*: VkChromaLocation

  VkBufferConstraintsInfoFUCHSIA* = object
    sType*: VkStructureType
    pNext*: pointer
    createInfo*: VkBufferCreateInfo
    requiredFormatFeatures*: VkFormatFeatureFlags
    bufferCollectionConstraints*: VkBufferCollectionConstraintsInfoFUCHSIA

  VkSysmemColorSpaceFUCHSIA* = object
    sType*: VkStructureType
    pNext*: pointer
    colorSpace*: uint32

  VkImageFormatConstraintsInfoFUCHSIA* = object
    sType*: VkStructureType
    pNext*: pointer
    imageCreateInfo*: VkImageCreateInfo
    requiredFormatFeatures*: VkFormatFeatureFlags
    flags*: VkImageFormatConstraintsFlagsFUCHSIA
    sysmemPixelFormat*: uint64
    colorSpaceCount*: uint32
    pColorSpaces*: ptr VkSysmemColorSpaceFUCHSIA

  VkImageConstraintsInfoFUCHSIA* = object
    sType*: VkStructureType
    pNext*: pointer
    formatConstraintsCount*: uint32
    pFormatConstraints*: ptr VkImageFormatConstraintsInfoFUCHSIA
    bufferCollectionConstraints*: VkBufferCollectionConstraintsInfoFUCHSIA
    flags*: VkImageConstraintsInfoFlagsFUCHSIA

  VkBufferCollectionConstraintsInfoFUCHSIA* = object
    sType*: VkStructureType
    pNext*: pointer
    minBufferCount*: uint32
    maxBufferCount*: uint32
    minBufferCountForCamping*: uint32
    minBufferCountForDedicatedSlack*: uint32
    minBufferCountForSharedSlack*: uint32
  VkCudaModuleNV* = distinct VkNonDispatchableHandle
  VkCudaFunctionNV* = distinct VkNonDispatchableHandle

  VkCudaModuleCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    dataSize*: uint
    pData*: pointer

  VkCudaFunctionCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    module*: VkCudaModuleNV
    pName*: cstring

  VkCudaLaunchInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    function*: VkCudaFunctionNV
    gridDimX*: uint32
    gridDimY*: uint32
    gridDimZ*: uint32
    blockDimX*: uint32
    blockDimY*: uint32
    blockDimZ*: uint32
    sharedMemBytes*: uint32
    paramCount*: uint
    pParams*: ptr pointer
    extraCount*: uint
    pExtras*: ptr pointer

  VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    formatRgba10x6WithoutYCbCrSampler*: VkBool32

  VkFormatProperties3* = object
    sType*: VkStructureType
    pNext*: pointer
    linearTilingFeatures*: VkFormatFeatureFlags2
    optimalTilingFeatures*: VkFormatFeatureFlags2
    bufferFeatures*: VkFormatFeatureFlags2

  VkFormatProperties3KHR* = VkFormatProperties3

  VkDrmFormatModifierPropertiesList2EXT* = object
    sType*: VkStructureType
    pNext*: pointer
    drmFormatModifierCount*: uint32
    pDrmFormatModifierProperties*: ptr VkDrmFormatModifierProperties2EXT

  VkDrmFormatModifierProperties2EXT* = object
    drmFormatModifier*: uint64
    drmFormatModifierPlaneCount*: uint32
    drmFormatModifierTilingFeatures*: VkFormatFeatureFlags2

  VkAndroidHardwareBufferFormatProperties2ANDROID* = object
    sType*: VkStructureType
    pNext*: pointer
    format*: VkFormat
    externalFormat*: uint64
    formatFeatures*: VkFormatFeatureFlags2
    samplerYcbcrConversionComponents*: VkComponentMapping
    suggestedYcbcrModel*: VkSamplerYcbcrModelConversion
    suggestedYcbcrRange*: VkSamplerYcbcrRange
    suggestedXChromaOffset*: VkChromaLocation
    suggestedYChromaOffset*: VkChromaLocation

  VkPipelineRenderingCreateInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    viewMask*: uint32
    colorAttachmentCount*: uint32
    pColorAttachmentFormats*: ptr VkFormat
    depthAttachmentFormat*: VkFormat
    stencilAttachmentFormat*: VkFormat

  VkPipelineRenderingCreateInfoKHR* = VkPipelineRenderingCreateInfo

  VkRenderingInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkRenderingFlags
    renderArea*: VkRect2D
    layerCount*: uint32
    viewMask*: uint32
    colorAttachmentCount*: uint32
    pColorAttachments*: ptr VkRenderingAttachmentInfo
    pDepthAttachment*: ptr VkRenderingAttachmentInfo
    pStencilAttachment*: ptr VkRenderingAttachmentInfo

  VkRenderingInfoKHR* = VkRenderingInfo

  VkRenderingAttachmentInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    imageView*: VkImageView
    imageLayout*: VkImageLayout
    resolveMode*: VkResolveModeFlagBits
    resolveImageView*: VkImageView
    resolveImageLayout*: VkImageLayout
    loadOp*: VkAttachmentLoadOp
    storeOp*: VkAttachmentStoreOp
    clearValue*: VkClearValue

  VkRenderingAttachmentInfoKHR* = VkRenderingAttachmentInfo

  VkRenderingFragmentShadingRateAttachmentInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    imageView*: VkImageView
    imageLayout*: VkImageLayout
    shadingRateAttachmentTexelSize*: VkExtent2D

  VkRenderingFragmentDensityMapAttachmentInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    imageView*: VkImageView
    imageLayout*: VkImageLayout

  VkPhysicalDeviceDynamicRenderingFeatures* = object
    sType*: VkStructureType
    pNext*: pointer
    dynamicRendering*: VkBool32

  VkPhysicalDeviceDynamicRenderingFeaturesKHR* = VkPhysicalDeviceDynamicRenderingFeatures

  VkCommandBufferInheritanceRenderingInfo* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkRenderingFlags
    viewMask*: uint32
    colorAttachmentCount*: uint32
    pColorAttachmentFormats*: ptr VkFormat
    depthAttachmentFormat*: VkFormat
    stencilAttachmentFormat*: VkFormat
    rasterizationSamples*: VkSampleCountFlagBits

  VkCommandBufferInheritanceRenderingInfoKHR* = VkCommandBufferInheritanceRenderingInfo

  VkAttachmentSampleCountInfoAMD* = object
    sType*: VkStructureType
    pNext*: pointer
    colorAttachmentCount*: uint32
    pColorAttachmentSamples*: ptr VkSampleCountFlagBits
    depthStencilAttachmentSamples*: VkSampleCountFlagBits

  VkAttachmentSampleCountInfoNV* = VkAttachmentSampleCountInfoAMD

  VkMultiviewPerViewAttributesInfoNVX* = object
    sType*: VkStructureType
    pNext*: pointer
    perViewAttributes*: VkBool32
    perViewAttributesPositionXOnly*: VkBool32

  VkPhysicalDeviceImageViewMinLodFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    minLod*: VkBool32

  VkImageViewMinLodCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    minLod*: float32

  VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    rasterizationOrderColorAttachmentAccess*: VkBool32
    rasterizationOrderDepthAttachmentAccess*: VkBool32
    rasterizationOrderStencilAttachmentAccess*: VkBool32

  VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM* = VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT

  VkPhysicalDeviceLinearColorAttachmentFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    linearColorAttachment*: VkBool32

  VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    graphicsPipelineLibrary*: VkBool32

  VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    graphicsPipelineLibraryFastLinking*: VkBool32
    graphicsPipelineLibraryIndependentInterpolationDecoration*: VkBool32

  VkGraphicsPipelineLibraryCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkGraphicsPipelineLibraryFlagsEXT

  VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE* = object
    sType*: VkStructureType
    pNext*: pointer
    descriptorSetHostMapping*: VkBool32

  VkDescriptorSetBindingReferenceVALVE* = object
    sType*: VkStructureType
    pNext*: pointer
    descriptorSetLayout*: VkDescriptorSetLayout
    binding*: uint32

  VkDescriptorSetLayoutHostMappingInfoVALVE* = object
    sType*: VkStructureType
    pNext*: pointer
    descriptorOffset*: uint
    descriptorSize*: uint32

  VkPhysicalDeviceNestedCommandBufferFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    nestedCommandBuffer*: VkBool32
    nestedCommandBufferRendering*: VkBool32
    nestedCommandBufferSimultaneousUse*: VkBool32

  VkPhysicalDeviceNestedCommandBufferPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    maxCommandBufferNestingLevel*: uint32

  VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderModuleIdentifier*: VkBool32

  VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderModuleIdentifierAlgorithmUUID*: array[VK_UUID_SIZE, uint8]

  VkPipelineShaderStageModuleIdentifierCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    identifierSize*: uint32
    pIdentifier*: ptr uint8

  VkShaderModuleIdentifierEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    identifierSize*: uint32
    identifier*: array[VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT, uint8]

  VkImageCompressionControlEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkImageCompressionFlagsEXT
    compressionControlPlaneCount*: uint32
    pFixedRateFlags*: ptr VkImageCompressionFixedRateFlagsEXT

  VkPhysicalDeviceImageCompressionControlFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    imageCompressionControl*: VkBool32

  VkImageCompressionPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    imageCompressionFlags*: VkImageCompressionFlagsEXT
    imageCompressionFixedRateFlags*: VkImageCompressionFixedRateFlagsEXT

  VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    imageCompressionControlSwapchain*: VkBool32

  VkImageSubresource2KHR* = object
    sType*: VkStructureType
    pNext*: pointer
    imageSubresource*: VkImageSubresource

  VkImageSubresource2EXT* = VkImageSubresource2KHR

  VkSubresourceLayout2KHR* = object
    sType*: VkStructureType
    pNext*: pointer
    subresourceLayout*: VkSubresourceLayout

  VkSubresourceLayout2EXT* = VkSubresourceLayout2KHR

  VkRenderPassCreationControlEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    disallowMerging*: VkBool32

  VkRenderPassCreationFeedbackInfoEXT* = object
    postMergeSubpassCount*: uint32

  VkRenderPassCreationFeedbackCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    pRenderPassFeedback*: ptr VkRenderPassCreationFeedbackInfoEXT

  VkRenderPassSubpassFeedbackInfoEXT* = object
    subpassMergeStatus*: VkSubpassMergeStatusEXT
    description*: array[VK_MAX_DESCRIPTION_SIZE, char]
    postMergeIndex*: uint32

  VkRenderPassSubpassFeedbackCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    pSubpassFeedback*: ptr VkRenderPassSubpassFeedbackInfoEXT

  VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    subpassMergeFeedback*: VkBool32

  VkMicromapBuildInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    `type`*: VkMicromapTypeEXT
    flags*: VkBuildMicromapFlagsEXT
    mode*: VkBuildMicromapModeEXT
    dstMicromap*: VkMicromapEXT
    usageCountsCount*: uint32
    pUsageCounts*: ptr VkMicromapUsageEXT
    ppUsageCounts*: ptr ptr VkMicromapUsageEXT
    data*: VkDeviceOrHostAddressConstKHR
    scratchData*: VkDeviceOrHostAddressKHR
    triangleArray*: VkDeviceOrHostAddressConstKHR
    triangleArrayStride*: VkDeviceSize

  VkMicromapCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    createFlags*: VkMicromapCreateFlagsEXT
    buffer*: VkBuffer
    offset*: VkDeviceSize
    size*: VkDeviceSize
    `type`*: VkMicromapTypeEXT
    deviceAddress*: VkDeviceAddress

  VkMicromapVersionInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    pVersionData*: ptr uint8

  VkCopyMicromapInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    src*: VkMicromapEXT
    dst*: VkMicromapEXT
    mode*: VkCopyMicromapModeEXT

  VkCopyMicromapToMemoryInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    src*: VkMicromapEXT
    dst*: VkDeviceOrHostAddressKHR
    mode*: VkCopyMicromapModeEXT

  VkCopyMemoryToMicromapInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    src*: VkDeviceOrHostAddressConstKHR
    dst*: VkMicromapEXT
    mode*: VkCopyMicromapModeEXT

  VkMicromapBuildSizesInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    micromapSize*: VkDeviceSize
    buildScratchSize*: VkDeviceSize
    discardable*: VkBool32

  VkMicromapUsageEXT* = object
    count*: uint32
    subdivisionLevel*: uint32
    format*: uint32

  VkMicromapTriangleEXT* = object
    dataOffset*: uint32
    subdivisionLevel*: uint16
    format*: uint16

  VkPhysicalDeviceOpacityMicromapFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    micromap*: VkBool32
    micromapCaptureReplay*: VkBool32
    micromapHostCommands*: VkBool32

  VkPhysicalDeviceOpacityMicromapPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    maxOpacity2StateSubdivisionLevel*: uint32
    maxOpacity4StateSubdivisionLevel*: uint32

  VkAccelerationStructureTrianglesOpacityMicromapEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    indexType*: VkIndexType
    indexBuffer*: VkDeviceOrHostAddressConstKHR
    indexStride*: VkDeviceSize
    baseTriangle*: uint32
    usageCountsCount*: uint32
    pUsageCounts*: ptr VkMicromapUsageEXT
    ppUsageCounts*: ptr ptr VkMicromapUsageEXT
    micromap*: VkMicromapEXT

  VkPhysicalDeviceDisplacementMicromapFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    displacementMicromap*: VkBool32

  VkPhysicalDeviceDisplacementMicromapPropertiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    maxDisplacementMicromapSubdivisionLevel*: uint32

  VkAccelerationStructureTrianglesDisplacementMicromapNV* = object
    sType*: VkStructureType
    pNext*: pointer
    displacementBiasAndScaleFormat*: VkFormat
    displacementVectorFormat*: VkFormat
    displacementBiasAndScaleBuffer*: VkDeviceOrHostAddressConstKHR
    displacementBiasAndScaleStride*: VkDeviceSize
    displacementVectorBuffer*: VkDeviceOrHostAddressConstKHR
    displacementVectorStride*: VkDeviceSize
    displacedMicromapPrimitiveFlags*: VkDeviceOrHostAddressConstKHR
    displacedMicromapPrimitiveFlagsStride*: VkDeviceSize
    indexType*: VkIndexType
    indexBuffer*: VkDeviceOrHostAddressConstKHR
    indexStride*: VkDeviceSize
    baseTriangle*: uint32
    usageCountsCount*: uint32
    pUsageCounts*: ptr VkMicromapUsageEXT
    ppUsageCounts*: ptr ptr VkMicromapUsageEXT
    micromap*: VkMicromapEXT

  VkPipelinePropertiesIdentifierEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    pipelineIdentifier*: array[VK_UUID_SIZE, uint8]

  VkPhysicalDevicePipelinePropertiesFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    pipelinePropertiesIdentifier*: VkBool32

  VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderEarlyAndLateFragmentTests*: VkBool32

  VkExternalMemoryAcquireUnmodifiedEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    acquireUnmodifiedMemory*: VkBool32

  VkExportMetalObjectCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    exportObjectType*: VkExportMetalObjectTypeFlagBitsEXT

  VkExportMetalObjectsInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer

  VkExportMetalDeviceInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    mtlDevice*: MTLDevice_id

  VkExportMetalCommandQueueInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    queue*: VkQueue
    mtlCommandQueue*: MTLCommandQueue_id

  VkExportMetalBufferInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    memory*: VkDeviceMemory
    mtlBuffer*: MTLBuffer_id

  VkImportMetalBufferInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    mtlBuffer*: MTLBuffer_id

  VkExportMetalTextureInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    image*: VkImage
    imageView*: VkImageView
    bufferView*: VkBufferView
    plane*: VkImageAspectFlagBits
    mtlTexture*: MTLTexture_id

  VkImportMetalTextureInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    plane*: VkImageAspectFlagBits
    mtlTexture*: MTLTexture_id

  VkExportMetalIOSurfaceInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    image*: VkImage
    ioSurface*: IOSurfaceRef

  VkImportMetalIOSurfaceInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    ioSurface*: IOSurfaceRef

  VkExportMetalSharedEventInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    semaphore*: VkSemaphore
    event*: VkEvent
    mtlSharedEvent*: MTLSharedEvent_id

  VkImportMetalSharedEventInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    mtlSharedEvent*: MTLSharedEvent_id

  VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    nonSeamlessCubeMap*: VkBool32

  VkPhysicalDevicePipelineRobustnessFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    pipelineRobustness*: VkBool32

  VkPipelineRobustnessCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    storageBuffers*: VkPipelineRobustnessBufferBehaviorEXT
    uniformBuffers*: VkPipelineRobustnessBufferBehaviorEXT
    vertexInputs*: VkPipelineRobustnessBufferBehaviorEXT
    images*: VkPipelineRobustnessImageBehaviorEXT

  VkPhysicalDevicePipelineRobustnessPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    defaultRobustnessStorageBuffers*: VkPipelineRobustnessBufferBehaviorEXT
    defaultRobustnessUniformBuffers*: VkPipelineRobustnessBufferBehaviorEXT
    defaultRobustnessVertexInputs*: VkPipelineRobustnessBufferBehaviorEXT
    defaultRobustnessImages*: VkPipelineRobustnessImageBehaviorEXT

  VkImageViewSampleWeightCreateInfoQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    filterCenter*: VkOffset2D
    filterSize*: VkExtent2D
    numPhases*: uint32

  VkPhysicalDeviceImageProcessingFeaturesQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    textureSampleWeighted*: VkBool32
    textureBoxFilter*: VkBool32
    textureBlockMatch*: VkBool32

  VkPhysicalDeviceImageProcessingPropertiesQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    maxWeightFilterPhases*: uint32
    maxWeightFilterDimension*: VkExtent2D
    maxBlockMatchRegion*: VkExtent2D
    maxBoxFilterBlockSize*: VkExtent2D

  VkPhysicalDeviceTilePropertiesFeaturesQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    tileProperties*: VkBool32

  VkTilePropertiesQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    tileSize*: VkExtent3D
    apronSize*: VkExtent2D
    origin*: VkOffset2D

  VkPhysicalDeviceAmigoProfilingFeaturesSEC* = object
    sType*: VkStructureType
    pNext*: pointer
    amigoProfiling*: VkBool32

  VkAmigoProfilingSubmitInfoSEC* = object
    sType*: VkStructureType
    pNext*: pointer
    firstDrawTimestamp*: uint64
    swapBufferTimestamp*: uint64

  VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    attachmentFeedbackLoopLayout*: VkBool32

  VkPhysicalDeviceDepthClampZeroOneFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    depthClampZeroOne*: VkBool32

  VkPhysicalDeviceAddressBindingReportFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    reportAddressBinding*: VkBool32

  VkDeviceAddressBindingCallbackDataEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDeviceAddressBindingFlagsEXT
    baseAddress*: VkDeviceAddress
    size*: VkDeviceSize
    bindingType*: VkDeviceAddressBindingTypeEXT

  VkPhysicalDeviceOpticalFlowFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    opticalFlow*: VkBool32

  VkPhysicalDeviceOpticalFlowPropertiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    supportedOutputGridSizes*: VkOpticalFlowGridSizeFlagsNV
    supportedHintGridSizes*: VkOpticalFlowGridSizeFlagsNV
    hintSupported*: VkBool32
    costSupported*: VkBool32
    bidirectionalFlowSupported*: VkBool32
    globalFlowSupported*: VkBool32
    minWidth*: uint32
    minHeight*: uint32
    maxWidth*: uint32
    maxHeight*: uint32
    maxNumRegionsOfInterest*: uint32

  VkOpticalFlowImageFormatInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    usage*: VkOpticalFlowUsageFlagsNV

  VkOpticalFlowImageFormatPropertiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    format*: VkFormat

  VkOpticalFlowSessionCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    width*: uint32
    height*: uint32
    imageFormat*: VkFormat
    flowVectorFormat*: VkFormat
    costFormat*: VkFormat
    outputGridSize*: VkOpticalFlowGridSizeFlagsNV
    hintGridSize*: VkOpticalFlowGridSizeFlagsNV
    performanceLevel*: VkOpticalFlowPerformanceLevelNV
    flags*: VkOpticalFlowSessionCreateFlagsNV

  VkOpticalFlowSessionCreatePrivateDataInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    id*: uint32
    size*: uint32
    pPrivateData*: pointer

  VkOpticalFlowExecuteInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkOpticalFlowExecuteFlagsNV
    regionCount*: uint32
    pRegions*: ptr VkRect2D

  VkPhysicalDeviceFaultFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    deviceFault*: VkBool32
    deviceFaultVendorBinary*: VkBool32

  VkDeviceFaultAddressInfoEXT* = object
    addressType*: VkDeviceFaultAddressTypeEXT
    reportedAddress*: VkDeviceAddress
    addressPrecision*: VkDeviceSize

  VkDeviceFaultVendorInfoEXT* = object
    description*: array[VK_MAX_DESCRIPTION_SIZE, char]
    vendorFaultCode*: uint64
    vendorFaultData*: uint64

  VkDeviceFaultCountsEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    addressInfoCount*: uint32
    vendorInfoCount*: uint32
    vendorBinarySize*: VkDeviceSize

  VkDeviceFaultInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    description*: array[VK_MAX_DESCRIPTION_SIZE, char]
    pAddressInfos*: ptr VkDeviceFaultAddressInfoEXT
    pVendorInfos*: ptr VkDeviceFaultVendorInfoEXT
    pVendorBinaryData*: pointer

  VkDeviceFaultVendorBinaryHeaderVersionOneEXT* = object
    headerSize*: uint32
    headerVersion*: VkDeviceFaultVendorBinaryHeaderVersionEXT
    vendorID*: uint32
    deviceID*: uint32
    driverVersion*: uint32
    pipelineCacheUUID*: array[VK_UUID_SIZE, uint8]
    applicationNameOffset*: uint32
    applicationVersion*: uint32
    engineNameOffset*: uint32
    engineVersion*: uint32
    apiVersion*: uint32

  VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    pipelineLibraryGroupHandles*: VkBool32

  VkDepthBiasInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    depthBiasConstantFactor*: float32
    depthBiasClamp*: float32
    depthBiasSlopeFactor*: float32

  VkDepthBiasRepresentationInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    depthBiasRepresentation*: VkDepthBiasRepresentationEXT
    depthBiasExact*: VkBool32

  VkDecompressMemoryRegionNV* = object
    srcAddress*: VkDeviceAddress
    dstAddress*: VkDeviceAddress
    compressedSize*: VkDeviceSize
    decompressedSize*: VkDeviceSize
    decompressionMethod*: VkMemoryDecompressionMethodFlagsNV

  VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderCoreMask*: uint64
    shaderCoreCount*: uint32
    shaderWarpsPerCore*: uint32

  VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderCoreBuiltins*: VkBool32

  VkFrameBoundaryEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkFrameBoundaryFlagsEXT
    frameID*: uint64
    imageCount*: uint32
    pImages*: ptr VkImage
    bufferCount*: uint32
    pBuffers*: ptr VkBuffer
    tagName*: uint64
    tagSize*: uint
    pTag*: pointer

  VkPhysicalDeviceFrameBoundaryFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    frameBoundary*: VkBool32

  VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    dynamicRenderingUnusedAttachments*: VkBool32

  VkSurfacePresentModeEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    presentMode*: VkPresentModeKHR

  VkSurfacePresentScalingCapabilitiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    supportedPresentScaling*: VkPresentScalingFlagsEXT
    supportedPresentGravityX*: VkPresentGravityFlagsEXT
    supportedPresentGravityY*: VkPresentGravityFlagsEXT
    minScaledImageExtent*: VkExtent2D
    maxScaledImageExtent*: VkExtent2D

  VkSurfacePresentModeCompatibilityEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    presentModeCount*: uint32
    pPresentModes*: ptr VkPresentModeKHR

  VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    swapchainMaintenance1*: VkBool32

  VkSwapchainPresentFenceInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    swapchainCount*: uint32
    pFences*: ptr VkFence

  VkSwapchainPresentModesCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    presentModeCount*: uint32
    pPresentModes*: ptr VkPresentModeKHR

  VkSwapchainPresentModeInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    swapchainCount*: uint32
    pPresentModes*: ptr VkPresentModeKHR

  VkSwapchainPresentScalingCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    scalingBehavior*: VkPresentScalingFlagsEXT
    presentGravityX*: VkPresentGravityFlagsEXT
    presentGravityY*: VkPresentGravityFlagsEXT

  VkReleaseSwapchainImagesInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    swapchain*: VkSwapchainKHR
    imageIndexCount*: uint32
    pImageIndices*: ptr uint32

  VkPhysicalDeviceDepthBiasControlFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    depthBiasControl*: VkBool32
    leastRepresentableValueForceUnormRepresentation*: VkBool32
    floatRepresentation*: VkBool32
    depthBiasExact*: VkBool32

  VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    rayTracingInvocationReorder*: VkBool32

  VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    rayTracingInvocationReorderReorderingHint*: VkRayTracingInvocationReorderModeNV

  VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    extendedSparseAddressSpace*: VkBool32

  VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    extendedSparseAddressSpaceSize*: VkDeviceSize
    extendedSparseImageUsageFlags*: VkImageUsageFlags
    extendedSparseBufferUsageFlags*: VkBufferUsageFlags

  VkDirectDriverLoadingInfoLUNARG* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkDirectDriverLoadingFlagsLUNARG
    pfnGetInstanceProcAddr*: PFN_vkGetInstanceProcAddrLUNARG

  VkDirectDriverLoadingListLUNARG* = object
    sType*: VkStructureType
    pNext*: pointer
    mode*: VkDirectDriverLoadingModeLUNARG
    driverCount*: uint32
    pDrivers*: ptr VkDirectDriverLoadingInfoLUNARG

  VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    multiviewPerViewViewports*: VkBool32

  VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    rayTracingPositionFetch*: VkBool32

  VkDeviceImageSubresourceInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pCreateInfo*: ptr VkImageCreateInfo
    pSubresource*: ptr VkImageSubresource2KHR

  VkPhysicalDeviceShaderCorePropertiesARM* = object
    sType*: VkStructureType
    pNext*: pointer
    pixelRate*: uint32
    texelRate*: uint32
    fmaRate*: uint32

  VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    multiviewPerViewRenderAreas*: VkBool32

  VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    perViewRenderAreaCount*: uint32
    pPerViewRenderAreas*: ptr VkRect2D

  VkQueryLowLatencySupportNV* = object
    sType*: VkStructureType
    pNext*: pointer
    pQueriedLowLatencyData*: pointer

  VkMemoryMapInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkMemoryMapFlags
    memory*: VkDeviceMemory
    offset*: VkDeviceSize
    size*: VkDeviceSize

  VkMemoryUnmapInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkMemoryUnmapFlagsKHR
    memory*: VkDeviceMemory

  VkPhysicalDeviceShaderObjectFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderObject*: VkBool32

  VkPhysicalDeviceShaderObjectPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderBinaryUUID*: array[VK_UUID_SIZE, uint8]
    shaderBinaryVersion*: uint32

  VkShaderCreateInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkShaderCreateFlagsEXT
    stage*: VkShaderStageFlagBits
    nextStage*: VkShaderStageFlags
    codeType*: VkShaderCodeTypeEXT
    codeSize*: uint
    pCode*: pointer
    pName*: cstring
    setLayoutCount*: uint32
    pSetLayouts*: ptr VkDescriptorSetLayout
    pushConstantRangeCount*: uint32
    pPushConstantRanges*: ptr VkPushConstantRange
    pSpecializationInfo*: ptr VkSpecializationInfo

  VkPhysicalDeviceShaderTileImageFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderTileImageColorReadAccess*: VkBool32
    shaderTileImageDepthReadAccess*: VkBool32
    shaderTileImageStencilReadAccess*: VkBool32

  VkPhysicalDeviceShaderTileImagePropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderTileImageCoherentReadAccelerated*: VkBool32
    shaderTileImageReadSampleFromPixelRateInvocation*: VkBool32
    shaderTileImageReadFromHelperInvocation*: VkBool32

  VkImportScreenBufferInfoQNX* = object
    sType*: VkStructureType
    pNext*: pointer
    buffer*: ptr screen_buffer

  VkScreenBufferPropertiesQNX* = object
    sType*: VkStructureType
    pNext*: pointer
    allocationSize*: VkDeviceSize
    memoryTypeBits*: uint32

  VkScreenBufferFormatPropertiesQNX* = object
    sType*: VkStructureType
    pNext*: pointer
    format*: VkFormat
    externalFormat*: uint64
    screenUsage*: uint64
    formatFeatures*: VkFormatFeatureFlags
    samplerYcbcrConversionComponents*: VkComponentMapping
    suggestedYcbcrModel*: VkSamplerYcbcrModelConversion
    suggestedYcbcrRange*: VkSamplerYcbcrRange
    suggestedXChromaOffset*: VkChromaLocation
    suggestedYChromaOffset*: VkChromaLocation

  VkExternalFormatQNX* = object
    sType*: VkStructureType
    pNext*: pointer
    externalFormat*: uint64

  VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX* = object
    sType*: VkStructureType
    pNext*: pointer
    screenBufferImport*: VkBool32

  VkPhysicalDeviceCooperativeMatrixFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    cooperativeMatrix*: VkBool32
    cooperativeMatrixRobustBufferAccess*: VkBool32

  VkCooperativeMatrixPropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    MSize*: uint32
    NSize*: uint32
    KSize*: uint32
    AType*: VkComponentTypeKHR
    BType*: VkComponentTypeKHR
    CType*: VkComponentTypeKHR
    ResultType*: VkComponentTypeKHR
    saturatingAccumulation*: VkBool32
    scope*: VkScopeKHR

  VkPhysicalDeviceCooperativeMatrixPropertiesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    cooperativeMatrixSupportedStages*: VkShaderStageFlags

  VkPhysicalDeviceShaderEnqueuePropertiesAMDX* = object
    sType*: VkStructureType
    pNext*: pointer
    maxExecutionGraphDepth*: uint32
    maxExecutionGraphShaderOutputNodes*: uint32
    maxExecutionGraphShaderPayloadSize*: uint32
    maxExecutionGraphShaderPayloadCount*: uint32
    executionGraphDispatchAddressAlignment*: uint32

  VkPhysicalDeviceShaderEnqueueFeaturesAMDX* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderEnqueue*: VkBool32

  VkExecutionGraphPipelineCreateInfoAMDX* = object
    sType*: VkStructureType
    pNext*: pointer
    flags*: VkPipelineCreateFlags
    stageCount*: uint32
    pStages*: ptr VkPipelineShaderStageCreateInfo
    pLibraryInfo*: ptr VkPipelineLibraryCreateInfoKHR
    layout*: VkPipelineLayout
    basePipelineHandle*: VkPipeline
    basePipelineIndex*: int32

  VkPipelineShaderStageNodeCreateInfoAMDX* = object
    sType*: VkStructureType
    pNext*: pointer
    pName*: cstring
    index*: uint32

  VkExecutionGraphPipelineScratchSizeAMDX* = object
    sType*: VkStructureType
    pNext*: pointer
    size*: VkDeviceSize

  VkDispatchGraphInfoAMDX* = object
    nodeIndex*: uint32
    payloadCount*: uint32
    payloads*: VkDeviceOrHostAddressConstAMDX
    payloadStride*: uint64

  VkDispatchGraphCountInfoAMDX* = object
    count*: uint32
    infos*: VkDeviceOrHostAddressConstAMDX
    stride*: uint64

  VkBindMemoryStatusKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    pResult*: ptr VkResult

  VkBindDescriptorSetsInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    stageFlags*: VkShaderStageFlags
    layout*: VkPipelineLayout
    firstSet*: uint32
    descriptorSetCount*: uint32
    pDescriptorSets*: ptr VkDescriptorSet
    dynamicOffsetCount*: uint32
    pDynamicOffsets*: ptr uint32

  VkPushConstantsInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    layout*: VkPipelineLayout
    stageFlags*: VkShaderStageFlags
    offset*: uint32
    size*: uint32
    pValues*: pointer

  VkPushDescriptorSetInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    stageFlags*: VkShaderStageFlags
    layout*: VkPipelineLayout
    set*: uint32
    descriptorWriteCount*: uint32
    pDescriptorWrites*: ptr VkWriteDescriptorSet

  VkPushDescriptorSetWithTemplateInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    descriptorUpdateTemplate*: VkDescriptorUpdateTemplate
    layout*: VkPipelineLayout
    set*: uint32
    pData*: pointer

  VkSetDescriptorBufferOffsetsInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    stageFlags*: VkShaderStageFlags
    layout*: VkPipelineLayout
    firstSet*: uint32
    setCount*: uint32
    pBufferIndices*: ptr uint32
    pOffsets*: ptr VkDeviceSize

  VkBindDescriptorBufferEmbeddedSamplersInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    stageFlags*: VkShaderStageFlags
    layout*: VkPipelineLayout
    set*: uint32

  VkPhysicalDeviceCubicClampFeaturesQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    cubicRangeClamp*: VkBool32

  VkPhysicalDeviceYcbcrDegammaFeaturesQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    ycbcrDegamma*: VkBool32

  VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    enableYDegamma*: VkBool32
    enableCbCrDegamma*: VkBool32

  VkPhysicalDeviceCubicWeightsFeaturesQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    selectableCubicWeights*: VkBool32

  VkSamplerCubicWeightsCreateInfoQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    cubicWeights*: VkCubicFilterWeightsQCOM

  VkBlitImageCubicWeightsInfoQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    cubicWeights*: VkCubicFilterWeightsQCOM

  VkPhysicalDeviceImageProcessing2FeaturesQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    textureBlockMatch2*: VkBool32

  VkPhysicalDeviceImageProcessing2PropertiesQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    maxBlockMatchWindow*: VkExtent2D

  VkSamplerBlockMatchWindowCreateInfoQCOM* = object
    sType*: VkStructureType
    pNext*: pointer
    windowExtent*: VkExtent2D
    windowCompareMode*: VkBlockMatchWindowCompareModeQCOM

  VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    descriptorPoolOverallocation*: VkBool32

  VkPhysicalDeviceLayeredDriverPropertiesMSFT* = object
    sType*: VkStructureType
    pNext*: pointer
    underlyingAPI*: VkLayeredDriverUnderlyingApiMSFT

  VkPhysicalDevicePerStageDescriptorSetFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    perStageDescriptorSet*: VkBool32
    dynamicPipelineLayout*: VkBool32

  VkPhysicalDeviceExternalFormatResolveFeaturesANDROID* = object
    sType*: VkStructureType
    pNext*: pointer
    externalFormatResolve*: VkBool32

  VkPhysicalDeviceExternalFormatResolvePropertiesANDROID* = object
    sType*: VkStructureType
    pNext*: pointer
    nullColorAttachmentWithExternalFormatResolve*: VkBool32
    externalFormatResolveChromaOffsetX*: VkChromaLocation
    externalFormatResolveChromaOffsetY*: VkChromaLocation

  VkAndroidHardwareBufferFormatResolvePropertiesANDROID* = object
    sType*: VkStructureType
    pNext*: pointer
    colorAttachmentFormat*: VkFormat

  VkLatencySleepModeInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    lowLatencyMode*: VkBool32
    lowLatencyBoost*: VkBool32
    minimumIntervalUs*: uint32

  VkLatencySleepInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    signalSemaphore*: VkSemaphore
    value*: uint64

  VkSetLatencyMarkerInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    presentID*: uint64
    marker*: VkLatencyMarkerNV

  VkGetLatencyMarkerInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    timingCount*: uint32
    pTimings*: ptr VkLatencyTimingsFrameReportNV

  VkLatencyTimingsFrameReportNV* = object
    sType*: VkStructureType
    pNext*: pointer
    presentID*: uint64
    inputSampleTimeUs*: uint64
    simStartTimeUs*: uint64
    simEndTimeUs*: uint64
    renderSubmitStartTimeUs*: uint64
    renderSubmitEndTimeUs*: uint64
    presentStartTimeUs*: uint64
    presentEndTimeUs*: uint64
    driverStartTimeUs*: uint64
    driverEndTimeUs*: uint64
    osRenderQueueStartTimeUs*: uint64
    osRenderQueueEndTimeUs*: uint64
    gpuRenderStartTimeUs*: uint64
    gpuRenderEndTimeUs*: uint64

  VkOutOfBandQueueTypeInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    queueType*: VkOutOfBandQueueTypeNV

  VkLatencySubmissionPresentIdNV* = object
    sType*: VkStructureType
    pNext*: pointer
    presentID*: uint64

  VkSwapchainLatencyCreateInfoNV* = object
    sType*: VkStructureType
    pNext*: pointer
    latencyModeEnable*: VkBool32

  VkLatencySurfaceCapabilitiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    presentModeCount*: uint32
    pPresentModes*: ptr VkPresentModeKHR

  VkPhysicalDeviceCudaKernelLaunchFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    cudaKernelLaunchFeatures*: VkBool32

  VkPhysicalDeviceCudaKernelLaunchPropertiesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    computeCapabilityMinor*: uint32
    computeCapabilityMajor*: uint32

  VkDeviceQueueShaderCoreControlCreateInfoARM* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderCoreCount*: uint32

  VkPhysicalDeviceSchedulingControlsFeaturesARM* = object
    sType*: VkStructureType
    pNext*: pointer
    schedulingControls*: VkBool32

  VkPhysicalDeviceSchedulingControlsPropertiesARM* = object
    sType*: VkStructureType
    pNext*: pointer
    schedulingControlsFlags*: VkPhysicalDeviceSchedulingControlsFlagsARM

  VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG* = object
    sType*: VkStructureType
    pNext*: pointer
    relaxedLineRasterization*: VkBool32

  VkPhysicalDeviceRenderPassStripedFeaturesARM* = object
    sType*: VkStructureType
    pNext*: pointer
    renderPassStriped*: VkBool32

  VkPhysicalDeviceRenderPassStripedPropertiesARM* = object
    sType*: VkStructureType
    pNext*: pointer
    renderPassStripeGranularity*: VkExtent2D
    maxRenderPassStripes*: uint32

  VkRenderPassStripeInfoARM* = object
    sType*: VkStructureType
    pNext*: pointer
    stripeArea*: VkRect2D

  VkRenderPassStripeBeginInfoARM* = object
    sType*: VkStructureType
    pNext*: pointer
    stripeInfoCount*: uint32
    pStripeInfos*: ptr VkRenderPassStripeInfoARM

  VkRenderPassStripeSubmitInfoARM* = object
    sType*: VkStructureType
    pNext*: pointer
    stripeSemaphoreInfoCount*: uint32
    pStripeSemaphoreInfos*: ptr VkSemaphoreSubmitInfo

  VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderMaximalReconvergence*: VkBool32

  VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderSubgroupRotate*: VkBool32
    shaderSubgroupRotateClustered*: VkBool32

  VkPhysicalDeviceShaderExpectAssumeFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderExpectAssume*: VkBool32

  VkPhysicalDeviceShaderFloatControls2FeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderFloatControls2*: VkBool32

  VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    dynamicRenderingLocalRead*: VkBool32

  VkRenderingAttachmentLocationInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    colorAttachmentCount*: uint32
    pColorAttachmentLocations*: ptr uint32

  VkRenderingInputAttachmentIndexInfoKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    colorAttachmentCount*: uint32
    pColorAttachmentInputIndices*: ptr uint32
    pDepthInputAttachmentIndex*: ptr uint32
    pStencilInputAttachmentIndex*: ptr uint32

  VkPhysicalDeviceShaderQuadControlFeaturesKHR* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderQuadControl*: VkBool32

  VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderFloat16VectorAtomics*: VkBool32

  VkPhysicalDeviceMapMemoryPlacedFeaturesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    memoryMapPlaced*: VkBool32
    memoryMapRangePlaced*: VkBool32
    memoryUnmapReserve*: VkBool32

  VkPhysicalDeviceMapMemoryPlacedPropertiesEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    minPlacedMemoryMapAlignment*: VkDeviceSize

  VkMemoryMapPlacedInfoEXT* = object
    sType*: VkStructureType
    pNext*: pointer
    pPlacedAddress*: pointer

  VkPhysicalDeviceRawAccessChainsFeaturesNV* = object
    sType*: VkStructureType
    pNext*: pointer
    shaderRawAccessChains*: VkBool32

# Constructors

proc newVkBaseOutStructure*(sType: VkStructureType, pNext: ptr VkBaseOutStructure): VkBaseOutStructure =
  result = VkBaseOutStructure(
    sType: sType,
    pNext: pNext,
  )

proc newVkBaseInStructure*(sType: VkStructureType, pNext: ptr VkBaseInStructure): VkBaseInStructure =
  result = VkBaseInStructure(
    sType: sType,
    pNext: pNext,
  )

proc newVkOffset2D*(x: int32, y: int32): VkOffset2D =
  result = VkOffset2D(
    x: x,
    y: y,
  )

proc newVkOffset3D*(x: int32, y: int32, z: int32): VkOffset3D =
  result = VkOffset3D(
    x: x,
    y: y,
    z: z,
  )

proc newVkExtent2D*(width: uint32, height: uint32): VkExtent2D =
  result = VkExtent2D(
    width: width,
    height: height,
  )

proc newVkExtent3D*(width: uint32, height: uint32, depth: uint32): VkExtent3D =
  result = VkExtent3D(
    width: width,
    height: height,
    depth: depth,
  )

proc newVkViewport*(x: float32, y: float32, width: float32, height: float32, minDepth: float32, maxDepth: float32): VkViewport =
  result = VkViewport(
    x: x,
    y: y,
    width: width,
    height: height,
    minDepth: minDepth,
    maxDepth: maxDepth,
  )

proc newVkRect2D*(offset: VkOffset2D, extent: VkExtent2D): VkRect2D =
  result = VkRect2D(
    offset: offset,
    extent: extent,
  )

proc newVkClearRect*(rect: VkRect2D, baseArrayLayer: uint32, layerCount: uint32): VkClearRect =
  result = VkClearRect(
    rect: rect,
    baseArrayLayer: baseArrayLayer,
    layerCount: layerCount,
  )

proc newVkComponentMapping*(r: VkComponentSwizzle, g: VkComponentSwizzle, b: VkComponentSwizzle, a: VkComponentSwizzle): VkComponentMapping =
  result = VkComponentMapping(
    r: r,
    g: g,
    b: b,
    a: a,
  )

proc newVkPhysicalDeviceProperties*(apiVersion: uint32, driverVersion: uint32, vendorID: uint32, deviceID: uint32, deviceType: VkPhysicalDeviceType, deviceName: array[VK_MAX_PHYSICAL_DEVICE_NAME_SIZE, char], pipelineCacheUUID: array[VK_UUID_SIZE, uint8], limits: VkPhysicalDeviceLimits, sparseProperties: VkPhysicalDeviceSparseProperties): VkPhysicalDeviceProperties =
  result = VkPhysicalDeviceProperties(
    apiVersion: apiVersion,
    driverVersion: driverVersion,
    vendorID: vendorID,
    deviceID: deviceID,
    deviceType: deviceType,
    deviceName: deviceName,
    pipelineCacheUUID: pipelineCacheUUID,
    limits: limits,
    sparseProperties: sparseProperties,
  )

proc newVkExtensionProperties*(extensionName: array[VK_MAX_EXTENSION_NAME_SIZE, char], specVersion: uint32): VkExtensionProperties =
  result = VkExtensionProperties(
    extensionName: extensionName,
    specVersion: specVersion,
  )

proc newVkLayerProperties*(layerName: array[VK_MAX_EXTENSION_NAME_SIZE, char], specVersion: uint32, implementationVersion: uint32, description: array[VK_MAX_DESCRIPTION_SIZE, char]): VkLayerProperties =
  result = VkLayerProperties(
    layerName: layerName,
    specVersion: specVersion,
    implementationVersion: implementationVersion,
    description: description,
  )

proc newVkApplicationInfo*(sType: VkStructureType = VkStructureType.ApplicationInfo, pNext: pointer = nil, pApplicationName: cstring, applicationVersion: uint32, pEngineName: cstring, engineVersion: uint32, apiVersion: uint32): VkApplicationInfo =
  result = VkApplicationInfo(
    sType: sType,
    pNext: pNext,
    pApplicationName: pApplicationName,
    applicationVersion: applicationVersion,
    pEngineName: pEngineName,
    engineVersion: engineVersion,
    apiVersion: apiVersion,
  )

proc newVkAllocationCallbacks*(pUserData: pointer = nil, pfnAllocation: PFN_vkAllocationFunction, pfnReallocation: PFN_vkReallocationFunction, pfnFree: PFN_vkFreeFunction, pfnInternalAllocation: PFN_vkInternalAllocationNotification, pfnInternalFree: PFN_vkInternalFreeNotification): VkAllocationCallbacks =
  result = VkAllocationCallbacks(
    pUserData: pUserData,
    pfnAllocation: pfnAllocation,
    pfnReallocation: pfnReallocation,
    pfnFree: pfnFree,
    pfnInternalAllocation: pfnInternalAllocation,
    pfnInternalFree: pfnInternalFree,
  )

proc newVkDeviceQueueCreateInfo*(sType: VkStructureType = VkStructureType.DeviceQueueCreateInfo, pNext: pointer = nil, flags: VkDeviceQueueCreateFlags = 0.VkDeviceQueueCreateFlags, queueFamilyIndex: uint32, queueCount: uint32, pQueuePriorities: ptr float32): VkDeviceQueueCreateInfo =
  result = VkDeviceQueueCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    queueFamilyIndex: queueFamilyIndex,
    queueCount: queueCount,
    pQueuePriorities: pQueuePriorities,
  )

proc newVkDeviceCreateInfo*(sType: VkStructureType = VkStructureType.DeviceCreateInfo, pNext: pointer = nil, flags: VkDeviceCreateFlags = 0.VkDeviceCreateFlags, queueCreateInfoCount: uint32, pQueueCreateInfos: ptr VkDeviceQueueCreateInfo, enabledLayerCount: uint32, ppEnabledLayerNames: cstringArray, enabledExtensionCount: uint32, ppEnabledExtensionNames: cstringArray, pEnabledFeatures: ptr VkPhysicalDeviceFeatures): VkDeviceCreateInfo =
  result = VkDeviceCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    queueCreateInfoCount: queueCreateInfoCount,
    pQueueCreateInfos: pQueueCreateInfos,
    enabledLayerCount: enabledLayerCount,
    ppEnabledLayerNames: ppEnabledLayerNames,
    enabledExtensionCount: enabledExtensionCount,
    ppEnabledExtensionNames: ppEnabledExtensionNames,
    pEnabledFeatures: pEnabledFeatures,
  )

proc newVkInstanceCreateInfo*(sType: VkStructureType = VkStructureType.InstanceCreateInfo, pNext: pointer = nil, flags: VkInstanceCreateFlags = 0.VkInstanceCreateFlags, pApplicationInfo: ptr VkApplicationInfo, enabledLayerCount: uint32, ppEnabledLayerNames: cstringArray, enabledExtensionCount: uint32, ppEnabledExtensionNames: cstringArray): VkInstanceCreateInfo =
  result = VkInstanceCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    pApplicationInfo: pApplicationInfo,
    enabledLayerCount: enabledLayerCount,
    ppEnabledLayerNames: ppEnabledLayerNames,
    enabledExtensionCount: enabledExtensionCount,
    ppEnabledExtensionNames: ppEnabledExtensionNames,
  )

proc newVkQueueFamilyProperties*(queueFlags: VkQueueFlags, queueCount: uint32, timestampValidBits: uint32, minImageTransferGranularity: VkExtent3D): VkQueueFamilyProperties =
  result = VkQueueFamilyProperties(
    queueFlags: queueFlags,
    queueCount: queueCount,
    timestampValidBits: timestampValidBits,
    minImageTransferGranularity: minImageTransferGranularity,
  )

proc newVkPhysicalDeviceMemoryProperties*(memoryTypeCount: uint32, memoryTypes: array[VK_MAX_MEMORY_TYPES, VkMemoryType], memoryHeapCount: uint32, memoryHeaps: array[VK_MAX_MEMORY_HEAPS, VkMemoryHeap]): VkPhysicalDeviceMemoryProperties =
  result = VkPhysicalDeviceMemoryProperties(
    memoryTypeCount: memoryTypeCount,
    memoryTypes: memoryTypes,
    memoryHeapCount: memoryHeapCount,
    memoryHeaps: memoryHeaps,
  )

proc newVkMemoryAllocateInfo*(sType: VkStructureType = VkStructureType.MemoryAllocateInfo, pNext: pointer = nil, allocationSize: VkDeviceSize, memoryTypeIndex: uint32): VkMemoryAllocateInfo =
  result = VkMemoryAllocateInfo(
    sType: sType,
    pNext: pNext,
    allocationSize: allocationSize,
    memoryTypeIndex: memoryTypeIndex,
  )

proc newVkMemoryRequirements*(size: VkDeviceSize, alignment: VkDeviceSize, memoryTypeBits: uint32): VkMemoryRequirements =
  result = VkMemoryRequirements(
    size: size,
    alignment: alignment,
    memoryTypeBits: memoryTypeBits,
  )

proc newVkSparseImageFormatProperties*(aspectMask: VkImageAspectFlags, imageGranularity: VkExtent3D, flags: VkSparseImageFormatFlags = 0.VkSparseImageFormatFlags): VkSparseImageFormatProperties =
  result = VkSparseImageFormatProperties(
    aspectMask: aspectMask,
    imageGranularity: imageGranularity,
    flags: flags,
  )

proc newVkSparseImageMemoryRequirements*(formatProperties: VkSparseImageFormatProperties, imageMipTailFirstLod: uint32, imageMipTailSize: VkDeviceSize, imageMipTailOffset: VkDeviceSize, imageMipTailStride: VkDeviceSize): VkSparseImageMemoryRequirements =
  result = VkSparseImageMemoryRequirements(
    formatProperties: formatProperties,
    imageMipTailFirstLod: imageMipTailFirstLod,
    imageMipTailSize: imageMipTailSize,
    imageMipTailOffset: imageMipTailOffset,
    imageMipTailStride: imageMipTailStride,
  )

proc newVkMemoryType*(propertyFlags: VkMemoryPropertyFlags, heapIndex: uint32): VkMemoryType =
  result = VkMemoryType(
    propertyFlags: propertyFlags,
    heapIndex: heapIndex,
  )

proc newVkMemoryHeap*(size: VkDeviceSize, flags: VkMemoryHeapFlags = 0.VkMemoryHeapFlags): VkMemoryHeap =
  result = VkMemoryHeap(
    size: size,
    flags: flags,
  )

proc newVkMappedMemoryRange*(sType: VkStructureType = VkStructureType.MappedMemoryRange, pNext: pointer = nil, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize): VkMappedMemoryRange =
  result = VkMappedMemoryRange(
    sType: sType,
    pNext: pNext,
    memory: memory,
    offset: offset,
    size: size,
  )

proc newVkFormatProperties*(linearTilingFeatures: VkFormatFeatureFlags, optimalTilingFeatures: VkFormatFeatureFlags, bufferFeatures: VkFormatFeatureFlags): VkFormatProperties =
  result = VkFormatProperties(
    linearTilingFeatures: linearTilingFeatures,
    optimalTilingFeatures: optimalTilingFeatures,
    bufferFeatures: bufferFeatures,
  )

proc newVkImageFormatProperties*(maxExtent: VkExtent3D, maxMipLevels: uint32, maxArrayLayers: uint32, sampleCounts: VkSampleCountFlags, maxResourceSize: VkDeviceSize): VkImageFormatProperties =
  result = VkImageFormatProperties(
    maxExtent: maxExtent,
    maxMipLevels: maxMipLevels,
    maxArrayLayers: maxArrayLayers,
    sampleCounts: sampleCounts,
    maxResourceSize: maxResourceSize,
  )

proc newVkDescriptorBufferInfo*(buffer: VkBuffer, offset: VkDeviceSize, range: VkDeviceSize): VkDescriptorBufferInfo =
  result = VkDescriptorBufferInfo(
    buffer: buffer,
    offset: offset,
    range: range,
  )

proc newVkDescriptorImageInfo*(sampler: VkSampler, imageView: VkImageView, imageLayout: VkImageLayout): VkDescriptorImageInfo =
  result = VkDescriptorImageInfo(
    sampler: sampler,
    imageView: imageView,
    imageLayout: imageLayout,
  )

proc newVkWriteDescriptorSet*(sType: VkStructureType = VkStructureType.WriteDescriptorSet, pNext: pointer = nil, dstSet: VkDescriptorSet, dstBinding: uint32, dstArrayElement: uint32, descriptorCount: uint32, descriptorType: VkDescriptorType, pImageInfo: ptr VkDescriptorImageInfo, pBufferInfo: ptr ptr VkDescriptorBufferInfo, pTexelBufferView: ptr VkBufferView): VkWriteDescriptorSet =
  result = VkWriteDescriptorSet(
    sType: sType,
    pNext: pNext,
    dstSet: dstSet,
    dstBinding: dstBinding,
    dstArrayElement: dstArrayElement,
    descriptorCount: descriptorCount,
    descriptorType: descriptorType,
    pImageInfo: pImageInfo,
    pBufferInfo: pBufferInfo,
    pTexelBufferView: pTexelBufferView,
  )

proc newVkCopyDescriptorSet*(sType: VkStructureType = VkStructureType.CopyDescriptorSet, pNext: pointer = nil, srcSet: VkDescriptorSet, srcBinding: uint32, srcArrayElement: uint32, dstSet: VkDescriptorSet, dstBinding: uint32, dstArrayElement: uint32, descriptorCount: uint32): VkCopyDescriptorSet =
  result = VkCopyDescriptorSet(
    sType: sType,
    pNext: pNext,
    srcSet: srcSet,
    srcBinding: srcBinding,
    srcArrayElement: srcArrayElement,
    dstSet: dstSet,
    dstBinding: dstBinding,
    dstArrayElement: dstArrayElement,
    descriptorCount: descriptorCount,
  )

proc newVkBufferUsageFlags2CreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, usage: VkBufferUsageFlags2KHR): VkBufferUsageFlags2CreateInfoKHR =
  result = VkBufferUsageFlags2CreateInfoKHR(
    sType: sType,
    pNext: pNext,
    usage: usage,
  )

proc newVkBufferCreateInfo*(sType: VkStructureType = VkStructureType.BufferCreateInfo, pNext: pointer = nil, flags: VkBufferCreateFlags = 0.VkBufferCreateFlags, size: VkDeviceSize, usage: VkBufferUsageFlags, sharingMode: VkSharingMode, queueFamilyIndexCount: uint32, pQueueFamilyIndices: ptr uint32): VkBufferCreateInfo =
  result = VkBufferCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    size: size,
    usage: usage,
    sharingMode: sharingMode,
    queueFamilyIndexCount: queueFamilyIndexCount,
    pQueueFamilyIndices: pQueueFamilyIndices,
  )

proc newVkBufferViewCreateInfo*(sType: VkStructureType = VkStructureType.BufferViewCreateInfo, pNext: pointer = nil, flags: VkBufferViewCreateFlags = 0.VkBufferViewCreateFlags, buffer: VkBuffer, format: VkFormat, offset: VkDeviceSize, range: VkDeviceSize): VkBufferViewCreateInfo =
  result = VkBufferViewCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    buffer: buffer,
    format: format,
    offset: offset,
    range: range,
  )

proc newVkImageSubresource*(aspectMask: VkImageAspectFlags, mipLevel: uint32, arrayLayer: uint32): VkImageSubresource =
  result = VkImageSubresource(
    aspectMask: aspectMask,
    mipLevel: mipLevel,
    arrayLayer: arrayLayer,
  )

proc newVkImageSubresourceLayers*(aspectMask: VkImageAspectFlags, mipLevel: uint32, baseArrayLayer: uint32, layerCount: uint32): VkImageSubresourceLayers =
  result = VkImageSubresourceLayers(
    aspectMask: aspectMask,
    mipLevel: mipLevel,
    baseArrayLayer: baseArrayLayer,
    layerCount: layerCount,
  )

proc newVkImageSubresourceRange*(aspectMask: VkImageAspectFlags, baseMipLevel: uint32, levelCount: uint32, baseArrayLayer: uint32, layerCount: uint32): VkImageSubresourceRange =
  result = VkImageSubresourceRange(
    aspectMask: aspectMask,
    baseMipLevel: baseMipLevel,
    levelCount: levelCount,
    baseArrayLayer: baseArrayLayer,
    layerCount: layerCount,
  )

proc newVkMemoryBarrier*(sType: VkStructureType = VkStructureType.MemoryBarrier, pNext: pointer = nil, srcAccessMask: VkAccessFlags, dstAccessMask: VkAccessFlags): VkMemoryBarrier =
  result = VkMemoryBarrier(
    sType: sType,
    pNext: pNext,
    srcAccessMask: srcAccessMask,
    dstAccessMask: dstAccessMask,
  )

proc newVkBufferMemoryBarrier*(sType: VkStructureType = VkStructureType.BufferMemoryBarrier, pNext: pointer = nil, srcAccessMask: VkAccessFlags, dstAccessMask: VkAccessFlags, srcQueueFamilyIndex: uint32, dstQueueFamilyIndex: uint32, buffer: VkBuffer, offset: VkDeviceSize, size: VkDeviceSize): VkBufferMemoryBarrier =
  result = VkBufferMemoryBarrier(
    sType: sType,
    pNext: pNext,
    srcAccessMask: srcAccessMask,
    dstAccessMask: dstAccessMask,
    srcQueueFamilyIndex: srcQueueFamilyIndex,
    dstQueueFamilyIndex: dstQueueFamilyIndex,
    buffer: buffer,
    offset: offset,
    size: size,
  )

proc newVkImageMemoryBarrier*(sType: VkStructureType = VkStructureType.ImageMemoryBarrier, pNext: pointer = nil, srcAccessMask: VkAccessFlags, dstAccessMask: VkAccessFlags, oldLayout: VkImageLayout, newLayout: VkImageLayout, srcQueueFamilyIndex: uint32, dstQueueFamilyIndex: uint32, image: VkImage, subresourceRange: VkImageSubresourceRange): VkImageMemoryBarrier =
  result = VkImageMemoryBarrier(
    sType: sType,
    pNext: pNext,
    srcAccessMask: srcAccessMask,
    dstAccessMask: dstAccessMask,
    oldLayout: oldLayout,
    newLayout: newLayout,
    srcQueueFamilyIndex: srcQueueFamilyIndex,
    dstQueueFamilyIndex: dstQueueFamilyIndex,
    image: image,
    subresourceRange: subresourceRange,
  )

proc newVkImageCreateInfo*(sType: VkStructureType = VkStructureType.ImageCreateInfo, pNext: pointer = nil, flags: VkImageCreateFlags = 0.VkImageCreateFlags, imageType: VkImageType, format: VkFormat, extent: VkExtent3D, mipLevels: uint32, arrayLayers: uint32, samples: VkSampleCountFlagBits, tiling: VkImageTiling, usage: VkImageUsageFlags, sharingMode: VkSharingMode, queueFamilyIndexCount: uint32, pQueueFamilyIndices: ptr uint32, initialLayout: VkImageLayout): VkImageCreateInfo =
  result = VkImageCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    imageType: imageType,
    format: format,
    extent: extent,
    mipLevels: mipLevels,
    arrayLayers: arrayLayers,
    samples: samples,
    tiling: tiling,
    usage: usage,
    sharingMode: sharingMode,
    queueFamilyIndexCount: queueFamilyIndexCount,
    pQueueFamilyIndices: pQueueFamilyIndices,
    initialLayout: initialLayout,
  )

proc newVkSubresourceLayout*(offset: VkDeviceSize, size: VkDeviceSize, rowPitch: VkDeviceSize, arrayPitch: VkDeviceSize, depthPitch: VkDeviceSize): VkSubresourceLayout =
  result = VkSubresourceLayout(
    offset: offset,
    size: size,
    rowPitch: rowPitch,
    arrayPitch: arrayPitch,
    depthPitch: depthPitch,
  )

proc newVkImageViewCreateInfo*(sType: VkStructureType = VkStructureType.ImageViewCreateInfo, pNext: pointer = nil, flags: VkImageViewCreateFlags = 0.VkImageViewCreateFlags, image: VkImage, viewType: VkImageViewType, format: VkFormat, components: VkComponentMapping, subresourceRange: VkImageSubresourceRange): VkImageViewCreateInfo =
  result = VkImageViewCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    image: image,
    viewType: viewType,
    format: format,
    components: components,
    subresourceRange: subresourceRange,
  )

proc newVkBufferCopy*(srcOffset: VkDeviceSize, dstOffset: VkDeviceSize, size: VkDeviceSize): VkBufferCopy =
  result = VkBufferCopy(
    srcOffset: srcOffset,
    dstOffset: dstOffset,
    size: size,
  )

proc newVkSparseMemoryBind*(resourceOffset: VkDeviceSize, size: VkDeviceSize, memory: VkDeviceMemory, memoryOffset: VkDeviceSize, flags: VkSparseMemoryBindFlags = 0.VkSparseMemoryBindFlags): VkSparseMemoryBind =
  result = VkSparseMemoryBind(
    resourceOffset: resourceOffset,
    size: size,
    memory: memory,
    memoryOffset: memoryOffset,
    flags: flags,
  )

proc newVkSparseImageMemoryBind*(subresource: VkImageSubresource, offset: VkOffset3D, extent: VkExtent3D, memory: VkDeviceMemory, memoryOffset: VkDeviceSize, flags: VkSparseMemoryBindFlags = 0.VkSparseMemoryBindFlags): VkSparseImageMemoryBind =
  result = VkSparseImageMemoryBind(
    subresource: subresource,
    offset: offset,
    extent: extent,
    memory: memory,
    memoryOffset: memoryOffset,
    flags: flags,
  )

proc newVkSparseBufferMemoryBindInfo*(buffer: VkBuffer, bindCount: uint32, pBinds: ptr VkSparseMemoryBind): VkSparseBufferMemoryBindInfo =
  result = VkSparseBufferMemoryBindInfo(
    buffer: buffer,
    bindCount: bindCount,
    pBinds: pBinds,
  )

proc newVkSparseImageOpaqueMemoryBindInfo*(image: VkImage, bindCount: uint32, pBinds: ptr VkSparseMemoryBind): VkSparseImageOpaqueMemoryBindInfo =
  result = VkSparseImageOpaqueMemoryBindInfo(
    image: image,
    bindCount: bindCount,
    pBinds: pBinds,
  )

proc newVkSparseImageMemoryBindInfo*(image: VkImage, bindCount: uint32, pBinds: ptr VkSparseImageMemoryBind): VkSparseImageMemoryBindInfo =
  result = VkSparseImageMemoryBindInfo(
    image: image,
    bindCount: bindCount,
    pBinds: pBinds,
  )

proc newVkBindSparseInfo*(sType: VkStructureType = VkStructureType.BindSparseInfo, pNext: pointer = nil, waitSemaphoreCount: uint32, pWaitSemaphores: ptr VkSemaphore, bufferBindCount: uint32, pBufferBinds: ptr VkSparseBufferMemoryBindInfo, imageOpaqueBindCount: uint32, pImageOpaqueBinds: ptr VkSparseImageOpaqueMemoryBindInfo, imageBindCount: uint32, pImageBinds: ptr VkSparseImageMemoryBindInfo, signalSemaphoreCount: uint32, pSignalSemaphores: ptr VkSemaphore): VkBindSparseInfo =
  result = VkBindSparseInfo(
    sType: sType,
    pNext: pNext,
    waitSemaphoreCount: waitSemaphoreCount,
    pWaitSemaphores: pWaitSemaphores,
    bufferBindCount: bufferBindCount,
    pBufferBinds: pBufferBinds,
    imageOpaqueBindCount: imageOpaqueBindCount,
    pImageOpaqueBinds: pImageOpaqueBinds,
    imageBindCount: imageBindCount,
    pImageBinds: pImageBinds,
    signalSemaphoreCount: signalSemaphoreCount,
    pSignalSemaphores: pSignalSemaphores,
  )

proc newVkImageCopy*(srcSubresource: VkImageSubresourceLayers, srcOffset: VkOffset3D, dstSubresource: VkImageSubresourceLayers, dstOffset: VkOffset3D, extent: VkExtent3D): VkImageCopy =
  result = VkImageCopy(
    srcSubresource: srcSubresource,
    srcOffset: srcOffset,
    dstSubresource: dstSubresource,
    dstOffset: dstOffset,
    extent: extent,
  )

proc newVkImageBlit*(srcSubresource: VkImageSubresourceLayers, srcOffsets: array[2, VkOffset3D], dstSubresource: VkImageSubresourceLayers, dstOffsets: array[2, VkOffset3D]): VkImageBlit =
  result = VkImageBlit(
    srcSubresource: srcSubresource,
    srcOffsets: srcOffsets,
    dstSubresource: dstSubresource,
    dstOffsets: dstOffsets,
  )

proc newVkBufferImageCopy*(bufferOffset: VkDeviceSize, bufferRowLength: uint32, bufferImageHeight: uint32, imageSubresource: VkImageSubresourceLayers, imageOffset: VkOffset3D, imageExtent: VkExtent3D): VkBufferImageCopy =
  result = VkBufferImageCopy(
    bufferOffset: bufferOffset,
    bufferRowLength: bufferRowLength,
    bufferImageHeight: bufferImageHeight,
    imageSubresource: imageSubresource,
    imageOffset: imageOffset,
    imageExtent: imageExtent,
  )

proc newVkCopyMemoryIndirectCommandNV*(srcAddress: VkDeviceAddress, dstAddress: VkDeviceAddress, size: VkDeviceSize): VkCopyMemoryIndirectCommandNV =
  result = VkCopyMemoryIndirectCommandNV(
    srcAddress: srcAddress,
    dstAddress: dstAddress,
    size: size,
  )

proc newVkCopyMemoryToImageIndirectCommandNV*(srcAddress: VkDeviceAddress, bufferRowLength: uint32, bufferImageHeight: uint32, imageSubresource: VkImageSubresourceLayers, imageOffset: VkOffset3D, imageExtent: VkExtent3D): VkCopyMemoryToImageIndirectCommandNV =
  result = VkCopyMemoryToImageIndirectCommandNV(
    srcAddress: srcAddress,
    bufferRowLength: bufferRowLength,
    bufferImageHeight: bufferImageHeight,
    imageSubresource: imageSubresource,
    imageOffset: imageOffset,
    imageExtent: imageExtent,
  )

proc newVkImageResolve*(srcSubresource: VkImageSubresourceLayers, srcOffset: VkOffset3D, dstSubresource: VkImageSubresourceLayers, dstOffset: VkOffset3D, extent: VkExtent3D): VkImageResolve =
  result = VkImageResolve(
    srcSubresource: srcSubresource,
    srcOffset: srcOffset,
    dstSubresource: dstSubresource,
    dstOffset: dstOffset,
    extent: extent,
  )

proc newVkShaderModuleCreateInfo*(sType: VkStructureType = VkStructureType.ShaderModuleCreateInfo, pNext: pointer = nil, flags: VkShaderModuleCreateFlags = 0.VkShaderModuleCreateFlags, codeSize: uint, pCode: ptr uint32): VkShaderModuleCreateInfo =
  result = VkShaderModuleCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    codeSize: codeSize,
    pCode: pCode,
  )

proc newVkDescriptorSetLayoutBinding*(binding: uint32, descriptorType: VkDescriptorType, descriptorCount: uint32, stageFlags: VkShaderStageFlags, pImmutableSamplers: ptr VkSampler): VkDescriptorSetLayoutBinding =
  result = VkDescriptorSetLayoutBinding(
    binding: binding,
    descriptorType: descriptorType,
    descriptorCount: descriptorCount,
    stageFlags: stageFlags,
    pImmutableSamplers: pImmutableSamplers,
  )

proc newVkDescriptorSetLayoutCreateInfo*(sType: VkStructureType = VkStructureType.DescriptorSetLayoutCreateInfo, pNext: pointer = nil, flags: VkDescriptorSetLayoutCreateFlags = 0.VkDescriptorSetLayoutCreateFlags, bindingCount: uint32, pBindings: ptr VkDescriptorSetLayoutBinding): VkDescriptorSetLayoutCreateInfo =
  result = VkDescriptorSetLayoutCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    bindingCount: bindingCount,
    pBindings: pBindings,
  )

proc newVkDescriptorPoolSize*(`type`: VkDescriptorType, descriptorCount: uint32): VkDescriptorPoolSize =
  result = VkDescriptorPoolSize(
    `type`: `type`,
    descriptorCount: descriptorCount,
  )

proc newVkDescriptorPoolCreateInfo*(sType: VkStructureType = VkStructureType.DescriptorPoolCreateInfo, pNext: pointer = nil, flags: VkDescriptorPoolCreateFlags = 0.VkDescriptorPoolCreateFlags, maxSets: uint32, poolSizeCount: uint32, pPoolSizes: ptr VkDescriptorPoolSize): VkDescriptorPoolCreateInfo =
  result = VkDescriptorPoolCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    maxSets: maxSets,
    poolSizeCount: poolSizeCount,
    pPoolSizes: pPoolSizes,
  )

proc newVkDescriptorSetAllocateInfo*(sType: VkStructureType = VkStructureType.DescriptorSetAllocateInfo, pNext: pointer = nil, descriptorPool: VkDescriptorPool, descriptorSetCount: uint32, pSetLayouts: ptr VkDescriptorSetLayout): VkDescriptorSetAllocateInfo =
  result = VkDescriptorSetAllocateInfo(
    sType: sType,
    pNext: pNext,
    descriptorPool: descriptorPool,
    descriptorSetCount: descriptorSetCount,
    pSetLayouts: pSetLayouts,
  )

proc newVkSpecializationMapEntry*(constantID: uint32, offset: uint32, size: uint): VkSpecializationMapEntry =
  result = VkSpecializationMapEntry(
    constantID: constantID,
    offset: offset,
    size: size,
  )

proc newVkSpecializationInfo*(mapEntryCount: uint32, pMapEntries: ptr VkSpecializationMapEntry, dataSize: uint, pData: pointer = nil): VkSpecializationInfo =
  result = VkSpecializationInfo(
    mapEntryCount: mapEntryCount,
    pMapEntries: pMapEntries,
    dataSize: dataSize,
    pData: pData,
  )

proc newVkPipelineShaderStageCreateInfo*(sType: VkStructureType = VkStructureType.PipelineShaderStageCreateInfo, pNext: pointer = nil, flags: VkPipelineShaderStageCreateFlags = 0.VkPipelineShaderStageCreateFlags, stage: VkShaderStageFlagBits, module: VkShaderModule, pName: cstring, pSpecializationInfo: ptr VkSpecializationInfo): VkPipelineShaderStageCreateInfo =
  result = VkPipelineShaderStageCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    stage: stage,
    module: module,
    pName: pName,
    pSpecializationInfo: pSpecializationInfo,
  )

proc newVkComputePipelineCreateInfo*(sType: VkStructureType = VkStructureType.ComputePipelineCreateInfo, pNext: pointer = nil, flags: VkPipelineCreateFlags = 0.VkPipelineCreateFlags, stage: VkPipelineShaderStageCreateInfo, layout: VkPipelineLayout, basePipelineHandle: VkPipeline, basePipelineIndex: int32): VkComputePipelineCreateInfo =
  result = VkComputePipelineCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    stage: stage,
    layout: layout,
    basePipelineHandle: basePipelineHandle,
    basePipelineIndex: basePipelineIndex,
  )

proc newVkComputePipelineIndirectBufferInfoNV*(sType: VkStructureType, pNext: pointer = nil, deviceAddress: VkDeviceAddress, size: VkDeviceSize, pipelineDeviceAddressCaptureReplay: VkDeviceAddress): VkComputePipelineIndirectBufferInfoNV =
  result = VkComputePipelineIndirectBufferInfoNV(
    sType: sType,
    pNext: pNext,
    deviceAddress: deviceAddress,
    size: size,
    pipelineDeviceAddressCaptureReplay: pipelineDeviceAddressCaptureReplay,
  )

proc newVkPipelineCreateFlags2CreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkPipelineCreateFlags2KHR = 0.VkPipelineCreateFlags2KHR): VkPipelineCreateFlags2CreateInfoKHR =
  result = VkPipelineCreateFlags2CreateInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
  )

proc newVkVertexInputBindingDescription*(binding: uint32, stride: uint32, inputRate: VkVertexInputRate): VkVertexInputBindingDescription =
  result = VkVertexInputBindingDescription(
    binding: binding,
    stride: stride,
    inputRate: inputRate,
  )

proc newVkVertexInputAttributeDescription*(location: uint32, binding: uint32, format: VkFormat, offset: uint32): VkVertexInputAttributeDescription =
  result = VkVertexInputAttributeDescription(
    location: location,
    binding: binding,
    format: format,
    offset: offset,
  )

proc newVkPipelineVertexInputStateCreateInfo*(sType: VkStructureType = VkStructureType.PipelineVertexInputStateCreateInfo, pNext: pointer = nil, flags: VkPipelineVertexInputStateCreateFlags = 0.VkPipelineVertexInputStateCreateFlags, vertexBindingDescriptionCount: uint32, pVertexBindingDescriptions: ptr VkVertexInputBindingDescription, vertexAttributeDescriptionCount: uint32, pVertexAttributeDescriptions: ptr VkVertexInputAttributeDescription): VkPipelineVertexInputStateCreateInfo =
  result = VkPipelineVertexInputStateCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    vertexBindingDescriptionCount: vertexBindingDescriptionCount,
    pVertexBindingDescriptions: pVertexBindingDescriptions,
    vertexAttributeDescriptionCount: vertexAttributeDescriptionCount,
    pVertexAttributeDescriptions: pVertexAttributeDescriptions,
  )

proc newVkPipelineInputAssemblyStateCreateInfo*(sType: VkStructureType = VkStructureType.PipelineInputAssemblyStateCreateInfo, pNext: pointer = nil, flags: VkPipelineInputAssemblyStateCreateFlags = 0.VkPipelineInputAssemblyStateCreateFlags, topology: VkPrimitiveTopology, primitiveRestartEnable: VkBool32): VkPipelineInputAssemblyStateCreateInfo =
  result = VkPipelineInputAssemblyStateCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    topology: topology,
    primitiveRestartEnable: primitiveRestartEnable,
  )

proc newVkPipelineTessellationStateCreateInfo*(sType: VkStructureType = VkStructureType.PipelineTessellationStateCreateInfo, pNext: pointer = nil, flags: VkPipelineTessellationStateCreateFlags = 0.VkPipelineTessellationStateCreateFlags, patchControlPoints: uint32): VkPipelineTessellationStateCreateInfo =
  result = VkPipelineTessellationStateCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    patchControlPoints: patchControlPoints,
  )

proc newVkPipelineViewportStateCreateInfo*(sType: VkStructureType = VkStructureType.PipelineViewportStateCreateInfo, pNext: pointer = nil, flags: VkPipelineViewportStateCreateFlags = 0.VkPipelineViewportStateCreateFlags, viewportCount: uint32, pViewports: ptr VkViewport, scissorCount: uint32, pScissors: ptr VkRect2D): VkPipelineViewportStateCreateInfo =
  result = VkPipelineViewportStateCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    viewportCount: viewportCount,
    pViewports: pViewports,
    scissorCount: scissorCount,
    pScissors: pScissors,
  )

proc newVkPipelineRasterizationStateCreateInfo*(sType: VkStructureType = VkStructureType.PipelineRasterizationStateCreateInfo, pNext: pointer = nil, flags: VkPipelineRasterizationStateCreateFlags = 0.VkPipelineRasterizationStateCreateFlags, depthClampEnable: VkBool32, rasterizerDiscardEnable: VkBool32, polygonMode: VkPolygonMode, cullMode: VkCullModeFlags, frontFace: VkFrontFace, depthBiasEnable: VkBool32, depthBiasConstantFactor: float32, depthBiasClamp: float32, depthBiasSlopeFactor: float32, lineWidth: float32): VkPipelineRasterizationStateCreateInfo =
  result = VkPipelineRasterizationStateCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    depthClampEnable: depthClampEnable,
    rasterizerDiscardEnable: rasterizerDiscardEnable,
    polygonMode: polygonMode,
    cullMode: cullMode,
    frontFace: frontFace,
    depthBiasEnable: depthBiasEnable,
    depthBiasConstantFactor: depthBiasConstantFactor,
    depthBiasClamp: depthBiasClamp,
    depthBiasSlopeFactor: depthBiasSlopeFactor,
    lineWidth: lineWidth,
  )

proc newVkPipelineMultisampleStateCreateInfo*(sType: VkStructureType = VkStructureType.PipelineMultisampleStateCreateInfo, pNext: pointer = nil, flags: VkPipelineMultisampleStateCreateFlags = 0.VkPipelineMultisampleStateCreateFlags, rasterizationSamples: VkSampleCountFlagBits, sampleShadingEnable: VkBool32, minSampleShading: float32, pSampleMask: ptr VkSampleMask, alphaToCoverageEnable: VkBool32, alphaToOneEnable: VkBool32): VkPipelineMultisampleStateCreateInfo =
  result = VkPipelineMultisampleStateCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    rasterizationSamples: rasterizationSamples,
    sampleShadingEnable: sampleShadingEnable,
    minSampleShading: minSampleShading,
    pSampleMask: pSampleMask,
    alphaToCoverageEnable: alphaToCoverageEnable,
    alphaToOneEnable: alphaToOneEnable,
  )

proc newVkPipelineColorBlendAttachmentState*(blendEnable: VkBool32, srcColorBlendFactor: VkBlendFactor, dstColorBlendFactor: VkBlendFactor, colorBlendOp: VkBlendOp, srcAlphaBlendFactor: VkBlendFactor, dstAlphaBlendFactor: VkBlendFactor, alphaBlendOp: VkBlendOp, colorWriteMask: VkColorComponentFlags): VkPipelineColorBlendAttachmentState =
  result = VkPipelineColorBlendAttachmentState(
    blendEnable: blendEnable,
    srcColorBlendFactor: srcColorBlendFactor,
    dstColorBlendFactor: dstColorBlendFactor,
    colorBlendOp: colorBlendOp,
    srcAlphaBlendFactor: srcAlphaBlendFactor,
    dstAlphaBlendFactor: dstAlphaBlendFactor,
    alphaBlendOp: alphaBlendOp,
    colorWriteMask: colorWriteMask,
  )

proc newVkPipelineColorBlendStateCreateInfo*(sType: VkStructureType = VkStructureType.PipelineColorBlendStateCreateInfo, pNext: pointer = nil, flags: VkPipelineColorBlendStateCreateFlags = 0.VkPipelineColorBlendStateCreateFlags, logicOpEnable: VkBool32, logicOp: VkLogicOp, attachmentCount: uint32, pAttachments: ptr VkPipelineColorBlendAttachmentState, blendConstants: array[4, float32]): VkPipelineColorBlendStateCreateInfo =
  result = VkPipelineColorBlendStateCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    logicOpEnable: logicOpEnable,
    logicOp: logicOp,
    attachmentCount: attachmentCount,
    pAttachments: pAttachments,
    blendConstants: blendConstants,
  )

proc newVkPipelineDynamicStateCreateInfo*(sType: VkStructureType = VkStructureType.PipelineDynamicStateCreateInfo, pNext: pointer = nil, flags: VkPipelineDynamicStateCreateFlags = 0.VkPipelineDynamicStateCreateFlags, dynamicStateCount: uint32, pDynamicStates: ptr VkDynamicState): VkPipelineDynamicStateCreateInfo =
  result = VkPipelineDynamicStateCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    dynamicStateCount: dynamicStateCount,
    pDynamicStates: pDynamicStates,
  )

proc newVkStencilOpState*(failOp: VkStencilOp, passOp: VkStencilOp, depthFailOp: VkStencilOp, compareOp: VkCompareOp, compareMask: uint32, writeMask: uint32, reference: uint32): VkStencilOpState =
  result = VkStencilOpState(
    failOp: failOp,
    passOp: passOp,
    depthFailOp: depthFailOp,
    compareOp: compareOp,
    compareMask: compareMask,
    writeMask: writeMask,
    reference: reference,
  )

proc newVkPipelineDepthStencilStateCreateInfo*(sType: VkStructureType = VkStructureType.PipelineDepthStencilStateCreateInfo, pNext: pointer = nil, flags: VkPipelineDepthStencilStateCreateFlags = 0.VkPipelineDepthStencilStateCreateFlags, depthTestEnable: VkBool32, depthWriteEnable: VkBool32, depthCompareOp: VkCompareOp, depthBoundsTestEnable: VkBool32, stencilTestEnable: VkBool32, front: VkStencilOpState, back: VkStencilOpState, minDepthBounds: float32, maxDepthBounds: float32): VkPipelineDepthStencilStateCreateInfo =
  result = VkPipelineDepthStencilStateCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    depthTestEnable: depthTestEnable,
    depthWriteEnable: depthWriteEnable,
    depthCompareOp: depthCompareOp,
    depthBoundsTestEnable: depthBoundsTestEnable,
    stencilTestEnable: stencilTestEnable,
    front: front,
    back: back,
    minDepthBounds: minDepthBounds,
    maxDepthBounds: maxDepthBounds,
  )

proc newVkGraphicsPipelineCreateInfo*(sType: VkStructureType = VkStructureType.GraphicsPipelineCreateInfo, pNext: pointer = nil, flags: VkPipelineCreateFlags = 0.VkPipelineCreateFlags, stageCount: uint32, pStages: ptr VkPipelineShaderStageCreateInfo, pVertexInputState: ptr VkPipelineVertexInputStateCreateInfo, pInputAssemblyState: ptr VkPipelineInputAssemblyStateCreateInfo, pTessellationState: ptr VkPipelineTessellationStateCreateInfo, pViewportState: ptr VkPipelineViewportStateCreateInfo, pRasterizationState: ptr VkPipelineRasterizationStateCreateInfo, pMultisampleState: ptr VkPipelineMultisampleStateCreateInfo, pDepthStencilState: ptr VkPipelineDepthStencilStateCreateInfo, pColorBlendState: ptr VkPipelineColorBlendStateCreateInfo, pDynamicState: ptr VkPipelineDynamicStateCreateInfo, layout: VkPipelineLayout, renderPass: VkRenderPass, subpass: uint32, basePipelineHandle: VkPipeline, basePipelineIndex: int32): VkGraphicsPipelineCreateInfo =
  result = VkGraphicsPipelineCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    stageCount: stageCount,
    pStages: pStages,
    pVertexInputState: pVertexInputState,
    pInputAssemblyState: pInputAssemblyState,
    pTessellationState: pTessellationState,
    pViewportState: pViewportState,
    pRasterizationState: pRasterizationState,
    pMultisampleState: pMultisampleState,
    pDepthStencilState: pDepthStencilState,
    pColorBlendState: pColorBlendState,
    pDynamicState: pDynamicState,
    layout: layout,
    renderPass: renderPass,
    subpass: subpass,
    basePipelineHandle: basePipelineHandle,
    basePipelineIndex: basePipelineIndex,
  )

proc newVkPipelineCacheCreateInfo*(sType: VkStructureType = VkStructureType.PipelineCacheCreateInfo, pNext: pointer = nil, flags: VkPipelineCacheCreateFlags = 0.VkPipelineCacheCreateFlags, initialDataSize: uint, pInitialData: pointer = nil): VkPipelineCacheCreateInfo =
  result = VkPipelineCacheCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    initialDataSize: initialDataSize,
    pInitialData: pInitialData,
  )

proc newVkPipelineCacheHeaderVersionOne*(headerSize: uint32, headerVersion: VkPipelineCacheHeaderVersion, vendorID: uint32, deviceID: uint32, pipelineCacheUUID: array[VK_UUID_SIZE, uint8]): VkPipelineCacheHeaderVersionOne =
  result = VkPipelineCacheHeaderVersionOne(
    headerSize: headerSize,
    headerVersion: headerVersion,
    vendorID: vendorID,
    deviceID: deviceID,
    pipelineCacheUUID: pipelineCacheUUID,
  )

proc newVkPipelineCacheStageValidationIndexEntry*(codeSize: uint64, codeOffset: uint64): VkPipelineCacheStageValidationIndexEntry =
  result = VkPipelineCacheStageValidationIndexEntry(
    codeSize: codeSize,
    codeOffset: codeOffset,
  )

proc newVkPipelineCacheSafetyCriticalIndexEntry*(pipelineIdentifier: array[VK_UUID_SIZE, uint8], pipelineMemorySize: uint64, jsonSize: uint64, jsonOffset: uint64, stageIndexCount: uint32, stageIndexStride: uint32, stageIndexOffset: uint64): VkPipelineCacheSafetyCriticalIndexEntry =
  result = VkPipelineCacheSafetyCriticalIndexEntry(
    pipelineIdentifier: pipelineIdentifier,
    pipelineMemorySize: pipelineMemorySize,
    jsonSize: jsonSize,
    jsonOffset: jsonOffset,
    stageIndexCount: stageIndexCount,
    stageIndexStride: stageIndexStride,
    stageIndexOffset: stageIndexOffset,
  )

proc newVkPipelineCacheHeaderVersionSafetyCriticalOne*(headerVersionOne: VkPipelineCacheHeaderVersionOne, validationVersion: VkPipelineCacheValidationVersion, implementationData: uint32, pipelineIndexCount: uint32, pipelineIndexStride: uint32, pipelineIndexOffset: uint64): VkPipelineCacheHeaderVersionSafetyCriticalOne =
  result = VkPipelineCacheHeaderVersionSafetyCriticalOne(
    headerVersionOne: headerVersionOne,
    validationVersion: validationVersion,
    implementationData: implementationData,
    pipelineIndexCount: pipelineIndexCount,
    pipelineIndexStride: pipelineIndexStride,
    pipelineIndexOffset: pipelineIndexOffset,
  )

proc newVkPushConstantRange*(stageFlags: VkShaderStageFlags, offset: uint32, size: uint32): VkPushConstantRange =
  result = VkPushConstantRange(
    stageFlags: stageFlags,
    offset: offset,
    size: size,
  )

proc newVkPipelineLayoutCreateInfo*(sType: VkStructureType = VkStructureType.PipelineLayoutCreateInfo, pNext: pointer = nil, flags: VkPipelineLayoutCreateFlags = 0.VkPipelineLayoutCreateFlags, setLayoutCount: uint32, pSetLayouts: ptr VkDescriptorSetLayout, pushConstantRangeCount: uint32, pPushConstantRanges: ptr VkPushConstantRange): VkPipelineLayoutCreateInfo =
  result = VkPipelineLayoutCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    setLayoutCount: setLayoutCount,
    pSetLayouts: pSetLayouts,
    pushConstantRangeCount: pushConstantRangeCount,
    pPushConstantRanges: pPushConstantRanges,
  )

proc newVkSamplerCreateInfo*(sType: VkStructureType = VkStructureType.SamplerCreateInfo, pNext: pointer = nil, flags: VkSamplerCreateFlags = 0.VkSamplerCreateFlags, magFilter: VkFilter, minFilter: VkFilter, mipmapMode: VkSamplerMipmapMode, addressModeU: VkSamplerAddressMode, addressModeV: VkSamplerAddressMode, addressModeW: VkSamplerAddressMode, mipLodBias: float32, anisotropyEnable: VkBool32, maxAnisotropy: float32, compareEnable: VkBool32, compareOp: VkCompareOp, minLod: float32, maxLod: float32, borderColor: VkBorderColor, unnormalizedCoordinates: VkBool32): VkSamplerCreateInfo =
  result = VkSamplerCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    magFilter: magFilter,
    minFilter: minFilter,
    mipmapMode: mipmapMode,
    addressModeU: addressModeU,
    addressModeV: addressModeV,
    addressModeW: addressModeW,
    mipLodBias: mipLodBias,
    anisotropyEnable: anisotropyEnable,
    maxAnisotropy: maxAnisotropy,
    compareEnable: compareEnable,
    compareOp: compareOp,
    minLod: minLod,
    maxLod: maxLod,
    borderColor: borderColor,
    unnormalizedCoordinates: unnormalizedCoordinates,
  )

proc newVkCommandPoolCreateInfo*(sType: VkStructureType = VkStructureType.CommandPoolCreateInfo, pNext: pointer = nil, flags: VkCommandPoolCreateFlags = 0.VkCommandPoolCreateFlags, queueFamilyIndex: uint32): VkCommandPoolCreateInfo =
  result = VkCommandPoolCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    queueFamilyIndex: queueFamilyIndex,
  )

proc newVkCommandBufferAllocateInfo*(sType: VkStructureType = VkStructureType.CommandBufferAllocateInfo, pNext: pointer = nil, commandPool: VkCommandPool, level: VkCommandBufferLevel, commandBufferCount: uint32): VkCommandBufferAllocateInfo =
  result = VkCommandBufferAllocateInfo(
    sType: sType,
    pNext: pNext,
    commandPool: commandPool,
    level: level,
    commandBufferCount: commandBufferCount,
  )

proc newVkCommandBufferInheritanceInfo*(sType: VkStructureType = VkStructureType.CommandBufferInheritanceInfo, pNext: pointer = nil, renderPass: VkRenderPass, subpass: uint32, framebuffer: VkFramebuffer, occlusionQueryEnable: VkBool32, queryFlags: VkQueryControlFlags, pipelineStatistics: VkQueryPipelineStatisticFlags): VkCommandBufferInheritanceInfo =
  result = VkCommandBufferInheritanceInfo(
    sType: sType,
    pNext: pNext,
    renderPass: renderPass,
    subpass: subpass,
    framebuffer: framebuffer,
    occlusionQueryEnable: occlusionQueryEnable,
    queryFlags: queryFlags,
    pipelineStatistics: pipelineStatistics,
  )

proc newVkCommandBufferBeginInfo*(sType: VkStructureType = VkStructureType.CommandBufferBeginInfo, pNext: pointer = nil, flags: VkCommandBufferUsageFlags = 0.VkCommandBufferUsageFlags, pInheritanceInfo: ptr VkCommandBufferInheritanceInfo): VkCommandBufferBeginInfo =
  result = VkCommandBufferBeginInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    pInheritanceInfo: pInheritanceInfo,
  )

proc newVkRenderPassBeginInfo*(sType: VkStructureType = VkStructureType.RenderPassBeginInfo, pNext: pointer = nil, renderPass: VkRenderPass, framebuffer: VkFramebuffer, renderArea: VkRect2D, clearValueCount: uint32, pClearValues: ptr VkClearValue): VkRenderPassBeginInfo =
  result = VkRenderPassBeginInfo(
    sType: sType,
    pNext: pNext,
    renderPass: renderPass,
    framebuffer: framebuffer,
    renderArea: renderArea,
    clearValueCount: clearValueCount,
    pClearValues: pClearValues,
  )

proc newVkClearDepthStencilValue*(depth: float32, stencil: uint32): VkClearDepthStencilValue =
  result = VkClearDepthStencilValue(
    depth: depth,
    stencil: stencil,
  )

proc newVkClearAttachment*(aspectMask: VkImageAspectFlags, colorAttachment: uint32, clearValue: VkClearValue): VkClearAttachment =
  result = VkClearAttachment(
    aspectMask: aspectMask,
    colorAttachment: colorAttachment,
    clearValue: clearValue,
  )

proc newVkAttachmentDescription*(flags: VkAttachmentDescriptionFlags = 0.VkAttachmentDescriptionFlags, format: VkFormat, samples: VkSampleCountFlagBits, loadOp: VkAttachmentLoadOp, storeOp: VkAttachmentStoreOp, stencilLoadOp: VkAttachmentLoadOp, stencilStoreOp: VkAttachmentStoreOp, initialLayout: VkImageLayout, finalLayout: VkImageLayout): VkAttachmentDescription =
  result = VkAttachmentDescription(
    flags: flags,
    format: format,
    samples: samples,
    loadOp: loadOp,
    storeOp: storeOp,
    stencilLoadOp: stencilLoadOp,
    stencilStoreOp: stencilStoreOp,
    initialLayout: initialLayout,
    finalLayout: finalLayout,
  )

proc newVkAttachmentReference*(attachment: uint32, layout: VkImageLayout): VkAttachmentReference =
  result = VkAttachmentReference(
    attachment: attachment,
    layout: layout,
  )

proc newVkSubpassDescription*(flags: VkSubpassDescriptionFlags = 0.VkSubpassDescriptionFlags, pipelineBindPoint: VkPipelineBindPoint, inputAttachmentCount: uint32, pInputAttachments: ptr VkAttachmentReference, colorAttachmentCount: uint32, pColorAttachments: ptr VkAttachmentReference, pResolveAttachments: ptr VkAttachmentReference, pDepthStencilAttachment: ptr VkAttachmentReference, preserveAttachmentCount: uint32, pPreserveAttachments: ptr uint32): VkSubpassDescription =
  result = VkSubpassDescription(
    flags: flags,
    pipelineBindPoint: pipelineBindPoint,
    inputAttachmentCount: inputAttachmentCount,
    pInputAttachments: pInputAttachments,
    colorAttachmentCount: colorAttachmentCount,
    pColorAttachments: pColorAttachments,
    pResolveAttachments: pResolveAttachments,
    pDepthStencilAttachment: pDepthStencilAttachment,
    preserveAttachmentCount: preserveAttachmentCount,
    pPreserveAttachments: pPreserveAttachments,
  )

proc newVkSubpassDependency*(srcSubpass: uint32, dstSubpass: uint32, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, srcAccessMask: VkAccessFlags, dstAccessMask: VkAccessFlags, dependencyFlags: VkDependencyFlags): VkSubpassDependency =
  result = VkSubpassDependency(
    srcSubpass: srcSubpass,
    dstSubpass: dstSubpass,
    srcStageMask: srcStageMask,
    dstStageMask: dstStageMask,
    srcAccessMask: srcAccessMask,
    dstAccessMask: dstAccessMask,
    dependencyFlags: dependencyFlags,
  )

proc newVkRenderPassCreateInfo*(sType: VkStructureType = VkStructureType.RenderPassCreateInfo, pNext: pointer = nil, flags: VkRenderPassCreateFlags = 0.VkRenderPassCreateFlags, attachmentCount: uint32, pAttachments: ptr VkAttachmentDescription, subpassCount: uint32, pSubpasses: ptr VkSubpassDescription, dependencyCount: uint32, pDependencies: ptr VkSubpassDependency): VkRenderPassCreateInfo =
  result = VkRenderPassCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    attachmentCount: attachmentCount,
    pAttachments: pAttachments,
    subpassCount: subpassCount,
    pSubpasses: pSubpasses,
    dependencyCount: dependencyCount,
    pDependencies: pDependencies,
  )

proc newVkEventCreateInfo*(sType: VkStructureType = VkStructureType.EventCreateInfo, pNext: pointer = nil, flags: VkEventCreateFlags = 0.VkEventCreateFlags): VkEventCreateInfo =
  result = VkEventCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
  )

proc newVkFenceCreateInfo*(sType: VkStructureType = VkStructureType.FenceCreateInfo, pNext: pointer = nil, flags: VkFenceCreateFlags = 0.VkFenceCreateFlags): VkFenceCreateInfo =
  result = VkFenceCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
  )

proc newVkPhysicalDeviceFeatures*(robustBufferAccess: VkBool32, fullDrawIndexUint32: VkBool32, imageCubeArray: VkBool32, independentBlend: VkBool32, geometryShader: VkBool32, tessellationShader: VkBool32, sampleRateShading: VkBool32, dualSrcBlend: VkBool32, logicOp: VkBool32, multiDrawIndirect: VkBool32, drawIndirectFirstInstance: VkBool32, depthClamp: VkBool32, depthBiasClamp: VkBool32, fillModeNonSolid: VkBool32, depthBounds: VkBool32, wideLines: VkBool32, largePoints: VkBool32, alphaToOne: VkBool32, multiViewport: VkBool32, samplerAnisotropy: VkBool32, textureCompressionETC2: VkBool32, textureCompressionASTC_LDR: VkBool32, textureCompressionBC: VkBool32, occlusionQueryPrecise: VkBool32, pipelineStatisticsQuery: VkBool32, vertexPipelineStoresAndAtomics: VkBool32, fragmentStoresAndAtomics: VkBool32, shaderTessellationAndGeometryPointSize: VkBool32, shaderImageGatherExtended: VkBool32, shaderStorageImageExtendedFormats: VkBool32, shaderStorageImageMultisample: VkBool32, shaderStorageImageReadWithoutFormat: VkBool32, shaderStorageImageWriteWithoutFormat: VkBool32, shaderUniformBufferArrayDynamicIndexing: VkBool32, shaderSampledImageArrayDynamicIndexing: VkBool32, shaderStorageBufferArrayDynamicIndexing: VkBool32, shaderStorageImageArrayDynamicIndexing: VkBool32, shaderClipDistance: VkBool32, shaderCullDistance: VkBool32, shaderFloat64: VkBool32, shaderInt64: VkBool32, shaderInt16: VkBool32, shaderResourceResidency: VkBool32, shaderResourceMinLod: VkBool32, sparseBinding: VkBool32, sparseResidencyBuffer: VkBool32, sparseResidencyImage2D: VkBool32, sparseResidencyImage3D: VkBool32, sparseResidency2Samples: VkBool32, sparseResidency4Samples: VkBool32, sparseResidency8Samples: VkBool32, sparseResidency16Samples: VkBool32, sparseResidencyAliased: VkBool32, variableMultisampleRate: VkBool32, inheritedQueries: VkBool32): VkPhysicalDeviceFeatures =
  result = VkPhysicalDeviceFeatures(
    robustBufferAccess: robustBufferAccess,
    fullDrawIndexUint32: fullDrawIndexUint32,
    imageCubeArray: imageCubeArray,
    independentBlend: independentBlend,
    geometryShader: geometryShader,
    tessellationShader: tessellationShader,
    sampleRateShading: sampleRateShading,
    dualSrcBlend: dualSrcBlend,
    logicOp: logicOp,
    multiDrawIndirect: multiDrawIndirect,
    drawIndirectFirstInstance: drawIndirectFirstInstance,
    depthClamp: depthClamp,
    depthBiasClamp: depthBiasClamp,
    fillModeNonSolid: fillModeNonSolid,
    depthBounds: depthBounds,
    wideLines: wideLines,
    largePoints: largePoints,
    alphaToOne: alphaToOne,
    multiViewport: multiViewport,
    samplerAnisotropy: samplerAnisotropy,
    textureCompressionETC2: textureCompressionETC2,
    textureCompressionASTC_LDR: textureCompressionASTC_LDR,
    textureCompressionBC: textureCompressionBC,
    occlusionQueryPrecise: occlusionQueryPrecise,
    pipelineStatisticsQuery: pipelineStatisticsQuery,
    vertexPipelineStoresAndAtomics: vertexPipelineStoresAndAtomics,
    fragmentStoresAndAtomics: fragmentStoresAndAtomics,
    shaderTessellationAndGeometryPointSize: shaderTessellationAndGeometryPointSize,
    shaderImageGatherExtended: shaderImageGatherExtended,
    shaderStorageImageExtendedFormats: shaderStorageImageExtendedFormats,
    shaderStorageImageMultisample: shaderStorageImageMultisample,
    shaderStorageImageReadWithoutFormat: shaderStorageImageReadWithoutFormat,
    shaderStorageImageWriteWithoutFormat: shaderStorageImageWriteWithoutFormat,
    shaderUniformBufferArrayDynamicIndexing: shaderUniformBufferArrayDynamicIndexing,
    shaderSampledImageArrayDynamicIndexing: shaderSampledImageArrayDynamicIndexing,
    shaderStorageBufferArrayDynamicIndexing: shaderStorageBufferArrayDynamicIndexing,
    shaderStorageImageArrayDynamicIndexing: shaderStorageImageArrayDynamicIndexing,
    shaderClipDistance: shaderClipDistance,
    shaderCullDistance: shaderCullDistance,
    shaderFloat64: shaderFloat64,
    shaderInt64: shaderInt64,
    shaderInt16: shaderInt16,
    shaderResourceResidency: shaderResourceResidency,
    shaderResourceMinLod: shaderResourceMinLod,
    sparseBinding: sparseBinding,
    sparseResidencyBuffer: sparseResidencyBuffer,
    sparseResidencyImage2D: sparseResidencyImage2D,
    sparseResidencyImage3D: sparseResidencyImage3D,
    sparseResidency2Samples: sparseResidency2Samples,
    sparseResidency4Samples: sparseResidency4Samples,
    sparseResidency8Samples: sparseResidency8Samples,
    sparseResidency16Samples: sparseResidency16Samples,
    sparseResidencyAliased: sparseResidencyAliased,
    variableMultisampleRate: variableMultisampleRate,
    inheritedQueries: inheritedQueries,
  )

proc newVkPhysicalDeviceSparseProperties*(residencyStandard2DBlockShape: VkBool32, residencyStandard2DMultisampleBlockShape: VkBool32, residencyStandard3DBlockShape: VkBool32, residencyAlignedMipSize: VkBool32, residencyNonResidentStrict: VkBool32): VkPhysicalDeviceSparseProperties =
  result = VkPhysicalDeviceSparseProperties(
    residencyStandard2DBlockShape: residencyStandard2DBlockShape,
    residencyStandard2DMultisampleBlockShape: residencyStandard2DMultisampleBlockShape,
    residencyStandard3DBlockShape: residencyStandard3DBlockShape,
    residencyAlignedMipSize: residencyAlignedMipSize,
    residencyNonResidentStrict: residencyNonResidentStrict,
  )

proc newVkPhysicalDeviceLimits*(maxImageDimension1D: uint32, maxImageDimension2D: uint32, maxImageDimension3D: uint32, maxImageDimensionCube: uint32, maxImageArrayLayers: uint32, maxTexelBufferElements: uint32, maxUniformBufferRange: uint32, maxStorageBufferRange: uint32, maxPushConstantsSize: uint32, maxMemoryAllocationCount: uint32, maxSamplerAllocationCount: uint32, bufferImageGranularity: VkDeviceSize, sparseAddressSpaceSize: VkDeviceSize, maxBoundDescriptorSets: uint32, maxPerStageDescriptorSamplers: uint32, maxPerStageDescriptorUniformBuffers: uint32, maxPerStageDescriptorStorageBuffers: uint32, maxPerStageDescriptorSampledImages: uint32, maxPerStageDescriptorStorageImages: uint32, maxPerStageDescriptorInputAttachments: uint32, maxPerStageResources: uint32, maxDescriptorSetSamplers: uint32, maxDescriptorSetUniformBuffers: uint32, maxDescriptorSetUniformBuffersDynamic: uint32, maxDescriptorSetStorageBuffers: uint32, maxDescriptorSetStorageBuffersDynamic: uint32, maxDescriptorSetSampledImages: uint32, maxDescriptorSetStorageImages: uint32, maxDescriptorSetInputAttachments: uint32, maxVertexInputAttributes: uint32, maxVertexInputBindings: uint32, maxVertexInputAttributeOffset: uint32, maxVertexInputBindingStride: uint32, maxVertexOutputComponents: uint32, maxTessellationGenerationLevel: uint32, maxTessellationPatchSize: uint32, maxTessellationControlPerVertexInputComponents: uint32, maxTessellationControlPerVertexOutputComponents: uint32, maxTessellationControlPerPatchOutputComponents: uint32, maxTessellationControlTotalOutputComponents: uint32, maxTessellationEvaluationInputComponents: uint32, maxTessellationEvaluationOutputComponents: uint32, maxGeometryShaderInvocations: uint32, maxGeometryInputComponents: uint32, maxGeometryOutputComponents: uint32, maxGeometryOutputVertices: uint32, maxGeometryTotalOutputComponents: uint32, maxFragmentInputComponents: uint32, maxFragmentOutputAttachments: uint32, maxFragmentDualSrcAttachments: uint32, maxFragmentCombinedOutputResources: uint32, maxComputeSharedMemorySize: uint32, maxComputeWorkGroupCount: array[3, uint32], maxComputeWorkGroupInvocations: uint32, maxComputeWorkGroupSize: array[3, uint32], subPixelPrecisionBits: uint32, subTexelPrecisionBits: uint32, mipmapPrecisionBits: uint32, maxDrawIndexedIndexValue: uint32, maxDrawIndirectCount: uint32, maxSamplerLodBias: float32, maxSamplerAnisotropy: float32, maxViewports: uint32, maxViewportDimensions: array[2, uint32], viewportBoundsRange: array[2, float32], viewportSubPixelBits: uint32, minMemoryMapAlignment: uint, minTexelBufferOffsetAlignment: VkDeviceSize, minUniformBufferOffsetAlignment: VkDeviceSize, minStorageBufferOffsetAlignment: VkDeviceSize, minTexelOffset: int32, maxTexelOffset: uint32, minTexelGatherOffset: int32, maxTexelGatherOffset: uint32, minInterpolationOffset: float32, maxInterpolationOffset: float32, subPixelInterpolationOffsetBits: uint32, maxFramebufferWidth: uint32, maxFramebufferHeight: uint32, maxFramebufferLayers: uint32, framebufferColorSampleCounts: VkSampleCountFlags, framebufferDepthSampleCounts: VkSampleCountFlags, framebufferStencilSampleCounts: VkSampleCountFlags, framebufferNoAttachmentsSampleCounts: VkSampleCountFlags, maxColorAttachments: uint32, sampledImageColorSampleCounts: VkSampleCountFlags, sampledImageIntegerSampleCounts: VkSampleCountFlags, sampledImageDepthSampleCounts: VkSampleCountFlags, sampledImageStencilSampleCounts: VkSampleCountFlags, storageImageSampleCounts: VkSampleCountFlags, maxSampleMaskWords: uint32, timestampComputeAndGraphics: VkBool32, timestampPeriod: float32, maxClipDistances: uint32, maxCullDistances: uint32, maxCombinedClipAndCullDistances: uint32, discreteQueuePriorities: uint32, pointSizeRange: array[2, float32], lineWidthRange: array[2, float32], pointSizeGranularity: float32, lineWidthGranularity: float32, strictLines: VkBool32, standardSampleLocations: VkBool32, optimalBufferCopyOffsetAlignment: VkDeviceSize, optimalBufferCopyRowPitchAlignment: VkDeviceSize, nonCoherentAtomSize: VkDeviceSize): VkPhysicalDeviceLimits =
  result = VkPhysicalDeviceLimits(
    maxImageDimension1D: maxImageDimension1D,
    maxImageDimension2D: maxImageDimension2D,
    maxImageDimension3D: maxImageDimension3D,
    maxImageDimensionCube: maxImageDimensionCube,
    maxImageArrayLayers: maxImageArrayLayers,
    maxTexelBufferElements: maxTexelBufferElements,
    maxUniformBufferRange: maxUniformBufferRange,
    maxStorageBufferRange: maxStorageBufferRange,
    maxPushConstantsSize: maxPushConstantsSize,
    maxMemoryAllocationCount: maxMemoryAllocationCount,
    maxSamplerAllocationCount: maxSamplerAllocationCount,
    bufferImageGranularity: bufferImageGranularity,
    sparseAddressSpaceSize: sparseAddressSpaceSize,
    maxBoundDescriptorSets: maxBoundDescriptorSets,
    maxPerStageDescriptorSamplers: maxPerStageDescriptorSamplers,
    maxPerStageDescriptorUniformBuffers: maxPerStageDescriptorUniformBuffers,
    maxPerStageDescriptorStorageBuffers: maxPerStageDescriptorStorageBuffers,
    maxPerStageDescriptorSampledImages: maxPerStageDescriptorSampledImages,
    maxPerStageDescriptorStorageImages: maxPerStageDescriptorStorageImages,
    maxPerStageDescriptorInputAttachments: maxPerStageDescriptorInputAttachments,
    maxPerStageResources: maxPerStageResources,
    maxDescriptorSetSamplers: maxDescriptorSetSamplers,
    maxDescriptorSetUniformBuffers: maxDescriptorSetUniformBuffers,
    maxDescriptorSetUniformBuffersDynamic: maxDescriptorSetUniformBuffersDynamic,
    maxDescriptorSetStorageBuffers: maxDescriptorSetStorageBuffers,
    maxDescriptorSetStorageBuffersDynamic: maxDescriptorSetStorageBuffersDynamic,
    maxDescriptorSetSampledImages: maxDescriptorSetSampledImages,
    maxDescriptorSetStorageImages: maxDescriptorSetStorageImages,
    maxDescriptorSetInputAttachments: maxDescriptorSetInputAttachments,
    maxVertexInputAttributes: maxVertexInputAttributes,
    maxVertexInputBindings: maxVertexInputBindings,
    maxVertexInputAttributeOffset: maxVertexInputAttributeOffset,
    maxVertexInputBindingStride: maxVertexInputBindingStride,
    maxVertexOutputComponents: maxVertexOutputComponents,
    maxTessellationGenerationLevel: maxTessellationGenerationLevel,
    maxTessellationPatchSize: maxTessellationPatchSize,
    maxTessellationControlPerVertexInputComponents: maxTessellationControlPerVertexInputComponents,
    maxTessellationControlPerVertexOutputComponents: maxTessellationControlPerVertexOutputComponents,
    maxTessellationControlPerPatchOutputComponents: maxTessellationControlPerPatchOutputComponents,
    maxTessellationControlTotalOutputComponents: maxTessellationControlTotalOutputComponents,
    maxTessellationEvaluationInputComponents: maxTessellationEvaluationInputComponents,
    maxTessellationEvaluationOutputComponents: maxTessellationEvaluationOutputComponents,
    maxGeometryShaderInvocations: maxGeometryShaderInvocations,
    maxGeometryInputComponents: maxGeometryInputComponents,
    maxGeometryOutputComponents: maxGeometryOutputComponents,
    maxGeometryOutputVertices: maxGeometryOutputVertices,
    maxGeometryTotalOutputComponents: maxGeometryTotalOutputComponents,
    maxFragmentInputComponents: maxFragmentInputComponents,
    maxFragmentOutputAttachments: maxFragmentOutputAttachments,
    maxFragmentDualSrcAttachments: maxFragmentDualSrcAttachments,
    maxFragmentCombinedOutputResources: maxFragmentCombinedOutputResources,
    maxComputeSharedMemorySize: maxComputeSharedMemorySize,
    maxComputeWorkGroupCount: maxComputeWorkGroupCount,
    maxComputeWorkGroupInvocations: maxComputeWorkGroupInvocations,
    maxComputeWorkGroupSize: maxComputeWorkGroupSize,
    subPixelPrecisionBits: subPixelPrecisionBits,
    subTexelPrecisionBits: subTexelPrecisionBits,
    mipmapPrecisionBits: mipmapPrecisionBits,
    maxDrawIndexedIndexValue: maxDrawIndexedIndexValue,
    maxDrawIndirectCount: maxDrawIndirectCount,
    maxSamplerLodBias: maxSamplerLodBias,
    maxSamplerAnisotropy: maxSamplerAnisotropy,
    maxViewports: maxViewports,
    maxViewportDimensions: maxViewportDimensions,
    viewportBoundsRange: viewportBoundsRange,
    viewportSubPixelBits: viewportSubPixelBits,
    minMemoryMapAlignment: minMemoryMapAlignment,
    minTexelBufferOffsetAlignment: minTexelBufferOffsetAlignment,
    minUniformBufferOffsetAlignment: minUniformBufferOffsetAlignment,
    minStorageBufferOffsetAlignment: minStorageBufferOffsetAlignment,
    minTexelOffset: minTexelOffset,
    maxTexelOffset: maxTexelOffset,
    minTexelGatherOffset: minTexelGatherOffset,
    maxTexelGatherOffset: maxTexelGatherOffset,
    minInterpolationOffset: minInterpolationOffset,
    maxInterpolationOffset: maxInterpolationOffset,
    subPixelInterpolationOffsetBits: subPixelInterpolationOffsetBits,
    maxFramebufferWidth: maxFramebufferWidth,
    maxFramebufferHeight: maxFramebufferHeight,
    maxFramebufferLayers: maxFramebufferLayers,
    framebufferColorSampleCounts: framebufferColorSampleCounts,
    framebufferDepthSampleCounts: framebufferDepthSampleCounts,
    framebufferStencilSampleCounts: framebufferStencilSampleCounts,
    framebufferNoAttachmentsSampleCounts: framebufferNoAttachmentsSampleCounts,
    maxColorAttachments: maxColorAttachments,
    sampledImageColorSampleCounts: sampledImageColorSampleCounts,
    sampledImageIntegerSampleCounts: sampledImageIntegerSampleCounts,
    sampledImageDepthSampleCounts: sampledImageDepthSampleCounts,
    sampledImageStencilSampleCounts: sampledImageStencilSampleCounts,
    storageImageSampleCounts: storageImageSampleCounts,
    maxSampleMaskWords: maxSampleMaskWords,
    timestampComputeAndGraphics: timestampComputeAndGraphics,
    timestampPeriod: timestampPeriod,
    maxClipDistances: maxClipDistances,
    maxCullDistances: maxCullDistances,
    maxCombinedClipAndCullDistances: maxCombinedClipAndCullDistances,
    discreteQueuePriorities: discreteQueuePriorities,
    pointSizeRange: pointSizeRange,
    lineWidthRange: lineWidthRange,
    pointSizeGranularity: pointSizeGranularity,
    lineWidthGranularity: lineWidthGranularity,
    strictLines: strictLines,
    standardSampleLocations: standardSampleLocations,
    optimalBufferCopyOffsetAlignment: optimalBufferCopyOffsetAlignment,
    optimalBufferCopyRowPitchAlignment: optimalBufferCopyRowPitchAlignment,
    nonCoherentAtomSize: nonCoherentAtomSize,
  )

proc newVkSemaphoreCreateInfo*(sType: VkStructureType = VkStructureType.SemaphoreCreateInfo, pNext: pointer = nil, flags: VkSemaphoreCreateFlags = 0.VkSemaphoreCreateFlags): VkSemaphoreCreateInfo =
  result = VkSemaphoreCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
  )

proc newVkQueryPoolCreateInfo*(sType: VkStructureType = VkStructureType.QueryPoolCreateInfo, pNext: pointer = nil, flags: VkQueryPoolCreateFlags = 0.VkQueryPoolCreateFlags, queryType: VkQueryType, queryCount: uint32, pipelineStatistics: VkQueryPipelineStatisticFlags): VkQueryPoolCreateInfo =
  result = VkQueryPoolCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    queryType: queryType,
    queryCount: queryCount,
    pipelineStatistics: pipelineStatistics,
  )

proc newVkFramebufferCreateInfo*(sType: VkStructureType = VkStructureType.FramebufferCreateInfo, pNext: pointer = nil, flags: VkFramebufferCreateFlags = 0.VkFramebufferCreateFlags, renderPass: VkRenderPass, attachmentCount: uint32, pAttachments: ptr VkImageView, width: uint32, height: uint32, layers: uint32): VkFramebufferCreateInfo =
  result = VkFramebufferCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    renderPass: renderPass,
    attachmentCount: attachmentCount,
    pAttachments: pAttachments,
    width: width,
    height: height,
    layers: layers,
  )

proc newVkDrawIndirectCommand*(vertexCount: uint32, instanceCount: uint32, firstVertex: uint32, firstInstance: uint32): VkDrawIndirectCommand =
  result = VkDrawIndirectCommand(
    vertexCount: vertexCount,
    instanceCount: instanceCount,
    firstVertex: firstVertex,
    firstInstance: firstInstance,
  )

proc newVkDrawIndexedIndirectCommand*(indexCount: uint32, instanceCount: uint32, firstIndex: uint32, vertexOffset: int32, firstInstance: uint32): VkDrawIndexedIndirectCommand =
  result = VkDrawIndexedIndirectCommand(
    indexCount: indexCount,
    instanceCount: instanceCount,
    firstIndex: firstIndex,
    vertexOffset: vertexOffset,
    firstInstance: firstInstance,
  )

proc newVkDispatchIndirectCommand*(x: uint32, y: uint32, z: uint32): VkDispatchIndirectCommand =
  result = VkDispatchIndirectCommand(
    x: x,
    y: y,
    z: z,
  )

proc newVkMultiDrawInfoEXT*(firstVertex: uint32, vertexCount: uint32): VkMultiDrawInfoEXT =
  result = VkMultiDrawInfoEXT(
    firstVertex: firstVertex,
    vertexCount: vertexCount,
  )

proc newVkMultiDrawIndexedInfoEXT*(firstIndex: uint32, indexCount: uint32, vertexOffset: int32): VkMultiDrawIndexedInfoEXT =
  result = VkMultiDrawIndexedInfoEXT(
    firstIndex: firstIndex,
    indexCount: indexCount,
    vertexOffset: vertexOffset,
  )

proc newVkSubmitInfo*(sType: VkStructureType = VkStructureType.SubmitInfo, pNext: pointer = nil, waitSemaphoreCount: uint32, pWaitSemaphores: ptr VkSemaphore, pWaitDstStageMask: ptr VkPipelineStageFlags, commandBufferCount: uint32, pCommandBuffers: ptr VkCommandBuffer, signalSemaphoreCount: uint32, pSignalSemaphores: ptr VkSemaphore): VkSubmitInfo =
  result = VkSubmitInfo(
    sType: sType,
    pNext: pNext,
    waitSemaphoreCount: waitSemaphoreCount,
    pWaitSemaphores: pWaitSemaphores,
    pWaitDstStageMask: pWaitDstStageMask,
    commandBufferCount: commandBufferCount,
    pCommandBuffers: pCommandBuffers,
    signalSemaphoreCount: signalSemaphoreCount,
    pSignalSemaphores: pSignalSemaphores,
  )

proc newVkDisplayPropertiesKHR*(display: VkDisplayKHR, displayName: cstring, physicalDimensions: VkExtent2D, physicalResolution: VkExtent2D, supportedTransforms: VkSurfaceTransformFlagsKHR, planeReorderPossible: VkBool32, persistentContent: VkBool32): VkDisplayPropertiesKHR =
  result = VkDisplayPropertiesKHR(
    display: display,
    displayName: displayName,
    physicalDimensions: physicalDimensions,
    physicalResolution: physicalResolution,
    supportedTransforms: supportedTransforms,
    planeReorderPossible: planeReorderPossible,
    persistentContent: persistentContent,
  )

proc newVkDisplayPlanePropertiesKHR*(currentDisplay: VkDisplayKHR, currentStackIndex: uint32): VkDisplayPlanePropertiesKHR =
  result = VkDisplayPlanePropertiesKHR(
    currentDisplay: currentDisplay,
    currentStackIndex: currentStackIndex,
  )

proc newVkDisplayModeParametersKHR*(visibleRegion: VkExtent2D, refreshRate: uint32): VkDisplayModeParametersKHR =
  result = VkDisplayModeParametersKHR(
    visibleRegion: visibleRegion,
    refreshRate: refreshRate,
  )

proc newVkDisplayModePropertiesKHR*(displayMode: VkDisplayModeKHR, parameters: VkDisplayModeParametersKHR): VkDisplayModePropertiesKHR =
  result = VkDisplayModePropertiesKHR(
    displayMode: displayMode,
    parameters: parameters,
  )

proc newVkDisplayModeCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkDisplayModeCreateFlagsKHR = 0.VkDisplayModeCreateFlagsKHR, parameters: VkDisplayModeParametersKHR): VkDisplayModeCreateInfoKHR =
  result = VkDisplayModeCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    parameters: parameters,
  )

proc newVkDisplayPlaneCapabilitiesKHR*(supportedAlpha: VkDisplayPlaneAlphaFlagsKHR, minSrcPosition: VkOffset2D, maxSrcPosition: VkOffset2D, minSrcExtent: VkExtent2D, maxSrcExtent: VkExtent2D, minDstPosition: VkOffset2D, maxDstPosition: VkOffset2D, minDstExtent: VkExtent2D, maxDstExtent: VkExtent2D): VkDisplayPlaneCapabilitiesKHR =
  result = VkDisplayPlaneCapabilitiesKHR(
    supportedAlpha: supportedAlpha,
    minSrcPosition: minSrcPosition,
    maxSrcPosition: maxSrcPosition,
    minSrcExtent: minSrcExtent,
    maxSrcExtent: maxSrcExtent,
    minDstPosition: minDstPosition,
    maxDstPosition: maxDstPosition,
    minDstExtent: minDstExtent,
    maxDstExtent: maxDstExtent,
  )

proc newVkDisplaySurfaceCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkDisplaySurfaceCreateFlagsKHR = 0.VkDisplaySurfaceCreateFlagsKHR, displayMode: VkDisplayModeKHR, planeIndex: uint32, planeStackIndex: uint32, transform: VkSurfaceTransformFlagBitsKHR, globalAlpha: float32, alphaMode: VkDisplayPlaneAlphaFlagBitsKHR, imageExtent: VkExtent2D): VkDisplaySurfaceCreateInfoKHR =
  result = VkDisplaySurfaceCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    displayMode: displayMode,
    planeIndex: planeIndex,
    planeStackIndex: planeStackIndex,
    transform: transform,
    globalAlpha: globalAlpha,
    alphaMode: alphaMode,
    imageExtent: imageExtent,
  )

proc newVkDisplayPresentInfoKHR*(sType: VkStructureType, pNext: pointer = nil, srcRect: VkRect2D, dstRect: VkRect2D, persistent: VkBool32): VkDisplayPresentInfoKHR =
  result = VkDisplayPresentInfoKHR(
    sType: sType,
    pNext: pNext,
    srcRect: srcRect,
    dstRect: dstRect,
    persistent: persistent,
  )

proc newVkSurfaceCapabilitiesKHR*(minImageCount: uint32, maxImageCount: uint32, currentExtent: VkExtent2D, minImageExtent: VkExtent2D, maxImageExtent: VkExtent2D, maxImageArrayLayers: uint32, supportedTransforms: VkSurfaceTransformFlagsKHR, currentTransform: VkSurfaceTransformFlagBitsKHR, supportedCompositeAlpha: VkCompositeAlphaFlagsKHR, supportedUsageFlags: VkImageUsageFlags): VkSurfaceCapabilitiesKHR =
  result = VkSurfaceCapabilitiesKHR(
    minImageCount: minImageCount,
    maxImageCount: maxImageCount,
    currentExtent: currentExtent,
    minImageExtent: minImageExtent,
    maxImageExtent: maxImageExtent,
    maxImageArrayLayers: maxImageArrayLayers,
    supportedTransforms: supportedTransforms,
    currentTransform: currentTransform,
    supportedCompositeAlpha: supportedCompositeAlpha,
    supportedUsageFlags: supportedUsageFlags,
  )

proc newVkAndroidSurfaceCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkAndroidSurfaceCreateFlagsKHR = 0.VkAndroidSurfaceCreateFlagsKHR, window: ptr ANativeWindow): VkAndroidSurfaceCreateInfoKHR =
  result = VkAndroidSurfaceCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    window: window,
  )

proc newVkViSurfaceCreateInfoNN*(sType: VkStructureType, pNext: pointer = nil, flags: VkViSurfaceCreateFlagsNN = 0.VkViSurfaceCreateFlagsNN, window: pointer = nil): VkViSurfaceCreateInfoNN =
  result = VkViSurfaceCreateInfoNN(
    sType: sType,
    pNext: pNext,
    flags: flags,
    window: window,
  )

proc newVkWaylandSurfaceCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkWaylandSurfaceCreateFlagsKHR = 0.VkWaylandSurfaceCreateFlagsKHR, display: ptr wl_display, surface: ptr wl_surface): VkWaylandSurfaceCreateInfoKHR =
  result = VkWaylandSurfaceCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    display: display,
    surface: surface,
  )

proc newVkWin32SurfaceCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkWin32SurfaceCreateFlagsKHR = 0.VkWin32SurfaceCreateFlagsKHR, hinstance: HINSTANCE, hwnd: HWND): VkWin32SurfaceCreateInfoKHR =
  result = VkWin32SurfaceCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    hinstance: hinstance,
    hwnd: hwnd,
  )

proc newVkXlibSurfaceCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkXlibSurfaceCreateFlagsKHR = 0.VkXlibSurfaceCreateFlagsKHR, dpy: ptr Display, window: Window): VkXlibSurfaceCreateInfoKHR =
  result = VkXlibSurfaceCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    dpy: dpy,
    window: window,
  )

proc newVkXcbSurfaceCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkXcbSurfaceCreateFlagsKHR = 0.VkXcbSurfaceCreateFlagsKHR, connection: ptr xcb_connection_t, window: xcb_window_t): VkXcbSurfaceCreateInfoKHR =
  result = VkXcbSurfaceCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    connection: connection,
    window: window,
  )

proc newVkDirectFBSurfaceCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkDirectFBSurfaceCreateFlagsEXT = 0.VkDirectFBSurfaceCreateFlagsEXT, dfb: ptr IDirectFB, surface: ptr IDirectFBSurface): VkDirectFBSurfaceCreateInfoEXT =
  result = VkDirectFBSurfaceCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    dfb: dfb,
    surface: surface,
  )

proc newVkImagePipeSurfaceCreateInfoFUCHSIA*(sType: VkStructureType, pNext: pointer = nil, flags: VkImagePipeSurfaceCreateFlagsFUCHSIA = 0.VkImagePipeSurfaceCreateFlagsFUCHSIA, imagePipeHandle: zx_handle_t): VkImagePipeSurfaceCreateInfoFUCHSIA =
  result = VkImagePipeSurfaceCreateInfoFUCHSIA(
    sType: sType,
    pNext: pNext,
    flags: flags,
    imagePipeHandle: imagePipeHandle,
  )

proc newVkStreamDescriptorSurfaceCreateInfoGGP*(sType: VkStructureType, pNext: pointer = nil, flags: VkStreamDescriptorSurfaceCreateFlagsGGP = 0.VkStreamDescriptorSurfaceCreateFlagsGGP, streamDescriptor: GgpStreamDescriptor): VkStreamDescriptorSurfaceCreateInfoGGP =
  result = VkStreamDescriptorSurfaceCreateInfoGGP(
    sType: sType,
    pNext: pNext,
    flags: flags,
    streamDescriptor: streamDescriptor,
  )

proc newVkScreenSurfaceCreateInfoQNX*(sType: VkStructureType, pNext: pointer = nil, flags: VkScreenSurfaceCreateFlagsQNX = 0.VkScreenSurfaceCreateFlagsQNX, context: ptr screen_context, window: ptr screen_window): VkScreenSurfaceCreateInfoQNX =
  result = VkScreenSurfaceCreateInfoQNX(
    sType: sType,
    pNext: pNext,
    flags: flags,
    context: context,
    window: window,
  )

proc newVkSurfaceFormatKHR*(format: VkFormat, colorSpace: VkColorSpaceKHR): VkSurfaceFormatKHR =
  result = VkSurfaceFormatKHR(
    format: format,
    colorSpace: colorSpace,
  )

proc newVkSwapchainCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkSwapchainCreateFlagsKHR = 0.VkSwapchainCreateFlagsKHR, surface: VkSurfaceKHR, minImageCount: uint32, imageFormat: VkFormat, imageColorSpace: VkColorSpaceKHR, imageExtent: VkExtent2D, imageArrayLayers: uint32, imageUsage: VkImageUsageFlags, imageSharingMode: VkSharingMode, queueFamilyIndexCount: uint32, pQueueFamilyIndices: ptr uint32, preTransform: VkSurfaceTransformFlagBitsKHR, compositeAlpha: VkCompositeAlphaFlagBitsKHR, presentMode: VkPresentModeKHR, clipped: VkBool32, oldSwapchain: VkSwapchainKHR): VkSwapchainCreateInfoKHR =
  result = VkSwapchainCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    surface: surface,
    minImageCount: minImageCount,
    imageFormat: imageFormat,
    imageColorSpace: imageColorSpace,
    imageExtent: imageExtent,
    imageArrayLayers: imageArrayLayers,
    imageUsage: imageUsage,
    imageSharingMode: imageSharingMode,
    queueFamilyIndexCount: queueFamilyIndexCount,
    pQueueFamilyIndices: pQueueFamilyIndices,
    preTransform: preTransform,
    compositeAlpha: compositeAlpha,
    presentMode: presentMode,
    clipped: clipped,
    oldSwapchain: oldSwapchain,
  )

proc newVkPresentInfoKHR*(sType: VkStructureType, pNext: pointer = nil, waitSemaphoreCount: uint32, pWaitSemaphores: ptr VkSemaphore, swapchainCount: uint32, pSwapchains: ptr VkSwapchainKHR, pImageIndices: ptr uint32, pResults: ptr VkResult): VkPresentInfoKHR =
  result = VkPresentInfoKHR(
    sType: sType,
    pNext: pNext,
    waitSemaphoreCount: waitSemaphoreCount,
    pWaitSemaphores: pWaitSemaphores,
    swapchainCount: swapchainCount,
    pSwapchains: pSwapchains,
    pImageIndices: pImageIndices,
    pResults: pResults,
  )

proc newVkDebugReportCallbackCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkDebugReportFlagsEXT = 0.VkDebugReportFlagsEXT, pfnCallback: PFN_vkDebugReportCallbackEXT, pUserData: pointer = nil): VkDebugReportCallbackCreateInfoEXT =
  result = VkDebugReportCallbackCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    pfnCallback: pfnCallback,
    pUserData: pUserData,
  )

proc newVkValidationFlagsEXT*(sType: VkStructureType, pNext: pointer = nil, disabledValidationCheckCount: uint32, pDisabledValidationChecks: ptr VkValidationCheckEXT): VkValidationFlagsEXT =
  result = VkValidationFlagsEXT(
    sType: sType,
    pNext: pNext,
    disabledValidationCheckCount: disabledValidationCheckCount,
    pDisabledValidationChecks: pDisabledValidationChecks,
  )

proc newVkValidationFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, enabledValidationFeatureCount: uint32, pEnabledValidationFeatures: ptr VkValidationFeatureEnableEXT, disabledValidationFeatureCount: uint32, pDisabledValidationFeatures: ptr VkValidationFeatureDisableEXT): VkValidationFeaturesEXT =
  result = VkValidationFeaturesEXT(
    sType: sType,
    pNext: pNext,
    enabledValidationFeatureCount: enabledValidationFeatureCount,
    pEnabledValidationFeatures: pEnabledValidationFeatures,
    disabledValidationFeatureCount: disabledValidationFeatureCount,
    pDisabledValidationFeatures: pDisabledValidationFeatures,
  )

proc newVkLayerSettingsCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, settingCount: uint32, pSettings: ptr VkLayerSettingEXT): VkLayerSettingsCreateInfoEXT =
  result = VkLayerSettingsCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    settingCount: settingCount,
    pSettings: pSettings,
  )

proc newVkLayerSettingEXT*(pLayerName: cstring, pSettingName: cstring, `type`: VkLayerSettingTypeEXT, valueCount: uint32, pValues: pointer = nil): VkLayerSettingEXT =
  result = VkLayerSettingEXT(
    pLayerName: pLayerName,
    pSettingName: pSettingName,
    `type`: `type`,
    valueCount: valueCount,
    pValues: pValues,
  )

proc newVkApplicationParametersEXT*(sType: VkStructureType, pNext: pointer = nil, vendorID: uint32, deviceID: uint32, key: uint32, value: uint64): VkApplicationParametersEXT =
  result = VkApplicationParametersEXT(
    sType: sType,
    pNext: pNext,
    vendorID: vendorID,
    deviceID: deviceID,
    key: key,
    value: value,
  )

proc newVkPipelineRasterizationStateRasterizationOrderAMD*(sType: VkStructureType, pNext: pointer = nil, rasterizationOrder: VkRasterizationOrderAMD): VkPipelineRasterizationStateRasterizationOrderAMD =
  result = VkPipelineRasterizationStateRasterizationOrderAMD(
    sType: sType,
    pNext: pNext,
    rasterizationOrder: rasterizationOrder,
  )

proc newVkDebugMarkerObjectNameInfoEXT*(sType: VkStructureType, pNext: pointer = nil, objectType: VkDebugReportObjectTypeEXT, `object`: uint64, pObjectName: cstring): VkDebugMarkerObjectNameInfoEXT =
  result = VkDebugMarkerObjectNameInfoEXT(
    sType: sType,
    pNext: pNext,
    objectType: objectType,
    `object`: `object`,
    pObjectName: pObjectName,
  )

proc newVkDebugMarkerObjectTagInfoEXT*(sType: VkStructureType, pNext: pointer = nil, objectType: VkDebugReportObjectTypeEXT, `object`: uint64, tagName: uint64, tagSize: uint, pTag: pointer = nil): VkDebugMarkerObjectTagInfoEXT =
  result = VkDebugMarkerObjectTagInfoEXT(
    sType: sType,
    pNext: pNext,
    objectType: objectType,
    `object`: `object`,
    tagName: tagName,
    tagSize: tagSize,
    pTag: pTag,
  )

proc newVkDebugMarkerMarkerInfoEXT*(sType: VkStructureType, pNext: pointer = nil, pMarkerName: cstring, color: array[4, float32]): VkDebugMarkerMarkerInfoEXT =
  result = VkDebugMarkerMarkerInfoEXT(
    sType: sType,
    pNext: pNext,
    pMarkerName: pMarkerName,
    color: color,
  )

proc newVkDedicatedAllocationImageCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, dedicatedAllocation: VkBool32): VkDedicatedAllocationImageCreateInfoNV =
  result = VkDedicatedAllocationImageCreateInfoNV(
    sType: sType,
    pNext: pNext,
    dedicatedAllocation: dedicatedAllocation,
  )

proc newVkDedicatedAllocationBufferCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, dedicatedAllocation: VkBool32): VkDedicatedAllocationBufferCreateInfoNV =
  result = VkDedicatedAllocationBufferCreateInfoNV(
    sType: sType,
    pNext: pNext,
    dedicatedAllocation: dedicatedAllocation,
  )

proc newVkDedicatedAllocationMemoryAllocateInfoNV*(sType: VkStructureType, pNext: pointer = nil, image: VkImage, buffer: VkBuffer): VkDedicatedAllocationMemoryAllocateInfoNV =
  result = VkDedicatedAllocationMemoryAllocateInfoNV(
    sType: sType,
    pNext: pNext,
    image: image,
    buffer: buffer,
  )

proc newVkExternalImageFormatPropertiesNV*(imageFormatProperties: VkImageFormatProperties, externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV, exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV, compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV): VkExternalImageFormatPropertiesNV =
  result = VkExternalImageFormatPropertiesNV(
    imageFormatProperties: imageFormatProperties,
    externalMemoryFeatures: externalMemoryFeatures,
    exportFromImportedHandleTypes: exportFromImportedHandleTypes,
    compatibleHandleTypes: compatibleHandleTypes,
  )

proc newVkExternalMemoryImageCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, handleTypes: VkExternalMemoryHandleTypeFlagsNV): VkExternalMemoryImageCreateInfoNV =
  result = VkExternalMemoryImageCreateInfoNV(
    sType: sType,
    pNext: pNext,
    handleTypes: handleTypes,
  )

proc newVkExportMemoryAllocateInfoNV*(sType: VkStructureType, pNext: pointer = nil, handleTypes: VkExternalMemoryHandleTypeFlagsNV): VkExportMemoryAllocateInfoNV =
  result = VkExportMemoryAllocateInfoNV(
    sType: sType,
    pNext: pNext,
    handleTypes: handleTypes,
  )

proc newVkImportMemoryWin32HandleInfoNV*(sType: VkStructureType, pNext: pointer = nil, handleType: VkExternalMemoryHandleTypeFlagsNV, handle: HANDLE): VkImportMemoryWin32HandleInfoNV =
  result = VkImportMemoryWin32HandleInfoNV(
    sType: sType,
    pNext: pNext,
    handleType: handleType,
    handle: handle,
  )

proc newVkExportMemoryWin32HandleInfoNV*(sType: VkStructureType, pNext: pointer = nil, pAttributes: ptr SECURITY_ATTRIBUTES, dwAccess: DWORD): VkExportMemoryWin32HandleInfoNV =
  result = VkExportMemoryWin32HandleInfoNV(
    sType: sType,
    pNext: pNext,
    pAttributes: pAttributes,
    dwAccess: dwAccess,
  )

proc newVkExportMemorySciBufInfoNV*(sType: VkStructureType, pNext: pointer = nil, pAttributes: NvSciBufAttrList): VkExportMemorySciBufInfoNV =
  result = VkExportMemorySciBufInfoNV(
    sType: sType,
    pNext: pNext,
    pAttributes: pAttributes,
  )

proc newVkImportMemorySciBufInfoNV*(sType: VkStructureType, pNext: pointer = nil, handleType: VkExternalMemoryHandleTypeFlagBits, handle: NvSciBufObj): VkImportMemorySciBufInfoNV =
  result = VkImportMemorySciBufInfoNV(
    sType: sType,
    pNext: pNext,
    handleType: handleType,
    handle: handle,
  )

proc newVkMemoryGetSciBufInfoNV*(sType: VkStructureType, pNext: pointer = nil, memory: VkDeviceMemory, handleType: VkExternalMemoryHandleTypeFlagBits): VkMemoryGetSciBufInfoNV =
  result = VkMemoryGetSciBufInfoNV(
    sType: sType,
    pNext: pNext,
    memory: memory,
    handleType: handleType,
  )

proc newVkMemorySciBufPropertiesNV*(sType: VkStructureType, pNext: pointer = nil, memoryTypeBits: uint32): VkMemorySciBufPropertiesNV =
  result = VkMemorySciBufPropertiesNV(
    sType: sType,
    pNext: pNext,
    memoryTypeBits: memoryTypeBits,
  )

proc newVkPhysicalDeviceExternalMemorySciBufFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, sciBufImport: VkBool32, sciBufExport: VkBool32): VkPhysicalDeviceExternalMemorySciBufFeaturesNV =
  result = VkPhysicalDeviceExternalMemorySciBufFeaturesNV(
    sType: sType,
    pNext: pNext,
    sciBufImport: sciBufImport,
    sciBufExport: sciBufExport,
  )

proc newVkWin32KeyedMutexAcquireReleaseInfoNV*(sType: VkStructureType, pNext: pointer = nil, acquireCount: uint32, pAcquireSyncs: ptr VkDeviceMemory, pAcquireKeys: ptr uint64, pAcquireTimeoutMilliseconds: ptr uint32, releaseCount: uint32, pReleaseSyncs: ptr VkDeviceMemory, pReleaseKeys: ptr uint64): VkWin32KeyedMutexAcquireReleaseInfoNV =
  result = VkWin32KeyedMutexAcquireReleaseInfoNV(
    sType: sType,
    pNext: pNext,
    acquireCount: acquireCount,
    pAcquireSyncs: pAcquireSyncs,
    pAcquireKeys: pAcquireKeys,
    pAcquireTimeoutMilliseconds: pAcquireTimeoutMilliseconds,
    releaseCount: releaseCount,
    pReleaseSyncs: pReleaseSyncs,
    pReleaseKeys: pReleaseKeys,
  )

proc newVkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, deviceGeneratedCommands: VkBool32): VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV =
  result = VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV(
    sType: sType,
    pNext: pNext,
    deviceGeneratedCommands: deviceGeneratedCommands,
  )

proc newVkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, deviceGeneratedCompute: VkBool32, deviceGeneratedComputePipelines: VkBool32, deviceGeneratedComputeCaptureReplay: VkBool32): VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV =
  result = VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV(
    sType: sType,
    pNext: pNext,
    deviceGeneratedCompute: deviceGeneratedCompute,
    deviceGeneratedComputePipelines: deviceGeneratedComputePipelines,
    deviceGeneratedComputeCaptureReplay: deviceGeneratedComputeCaptureReplay,
  )

proc newVkDevicePrivateDataCreateInfo*(sType: VkStructureType, pNext: pointer = nil, privateDataSlotRequestCount: uint32): VkDevicePrivateDataCreateInfo =
  result = VkDevicePrivateDataCreateInfo(
    sType: sType,
    pNext: pNext,
    privateDataSlotRequestCount: privateDataSlotRequestCount,
  )

proc newVkPrivateDataSlotCreateInfo*(sType: VkStructureType, pNext: pointer = nil, flags: VkPrivateDataSlotCreateFlags = 0.VkPrivateDataSlotCreateFlags): VkPrivateDataSlotCreateInfo =
  result = VkPrivateDataSlotCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
  )

proc newVkPhysicalDevicePrivateDataFeatures*(sType: VkStructureType, pNext: pointer = nil, privateData: VkBool32): VkPhysicalDevicePrivateDataFeatures =
  result = VkPhysicalDevicePrivateDataFeatures(
    sType: sType,
    pNext: pNext,
    privateData: privateData,
  )

proc newVkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV*(sType: VkStructureType, pNext: pointer = nil, maxGraphicsShaderGroupCount: uint32, maxIndirectSequenceCount: uint32, maxIndirectCommandsTokenCount: uint32, maxIndirectCommandsStreamCount: uint32, maxIndirectCommandsTokenOffset: uint32, maxIndirectCommandsStreamStride: uint32, minSequencesCountBufferOffsetAlignment: uint32, minSequencesIndexBufferOffsetAlignment: uint32, minIndirectCommandsBufferOffsetAlignment: uint32): VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV =
  result = VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV(
    sType: sType,
    pNext: pNext,
    maxGraphicsShaderGroupCount: maxGraphicsShaderGroupCount,
    maxIndirectSequenceCount: maxIndirectSequenceCount,
    maxIndirectCommandsTokenCount: maxIndirectCommandsTokenCount,
    maxIndirectCommandsStreamCount: maxIndirectCommandsStreamCount,
    maxIndirectCommandsTokenOffset: maxIndirectCommandsTokenOffset,
    maxIndirectCommandsStreamStride: maxIndirectCommandsStreamStride,
    minSequencesCountBufferOffsetAlignment: minSequencesCountBufferOffsetAlignment,
    minSequencesIndexBufferOffsetAlignment: minSequencesIndexBufferOffsetAlignment,
    minIndirectCommandsBufferOffsetAlignment: minIndirectCommandsBufferOffsetAlignment,
  )

proc newVkPhysicalDeviceMultiDrawPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, maxMultiDrawCount: uint32): VkPhysicalDeviceMultiDrawPropertiesEXT =
  result = VkPhysicalDeviceMultiDrawPropertiesEXT(
    sType: sType,
    pNext: pNext,
    maxMultiDrawCount: maxMultiDrawCount,
  )

proc newVkGraphicsShaderGroupCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, stageCount: uint32, pStages: ptr VkPipelineShaderStageCreateInfo, pVertexInputState: ptr VkPipelineVertexInputStateCreateInfo, pTessellationState: ptr VkPipelineTessellationStateCreateInfo): VkGraphicsShaderGroupCreateInfoNV =
  result = VkGraphicsShaderGroupCreateInfoNV(
    sType: sType,
    pNext: pNext,
    stageCount: stageCount,
    pStages: pStages,
    pVertexInputState: pVertexInputState,
    pTessellationState: pTessellationState,
  )

proc newVkGraphicsPipelineShaderGroupsCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, groupCount: uint32, pGroups: ptr VkGraphicsShaderGroupCreateInfoNV, pipelineCount: uint32, pPipelines: ptr VkPipeline): VkGraphicsPipelineShaderGroupsCreateInfoNV =
  result = VkGraphicsPipelineShaderGroupsCreateInfoNV(
    sType: sType,
    pNext: pNext,
    groupCount: groupCount,
    pGroups: pGroups,
    pipelineCount: pipelineCount,
    pPipelines: pPipelines,
  )

proc newVkBindShaderGroupIndirectCommandNV*(groupIndex: uint32): VkBindShaderGroupIndirectCommandNV =
  result = VkBindShaderGroupIndirectCommandNV(
    groupIndex: groupIndex,
  )

proc newVkBindIndexBufferIndirectCommandNV*(bufferAddress: VkDeviceAddress, size: uint32, indexType: VkIndexType): VkBindIndexBufferIndirectCommandNV =
  result = VkBindIndexBufferIndirectCommandNV(
    bufferAddress: bufferAddress,
    size: size,
    indexType: indexType,
  )

proc newVkBindVertexBufferIndirectCommandNV*(bufferAddress: VkDeviceAddress, size: uint32, stride: uint32): VkBindVertexBufferIndirectCommandNV =
  result = VkBindVertexBufferIndirectCommandNV(
    bufferAddress: bufferAddress,
    size: size,
    stride: stride,
  )

proc newVkSetStateFlagsIndirectCommandNV*(data: uint32): VkSetStateFlagsIndirectCommandNV =
  result = VkSetStateFlagsIndirectCommandNV(
    data: data,
  )

proc newVkIndirectCommandsStreamNV*(buffer: VkBuffer, offset: VkDeviceSize): VkIndirectCommandsStreamNV =
  result = VkIndirectCommandsStreamNV(
    buffer: buffer,
    offset: offset,
  )

proc newVkIndirectCommandsLayoutTokenNV*(sType: VkStructureType, pNext: pointer = nil, tokenType: VkIndirectCommandsTokenTypeNV, stream: uint32, offset: uint32, vertexBindingUnit: uint32, vertexDynamicStride: VkBool32, pushconstantPipelineLayout: VkPipelineLayout, pushconstantShaderStageFlags: VkShaderStageFlags, pushconstantOffset: uint32, pushconstantSize: uint32, indirectStateFlags: VkIndirectStateFlagsNV, indexTypeCount: uint32, pIndexTypes: ptr VkIndexType, pIndexTypeValues: ptr uint32): VkIndirectCommandsLayoutTokenNV =
  result = VkIndirectCommandsLayoutTokenNV(
    sType: sType,
    pNext: pNext,
    tokenType: tokenType,
    stream: stream,
    offset: offset,
    vertexBindingUnit: vertexBindingUnit,
    vertexDynamicStride: vertexDynamicStride,
    pushconstantPipelineLayout: pushconstantPipelineLayout,
    pushconstantShaderStageFlags: pushconstantShaderStageFlags,
    pushconstantOffset: pushconstantOffset,
    pushconstantSize: pushconstantSize,
    indirectStateFlags: indirectStateFlags,
    indexTypeCount: indexTypeCount,
    pIndexTypes: pIndexTypes,
    pIndexTypeValues: pIndexTypeValues,
  )

proc newVkIndirectCommandsLayoutCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, flags: VkIndirectCommandsLayoutUsageFlagsNV = 0.VkIndirectCommandsLayoutUsageFlagsNV, pipelineBindPoint: VkPipelineBindPoint, tokenCount: uint32, pTokens: ptr VkIndirectCommandsLayoutTokenNV, streamCount: uint32, pStreamStrides: ptr uint32): VkIndirectCommandsLayoutCreateInfoNV =
  result = VkIndirectCommandsLayoutCreateInfoNV(
    sType: sType,
    pNext: pNext,
    flags: flags,
    pipelineBindPoint: pipelineBindPoint,
    tokenCount: tokenCount,
    pTokens: pTokens,
    streamCount: streamCount,
    pStreamStrides: pStreamStrides,
  )

proc newVkGeneratedCommandsInfoNV*(sType: VkStructureType, pNext: pointer = nil, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline, indirectCommandsLayout: VkIndirectCommandsLayoutNV, streamCount: uint32, pStreams: ptr VkIndirectCommandsStreamNV, sequencesCount: uint32, preprocessBuffer: VkBuffer, preprocessOffset: VkDeviceSize, preprocessSize: VkDeviceSize, sequencesCountBuffer: VkBuffer, sequencesCountOffset: VkDeviceSize, sequencesIndexBuffer: VkBuffer, sequencesIndexOffset: VkDeviceSize): VkGeneratedCommandsInfoNV =
  result = VkGeneratedCommandsInfoNV(
    sType: sType,
    pNext: pNext,
    pipelineBindPoint: pipelineBindPoint,
    pipeline: pipeline,
    indirectCommandsLayout: indirectCommandsLayout,
    streamCount: streamCount,
    pStreams: pStreams,
    sequencesCount: sequencesCount,
    preprocessBuffer: preprocessBuffer,
    preprocessOffset: preprocessOffset,
    preprocessSize: preprocessSize,
    sequencesCountBuffer: sequencesCountBuffer,
    sequencesCountOffset: sequencesCountOffset,
    sequencesIndexBuffer: sequencesIndexBuffer,
    sequencesIndexOffset: sequencesIndexOffset,
  )

proc newVkGeneratedCommandsMemoryRequirementsInfoNV*(sType: VkStructureType, pNext: pointer = nil, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline, indirectCommandsLayout: VkIndirectCommandsLayoutNV, maxSequencesCount: uint32): VkGeneratedCommandsMemoryRequirementsInfoNV =
  result = VkGeneratedCommandsMemoryRequirementsInfoNV(
    sType: sType,
    pNext: pNext,
    pipelineBindPoint: pipelineBindPoint,
    pipeline: pipeline,
    indirectCommandsLayout: indirectCommandsLayout,
    maxSequencesCount: maxSequencesCount,
  )

proc newVkPipelineIndirectDeviceAddressInfoNV*(sType: VkStructureType, pNext: pointer = nil, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline): VkPipelineIndirectDeviceAddressInfoNV =
  result = VkPipelineIndirectDeviceAddressInfoNV(
    sType: sType,
    pNext: pNext,
    pipelineBindPoint: pipelineBindPoint,
    pipeline: pipeline,
  )

proc newVkBindPipelineIndirectCommandNV*(pipelineAddress: VkDeviceAddress): VkBindPipelineIndirectCommandNV =
  result = VkBindPipelineIndirectCommandNV(
    pipelineAddress: pipelineAddress,
  )

proc newVkPhysicalDeviceFeatures2*(sType: VkStructureType, pNext: pointer = nil, features: VkPhysicalDeviceFeatures): VkPhysicalDeviceFeatures2 =
  result = VkPhysicalDeviceFeatures2(
    sType: sType,
    pNext: pNext,
    features: features,
  )

proc newVkPhysicalDeviceProperties2*(sType: VkStructureType, pNext: pointer = nil, properties: VkPhysicalDeviceProperties): VkPhysicalDeviceProperties2 =
  result = VkPhysicalDeviceProperties2(
    sType: sType,
    pNext: pNext,
    properties: properties,
  )

proc newVkFormatProperties2*(sType: VkStructureType, pNext: pointer = nil, formatProperties: VkFormatProperties): VkFormatProperties2 =
  result = VkFormatProperties2(
    sType: sType,
    pNext: pNext,
    formatProperties: formatProperties,
  )

proc newVkImageFormatProperties2*(sType: VkStructureType, pNext: pointer = nil, imageFormatProperties: VkImageFormatProperties): VkImageFormatProperties2 =
  result = VkImageFormatProperties2(
    sType: sType,
    pNext: pNext,
    imageFormatProperties: imageFormatProperties,
  )

proc newVkPhysicalDeviceImageFormatInfo2*(sType: VkStructureType, pNext: pointer = nil, format: VkFormat, `type`: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags = 0.VkImageCreateFlags): VkPhysicalDeviceImageFormatInfo2 =
  result = VkPhysicalDeviceImageFormatInfo2(
    sType: sType,
    pNext: pNext,
    format: format,
    `type`: `type`,
    tiling: tiling,
    usage: usage,
    flags: flags,
  )

proc newVkQueueFamilyProperties2*(sType: VkStructureType, pNext: pointer = nil, queueFamilyProperties: VkQueueFamilyProperties): VkQueueFamilyProperties2 =
  result = VkQueueFamilyProperties2(
    sType: sType,
    pNext: pNext,
    queueFamilyProperties: queueFamilyProperties,
  )

proc newVkPhysicalDeviceMemoryProperties2*(sType: VkStructureType, pNext: pointer = nil, memoryProperties: VkPhysicalDeviceMemoryProperties): VkPhysicalDeviceMemoryProperties2 =
  result = VkPhysicalDeviceMemoryProperties2(
    sType: sType,
    pNext: pNext,
    memoryProperties: memoryProperties,
  )

proc newVkSparseImageFormatProperties2*(sType: VkStructureType, pNext: pointer = nil, properties: VkSparseImageFormatProperties): VkSparseImageFormatProperties2 =
  result = VkSparseImageFormatProperties2(
    sType: sType,
    pNext: pNext,
    properties: properties,
  )

proc newVkPhysicalDeviceSparseImageFormatInfo2*(sType: VkStructureType, pNext: pointer = nil, format: VkFormat, `type`: VkImageType, samples: VkSampleCountFlagBits, usage: VkImageUsageFlags, tiling: VkImageTiling): VkPhysicalDeviceSparseImageFormatInfo2 =
  result = VkPhysicalDeviceSparseImageFormatInfo2(
    sType: sType,
    pNext: pNext,
    format: format,
    `type`: `type`,
    samples: samples,
    usage: usage,
    tiling: tiling,
  )

proc newVkPhysicalDevicePushDescriptorPropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, maxPushDescriptors: uint32): VkPhysicalDevicePushDescriptorPropertiesKHR =
  result = VkPhysicalDevicePushDescriptorPropertiesKHR(
    sType: sType,
    pNext: pNext,
    maxPushDescriptors: maxPushDescriptors,
  )

proc newVkConformanceVersion*(major: uint8, minor: uint8, subminor: uint8, patch: uint8): VkConformanceVersion =
  result = VkConformanceVersion(
    major: major,
    minor: minor,
    subminor: subminor,
    patch: patch,
  )

proc newVkPhysicalDeviceDriverProperties*(sType: VkStructureType, pNext: pointer = nil, driverID: VkDriverId, driverName: array[VK_MAX_DRIVER_NAME_SIZE, char], driverInfo: array[VK_MAX_DRIVER_INFO_SIZE, char], conformanceVersion: VkConformanceVersion): VkPhysicalDeviceDriverProperties =
  result = VkPhysicalDeviceDriverProperties(
    sType: sType,
    pNext: pNext,
    driverID: driverID,
    driverName: driverName,
    driverInfo: driverInfo,
    conformanceVersion: conformanceVersion,
  )

proc newVkPresentRegionsKHR*(sType: VkStructureType, pNext: pointer = nil, swapchainCount: uint32, pRegions: ptr VkPresentRegionKHR): VkPresentRegionsKHR =
  result = VkPresentRegionsKHR(
    sType: sType,
    pNext: pNext,
    swapchainCount: swapchainCount,
    pRegions: pRegions,
  )

proc newVkPresentRegionKHR*(rectangleCount: uint32, pRectangles: ptr VkRectLayerKHR): VkPresentRegionKHR =
  result = VkPresentRegionKHR(
    rectangleCount: rectangleCount,
    pRectangles: pRectangles,
  )

proc newVkRectLayerKHR*(offset: VkOffset2D, extent: VkExtent2D, layer: uint32): VkRectLayerKHR =
  result = VkRectLayerKHR(
    offset: offset,
    extent: extent,
    layer: layer,
  )

proc newVkPhysicalDeviceVariablePointersFeatures*(sType: VkStructureType, pNext: pointer = nil, variablePointersStorageBuffer: VkBool32, variablePointers: VkBool32): VkPhysicalDeviceVariablePointersFeatures =
  result = VkPhysicalDeviceVariablePointersFeatures(
    sType: sType,
    pNext: pNext,
    variablePointersStorageBuffer: variablePointersStorageBuffer,
    variablePointers: variablePointers,
  )

proc newVkExternalMemoryProperties*(externalMemoryFeatures: VkExternalMemoryFeatureFlags, exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags, compatibleHandleTypes: VkExternalMemoryHandleTypeFlags): VkExternalMemoryProperties =
  result = VkExternalMemoryProperties(
    externalMemoryFeatures: externalMemoryFeatures,
    exportFromImportedHandleTypes: exportFromImportedHandleTypes,
    compatibleHandleTypes: compatibleHandleTypes,
  )

proc newVkPhysicalDeviceExternalImageFormatInfo*(sType: VkStructureType, pNext: pointer = nil, handleType: VkExternalMemoryHandleTypeFlagBits): VkPhysicalDeviceExternalImageFormatInfo =
  result = VkPhysicalDeviceExternalImageFormatInfo(
    sType: sType,
    pNext: pNext,
    handleType: handleType,
  )

proc newVkExternalImageFormatProperties*(sType: VkStructureType, pNext: pointer = nil, externalMemoryProperties: VkExternalMemoryProperties): VkExternalImageFormatProperties =
  result = VkExternalImageFormatProperties(
    sType: sType,
    pNext: pNext,
    externalMemoryProperties: externalMemoryProperties,
  )

proc newVkPhysicalDeviceExternalBufferInfo*(sType: VkStructureType, pNext: pointer = nil, flags: VkBufferCreateFlags = 0.VkBufferCreateFlags, usage: VkBufferUsageFlags, handleType: VkExternalMemoryHandleTypeFlagBits): VkPhysicalDeviceExternalBufferInfo =
  result = VkPhysicalDeviceExternalBufferInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    usage: usage,
    handleType: handleType,
  )

proc newVkExternalBufferProperties*(sType: VkStructureType, pNext: pointer = nil, externalMemoryProperties: VkExternalMemoryProperties): VkExternalBufferProperties =
  result = VkExternalBufferProperties(
    sType: sType,
    pNext: pNext,
    externalMemoryProperties: externalMemoryProperties,
  )

proc newVkPhysicalDeviceIDProperties*(sType: VkStructureType, pNext: pointer = nil, deviceUUID: array[VK_UUID_SIZE, uint8], driverUUID: array[VK_UUID_SIZE, uint8], deviceLUID: array[VK_LUID_SIZE, uint8], deviceNodeMask: uint32, deviceLUIDValid: VkBool32): VkPhysicalDeviceIDProperties =
  result = VkPhysicalDeviceIDProperties(
    sType: sType,
    pNext: pNext,
    deviceUUID: deviceUUID,
    driverUUID: driverUUID,
    deviceLUID: deviceLUID,
    deviceNodeMask: deviceNodeMask,
    deviceLUIDValid: deviceLUIDValid,
  )

proc newVkExternalMemoryImageCreateInfo*(sType: VkStructureType, pNext: pointer = nil, handleTypes: VkExternalMemoryHandleTypeFlags): VkExternalMemoryImageCreateInfo =
  result = VkExternalMemoryImageCreateInfo(
    sType: sType,
    pNext: pNext,
    handleTypes: handleTypes,
  )

proc newVkExternalMemoryBufferCreateInfo*(sType: VkStructureType, pNext: pointer = nil, handleTypes: VkExternalMemoryHandleTypeFlags): VkExternalMemoryBufferCreateInfo =
  result = VkExternalMemoryBufferCreateInfo(
    sType: sType,
    pNext: pNext,
    handleTypes: handleTypes,
  )

proc newVkExportMemoryAllocateInfo*(sType: VkStructureType, pNext: pointer = nil, handleTypes: VkExternalMemoryHandleTypeFlags): VkExportMemoryAllocateInfo =
  result = VkExportMemoryAllocateInfo(
    sType: sType,
    pNext: pNext,
    handleTypes: handleTypes,
  )

proc newVkImportMemoryWin32HandleInfoKHR*(sType: VkStructureType, pNext: pointer = nil, handleType: VkExternalMemoryHandleTypeFlagBits, handle: HANDLE, name: LPCWSTR): VkImportMemoryWin32HandleInfoKHR =
  result = VkImportMemoryWin32HandleInfoKHR(
    sType: sType,
    pNext: pNext,
    handleType: handleType,
    handle: handle,
    name: name,
  )

proc newVkExportMemoryWin32HandleInfoKHR*(sType: VkStructureType, pNext: pointer = nil, pAttributes: ptr SECURITY_ATTRIBUTES, dwAccess: DWORD, name: LPCWSTR): VkExportMemoryWin32HandleInfoKHR =
  result = VkExportMemoryWin32HandleInfoKHR(
    sType: sType,
    pNext: pNext,
    pAttributes: pAttributes,
    dwAccess: dwAccess,
    name: name,
  )

proc newVkImportMemoryZirconHandleInfoFUCHSIA*(sType: VkStructureType, pNext: pointer = nil, handleType: VkExternalMemoryHandleTypeFlagBits, handle: zx_handle_t): VkImportMemoryZirconHandleInfoFUCHSIA =
  result = VkImportMemoryZirconHandleInfoFUCHSIA(
    sType: sType,
    pNext: pNext,
    handleType: handleType,
    handle: handle,
  )

proc newVkMemoryZirconHandlePropertiesFUCHSIA*(sType: VkStructureType, pNext: pointer = nil, memoryTypeBits: uint32): VkMemoryZirconHandlePropertiesFUCHSIA =
  result = VkMemoryZirconHandlePropertiesFUCHSIA(
    sType: sType,
    pNext: pNext,
    memoryTypeBits: memoryTypeBits,
  )

proc newVkMemoryGetZirconHandleInfoFUCHSIA*(sType: VkStructureType, pNext: pointer = nil, memory: VkDeviceMemory, handleType: VkExternalMemoryHandleTypeFlagBits): VkMemoryGetZirconHandleInfoFUCHSIA =
  result = VkMemoryGetZirconHandleInfoFUCHSIA(
    sType: sType,
    pNext: pNext,
    memory: memory,
    handleType: handleType,
  )

proc newVkMemoryWin32HandlePropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, memoryTypeBits: uint32): VkMemoryWin32HandlePropertiesKHR =
  result = VkMemoryWin32HandlePropertiesKHR(
    sType: sType,
    pNext: pNext,
    memoryTypeBits: memoryTypeBits,
  )

proc newVkMemoryGetWin32HandleInfoKHR*(sType: VkStructureType, pNext: pointer = nil, memory: VkDeviceMemory, handleType: VkExternalMemoryHandleTypeFlagBits): VkMemoryGetWin32HandleInfoKHR =
  result = VkMemoryGetWin32HandleInfoKHR(
    sType: sType,
    pNext: pNext,
    memory: memory,
    handleType: handleType,
  )

proc newVkImportMemoryFdInfoKHR*(sType: VkStructureType, pNext: pointer = nil, handleType: VkExternalMemoryHandleTypeFlagBits, fd: int): VkImportMemoryFdInfoKHR =
  result = VkImportMemoryFdInfoKHR(
    sType: sType,
    pNext: pNext,
    handleType: handleType,
    fd: fd,
  )

proc newVkMemoryFdPropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, memoryTypeBits: uint32): VkMemoryFdPropertiesKHR =
  result = VkMemoryFdPropertiesKHR(
    sType: sType,
    pNext: pNext,
    memoryTypeBits: memoryTypeBits,
  )

proc newVkMemoryGetFdInfoKHR*(sType: VkStructureType, pNext: pointer = nil, memory: VkDeviceMemory, handleType: VkExternalMemoryHandleTypeFlagBits): VkMemoryGetFdInfoKHR =
  result = VkMemoryGetFdInfoKHR(
    sType: sType,
    pNext: pNext,
    memory: memory,
    handleType: handleType,
  )

proc newVkWin32KeyedMutexAcquireReleaseInfoKHR*(sType: VkStructureType, pNext: pointer = nil, acquireCount: uint32, pAcquireSyncs: ptr VkDeviceMemory, pAcquireKeys: ptr uint64, pAcquireTimeouts: ptr uint32, releaseCount: uint32, pReleaseSyncs: ptr VkDeviceMemory, pReleaseKeys: ptr uint64): VkWin32KeyedMutexAcquireReleaseInfoKHR =
  result = VkWin32KeyedMutexAcquireReleaseInfoKHR(
    sType: sType,
    pNext: pNext,
    acquireCount: acquireCount,
    pAcquireSyncs: pAcquireSyncs,
    pAcquireKeys: pAcquireKeys,
    pAcquireTimeouts: pAcquireTimeouts,
    releaseCount: releaseCount,
    pReleaseSyncs: pReleaseSyncs,
    pReleaseKeys: pReleaseKeys,
  )

proc newVkPhysicalDeviceExternalSemaphoreInfo*(sType: VkStructureType, pNext: pointer = nil, handleType: VkExternalSemaphoreHandleTypeFlagBits): VkPhysicalDeviceExternalSemaphoreInfo =
  result = VkPhysicalDeviceExternalSemaphoreInfo(
    sType: sType,
    pNext: pNext,
    handleType: handleType,
  )

proc newVkExternalSemaphoreProperties*(sType: VkStructureType, pNext: pointer = nil, exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags, compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags, externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags): VkExternalSemaphoreProperties =
  result = VkExternalSemaphoreProperties(
    sType: sType,
    pNext: pNext,
    exportFromImportedHandleTypes: exportFromImportedHandleTypes,
    compatibleHandleTypes: compatibleHandleTypes,
    externalSemaphoreFeatures: externalSemaphoreFeatures,
  )

proc newVkExportSemaphoreCreateInfo*(sType: VkStructureType, pNext: pointer = nil, handleTypes: VkExternalSemaphoreHandleTypeFlags): VkExportSemaphoreCreateInfo =
  result = VkExportSemaphoreCreateInfo(
    sType: sType,
    pNext: pNext,
    handleTypes: handleTypes,
  )

proc newVkImportSemaphoreWin32HandleInfoKHR*(sType: VkStructureType, pNext: pointer = nil, semaphore: VkSemaphore, flags: VkSemaphoreImportFlags = 0.VkSemaphoreImportFlags, handleType: VkExternalSemaphoreHandleTypeFlagBits, handle: HANDLE, name: LPCWSTR): VkImportSemaphoreWin32HandleInfoKHR =
  result = VkImportSemaphoreWin32HandleInfoKHR(
    sType: sType,
    pNext: pNext,
    semaphore: semaphore,
    flags: flags,
    handleType: handleType,
    handle: handle,
    name: name,
  )

proc newVkExportSemaphoreWin32HandleInfoKHR*(sType: VkStructureType, pNext: pointer = nil, pAttributes: ptr SECURITY_ATTRIBUTES, dwAccess: DWORD, name: LPCWSTR): VkExportSemaphoreWin32HandleInfoKHR =
  result = VkExportSemaphoreWin32HandleInfoKHR(
    sType: sType,
    pNext: pNext,
    pAttributes: pAttributes,
    dwAccess: dwAccess,
    name: name,
  )

proc newVkD3D12FenceSubmitInfoKHR*(sType: VkStructureType, pNext: pointer = nil, waitSemaphoreValuesCount: uint32, pWaitSemaphoreValues: ptr uint64, signalSemaphoreValuesCount: uint32, pSignalSemaphoreValues: ptr uint64): VkD3D12FenceSubmitInfoKHR =
  result = VkD3D12FenceSubmitInfoKHR(
    sType: sType,
    pNext: pNext,
    waitSemaphoreValuesCount: waitSemaphoreValuesCount,
    pWaitSemaphoreValues: pWaitSemaphoreValues,
    signalSemaphoreValuesCount: signalSemaphoreValuesCount,
    pSignalSemaphoreValues: pSignalSemaphoreValues,
  )

proc newVkSemaphoreGetWin32HandleInfoKHR*(sType: VkStructureType, pNext: pointer = nil, semaphore: VkSemaphore, handleType: VkExternalSemaphoreHandleTypeFlagBits): VkSemaphoreGetWin32HandleInfoKHR =
  result = VkSemaphoreGetWin32HandleInfoKHR(
    sType: sType,
    pNext: pNext,
    semaphore: semaphore,
    handleType: handleType,
  )

proc newVkImportSemaphoreFdInfoKHR*(sType: VkStructureType, pNext: pointer = nil, semaphore: VkSemaphore, flags: VkSemaphoreImportFlags = 0.VkSemaphoreImportFlags, handleType: VkExternalSemaphoreHandleTypeFlagBits, fd: int): VkImportSemaphoreFdInfoKHR =
  result = VkImportSemaphoreFdInfoKHR(
    sType: sType,
    pNext: pNext,
    semaphore: semaphore,
    flags: flags,
    handleType: handleType,
    fd: fd,
  )

proc newVkSemaphoreGetFdInfoKHR*(sType: VkStructureType, pNext: pointer = nil, semaphore: VkSemaphore, handleType: VkExternalSemaphoreHandleTypeFlagBits): VkSemaphoreGetFdInfoKHR =
  result = VkSemaphoreGetFdInfoKHR(
    sType: sType,
    pNext: pNext,
    semaphore: semaphore,
    handleType: handleType,
  )

proc newVkImportSemaphoreZirconHandleInfoFUCHSIA*(sType: VkStructureType, pNext: pointer = nil, semaphore: VkSemaphore, flags: VkSemaphoreImportFlags = 0.VkSemaphoreImportFlags, handleType: VkExternalSemaphoreHandleTypeFlagBits, zirconHandle: zx_handle_t): VkImportSemaphoreZirconHandleInfoFUCHSIA =
  result = VkImportSemaphoreZirconHandleInfoFUCHSIA(
    sType: sType,
    pNext: pNext,
    semaphore: semaphore,
    flags: flags,
    handleType: handleType,
    zirconHandle: zirconHandle,
  )

proc newVkSemaphoreGetZirconHandleInfoFUCHSIA*(sType: VkStructureType, pNext: pointer = nil, semaphore: VkSemaphore, handleType: VkExternalSemaphoreHandleTypeFlagBits): VkSemaphoreGetZirconHandleInfoFUCHSIA =
  result = VkSemaphoreGetZirconHandleInfoFUCHSIA(
    sType: sType,
    pNext: pNext,
    semaphore: semaphore,
    handleType: handleType,
  )

proc newVkPhysicalDeviceExternalFenceInfo*(sType: VkStructureType, pNext: pointer = nil, handleType: VkExternalFenceHandleTypeFlagBits): VkPhysicalDeviceExternalFenceInfo =
  result = VkPhysicalDeviceExternalFenceInfo(
    sType: sType,
    pNext: pNext,
    handleType: handleType,
  )

proc newVkExternalFenceProperties*(sType: VkStructureType, pNext: pointer = nil, exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags, compatibleHandleTypes: VkExternalFenceHandleTypeFlags, externalFenceFeatures: VkExternalFenceFeatureFlags): VkExternalFenceProperties =
  result = VkExternalFenceProperties(
    sType: sType,
    pNext: pNext,
    exportFromImportedHandleTypes: exportFromImportedHandleTypes,
    compatibleHandleTypes: compatibleHandleTypes,
    externalFenceFeatures: externalFenceFeatures,
  )

proc newVkExportFenceCreateInfo*(sType: VkStructureType, pNext: pointer = nil, handleTypes: VkExternalFenceHandleTypeFlags): VkExportFenceCreateInfo =
  result = VkExportFenceCreateInfo(
    sType: sType,
    pNext: pNext,
    handleTypes: handleTypes,
  )

proc newVkImportFenceWin32HandleInfoKHR*(sType: VkStructureType, pNext: pointer = nil, fence: VkFence, flags: VkFenceImportFlags = 0.VkFenceImportFlags, handleType: VkExternalFenceHandleTypeFlagBits, handle: HANDLE, name: LPCWSTR): VkImportFenceWin32HandleInfoKHR =
  result = VkImportFenceWin32HandleInfoKHR(
    sType: sType,
    pNext: pNext,
    fence: fence,
    flags: flags,
    handleType: handleType,
    handle: handle,
    name: name,
  )

proc newVkExportFenceWin32HandleInfoKHR*(sType: VkStructureType, pNext: pointer = nil, pAttributes: ptr SECURITY_ATTRIBUTES, dwAccess: DWORD, name: LPCWSTR): VkExportFenceWin32HandleInfoKHR =
  result = VkExportFenceWin32HandleInfoKHR(
    sType: sType,
    pNext: pNext,
    pAttributes: pAttributes,
    dwAccess: dwAccess,
    name: name,
  )

proc newVkFenceGetWin32HandleInfoKHR*(sType: VkStructureType, pNext: pointer = nil, fence: VkFence, handleType: VkExternalFenceHandleTypeFlagBits): VkFenceGetWin32HandleInfoKHR =
  result = VkFenceGetWin32HandleInfoKHR(
    sType: sType,
    pNext: pNext,
    fence: fence,
    handleType: handleType,
  )

proc newVkImportFenceFdInfoKHR*(sType: VkStructureType, pNext: pointer = nil, fence: VkFence, flags: VkFenceImportFlags = 0.VkFenceImportFlags, handleType: VkExternalFenceHandleTypeFlagBits, fd: int): VkImportFenceFdInfoKHR =
  result = VkImportFenceFdInfoKHR(
    sType: sType,
    pNext: pNext,
    fence: fence,
    flags: flags,
    handleType: handleType,
    fd: fd,
  )

proc newVkFenceGetFdInfoKHR*(sType: VkStructureType, pNext: pointer = nil, fence: VkFence, handleType: VkExternalFenceHandleTypeFlagBits): VkFenceGetFdInfoKHR =
  result = VkFenceGetFdInfoKHR(
    sType: sType,
    pNext: pNext,
    fence: fence,
    handleType: handleType,
  )

proc newVkExportFenceSciSyncInfoNV*(sType: VkStructureType, pNext: pointer = nil, pAttributes: NvSciSyncAttrList): VkExportFenceSciSyncInfoNV =
  result = VkExportFenceSciSyncInfoNV(
    sType: sType,
    pNext: pNext,
    pAttributes: pAttributes,
  )

proc newVkImportFenceSciSyncInfoNV*(sType: VkStructureType, pNext: pointer = nil, fence: VkFence, handleType: VkExternalFenceHandleTypeFlagBits, handle: pointer = nil): VkImportFenceSciSyncInfoNV =
  result = VkImportFenceSciSyncInfoNV(
    sType: sType,
    pNext: pNext,
    fence: fence,
    handleType: handleType,
    handle: handle,
  )

proc newVkFenceGetSciSyncInfoNV*(sType: VkStructureType, pNext: pointer = nil, fence: VkFence, handleType: VkExternalFenceHandleTypeFlagBits): VkFenceGetSciSyncInfoNV =
  result = VkFenceGetSciSyncInfoNV(
    sType: sType,
    pNext: pNext,
    fence: fence,
    handleType: handleType,
  )

proc newVkExportSemaphoreSciSyncInfoNV*(sType: VkStructureType, pNext: pointer = nil, pAttributes: NvSciSyncAttrList): VkExportSemaphoreSciSyncInfoNV =
  result = VkExportSemaphoreSciSyncInfoNV(
    sType: sType,
    pNext: pNext,
    pAttributes: pAttributes,
  )

proc newVkImportSemaphoreSciSyncInfoNV*(sType: VkStructureType, pNext: pointer = nil, semaphore: VkSemaphore, handleType: VkExternalSemaphoreHandleTypeFlagBits, handle: pointer = nil): VkImportSemaphoreSciSyncInfoNV =
  result = VkImportSemaphoreSciSyncInfoNV(
    sType: sType,
    pNext: pNext,
    semaphore: semaphore,
    handleType: handleType,
    handle: handle,
  )

proc newVkSemaphoreGetSciSyncInfoNV*(sType: VkStructureType, pNext: pointer = nil, semaphore: VkSemaphore, handleType: VkExternalSemaphoreHandleTypeFlagBits): VkSemaphoreGetSciSyncInfoNV =
  result = VkSemaphoreGetSciSyncInfoNV(
    sType: sType,
    pNext: pNext,
    semaphore: semaphore,
    handleType: handleType,
  )

proc newVkSciSyncAttributesInfoNV*(sType: VkStructureType, pNext: pointer = nil, clientType: VkSciSyncClientTypeNV, primitiveType: VkSciSyncPrimitiveTypeNV): VkSciSyncAttributesInfoNV =
  result = VkSciSyncAttributesInfoNV(
    sType: sType,
    pNext: pNext,
    clientType: clientType,
    primitiveType: primitiveType,
  )

proc newVkPhysicalDeviceExternalSciSyncFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, sciSyncFence: VkBool32, sciSyncSemaphore: VkBool32, sciSyncImport: VkBool32, sciSyncExport: VkBool32): VkPhysicalDeviceExternalSciSyncFeaturesNV =
  result = VkPhysicalDeviceExternalSciSyncFeaturesNV(
    sType: sType,
    pNext: pNext,
    sciSyncFence: sciSyncFence,
    sciSyncSemaphore: sciSyncSemaphore,
    sciSyncImport: sciSyncImport,
    sciSyncExport: sciSyncExport,
  )

proc newVkPhysicalDeviceExternalSciSync2FeaturesNV*(sType: VkStructureType, pNext: pointer = nil, sciSyncFence: VkBool32, sciSyncSemaphore2: VkBool32, sciSyncImport: VkBool32, sciSyncExport: VkBool32): VkPhysicalDeviceExternalSciSync2FeaturesNV =
  result = VkPhysicalDeviceExternalSciSync2FeaturesNV(
    sType: sType,
    pNext: pNext,
    sciSyncFence: sciSyncFence,
    sciSyncSemaphore2: sciSyncSemaphore2,
    sciSyncImport: sciSyncImport,
    sciSyncExport: sciSyncExport,
  )

proc newVkSemaphoreSciSyncPoolCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, handle: NvSciSyncObj): VkSemaphoreSciSyncPoolCreateInfoNV =
  result = VkSemaphoreSciSyncPoolCreateInfoNV(
    sType: sType,
    pNext: pNext,
    handle: handle,
  )

proc newVkSemaphoreSciSyncCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, semaphorePool: VkSemaphoreSciSyncPoolNV, pFence: ptr NvSciSyncFence): VkSemaphoreSciSyncCreateInfoNV =
  result = VkSemaphoreSciSyncCreateInfoNV(
    sType: sType,
    pNext: pNext,
    semaphorePool: semaphorePool,
    pFence: pFence,
  )

proc newVkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, semaphoreSciSyncPoolRequestCount: uint32): VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV =
  result = VkDeviceSemaphoreSciSyncPoolReservationCreateInfoNV(
    sType: sType,
    pNext: pNext,
    semaphoreSciSyncPoolRequestCount: semaphoreSciSyncPoolRequestCount,
  )

proc newVkPhysicalDeviceMultiviewFeatures*(sType: VkStructureType, pNext: pointer = nil, multiview: VkBool32, multiviewGeometryShader: VkBool32, multiviewTessellationShader: VkBool32): VkPhysicalDeviceMultiviewFeatures =
  result = VkPhysicalDeviceMultiviewFeatures(
    sType: sType,
    pNext: pNext,
    multiview: multiview,
    multiviewGeometryShader: multiviewGeometryShader,
    multiviewTessellationShader: multiviewTessellationShader,
  )

proc newVkPhysicalDeviceMultiviewProperties*(sType: VkStructureType, pNext: pointer = nil, maxMultiviewViewCount: uint32, maxMultiviewInstanceIndex: uint32): VkPhysicalDeviceMultiviewProperties =
  result = VkPhysicalDeviceMultiviewProperties(
    sType: sType,
    pNext: pNext,
    maxMultiviewViewCount: maxMultiviewViewCount,
    maxMultiviewInstanceIndex: maxMultiviewInstanceIndex,
  )

proc newVkRenderPassMultiviewCreateInfo*(sType: VkStructureType, pNext: pointer = nil, subpassCount: uint32, pViewMasks: ptr uint32, dependencyCount: uint32, pViewOffsets: ptr int32, correlationMaskCount: uint32, pCorrelationMasks: ptr uint32): VkRenderPassMultiviewCreateInfo =
  result = VkRenderPassMultiviewCreateInfo(
    sType: sType,
    pNext: pNext,
    subpassCount: subpassCount,
    pViewMasks: pViewMasks,
    dependencyCount: dependencyCount,
    pViewOffsets: pViewOffsets,
    correlationMaskCount: correlationMaskCount,
    pCorrelationMasks: pCorrelationMasks,
  )

proc newVkSurfaceCapabilities2EXT*(sType: VkStructureType, pNext: pointer = nil, minImageCount: uint32, maxImageCount: uint32, currentExtent: VkExtent2D, minImageExtent: VkExtent2D, maxImageExtent: VkExtent2D, maxImageArrayLayers: uint32, supportedTransforms: VkSurfaceTransformFlagsKHR, currentTransform: VkSurfaceTransformFlagBitsKHR, supportedCompositeAlpha: VkCompositeAlphaFlagsKHR, supportedUsageFlags: VkImageUsageFlags, supportedSurfaceCounters: VkSurfaceCounterFlagsEXT): VkSurfaceCapabilities2EXT =
  result = VkSurfaceCapabilities2EXT(
    sType: sType,
    pNext: pNext,
    minImageCount: minImageCount,
    maxImageCount: maxImageCount,
    currentExtent: currentExtent,
    minImageExtent: minImageExtent,
    maxImageExtent: maxImageExtent,
    maxImageArrayLayers: maxImageArrayLayers,
    supportedTransforms: supportedTransforms,
    currentTransform: currentTransform,
    supportedCompositeAlpha: supportedCompositeAlpha,
    supportedUsageFlags: supportedUsageFlags,
    supportedSurfaceCounters: supportedSurfaceCounters,
  )

proc newVkDisplayPowerInfoEXT*(sType: VkStructureType, pNext: pointer = nil, powerState: VkDisplayPowerStateEXT): VkDisplayPowerInfoEXT =
  result = VkDisplayPowerInfoEXT(
    sType: sType,
    pNext: pNext,
    powerState: powerState,
  )

proc newVkDeviceEventInfoEXT*(sType: VkStructureType, pNext: pointer = nil, deviceEvent: VkDeviceEventTypeEXT): VkDeviceEventInfoEXT =
  result = VkDeviceEventInfoEXT(
    sType: sType,
    pNext: pNext,
    deviceEvent: deviceEvent,
  )

proc newVkDisplayEventInfoEXT*(sType: VkStructureType, pNext: pointer = nil, displayEvent: VkDisplayEventTypeEXT): VkDisplayEventInfoEXT =
  result = VkDisplayEventInfoEXT(
    sType: sType,
    pNext: pNext,
    displayEvent: displayEvent,
  )

proc newVkSwapchainCounterCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, surfaceCounters: VkSurfaceCounterFlagsEXT): VkSwapchainCounterCreateInfoEXT =
  result = VkSwapchainCounterCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    surfaceCounters: surfaceCounters,
  )

proc newVkPhysicalDeviceGroupProperties*(sType: VkStructureType, pNext: pointer = nil, physicalDeviceCount: uint32, physicalDevices: array[VK_MAX_DEVICE_GROUP_SIZE, VkPhysicalDevice], subsetAllocation: VkBool32): VkPhysicalDeviceGroupProperties =
  result = VkPhysicalDeviceGroupProperties(
    sType: sType,
    pNext: pNext,
    physicalDeviceCount: physicalDeviceCount,
    physicalDevices: physicalDevices,
    subsetAllocation: subsetAllocation,
  )

proc newVkMemoryAllocateFlagsInfo*(sType: VkStructureType, pNext: pointer = nil, flags: VkMemoryAllocateFlags = 0.VkMemoryAllocateFlags, deviceMask: uint32): VkMemoryAllocateFlagsInfo =
  result = VkMemoryAllocateFlagsInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    deviceMask: deviceMask,
  )

proc newVkBindBufferMemoryInfo*(sType: VkStructureType, pNext: pointer = nil, buffer: VkBuffer, memory: VkDeviceMemory, memoryOffset: VkDeviceSize): VkBindBufferMemoryInfo =
  result = VkBindBufferMemoryInfo(
    sType: sType,
    pNext: pNext,
    buffer: buffer,
    memory: memory,
    memoryOffset: memoryOffset,
  )

proc newVkBindBufferMemoryDeviceGroupInfo*(sType: VkStructureType, pNext: pointer = nil, deviceIndexCount: uint32, pDeviceIndices: ptr uint32): VkBindBufferMemoryDeviceGroupInfo =
  result = VkBindBufferMemoryDeviceGroupInfo(
    sType: sType,
    pNext: pNext,
    deviceIndexCount: deviceIndexCount,
    pDeviceIndices: pDeviceIndices,
  )

proc newVkBindImageMemoryInfo*(sType: VkStructureType, pNext: pointer = nil, image: VkImage, memory: VkDeviceMemory, memoryOffset: VkDeviceSize): VkBindImageMemoryInfo =
  result = VkBindImageMemoryInfo(
    sType: sType,
    pNext: pNext,
    image: image,
    memory: memory,
    memoryOffset: memoryOffset,
  )

proc newVkBindImageMemoryDeviceGroupInfo*(sType: VkStructureType, pNext: pointer = nil, deviceIndexCount: uint32, pDeviceIndices: ptr uint32, splitInstanceBindRegionCount: uint32, pSplitInstanceBindRegions: ptr VkRect2D): VkBindImageMemoryDeviceGroupInfo =
  result = VkBindImageMemoryDeviceGroupInfo(
    sType: sType,
    pNext: pNext,
    deviceIndexCount: deviceIndexCount,
    pDeviceIndices: pDeviceIndices,
    splitInstanceBindRegionCount: splitInstanceBindRegionCount,
    pSplitInstanceBindRegions: pSplitInstanceBindRegions,
  )

proc newVkDeviceGroupRenderPassBeginInfo*(sType: VkStructureType, pNext: pointer = nil, deviceMask: uint32, deviceRenderAreaCount: uint32, pDeviceRenderAreas: ptr VkRect2D): VkDeviceGroupRenderPassBeginInfo =
  result = VkDeviceGroupRenderPassBeginInfo(
    sType: sType,
    pNext: pNext,
    deviceMask: deviceMask,
    deviceRenderAreaCount: deviceRenderAreaCount,
    pDeviceRenderAreas: pDeviceRenderAreas,
  )

proc newVkDeviceGroupCommandBufferBeginInfo*(sType: VkStructureType, pNext: pointer = nil, deviceMask: uint32): VkDeviceGroupCommandBufferBeginInfo =
  result = VkDeviceGroupCommandBufferBeginInfo(
    sType: sType,
    pNext: pNext,
    deviceMask: deviceMask,
  )

proc newVkDeviceGroupSubmitInfo*(sType: VkStructureType, pNext: pointer = nil, waitSemaphoreCount: uint32, pWaitSemaphoreDeviceIndices: ptr uint32, commandBufferCount: uint32, pCommandBufferDeviceMasks: ptr uint32, signalSemaphoreCount: uint32, pSignalSemaphoreDeviceIndices: ptr uint32): VkDeviceGroupSubmitInfo =
  result = VkDeviceGroupSubmitInfo(
    sType: sType,
    pNext: pNext,
    waitSemaphoreCount: waitSemaphoreCount,
    pWaitSemaphoreDeviceIndices: pWaitSemaphoreDeviceIndices,
    commandBufferCount: commandBufferCount,
    pCommandBufferDeviceMasks: pCommandBufferDeviceMasks,
    signalSemaphoreCount: signalSemaphoreCount,
    pSignalSemaphoreDeviceIndices: pSignalSemaphoreDeviceIndices,
  )

proc newVkDeviceGroupBindSparseInfo*(sType: VkStructureType, pNext: pointer = nil, resourceDeviceIndex: uint32, memoryDeviceIndex: uint32): VkDeviceGroupBindSparseInfo =
  result = VkDeviceGroupBindSparseInfo(
    sType: sType,
    pNext: pNext,
    resourceDeviceIndex: resourceDeviceIndex,
    memoryDeviceIndex: memoryDeviceIndex,
  )

proc newVkDeviceGroupPresentCapabilitiesKHR*(sType: VkStructureType, pNext: pointer = nil, presentMask: array[VK_MAX_DEVICE_GROUP_SIZE, uint32], modes: VkDeviceGroupPresentModeFlagsKHR): VkDeviceGroupPresentCapabilitiesKHR =
  result = VkDeviceGroupPresentCapabilitiesKHR(
    sType: sType,
    pNext: pNext,
    presentMask: presentMask,
    modes: modes,
  )

proc newVkImageSwapchainCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, swapchain: VkSwapchainKHR): VkImageSwapchainCreateInfoKHR =
  result = VkImageSwapchainCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    swapchain: swapchain,
  )

proc newVkBindImageMemorySwapchainInfoKHR*(sType: VkStructureType, pNext: pointer = nil, swapchain: VkSwapchainKHR, imageIndex: uint32): VkBindImageMemorySwapchainInfoKHR =
  result = VkBindImageMemorySwapchainInfoKHR(
    sType: sType,
    pNext: pNext,
    swapchain: swapchain,
    imageIndex: imageIndex,
  )

proc newVkAcquireNextImageInfoKHR*(sType: VkStructureType, pNext: pointer = nil, swapchain: VkSwapchainKHR, timeout: uint64, semaphore: VkSemaphore, fence: VkFence, deviceMask: uint32): VkAcquireNextImageInfoKHR =
  result = VkAcquireNextImageInfoKHR(
    sType: sType,
    pNext: pNext,
    swapchain: swapchain,
    timeout: timeout,
    semaphore: semaphore,
    fence: fence,
    deviceMask: deviceMask,
  )

proc newVkDeviceGroupPresentInfoKHR*(sType: VkStructureType, pNext: pointer = nil, swapchainCount: uint32, pDeviceMasks: ptr uint32, mode: VkDeviceGroupPresentModeFlagBitsKHR): VkDeviceGroupPresentInfoKHR =
  result = VkDeviceGroupPresentInfoKHR(
    sType: sType,
    pNext: pNext,
    swapchainCount: swapchainCount,
    pDeviceMasks: pDeviceMasks,
    mode: mode,
  )

proc newVkDeviceGroupDeviceCreateInfo*(sType: VkStructureType, pNext: pointer = nil, physicalDeviceCount: uint32, pPhysicalDevices: ptr VkPhysicalDevice): VkDeviceGroupDeviceCreateInfo =
  result = VkDeviceGroupDeviceCreateInfo(
    sType: sType,
    pNext: pNext,
    physicalDeviceCount: physicalDeviceCount,
    pPhysicalDevices: pPhysicalDevices,
  )

proc newVkDeviceGroupSwapchainCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, modes: VkDeviceGroupPresentModeFlagsKHR): VkDeviceGroupSwapchainCreateInfoKHR =
  result = VkDeviceGroupSwapchainCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    modes: modes,
  )

proc newVkDescriptorUpdateTemplateEntry*(dstBinding: uint32, dstArrayElement: uint32, descriptorCount: uint32, descriptorType: VkDescriptorType, offset: uint, stride: uint): VkDescriptorUpdateTemplateEntry =
  result = VkDescriptorUpdateTemplateEntry(
    dstBinding: dstBinding,
    dstArrayElement: dstArrayElement,
    descriptorCount: descriptorCount,
    descriptorType: descriptorType,
    offset: offset,
    stride: stride,
  )

proc newVkDescriptorUpdateTemplateCreateInfo*(sType: VkStructureType, pNext: pointer = nil, flags: VkDescriptorUpdateTemplateCreateFlags = 0.VkDescriptorUpdateTemplateCreateFlags, descriptorUpdateEntryCount: uint32, pDescriptorUpdateEntries: ptr VkDescriptorUpdateTemplateEntry, templateType: VkDescriptorUpdateTemplateType, descriptorSetLayout: VkDescriptorSetLayout, pipelineBindPoint: VkPipelineBindPoint, pipelineLayout: VkPipelineLayout, set: uint32): VkDescriptorUpdateTemplateCreateInfo =
  result = VkDescriptorUpdateTemplateCreateInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    descriptorUpdateEntryCount: descriptorUpdateEntryCount,
    pDescriptorUpdateEntries: pDescriptorUpdateEntries,
    templateType: templateType,
    descriptorSetLayout: descriptorSetLayout,
    pipelineBindPoint: pipelineBindPoint,
    pipelineLayout: pipelineLayout,
    set: set,
  )

proc newVkXYColorEXT*(x: float32, y: float32): VkXYColorEXT =
  result = VkXYColorEXT(
    x: x,
    y: y,
  )

proc newVkPhysicalDevicePresentIdFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, presentId: VkBool32): VkPhysicalDevicePresentIdFeaturesKHR =
  result = VkPhysicalDevicePresentIdFeaturesKHR(
    sType: sType,
    pNext: pNext,
    presentId: presentId,
  )

proc newVkPresentIdKHR*(sType: VkStructureType, pNext: pointer = nil, swapchainCount: uint32, pPresentIds: ptr uint64): VkPresentIdKHR =
  result = VkPresentIdKHR(
    sType: sType,
    pNext: pNext,
    swapchainCount: swapchainCount,
    pPresentIds: pPresentIds,
  )

proc newVkPhysicalDevicePresentWaitFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, presentWait: VkBool32): VkPhysicalDevicePresentWaitFeaturesKHR =
  result = VkPhysicalDevicePresentWaitFeaturesKHR(
    sType: sType,
    pNext: pNext,
    presentWait: presentWait,
  )

proc newVkHdrMetadataEXT*(sType: VkStructureType, pNext: pointer = nil, displayPrimaryRed: VkXYColorEXT, displayPrimaryGreen: VkXYColorEXT, displayPrimaryBlue: VkXYColorEXT, whitePoint: VkXYColorEXT, maxLuminance: float32, minLuminance: float32, maxContentLightLevel: float32, maxFrameAverageLightLevel: float32): VkHdrMetadataEXT =
  result = VkHdrMetadataEXT(
    sType: sType,
    pNext: pNext,
    displayPrimaryRed: displayPrimaryRed,
    displayPrimaryGreen: displayPrimaryGreen,
    displayPrimaryBlue: displayPrimaryBlue,
    whitePoint: whitePoint,
    maxLuminance: maxLuminance,
    minLuminance: minLuminance,
    maxContentLightLevel: maxContentLightLevel,
    maxFrameAverageLightLevel: maxFrameAverageLightLevel,
  )

proc newVkDisplayNativeHdrSurfaceCapabilitiesAMD*(sType: VkStructureType, pNext: pointer = nil, localDimmingSupport: VkBool32): VkDisplayNativeHdrSurfaceCapabilitiesAMD =
  result = VkDisplayNativeHdrSurfaceCapabilitiesAMD(
    sType: sType,
    pNext: pNext,
    localDimmingSupport: localDimmingSupport,
  )

proc newVkSwapchainDisplayNativeHdrCreateInfoAMD*(sType: VkStructureType, pNext: pointer = nil, localDimmingEnable: VkBool32): VkSwapchainDisplayNativeHdrCreateInfoAMD =
  result = VkSwapchainDisplayNativeHdrCreateInfoAMD(
    sType: sType,
    pNext: pNext,
    localDimmingEnable: localDimmingEnable,
  )

proc newVkRefreshCycleDurationGOOGLE*(refreshDuration: uint64): VkRefreshCycleDurationGOOGLE =
  result = VkRefreshCycleDurationGOOGLE(
    refreshDuration: refreshDuration,
  )

proc newVkPastPresentationTimingGOOGLE*(presentID: uint32, desiredPresentTime: uint64, actualPresentTime: uint64, earliestPresentTime: uint64, presentMargin: uint64): VkPastPresentationTimingGOOGLE =
  result = VkPastPresentationTimingGOOGLE(
    presentID: presentID,
    desiredPresentTime: desiredPresentTime,
    actualPresentTime: actualPresentTime,
    earliestPresentTime: earliestPresentTime,
    presentMargin: presentMargin,
  )

proc newVkPresentTimesInfoGOOGLE*(sType: VkStructureType, pNext: pointer = nil, swapchainCount: uint32, pTimes: ptr VkPresentTimeGOOGLE): VkPresentTimesInfoGOOGLE =
  result = VkPresentTimesInfoGOOGLE(
    sType: sType,
    pNext: pNext,
    swapchainCount: swapchainCount,
    pTimes: pTimes,
  )

proc newVkPresentTimeGOOGLE*(presentID: uint32, desiredPresentTime: uint64): VkPresentTimeGOOGLE =
  result = VkPresentTimeGOOGLE(
    presentID: presentID,
    desiredPresentTime: desiredPresentTime,
  )

proc newVkIOSSurfaceCreateInfoMVK*(sType: VkStructureType, pNext: pointer = nil, flags: VkIOSSurfaceCreateFlagsMVK = 0.VkIOSSurfaceCreateFlagsMVK, pView: pointer = nil): VkIOSSurfaceCreateInfoMVK =
  result = VkIOSSurfaceCreateInfoMVK(
    sType: sType,
    pNext: pNext,
    flags: flags,
    pView: pView,
  )

proc newVkMacOSSurfaceCreateInfoMVK*(sType: VkStructureType, pNext: pointer = nil, flags: VkMacOSSurfaceCreateFlagsMVK = 0.VkMacOSSurfaceCreateFlagsMVK, pView: pointer = nil): VkMacOSSurfaceCreateInfoMVK =
  result = VkMacOSSurfaceCreateInfoMVK(
    sType: sType,
    pNext: pNext,
    flags: flags,
    pView: pView,
  )

proc newVkMetalSurfaceCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkMetalSurfaceCreateFlagsEXT = 0.VkMetalSurfaceCreateFlagsEXT, pLayer: ptr CAMetalLayer): VkMetalSurfaceCreateInfoEXT =
  result = VkMetalSurfaceCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    pLayer: pLayer,
  )

proc newVkViewportWScalingNV*(xcoeff: float32, ycoeff: float32): VkViewportWScalingNV =
  result = VkViewportWScalingNV(
    xcoeff: xcoeff,
    ycoeff: ycoeff,
  )

proc newVkPipelineViewportWScalingStateCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, viewportWScalingEnable: VkBool32, viewportCount: uint32, pViewportWScalings: ptr VkViewportWScalingNV): VkPipelineViewportWScalingStateCreateInfoNV =
  result = VkPipelineViewportWScalingStateCreateInfoNV(
    sType: sType,
    pNext: pNext,
    viewportWScalingEnable: viewportWScalingEnable,
    viewportCount: viewportCount,
    pViewportWScalings: pViewportWScalings,
  )

proc newVkViewportSwizzleNV*(x: VkViewportCoordinateSwizzleNV, y: VkViewportCoordinateSwizzleNV, z: VkViewportCoordinateSwizzleNV, w: VkViewportCoordinateSwizzleNV): VkViewportSwizzleNV =
  result = VkViewportSwizzleNV(
    x: x,
    y: y,
    z: z,
    w: w,
  )

proc newVkPipelineViewportSwizzleStateCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, flags: VkPipelineViewportSwizzleStateCreateFlagsNV = 0.VkPipelineViewportSwizzleStateCreateFlagsNV, viewportCount: uint32, pViewportSwizzles: ptr VkViewportSwizzleNV): VkPipelineViewportSwizzleStateCreateInfoNV =
  result = VkPipelineViewportSwizzleStateCreateInfoNV(
    sType: sType,
    pNext: pNext,
    flags: flags,
    viewportCount: viewportCount,
    pViewportSwizzles: pViewportSwizzles,
  )

proc newVkPhysicalDeviceDiscardRectanglePropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, maxDiscardRectangles: uint32): VkPhysicalDeviceDiscardRectanglePropertiesEXT =
  result = VkPhysicalDeviceDiscardRectanglePropertiesEXT(
    sType: sType,
    pNext: pNext,
    maxDiscardRectangles: maxDiscardRectangles,
  )

proc newVkPipelineDiscardRectangleStateCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkPipelineDiscardRectangleStateCreateFlagsEXT = 0.VkPipelineDiscardRectangleStateCreateFlagsEXT, discardRectangleMode: VkDiscardRectangleModeEXT, discardRectangleCount: uint32, pDiscardRectangles: ptr VkRect2D): VkPipelineDiscardRectangleStateCreateInfoEXT =
  result = VkPipelineDiscardRectangleStateCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    discardRectangleMode: discardRectangleMode,
    discardRectangleCount: discardRectangleCount,
    pDiscardRectangles: pDiscardRectangles,
  )

proc newVkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX*(sType: VkStructureType, pNext: pointer = nil, perViewPositionAllComponents: VkBool32): VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX =
  result = VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    sType: sType,
    pNext: pNext,
    perViewPositionAllComponents: perViewPositionAllComponents,
  )

proc newVkInputAttachmentAspectReference*(subpass: uint32, inputAttachmentIndex: uint32, aspectMask: VkImageAspectFlags): VkInputAttachmentAspectReference =
  result = VkInputAttachmentAspectReference(
    subpass: subpass,
    inputAttachmentIndex: inputAttachmentIndex,
    aspectMask: aspectMask,
  )

proc newVkRenderPassInputAttachmentAspectCreateInfo*(sType: VkStructureType, pNext: pointer = nil, aspectReferenceCount: uint32, pAspectReferences: ptr VkInputAttachmentAspectReference): VkRenderPassInputAttachmentAspectCreateInfo =
  result = VkRenderPassInputAttachmentAspectCreateInfo(
    sType: sType,
    pNext: pNext,
    aspectReferenceCount: aspectReferenceCount,
    pAspectReferences: pAspectReferences,
  )

proc newVkPhysicalDeviceSurfaceInfo2KHR*(sType: VkStructureType, pNext: pointer = nil, surface: VkSurfaceKHR): VkPhysicalDeviceSurfaceInfo2KHR =
  result = VkPhysicalDeviceSurfaceInfo2KHR(
    sType: sType,
    pNext: pNext,
    surface: surface,
  )

proc newVkSurfaceCapabilities2KHR*(sType: VkStructureType, pNext: pointer = nil, surfaceCapabilities: VkSurfaceCapabilitiesKHR): VkSurfaceCapabilities2KHR =
  result = VkSurfaceCapabilities2KHR(
    sType: sType,
    pNext: pNext,
    surfaceCapabilities: surfaceCapabilities,
  )

proc newVkSurfaceFormat2KHR*(sType: VkStructureType, pNext: pointer = nil, surfaceFormat: VkSurfaceFormatKHR): VkSurfaceFormat2KHR =
  result = VkSurfaceFormat2KHR(
    sType: sType,
    pNext: pNext,
    surfaceFormat: surfaceFormat,
  )

proc newVkDisplayProperties2KHR*(sType: VkStructureType, pNext: pointer = nil, displayProperties: VkDisplayPropertiesKHR): VkDisplayProperties2KHR =
  result = VkDisplayProperties2KHR(
    sType: sType,
    pNext: pNext,
    displayProperties: displayProperties,
  )

proc newVkDisplayPlaneProperties2KHR*(sType: VkStructureType, pNext: pointer = nil, displayPlaneProperties: VkDisplayPlanePropertiesKHR): VkDisplayPlaneProperties2KHR =
  result = VkDisplayPlaneProperties2KHR(
    sType: sType,
    pNext: pNext,
    displayPlaneProperties: displayPlaneProperties,
  )

proc newVkDisplayModeProperties2KHR*(sType: VkStructureType, pNext: pointer = nil, displayModeProperties: VkDisplayModePropertiesKHR): VkDisplayModeProperties2KHR =
  result = VkDisplayModeProperties2KHR(
    sType: sType,
    pNext: pNext,
    displayModeProperties: displayModeProperties,
  )

proc newVkDisplayPlaneInfo2KHR*(sType: VkStructureType, pNext: pointer = nil, mode: VkDisplayModeKHR, planeIndex: uint32): VkDisplayPlaneInfo2KHR =
  result = VkDisplayPlaneInfo2KHR(
    sType: sType,
    pNext: pNext,
    mode: mode,
    planeIndex: planeIndex,
  )

proc newVkDisplayPlaneCapabilities2KHR*(sType: VkStructureType, pNext: pointer = nil, capabilities: VkDisplayPlaneCapabilitiesKHR): VkDisplayPlaneCapabilities2KHR =
  result = VkDisplayPlaneCapabilities2KHR(
    sType: sType,
    pNext: pNext,
    capabilities: capabilities,
  )

proc newVkSharedPresentSurfaceCapabilitiesKHR*(sType: VkStructureType, pNext: pointer = nil, sharedPresentSupportedUsageFlags: VkImageUsageFlags): VkSharedPresentSurfaceCapabilitiesKHR =
  result = VkSharedPresentSurfaceCapabilitiesKHR(
    sType: sType,
    pNext: pNext,
    sharedPresentSupportedUsageFlags: sharedPresentSupportedUsageFlags,
  )

proc newVkPhysicalDevice16BitStorageFeatures*(sType: VkStructureType, pNext: pointer = nil, storageBuffer16BitAccess: VkBool32, uniformAndStorageBuffer16BitAccess: VkBool32, storagePushConstant16: VkBool32, storageInputOutput16: VkBool32): VkPhysicalDevice16BitStorageFeatures =
  result = VkPhysicalDevice16BitStorageFeatures(
    sType: sType,
    pNext: pNext,
    storageBuffer16BitAccess: storageBuffer16BitAccess,
    uniformAndStorageBuffer16BitAccess: uniformAndStorageBuffer16BitAccess,
    storagePushConstant16: storagePushConstant16,
    storageInputOutput16: storageInputOutput16,
  )

proc newVkPhysicalDeviceSubgroupProperties*(sType: VkStructureType, pNext: pointer = nil, subgroupSize: uint32, supportedStages: VkShaderStageFlags, supportedOperations: VkSubgroupFeatureFlags, quadOperationsInAllStages: VkBool32): VkPhysicalDeviceSubgroupProperties =
  result = VkPhysicalDeviceSubgroupProperties(
    sType: sType,
    pNext: pNext,
    subgroupSize: subgroupSize,
    supportedStages: supportedStages,
    supportedOperations: supportedOperations,
    quadOperationsInAllStages: quadOperationsInAllStages,
  )

proc newVkPhysicalDeviceShaderSubgroupExtendedTypesFeatures*(sType: VkStructureType, pNext: pointer = nil, shaderSubgroupExtendedTypes: VkBool32): VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures =
  result = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures(
    sType: sType,
    pNext: pNext,
    shaderSubgroupExtendedTypes: shaderSubgroupExtendedTypes,
  )

proc newVkBufferMemoryRequirementsInfo2*(sType: VkStructureType, pNext: pointer = nil, buffer: VkBuffer): VkBufferMemoryRequirementsInfo2 =
  result = VkBufferMemoryRequirementsInfo2(
    sType: sType,
    pNext: pNext,
    buffer: buffer,
  )

proc newVkDeviceBufferMemoryRequirements*(sType: VkStructureType, pNext: pointer = nil, pCreateInfo: ptr VkBufferCreateInfo): VkDeviceBufferMemoryRequirements =
  result = VkDeviceBufferMemoryRequirements(
    sType: sType,
    pNext: pNext,
    pCreateInfo: pCreateInfo,
  )

proc newVkImageMemoryRequirementsInfo2*(sType: VkStructureType, pNext: pointer = nil, image: VkImage): VkImageMemoryRequirementsInfo2 =
  result = VkImageMemoryRequirementsInfo2(
    sType: sType,
    pNext: pNext,
    image: image,
  )

proc newVkImageSparseMemoryRequirementsInfo2*(sType: VkStructureType, pNext: pointer = nil, image: VkImage): VkImageSparseMemoryRequirementsInfo2 =
  result = VkImageSparseMemoryRequirementsInfo2(
    sType: sType,
    pNext: pNext,
    image: image,
  )

proc newVkDeviceImageMemoryRequirements*(sType: VkStructureType, pNext: pointer = nil, pCreateInfo: ptr VkImageCreateInfo, planeAspect: VkImageAspectFlagBits): VkDeviceImageMemoryRequirements =
  result = VkDeviceImageMemoryRequirements(
    sType: sType,
    pNext: pNext,
    pCreateInfo: pCreateInfo,
    planeAspect: planeAspect,
  )

proc newVkMemoryRequirements2*(sType: VkStructureType, pNext: pointer = nil, memoryRequirements: VkMemoryRequirements): VkMemoryRequirements2 =
  result = VkMemoryRequirements2(
    sType: sType,
    pNext: pNext,
    memoryRequirements: memoryRequirements,
  )

proc newVkSparseImageMemoryRequirements2*(sType: VkStructureType, pNext: pointer = nil, memoryRequirements: VkSparseImageMemoryRequirements): VkSparseImageMemoryRequirements2 =
  result = VkSparseImageMemoryRequirements2(
    sType: sType,
    pNext: pNext,
    memoryRequirements: memoryRequirements,
  )

proc newVkPhysicalDevicePointClippingProperties*(sType: VkStructureType, pNext: pointer = nil, pointClippingBehavior: VkPointClippingBehavior): VkPhysicalDevicePointClippingProperties =
  result = VkPhysicalDevicePointClippingProperties(
    sType: sType,
    pNext: pNext,
    pointClippingBehavior: pointClippingBehavior,
  )

proc newVkMemoryDedicatedRequirements*(sType: VkStructureType, pNext: pointer = nil, prefersDedicatedAllocation: VkBool32, requiresDedicatedAllocation: VkBool32): VkMemoryDedicatedRequirements =
  result = VkMemoryDedicatedRequirements(
    sType: sType,
    pNext: pNext,
    prefersDedicatedAllocation: prefersDedicatedAllocation,
    requiresDedicatedAllocation: requiresDedicatedAllocation,
  )

proc newVkMemoryDedicatedAllocateInfo*(sType: VkStructureType, pNext: pointer = nil, image: VkImage, buffer: VkBuffer): VkMemoryDedicatedAllocateInfo =
  result = VkMemoryDedicatedAllocateInfo(
    sType: sType,
    pNext: pNext,
    image: image,
    buffer: buffer,
  )

proc newVkImageViewUsageCreateInfo*(sType: VkStructureType, pNext: pointer = nil, usage: VkImageUsageFlags): VkImageViewUsageCreateInfo =
  result = VkImageViewUsageCreateInfo(
    sType: sType,
    pNext: pNext,
    usage: usage,
  )

proc newVkImageViewSlicedCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, sliceOffset: uint32, sliceCount: uint32): VkImageViewSlicedCreateInfoEXT =
  result = VkImageViewSlicedCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    sliceOffset: sliceOffset,
    sliceCount: sliceCount,
  )

proc newVkPipelineTessellationDomainOriginStateCreateInfo*(sType: VkStructureType, pNext: pointer = nil, domainOrigin: VkTessellationDomainOrigin): VkPipelineTessellationDomainOriginStateCreateInfo =
  result = VkPipelineTessellationDomainOriginStateCreateInfo(
    sType: sType,
    pNext: pNext,
    domainOrigin: domainOrigin,
  )

proc newVkSamplerYcbcrConversionInfo*(sType: VkStructureType, pNext: pointer = nil, conversion: VkSamplerYcbcrConversion): VkSamplerYcbcrConversionInfo =
  result = VkSamplerYcbcrConversionInfo(
    sType: sType,
    pNext: pNext,
    conversion: conversion,
  )

proc newVkSamplerYcbcrConversionCreateInfo*(sType: VkStructureType, pNext: pointer = nil, format: VkFormat, ycbcrModel: VkSamplerYcbcrModelConversion, ycbcrRange: VkSamplerYcbcrRange, components: VkComponentMapping, xChromaOffset: VkChromaLocation, yChromaOffset: VkChromaLocation, chromaFilter: VkFilter, forceExplicitReconstruction: VkBool32): VkSamplerYcbcrConversionCreateInfo =
  result = VkSamplerYcbcrConversionCreateInfo(
    sType: sType,
    pNext: pNext,
    format: format,
    ycbcrModel: ycbcrModel,
    ycbcrRange: ycbcrRange,
    components: components,
    xChromaOffset: xChromaOffset,
    yChromaOffset: yChromaOffset,
    chromaFilter: chromaFilter,
    forceExplicitReconstruction: forceExplicitReconstruction,
  )

proc newVkBindImagePlaneMemoryInfo*(sType: VkStructureType, pNext: pointer = nil, planeAspect: VkImageAspectFlagBits): VkBindImagePlaneMemoryInfo =
  result = VkBindImagePlaneMemoryInfo(
    sType: sType,
    pNext: pNext,
    planeAspect: planeAspect,
  )

proc newVkImagePlaneMemoryRequirementsInfo*(sType: VkStructureType, pNext: pointer = nil, planeAspect: VkImageAspectFlagBits): VkImagePlaneMemoryRequirementsInfo =
  result = VkImagePlaneMemoryRequirementsInfo(
    sType: sType,
    pNext: pNext,
    planeAspect: planeAspect,
  )

proc newVkPhysicalDeviceSamplerYcbcrConversionFeatures*(sType: VkStructureType, pNext: pointer = nil, samplerYcbcrConversion: VkBool32): VkPhysicalDeviceSamplerYcbcrConversionFeatures =
  result = VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    sType: sType,
    pNext: pNext,
    samplerYcbcrConversion: samplerYcbcrConversion,
  )

proc newVkSamplerYcbcrConversionImageFormatProperties*(sType: VkStructureType, pNext: pointer = nil, combinedImageSamplerDescriptorCount: uint32): VkSamplerYcbcrConversionImageFormatProperties =
  result = VkSamplerYcbcrConversionImageFormatProperties(
    sType: sType,
    pNext: pNext,
    combinedImageSamplerDescriptorCount: combinedImageSamplerDescriptorCount,
  )

proc newVkTextureLODGatherFormatPropertiesAMD*(sType: VkStructureType, pNext: pointer = nil, supportsTextureGatherLODBiasAMD: VkBool32): VkTextureLODGatherFormatPropertiesAMD =
  result = VkTextureLODGatherFormatPropertiesAMD(
    sType: sType,
    pNext: pNext,
    supportsTextureGatherLODBiasAMD: supportsTextureGatherLODBiasAMD,
  )

proc newVkConditionalRenderingBeginInfoEXT*(sType: VkStructureType, pNext: pointer = nil, buffer: VkBuffer, offset: VkDeviceSize, flags: VkConditionalRenderingFlagsEXT = 0.VkConditionalRenderingFlagsEXT): VkConditionalRenderingBeginInfoEXT =
  result = VkConditionalRenderingBeginInfoEXT(
    sType: sType,
    pNext: pNext,
    buffer: buffer,
    offset: offset,
    flags: flags,
  )

proc newVkProtectedSubmitInfo*(sType: VkStructureType, pNext: pointer = nil, protectedSubmit: VkBool32): VkProtectedSubmitInfo =
  result = VkProtectedSubmitInfo(
    sType: sType,
    pNext: pNext,
    protectedSubmit: protectedSubmit,
  )

proc newVkPhysicalDeviceProtectedMemoryFeatures*(sType: VkStructureType, pNext: pointer = nil, protectedMemory: VkBool32): VkPhysicalDeviceProtectedMemoryFeatures =
  result = VkPhysicalDeviceProtectedMemoryFeatures(
    sType: sType,
    pNext: pNext,
    protectedMemory: protectedMemory,
  )

proc newVkPhysicalDeviceProtectedMemoryProperties*(sType: VkStructureType, pNext: pointer = nil, protectedNoFault: VkBool32): VkPhysicalDeviceProtectedMemoryProperties =
  result = VkPhysicalDeviceProtectedMemoryProperties(
    sType: sType,
    pNext: pNext,
    protectedNoFault: protectedNoFault,
  )

proc newVkDeviceQueueInfo2*(sType: VkStructureType, pNext: pointer = nil, flags: VkDeviceQueueCreateFlags = 0.VkDeviceQueueCreateFlags, queueFamilyIndex: uint32, queueIndex: uint32): VkDeviceQueueInfo2 =
  result = VkDeviceQueueInfo2(
    sType: sType,
    pNext: pNext,
    flags: flags,
    queueFamilyIndex: queueFamilyIndex,
    queueIndex: queueIndex,
  )

proc newVkPipelineCoverageToColorStateCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, flags: VkPipelineCoverageToColorStateCreateFlagsNV = 0.VkPipelineCoverageToColorStateCreateFlagsNV, coverageToColorEnable: VkBool32, coverageToColorLocation: uint32): VkPipelineCoverageToColorStateCreateInfoNV =
  result = VkPipelineCoverageToColorStateCreateInfoNV(
    sType: sType,
    pNext: pNext,
    flags: flags,
    coverageToColorEnable: coverageToColorEnable,
    coverageToColorLocation: coverageToColorLocation,
  )

proc newVkPhysicalDeviceSamplerFilterMinmaxProperties*(sType: VkStructureType, pNext: pointer = nil, filterMinmaxSingleComponentFormats: VkBool32, filterMinmaxImageComponentMapping: VkBool32): VkPhysicalDeviceSamplerFilterMinmaxProperties =
  result = VkPhysicalDeviceSamplerFilterMinmaxProperties(
    sType: sType,
    pNext: pNext,
    filterMinmaxSingleComponentFormats: filterMinmaxSingleComponentFormats,
    filterMinmaxImageComponentMapping: filterMinmaxImageComponentMapping,
  )

proc newVkSampleLocationEXT*(x: float32, y: float32): VkSampleLocationEXT =
  result = VkSampleLocationEXT(
    x: x,
    y: y,
  )

proc newVkSampleLocationsInfoEXT*(sType: VkStructureType, pNext: pointer = nil, sampleLocationsPerPixel: VkSampleCountFlagBits, sampleLocationGridSize: VkExtent2D, sampleLocationsCount: uint32, pSampleLocations: ptr VkSampleLocationEXT): VkSampleLocationsInfoEXT =
  result = VkSampleLocationsInfoEXT(
    sType: sType,
    pNext: pNext,
    sampleLocationsPerPixel: sampleLocationsPerPixel,
    sampleLocationGridSize: sampleLocationGridSize,
    sampleLocationsCount: sampleLocationsCount,
    pSampleLocations: pSampleLocations,
  )

proc newVkAttachmentSampleLocationsEXT*(attachmentIndex: uint32, sampleLocationsInfo: VkSampleLocationsInfoEXT): VkAttachmentSampleLocationsEXT =
  result = VkAttachmentSampleLocationsEXT(
    attachmentIndex: attachmentIndex,
    sampleLocationsInfo: sampleLocationsInfo,
  )

proc newVkSubpassSampleLocationsEXT*(subpassIndex: uint32, sampleLocationsInfo: VkSampleLocationsInfoEXT): VkSubpassSampleLocationsEXT =
  result = VkSubpassSampleLocationsEXT(
    subpassIndex: subpassIndex,
    sampleLocationsInfo: sampleLocationsInfo,
  )

proc newVkRenderPassSampleLocationsBeginInfoEXT*(sType: VkStructureType, pNext: pointer = nil, attachmentInitialSampleLocationsCount: uint32, pAttachmentInitialSampleLocations: ptr VkAttachmentSampleLocationsEXT, postSubpassSampleLocationsCount: uint32, pPostSubpassSampleLocations: ptr VkSubpassSampleLocationsEXT): VkRenderPassSampleLocationsBeginInfoEXT =
  result = VkRenderPassSampleLocationsBeginInfoEXT(
    sType: sType,
    pNext: pNext,
    attachmentInitialSampleLocationsCount: attachmentInitialSampleLocationsCount,
    pAttachmentInitialSampleLocations: pAttachmentInitialSampleLocations,
    postSubpassSampleLocationsCount: postSubpassSampleLocationsCount,
    pPostSubpassSampleLocations: pPostSubpassSampleLocations,
  )

proc newVkPipelineSampleLocationsStateCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, sampleLocationsEnable: VkBool32, sampleLocationsInfo: VkSampleLocationsInfoEXT): VkPipelineSampleLocationsStateCreateInfoEXT =
  result = VkPipelineSampleLocationsStateCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    sampleLocationsEnable: sampleLocationsEnable,
    sampleLocationsInfo: sampleLocationsInfo,
  )

proc newVkPhysicalDeviceSampleLocationsPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, sampleLocationSampleCounts: VkSampleCountFlags, maxSampleLocationGridSize: VkExtent2D, sampleLocationCoordinateRange: array[2, float32], sampleLocationSubPixelBits: uint32, variableSampleLocations: VkBool32): VkPhysicalDeviceSampleLocationsPropertiesEXT =
  result = VkPhysicalDeviceSampleLocationsPropertiesEXT(
    sType: sType,
    pNext: pNext,
    sampleLocationSampleCounts: sampleLocationSampleCounts,
    maxSampleLocationGridSize: maxSampleLocationGridSize,
    sampleLocationCoordinateRange: sampleLocationCoordinateRange,
    sampleLocationSubPixelBits: sampleLocationSubPixelBits,
    variableSampleLocations: variableSampleLocations,
  )

proc newVkMultisamplePropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, maxSampleLocationGridSize: VkExtent2D): VkMultisamplePropertiesEXT =
  result = VkMultisamplePropertiesEXT(
    sType: sType,
    pNext: pNext,
    maxSampleLocationGridSize: maxSampleLocationGridSize,
  )

proc newVkSamplerReductionModeCreateInfo*(sType: VkStructureType, pNext: pointer = nil, reductionMode: VkSamplerReductionMode): VkSamplerReductionModeCreateInfo =
  result = VkSamplerReductionModeCreateInfo(
    sType: sType,
    pNext: pNext,
    reductionMode: reductionMode,
  )

proc newVkPhysicalDeviceBlendOperationAdvancedFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, advancedBlendCoherentOperations: VkBool32): VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT =
  result = VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
    sType: sType,
    pNext: pNext,
    advancedBlendCoherentOperations: advancedBlendCoherentOperations,
  )

proc newVkPhysicalDeviceMultiDrawFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, multiDraw: VkBool32): VkPhysicalDeviceMultiDrawFeaturesEXT =
  result = VkPhysicalDeviceMultiDrawFeaturesEXT(
    sType: sType,
    pNext: pNext,
    multiDraw: multiDraw,
  )

proc newVkPhysicalDeviceBlendOperationAdvancedPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, advancedBlendMaxColorAttachments: uint32, advancedBlendIndependentBlend: VkBool32, advancedBlendNonPremultipliedSrcColor: VkBool32, advancedBlendNonPremultipliedDstColor: VkBool32, advancedBlendCorrelatedOverlap: VkBool32, advancedBlendAllOperations: VkBool32): VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT =
  result = VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    sType: sType,
    pNext: pNext,
    advancedBlendMaxColorAttachments: advancedBlendMaxColorAttachments,
    advancedBlendIndependentBlend: advancedBlendIndependentBlend,
    advancedBlendNonPremultipliedSrcColor: advancedBlendNonPremultipliedSrcColor,
    advancedBlendNonPremultipliedDstColor: advancedBlendNonPremultipliedDstColor,
    advancedBlendCorrelatedOverlap: advancedBlendCorrelatedOverlap,
    advancedBlendAllOperations: advancedBlendAllOperations,
  )

proc newVkPipelineColorBlendAdvancedStateCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, srcPremultiplied: VkBool32, dstPremultiplied: VkBool32, blendOverlap: VkBlendOverlapEXT): VkPipelineColorBlendAdvancedStateCreateInfoEXT =
  result = VkPipelineColorBlendAdvancedStateCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    srcPremultiplied: srcPremultiplied,
    dstPremultiplied: dstPremultiplied,
    blendOverlap: blendOverlap,
  )

proc newVkPhysicalDeviceInlineUniformBlockFeatures*(sType: VkStructureType, pNext: pointer = nil, inlineUniformBlock: VkBool32, descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32): VkPhysicalDeviceInlineUniformBlockFeatures =
  result = VkPhysicalDeviceInlineUniformBlockFeatures(
    sType: sType,
    pNext: pNext,
    inlineUniformBlock: inlineUniformBlock,
    descriptorBindingInlineUniformBlockUpdateAfterBind: descriptorBindingInlineUniformBlockUpdateAfterBind,
  )

proc newVkPhysicalDeviceInlineUniformBlockProperties*(sType: VkStructureType, pNext: pointer = nil, maxInlineUniformBlockSize: uint32, maxPerStageDescriptorInlineUniformBlocks: uint32, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: uint32, maxDescriptorSetInlineUniformBlocks: uint32, maxDescriptorSetUpdateAfterBindInlineUniformBlocks: uint32): VkPhysicalDeviceInlineUniformBlockProperties =
  result = VkPhysicalDeviceInlineUniformBlockProperties(
    sType: sType,
    pNext: pNext,
    maxInlineUniformBlockSize: maxInlineUniformBlockSize,
    maxPerStageDescriptorInlineUniformBlocks: maxPerStageDescriptorInlineUniformBlocks,
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks,
    maxDescriptorSetInlineUniformBlocks: maxDescriptorSetInlineUniformBlocks,
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: maxDescriptorSetUpdateAfterBindInlineUniformBlocks,
  )

proc newVkWriteDescriptorSetInlineUniformBlock*(sType: VkStructureType, pNext: pointer = nil, dataSize: uint32, pData: pointer = nil): VkWriteDescriptorSetInlineUniformBlock =
  result = VkWriteDescriptorSetInlineUniformBlock(
    sType: sType,
    pNext: pNext,
    dataSize: dataSize,
    pData: pData,
  )

proc newVkDescriptorPoolInlineUniformBlockCreateInfo*(sType: VkStructureType, pNext: pointer = nil, maxInlineUniformBlockBindings: uint32): VkDescriptorPoolInlineUniformBlockCreateInfo =
  result = VkDescriptorPoolInlineUniformBlockCreateInfo(
    sType: sType,
    pNext: pNext,
    maxInlineUniformBlockBindings: maxInlineUniformBlockBindings,
  )

proc newVkPipelineCoverageModulationStateCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, flags: VkPipelineCoverageModulationStateCreateFlagsNV = 0.VkPipelineCoverageModulationStateCreateFlagsNV, coverageModulationMode: VkCoverageModulationModeNV, coverageModulationTableEnable: VkBool32, coverageModulationTableCount: uint32, pCoverageModulationTable: ptr float32): VkPipelineCoverageModulationStateCreateInfoNV =
  result = VkPipelineCoverageModulationStateCreateInfoNV(
    sType: sType,
    pNext: pNext,
    flags: flags,
    coverageModulationMode: coverageModulationMode,
    coverageModulationTableEnable: coverageModulationTableEnable,
    coverageModulationTableCount: coverageModulationTableCount,
    pCoverageModulationTable: pCoverageModulationTable,
  )

proc newVkImageFormatListCreateInfo*(sType: VkStructureType, pNext: pointer = nil, viewFormatCount: uint32, pViewFormats: ptr VkFormat): VkImageFormatListCreateInfo =
  result = VkImageFormatListCreateInfo(
    sType: sType,
    pNext: pNext,
    viewFormatCount: viewFormatCount,
    pViewFormats: pViewFormats,
  )

proc newVkValidationCacheCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkValidationCacheCreateFlagsEXT = 0.VkValidationCacheCreateFlagsEXT, initialDataSize: uint, pInitialData: pointer = nil): VkValidationCacheCreateInfoEXT =
  result = VkValidationCacheCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    initialDataSize: initialDataSize,
    pInitialData: pInitialData,
  )

proc newVkShaderModuleValidationCacheCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, validationCache: VkValidationCacheEXT): VkShaderModuleValidationCacheCreateInfoEXT =
  result = VkShaderModuleValidationCacheCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    validationCache: validationCache,
  )

proc newVkPhysicalDeviceMaintenance3Properties*(sType: VkStructureType, pNext: pointer = nil, maxPerSetDescriptors: uint32, maxMemoryAllocationSize: VkDeviceSize): VkPhysicalDeviceMaintenance3Properties =
  result = VkPhysicalDeviceMaintenance3Properties(
    sType: sType,
    pNext: pNext,
    maxPerSetDescriptors: maxPerSetDescriptors,
    maxMemoryAllocationSize: maxMemoryAllocationSize,
  )

proc newVkPhysicalDeviceMaintenance4Features*(sType: VkStructureType, pNext: pointer = nil, maintenance4: VkBool32): VkPhysicalDeviceMaintenance4Features =
  result = VkPhysicalDeviceMaintenance4Features(
    sType: sType,
    pNext: pNext,
    maintenance4: maintenance4,
  )

proc newVkPhysicalDeviceMaintenance4Properties*(sType: VkStructureType, pNext: pointer = nil, maxBufferSize: VkDeviceSize): VkPhysicalDeviceMaintenance4Properties =
  result = VkPhysicalDeviceMaintenance4Properties(
    sType: sType,
    pNext: pNext,
    maxBufferSize: maxBufferSize,
  )

proc newVkPhysicalDeviceMaintenance5FeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, maintenance5: VkBool32): VkPhysicalDeviceMaintenance5FeaturesKHR =
  result = VkPhysicalDeviceMaintenance5FeaturesKHR(
    sType: sType,
    pNext: pNext,
    maintenance5: maintenance5,
  )

proc newVkPhysicalDeviceMaintenance5PropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, earlyFragmentMultisampleCoverageAfterSampleCounting: VkBool32, earlyFragmentSampleMaskTestBeforeSampleCounting: VkBool32, depthStencilSwizzleOneSupport: VkBool32, polygonModePointSize: VkBool32, nonStrictSinglePixelWideLinesUseParallelogram: VkBool32, nonStrictWideLinesUseParallelogram: VkBool32): VkPhysicalDeviceMaintenance5PropertiesKHR =
  result = VkPhysicalDeviceMaintenance5PropertiesKHR(
    sType: sType,
    pNext: pNext,
    earlyFragmentMultisampleCoverageAfterSampleCounting: earlyFragmentMultisampleCoverageAfterSampleCounting,
    earlyFragmentSampleMaskTestBeforeSampleCounting: earlyFragmentSampleMaskTestBeforeSampleCounting,
    depthStencilSwizzleOneSupport: depthStencilSwizzleOneSupport,
    polygonModePointSize: polygonModePointSize,
    nonStrictSinglePixelWideLinesUseParallelogram: nonStrictSinglePixelWideLinesUseParallelogram,
    nonStrictWideLinesUseParallelogram: nonStrictWideLinesUseParallelogram,
  )

proc newVkPhysicalDeviceMaintenance6FeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, maintenance6: VkBool32): VkPhysicalDeviceMaintenance6FeaturesKHR =
  result = VkPhysicalDeviceMaintenance6FeaturesKHR(
    sType: sType,
    pNext: pNext,
    maintenance6: maintenance6,
  )

proc newVkPhysicalDeviceMaintenance6PropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, blockTexelViewCompatibleMultipleLayers: VkBool32, maxCombinedImageSamplerDescriptorCount: uint32, fragmentShadingRateClampCombinerInputs: VkBool32): VkPhysicalDeviceMaintenance6PropertiesKHR =
  result = VkPhysicalDeviceMaintenance6PropertiesKHR(
    sType: sType,
    pNext: pNext,
    blockTexelViewCompatibleMultipleLayers: blockTexelViewCompatibleMultipleLayers,
    maxCombinedImageSamplerDescriptorCount: maxCombinedImageSamplerDescriptorCount,
    fragmentShadingRateClampCombinerInputs: fragmentShadingRateClampCombinerInputs,
  )

proc newVkRenderingAreaInfoKHR*(sType: VkStructureType, pNext: pointer = nil, viewMask: uint32, colorAttachmentCount: uint32, pColorAttachmentFormats: ptr VkFormat, depthAttachmentFormat: VkFormat, stencilAttachmentFormat: VkFormat): VkRenderingAreaInfoKHR =
  result = VkRenderingAreaInfoKHR(
    sType: sType,
    pNext: pNext,
    viewMask: viewMask,
    colorAttachmentCount: colorAttachmentCount,
    pColorAttachmentFormats: pColorAttachmentFormats,
    depthAttachmentFormat: depthAttachmentFormat,
    stencilAttachmentFormat: stencilAttachmentFormat,
  )

proc newVkDescriptorSetLayoutSupport*(sType: VkStructureType, pNext: pointer = nil, supported: VkBool32): VkDescriptorSetLayoutSupport =
  result = VkDescriptorSetLayoutSupport(
    sType: sType,
    pNext: pNext,
    supported: supported,
  )

proc newVkPhysicalDeviceShaderDrawParametersFeatures*(sType: VkStructureType, pNext: pointer = nil, shaderDrawParameters: VkBool32): VkPhysicalDeviceShaderDrawParametersFeatures =
  result = VkPhysicalDeviceShaderDrawParametersFeatures(
    sType: sType,
    pNext: pNext,
    shaderDrawParameters: shaderDrawParameters,
  )

proc newVkPhysicalDeviceShaderFloat16Int8Features*(sType: VkStructureType, pNext: pointer = nil, shaderFloat16: VkBool32, shaderInt8: VkBool32): VkPhysicalDeviceShaderFloat16Int8Features =
  result = VkPhysicalDeviceShaderFloat16Int8Features(
    sType: sType,
    pNext: pNext,
    shaderFloat16: shaderFloat16,
    shaderInt8: shaderInt8,
  )

proc newVkPhysicalDeviceFloatControlsProperties*(sType: VkStructureType, pNext: pointer = nil, denormBehaviorIndependence: VkShaderFloatControlsIndependence, roundingModeIndependence: VkShaderFloatControlsIndependence, shaderSignedZeroInfNanPreserveFloat16: VkBool32, shaderSignedZeroInfNanPreserveFloat32: VkBool32, shaderSignedZeroInfNanPreserveFloat64: VkBool32, shaderDenormPreserveFloat16: VkBool32, shaderDenormPreserveFloat32: VkBool32, shaderDenormPreserveFloat64: VkBool32, shaderDenormFlushToZeroFloat16: VkBool32, shaderDenormFlushToZeroFloat32: VkBool32, shaderDenormFlushToZeroFloat64: VkBool32, shaderRoundingModeRTEFloat16: VkBool32, shaderRoundingModeRTEFloat32: VkBool32, shaderRoundingModeRTEFloat64: VkBool32, shaderRoundingModeRTZFloat16: VkBool32, shaderRoundingModeRTZFloat32: VkBool32, shaderRoundingModeRTZFloat64: VkBool32): VkPhysicalDeviceFloatControlsProperties =
  result = VkPhysicalDeviceFloatControlsProperties(
    sType: sType,
    pNext: pNext,
    denormBehaviorIndependence: denormBehaviorIndependence,
    roundingModeIndependence: roundingModeIndependence,
    shaderSignedZeroInfNanPreserveFloat16: shaderSignedZeroInfNanPreserveFloat16,
    shaderSignedZeroInfNanPreserveFloat32: shaderSignedZeroInfNanPreserveFloat32,
    shaderSignedZeroInfNanPreserveFloat64: shaderSignedZeroInfNanPreserveFloat64,
    shaderDenormPreserveFloat16: shaderDenormPreserveFloat16,
    shaderDenormPreserveFloat32: shaderDenormPreserveFloat32,
    shaderDenormPreserveFloat64: shaderDenormPreserveFloat64,
    shaderDenormFlushToZeroFloat16: shaderDenormFlushToZeroFloat16,
    shaderDenormFlushToZeroFloat32: shaderDenormFlushToZeroFloat32,
    shaderDenormFlushToZeroFloat64: shaderDenormFlushToZeroFloat64,
    shaderRoundingModeRTEFloat16: shaderRoundingModeRTEFloat16,
    shaderRoundingModeRTEFloat32: shaderRoundingModeRTEFloat32,
    shaderRoundingModeRTEFloat64: shaderRoundingModeRTEFloat64,
    shaderRoundingModeRTZFloat16: shaderRoundingModeRTZFloat16,
    shaderRoundingModeRTZFloat32: shaderRoundingModeRTZFloat32,
    shaderRoundingModeRTZFloat64: shaderRoundingModeRTZFloat64,
  )

proc newVkPhysicalDeviceHostQueryResetFeatures*(sType: VkStructureType, pNext: pointer = nil, hostQueryReset: VkBool32): VkPhysicalDeviceHostQueryResetFeatures =
  result = VkPhysicalDeviceHostQueryResetFeatures(
    sType: sType,
    pNext: pNext,
    hostQueryReset: hostQueryReset,
  )

proc newVkNativeBufferUsage2ANDROID*(consumer: uint64, producer: uint64): VkNativeBufferUsage2ANDROID =
  result = VkNativeBufferUsage2ANDROID(
    consumer: consumer,
    producer: producer,
  )

proc newVkNativeBufferANDROID*(sType: VkStructureType, pNext: pointer = nil, handle: pointer = nil, stride: int, format: int, usage: int, usage2: VkNativeBufferUsage2ANDROID): VkNativeBufferANDROID =
  result = VkNativeBufferANDROID(
    sType: sType,
    pNext: pNext,
    handle: handle,
    stride: stride,
    format: format,
    usage: usage,
    usage2: usage2,
  )

proc newVkSwapchainImageCreateInfoANDROID*(sType: VkStructureType, pNext: pointer = nil, usage: VkSwapchainImageUsageFlagsANDROID): VkSwapchainImageCreateInfoANDROID =
  result = VkSwapchainImageCreateInfoANDROID(
    sType: sType,
    pNext: pNext,
    usage: usage,
  )

proc newVkPhysicalDevicePresentationPropertiesANDROID*(sType: VkStructureType, pNext: pointer = nil, sharedImage: VkBool32): VkPhysicalDevicePresentationPropertiesANDROID =
  result = VkPhysicalDevicePresentationPropertiesANDROID(
    sType: sType,
    pNext: pNext,
    sharedImage: sharedImage,
  )

proc newVkShaderResourceUsageAMD*(numUsedVgprs: uint32, numUsedSgprs: uint32, ldsSizePerLocalWorkGroup: uint32, ldsUsageSizeInBytes: uint, scratchMemUsageInBytes: uint): VkShaderResourceUsageAMD =
  result = VkShaderResourceUsageAMD(
    numUsedVgprs: numUsedVgprs,
    numUsedSgprs: numUsedSgprs,
    ldsSizePerLocalWorkGroup: ldsSizePerLocalWorkGroup,
    ldsUsageSizeInBytes: ldsUsageSizeInBytes,
    scratchMemUsageInBytes: scratchMemUsageInBytes,
  )

proc newVkShaderStatisticsInfoAMD*(shaderStageMask: VkShaderStageFlags, resourceUsage: VkShaderResourceUsageAMD, numPhysicalVgprs: uint32, numPhysicalSgprs: uint32, numAvailableVgprs: uint32, numAvailableSgprs: uint32, computeWorkGroupSize: array[3, uint32]): VkShaderStatisticsInfoAMD =
  result = VkShaderStatisticsInfoAMD(
    shaderStageMask: shaderStageMask,
    resourceUsage: resourceUsage,
    numPhysicalVgprs: numPhysicalVgprs,
    numPhysicalSgprs: numPhysicalSgprs,
    numAvailableVgprs: numAvailableVgprs,
    numAvailableSgprs: numAvailableSgprs,
    computeWorkGroupSize: computeWorkGroupSize,
  )

proc newVkDeviceQueueGlobalPriorityCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, globalPriority: VkQueueGlobalPriorityKHR): VkDeviceQueueGlobalPriorityCreateInfoKHR =
  result = VkDeviceQueueGlobalPriorityCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    globalPriority: globalPriority,
  )

proc newVkPhysicalDeviceGlobalPriorityQueryFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, globalPriorityQuery: VkBool32): VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR =
  result = VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR(
    sType: sType,
    pNext: pNext,
    globalPriorityQuery: globalPriorityQuery,
  )

proc newVkQueueFamilyGlobalPriorityPropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, priorityCount: uint32, priorities: array[VK_MAX_GLOBAL_PRIORITY_SIZE_KHR, VkQueueGlobalPriorityKHR]): VkQueueFamilyGlobalPriorityPropertiesKHR =
  result = VkQueueFamilyGlobalPriorityPropertiesKHR(
    sType: sType,
    pNext: pNext,
    priorityCount: priorityCount,
    priorities: priorities,
  )

proc newVkDebugUtilsObjectNameInfoEXT*(sType: VkStructureType, pNext: pointer = nil, objectType: VkObjectType, objectHandle: uint64, pObjectName: cstring): VkDebugUtilsObjectNameInfoEXT =
  result = VkDebugUtilsObjectNameInfoEXT(
    sType: sType,
    pNext: pNext,
    objectType: objectType,
    objectHandle: objectHandle,
    pObjectName: pObjectName,
  )

proc newVkDebugUtilsObjectTagInfoEXT*(sType: VkStructureType, pNext: pointer = nil, objectType: VkObjectType, objectHandle: uint64, tagName: uint64, tagSize: uint, pTag: pointer = nil): VkDebugUtilsObjectTagInfoEXT =
  result = VkDebugUtilsObjectTagInfoEXT(
    sType: sType,
    pNext: pNext,
    objectType: objectType,
    objectHandle: objectHandle,
    tagName: tagName,
    tagSize: tagSize,
    pTag: pTag,
  )

proc newVkDebugUtilsLabelEXT*(sType: VkStructureType, pNext: pointer = nil, pLabelName: cstring, color: array[4, float32]): VkDebugUtilsLabelEXT =
  result = VkDebugUtilsLabelEXT(
    sType: sType,
    pNext: pNext,
    pLabelName: pLabelName,
    color: color,
  )

proc newVkDebugUtilsMessengerCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkDebugUtilsMessengerCreateFlagsEXT = 0.VkDebugUtilsMessengerCreateFlagsEXT, messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT, messageType: VkDebugUtilsMessageTypeFlagsEXT, pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT, pUserData: pointer = nil): VkDebugUtilsMessengerCreateInfoEXT =
  result = VkDebugUtilsMessengerCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    messageSeverity: messageSeverity,
    messageType: messageType,
    pfnUserCallback: pfnUserCallback,
    pUserData: pUserData,
  )

proc newVkDebugUtilsMessengerCallbackDataEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkDebugUtilsMessengerCallbackDataFlagsEXT = 0.VkDebugUtilsMessengerCallbackDataFlagsEXT, pMessageIdName: cstring, messageIdNumber: int32, pMessage: cstring, queueLabelCount: uint32, pQueueLabels: ptr VkDebugUtilsLabelEXT, cmdBufLabelCount: uint32, pCmdBufLabels: ptr VkDebugUtilsLabelEXT, objectCount: uint32, pObjects: ptr VkDebugUtilsObjectNameInfoEXT): VkDebugUtilsMessengerCallbackDataEXT =
  result = VkDebugUtilsMessengerCallbackDataEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    pMessageIdName: pMessageIdName,
    messageIdNumber: messageIdNumber,
    pMessage: pMessage,
    queueLabelCount: queueLabelCount,
    pQueueLabels: pQueueLabels,
    cmdBufLabelCount: cmdBufLabelCount,
    pCmdBufLabels: pCmdBufLabels,
    objectCount: objectCount,
    pObjects: pObjects,
  )

proc newVkPhysicalDeviceDeviceMemoryReportFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, deviceMemoryReport: VkBool32): VkPhysicalDeviceDeviceMemoryReportFeaturesEXT =
  result = VkPhysicalDeviceDeviceMemoryReportFeaturesEXT(
    sType: sType,
    pNext: pNext,
    deviceMemoryReport: deviceMemoryReport,
  )

proc newVkDeviceDeviceMemoryReportCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkDeviceMemoryReportFlagsEXT = 0.VkDeviceMemoryReportFlagsEXT, pfnUserCallback: PFN_vkDeviceMemoryReportCallbackEXT, pUserData: pointer = nil): VkDeviceDeviceMemoryReportCreateInfoEXT =
  result = VkDeviceDeviceMemoryReportCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    pfnUserCallback: pfnUserCallback,
    pUserData: pUserData,
  )

proc newVkDeviceMemoryReportCallbackDataEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkDeviceMemoryReportFlagsEXT = 0.VkDeviceMemoryReportFlagsEXT, `type`: VkDeviceMemoryReportEventTypeEXT, memoryObjectId: uint64, size: VkDeviceSize, objectType: VkObjectType, objectHandle: uint64, heapIndex: uint32): VkDeviceMemoryReportCallbackDataEXT =
  result = VkDeviceMemoryReportCallbackDataEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    `type`: `type`,
    memoryObjectId: memoryObjectId,
    size: size,
    objectType: objectType,
    objectHandle: objectHandle,
    heapIndex: heapIndex,
  )

proc newVkImportMemoryHostPointerInfoEXT*(sType: VkStructureType, pNext: pointer = nil, handleType: VkExternalMemoryHandleTypeFlagBits, pHostPointer: pointer = nil): VkImportMemoryHostPointerInfoEXT =
  result = VkImportMemoryHostPointerInfoEXT(
    sType: sType,
    pNext: pNext,
    handleType: handleType,
    pHostPointer: pHostPointer,
  )

proc newVkMemoryHostPointerPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, memoryTypeBits: uint32): VkMemoryHostPointerPropertiesEXT =
  result = VkMemoryHostPointerPropertiesEXT(
    sType: sType,
    pNext: pNext,
    memoryTypeBits: memoryTypeBits,
  )

proc newVkPhysicalDeviceExternalMemoryHostPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, minImportedHostPointerAlignment: VkDeviceSize): VkPhysicalDeviceExternalMemoryHostPropertiesEXT =
  result = VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    sType: sType,
    pNext: pNext,
    minImportedHostPointerAlignment: minImportedHostPointerAlignment,
  )

proc newVkPhysicalDeviceConservativeRasterizationPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, primitiveOverestimationSize: float32, maxExtraPrimitiveOverestimationSize: float32, extraPrimitiveOverestimationSizeGranularity: float32, primitiveUnderestimation: VkBool32, conservativePointAndLineRasterization: VkBool32, degenerateTrianglesRasterized: VkBool32, degenerateLinesRasterized: VkBool32, fullyCoveredFragmentShaderInputVariable: VkBool32, conservativeRasterizationPostDepthCoverage: VkBool32): VkPhysicalDeviceConservativeRasterizationPropertiesEXT =
  result = VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
    sType: sType,
    pNext: pNext,
    primitiveOverestimationSize: primitiveOverestimationSize,
    maxExtraPrimitiveOverestimationSize: maxExtraPrimitiveOverestimationSize,
    extraPrimitiveOverestimationSizeGranularity: extraPrimitiveOverestimationSizeGranularity,
    primitiveUnderestimation: primitiveUnderestimation,
    conservativePointAndLineRasterization: conservativePointAndLineRasterization,
    degenerateTrianglesRasterized: degenerateTrianglesRasterized,
    degenerateLinesRasterized: degenerateLinesRasterized,
    fullyCoveredFragmentShaderInputVariable: fullyCoveredFragmentShaderInputVariable,
    conservativeRasterizationPostDepthCoverage: conservativeRasterizationPostDepthCoverage,
  )

proc newVkCalibratedTimestampInfoKHR*(sType: VkStructureType, pNext: pointer = nil, timeDomain: VkTimeDomainKHR): VkCalibratedTimestampInfoKHR =
  result = VkCalibratedTimestampInfoKHR(
    sType: sType,
    pNext: pNext,
    timeDomain: timeDomain,
  )

proc newVkPhysicalDeviceShaderCorePropertiesAMD*(sType: VkStructureType, pNext: pointer = nil, shaderEngineCount: uint32, shaderArraysPerEngineCount: uint32, computeUnitsPerShaderArray: uint32, simdPerComputeUnit: uint32, wavefrontsPerSimd: uint32, wavefrontSize: uint32, sgprsPerSimd: uint32, minSgprAllocation: uint32, maxSgprAllocation: uint32, sgprAllocationGranularity: uint32, vgprsPerSimd: uint32, minVgprAllocation: uint32, maxVgprAllocation: uint32, vgprAllocationGranularity: uint32): VkPhysicalDeviceShaderCorePropertiesAMD =
  result = VkPhysicalDeviceShaderCorePropertiesAMD(
    sType: sType,
    pNext: pNext,
    shaderEngineCount: shaderEngineCount,
    shaderArraysPerEngineCount: shaderArraysPerEngineCount,
    computeUnitsPerShaderArray: computeUnitsPerShaderArray,
    simdPerComputeUnit: simdPerComputeUnit,
    wavefrontsPerSimd: wavefrontsPerSimd,
    wavefrontSize: wavefrontSize,
    sgprsPerSimd: sgprsPerSimd,
    minSgprAllocation: minSgprAllocation,
    maxSgprAllocation: maxSgprAllocation,
    sgprAllocationGranularity: sgprAllocationGranularity,
    vgprsPerSimd: vgprsPerSimd,
    minVgprAllocation: minVgprAllocation,
    maxVgprAllocation: maxVgprAllocation,
    vgprAllocationGranularity: vgprAllocationGranularity,
  )

proc newVkPhysicalDeviceShaderCoreProperties2AMD*(sType: VkStructureType, pNext: pointer = nil, shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD, activeComputeUnitCount: uint32): VkPhysicalDeviceShaderCoreProperties2AMD =
  result = VkPhysicalDeviceShaderCoreProperties2AMD(
    sType: sType,
    pNext: pNext,
    shaderCoreFeatures: shaderCoreFeatures,
    activeComputeUnitCount: activeComputeUnitCount,
  )

proc newVkPipelineRasterizationConservativeStateCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT = 0.VkPipelineRasterizationConservativeStateCreateFlagsEXT, conservativeRasterizationMode: VkConservativeRasterizationModeEXT, extraPrimitiveOverestimationSize: float32): VkPipelineRasterizationConservativeStateCreateInfoEXT =
  result = VkPipelineRasterizationConservativeStateCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    conservativeRasterizationMode: conservativeRasterizationMode,
    extraPrimitiveOverestimationSize: extraPrimitiveOverestimationSize,
  )

proc newVkPhysicalDeviceDescriptorIndexingFeatures*(sType: VkStructureType, pNext: pointer = nil, shaderInputAttachmentArrayDynamicIndexing: VkBool32, shaderUniformTexelBufferArrayDynamicIndexing: VkBool32, shaderStorageTexelBufferArrayDynamicIndexing: VkBool32, shaderUniformBufferArrayNonUniformIndexing: VkBool32, shaderSampledImageArrayNonUniformIndexing: VkBool32, shaderStorageBufferArrayNonUniformIndexing: VkBool32, shaderStorageImageArrayNonUniformIndexing: VkBool32, shaderInputAttachmentArrayNonUniformIndexing: VkBool32, shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32, shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32, descriptorBindingUniformBufferUpdateAfterBind: VkBool32, descriptorBindingSampledImageUpdateAfterBind: VkBool32, descriptorBindingStorageImageUpdateAfterBind: VkBool32, descriptorBindingStorageBufferUpdateAfterBind: VkBool32, descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32, descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32, descriptorBindingUpdateUnusedWhilePending: VkBool32, descriptorBindingPartiallyBound: VkBool32, descriptorBindingVariableDescriptorCount: VkBool32, runtimeDescriptorArray: VkBool32): VkPhysicalDeviceDescriptorIndexingFeatures =
  result = VkPhysicalDeviceDescriptorIndexingFeatures(
    sType: sType,
    pNext: pNext,
    shaderInputAttachmentArrayDynamicIndexing: shaderInputAttachmentArrayDynamicIndexing,
    shaderUniformTexelBufferArrayDynamicIndexing: shaderUniformTexelBufferArrayDynamicIndexing,
    shaderStorageTexelBufferArrayDynamicIndexing: shaderStorageTexelBufferArrayDynamicIndexing,
    shaderUniformBufferArrayNonUniformIndexing: shaderUniformBufferArrayNonUniformIndexing,
    shaderSampledImageArrayNonUniformIndexing: shaderSampledImageArrayNonUniformIndexing,
    shaderStorageBufferArrayNonUniformIndexing: shaderStorageBufferArrayNonUniformIndexing,
    shaderStorageImageArrayNonUniformIndexing: shaderStorageImageArrayNonUniformIndexing,
    shaderInputAttachmentArrayNonUniformIndexing: shaderInputAttachmentArrayNonUniformIndexing,
    shaderUniformTexelBufferArrayNonUniformIndexing: shaderUniformTexelBufferArrayNonUniformIndexing,
    shaderStorageTexelBufferArrayNonUniformIndexing: shaderStorageTexelBufferArrayNonUniformIndexing,
    descriptorBindingUniformBufferUpdateAfterBind: descriptorBindingUniformBufferUpdateAfterBind,
    descriptorBindingSampledImageUpdateAfterBind: descriptorBindingSampledImageUpdateAfterBind,
    descriptorBindingStorageImageUpdateAfterBind: descriptorBindingStorageImageUpdateAfterBind,
    descriptorBindingStorageBufferUpdateAfterBind: descriptorBindingStorageBufferUpdateAfterBind,
    descriptorBindingUniformTexelBufferUpdateAfterBind: descriptorBindingUniformTexelBufferUpdateAfterBind,
    descriptorBindingStorageTexelBufferUpdateAfterBind: descriptorBindingStorageTexelBufferUpdateAfterBind,
    descriptorBindingUpdateUnusedWhilePending: descriptorBindingUpdateUnusedWhilePending,
    descriptorBindingPartiallyBound: descriptorBindingPartiallyBound,
    descriptorBindingVariableDescriptorCount: descriptorBindingVariableDescriptorCount,
    runtimeDescriptorArray: runtimeDescriptorArray,
  )

proc newVkPhysicalDeviceDescriptorIndexingProperties*(sType: VkStructureType, pNext: pointer = nil, maxUpdateAfterBindDescriptorsInAllPools: uint32, shaderUniformBufferArrayNonUniformIndexingNative: VkBool32, shaderSampledImageArrayNonUniformIndexingNative: VkBool32, shaderStorageBufferArrayNonUniformIndexingNative: VkBool32, shaderStorageImageArrayNonUniformIndexingNative: VkBool32, shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32, robustBufferAccessUpdateAfterBind: VkBool32, quadDivergentImplicitLod: VkBool32, maxPerStageDescriptorUpdateAfterBindSamplers: uint32, maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32, maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32, maxPerStageDescriptorUpdateAfterBindSampledImages: uint32, maxPerStageDescriptorUpdateAfterBindStorageImages: uint32, maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32, maxPerStageUpdateAfterBindResources: uint32, maxDescriptorSetUpdateAfterBindSamplers: uint32, maxDescriptorSetUpdateAfterBindUniformBuffers: uint32, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32, maxDescriptorSetUpdateAfterBindStorageBuffers: uint32, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32, maxDescriptorSetUpdateAfterBindSampledImages: uint32, maxDescriptorSetUpdateAfterBindStorageImages: uint32, maxDescriptorSetUpdateAfterBindInputAttachments: uint32): VkPhysicalDeviceDescriptorIndexingProperties =
  result = VkPhysicalDeviceDescriptorIndexingProperties(
    sType: sType,
    pNext: pNext,
    maxUpdateAfterBindDescriptorsInAllPools: maxUpdateAfterBindDescriptorsInAllPools,
    shaderUniformBufferArrayNonUniformIndexingNative: shaderUniformBufferArrayNonUniformIndexingNative,
    shaderSampledImageArrayNonUniformIndexingNative: shaderSampledImageArrayNonUniformIndexingNative,
    shaderStorageBufferArrayNonUniformIndexingNative: shaderStorageBufferArrayNonUniformIndexingNative,
    shaderStorageImageArrayNonUniformIndexingNative: shaderStorageImageArrayNonUniformIndexingNative,
    shaderInputAttachmentArrayNonUniformIndexingNative: shaderInputAttachmentArrayNonUniformIndexingNative,
    robustBufferAccessUpdateAfterBind: robustBufferAccessUpdateAfterBind,
    quadDivergentImplicitLod: quadDivergentImplicitLod,
    maxPerStageDescriptorUpdateAfterBindSamplers: maxPerStageDescriptorUpdateAfterBindSamplers,
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: maxPerStageDescriptorUpdateAfterBindUniformBuffers,
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: maxPerStageDescriptorUpdateAfterBindStorageBuffers,
    maxPerStageDescriptorUpdateAfterBindSampledImages: maxPerStageDescriptorUpdateAfterBindSampledImages,
    maxPerStageDescriptorUpdateAfterBindStorageImages: maxPerStageDescriptorUpdateAfterBindStorageImages,
    maxPerStageDescriptorUpdateAfterBindInputAttachments: maxPerStageDescriptorUpdateAfterBindInputAttachments,
    maxPerStageUpdateAfterBindResources: maxPerStageUpdateAfterBindResources,
    maxDescriptorSetUpdateAfterBindSamplers: maxDescriptorSetUpdateAfterBindSamplers,
    maxDescriptorSetUpdateAfterBindUniformBuffers: maxDescriptorSetUpdateAfterBindUniformBuffers,
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: maxDescriptorSetUpdateAfterBindUniformBuffersDynamic,
    maxDescriptorSetUpdateAfterBindStorageBuffers: maxDescriptorSetUpdateAfterBindStorageBuffers,
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: maxDescriptorSetUpdateAfterBindStorageBuffersDynamic,
    maxDescriptorSetUpdateAfterBindSampledImages: maxDescriptorSetUpdateAfterBindSampledImages,
    maxDescriptorSetUpdateAfterBindStorageImages: maxDescriptorSetUpdateAfterBindStorageImages,
    maxDescriptorSetUpdateAfterBindInputAttachments: maxDescriptorSetUpdateAfterBindInputAttachments,
  )

proc newVkDescriptorSetLayoutBindingFlagsCreateInfo*(sType: VkStructureType, pNext: pointer = nil, bindingCount: uint32, pBindingFlags: ptr VkDescriptorBindingFlags): VkDescriptorSetLayoutBindingFlagsCreateInfo =
  result = VkDescriptorSetLayoutBindingFlagsCreateInfo(
    sType: sType,
    pNext: pNext,
    bindingCount: bindingCount,
    pBindingFlags: pBindingFlags,
  )

proc newVkDescriptorSetVariableDescriptorCountAllocateInfo*(sType: VkStructureType, pNext: pointer = nil, descriptorSetCount: uint32, pDescriptorCounts: ptr uint32): VkDescriptorSetVariableDescriptorCountAllocateInfo =
  result = VkDescriptorSetVariableDescriptorCountAllocateInfo(
    sType: sType,
    pNext: pNext,
    descriptorSetCount: descriptorSetCount,
    pDescriptorCounts: pDescriptorCounts,
  )

proc newVkDescriptorSetVariableDescriptorCountLayoutSupport*(sType: VkStructureType, pNext: pointer = nil, maxVariableDescriptorCount: uint32): VkDescriptorSetVariableDescriptorCountLayoutSupport =
  result = VkDescriptorSetVariableDescriptorCountLayoutSupport(
    sType: sType,
    pNext: pNext,
    maxVariableDescriptorCount: maxVariableDescriptorCount,
  )

proc newVkAttachmentDescription2*(sType: VkStructureType, pNext: pointer = nil, flags: VkAttachmentDescriptionFlags = 0.VkAttachmentDescriptionFlags, format: VkFormat, samples: VkSampleCountFlagBits, loadOp: VkAttachmentLoadOp, storeOp: VkAttachmentStoreOp, stencilLoadOp: VkAttachmentLoadOp, stencilStoreOp: VkAttachmentStoreOp, initialLayout: VkImageLayout, finalLayout: VkImageLayout): VkAttachmentDescription2 =
  result = VkAttachmentDescription2(
    sType: sType,
    pNext: pNext,
    flags: flags,
    format: format,
    samples: samples,
    loadOp: loadOp,
    storeOp: storeOp,
    stencilLoadOp: stencilLoadOp,
    stencilStoreOp: stencilStoreOp,
    initialLayout: initialLayout,
    finalLayout: finalLayout,
  )

proc newVkAttachmentReference2*(sType: VkStructureType, pNext: pointer = nil, attachment: uint32, layout: VkImageLayout, aspectMask: VkImageAspectFlags): VkAttachmentReference2 =
  result = VkAttachmentReference2(
    sType: sType,
    pNext: pNext,
    attachment: attachment,
    layout: layout,
    aspectMask: aspectMask,
  )

proc newVkSubpassDescription2*(sType: VkStructureType, pNext: pointer = nil, flags: VkSubpassDescriptionFlags = 0.VkSubpassDescriptionFlags, pipelineBindPoint: VkPipelineBindPoint, viewMask: uint32, inputAttachmentCount: uint32, pInputAttachments: ptr VkAttachmentReference2, colorAttachmentCount: uint32, pColorAttachments: ptr VkAttachmentReference2, pResolveAttachments: ptr VkAttachmentReference2, pDepthStencilAttachment: ptr VkAttachmentReference2, preserveAttachmentCount: uint32, pPreserveAttachments: ptr uint32): VkSubpassDescription2 =
  result = VkSubpassDescription2(
    sType: sType,
    pNext: pNext,
    flags: flags,
    pipelineBindPoint: pipelineBindPoint,
    viewMask: viewMask,
    inputAttachmentCount: inputAttachmentCount,
    pInputAttachments: pInputAttachments,
    colorAttachmentCount: colorAttachmentCount,
    pColorAttachments: pColorAttachments,
    pResolveAttachments: pResolveAttachments,
    pDepthStencilAttachment: pDepthStencilAttachment,
    preserveAttachmentCount: preserveAttachmentCount,
    pPreserveAttachments: pPreserveAttachments,
  )

proc newVkSubpassDependency2*(sType: VkStructureType, pNext: pointer = nil, srcSubpass: uint32, dstSubpass: uint32, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, srcAccessMask: VkAccessFlags, dstAccessMask: VkAccessFlags, dependencyFlags: VkDependencyFlags, viewOffset: int32): VkSubpassDependency2 =
  result = VkSubpassDependency2(
    sType: sType,
    pNext: pNext,
    srcSubpass: srcSubpass,
    dstSubpass: dstSubpass,
    srcStageMask: srcStageMask,
    dstStageMask: dstStageMask,
    srcAccessMask: srcAccessMask,
    dstAccessMask: dstAccessMask,
    dependencyFlags: dependencyFlags,
    viewOffset: viewOffset,
  )

proc newVkRenderPassCreateInfo2*(sType: VkStructureType, pNext: pointer = nil, flags: VkRenderPassCreateFlags = 0.VkRenderPassCreateFlags, attachmentCount: uint32, pAttachments: ptr VkAttachmentDescription2, subpassCount: uint32, pSubpasses: ptr VkSubpassDescription2, dependencyCount: uint32, pDependencies: ptr VkSubpassDependency2, correlatedViewMaskCount: uint32, pCorrelatedViewMasks: ptr uint32): VkRenderPassCreateInfo2 =
  result = VkRenderPassCreateInfo2(
    sType: sType,
    pNext: pNext,
    flags: flags,
    attachmentCount: attachmentCount,
    pAttachments: pAttachments,
    subpassCount: subpassCount,
    pSubpasses: pSubpasses,
    dependencyCount: dependencyCount,
    pDependencies: pDependencies,
    correlatedViewMaskCount: correlatedViewMaskCount,
    pCorrelatedViewMasks: pCorrelatedViewMasks,
  )

proc newVkSubpassBeginInfo*(sType: VkStructureType, pNext: pointer = nil, contents: VkSubpassContents): VkSubpassBeginInfo =
  result = VkSubpassBeginInfo(
    sType: sType,
    pNext: pNext,
    contents: contents,
  )

proc newVkSubpassEndInfo*(sType: VkStructureType, pNext: pointer = nil): VkSubpassEndInfo =
  result = VkSubpassEndInfo(
    sType: sType,
    pNext: pNext,
  )

proc newVkPhysicalDeviceTimelineSemaphoreFeatures*(sType: VkStructureType, pNext: pointer = nil, timelineSemaphore: VkBool32): VkPhysicalDeviceTimelineSemaphoreFeatures =
  result = VkPhysicalDeviceTimelineSemaphoreFeatures(
    sType: sType,
    pNext: pNext,
    timelineSemaphore: timelineSemaphore,
  )

proc newVkPhysicalDeviceTimelineSemaphoreProperties*(sType: VkStructureType, pNext: pointer = nil, maxTimelineSemaphoreValueDifference: uint64): VkPhysicalDeviceTimelineSemaphoreProperties =
  result = VkPhysicalDeviceTimelineSemaphoreProperties(
    sType: sType,
    pNext: pNext,
    maxTimelineSemaphoreValueDifference: maxTimelineSemaphoreValueDifference,
  )

proc newVkSemaphoreTypeCreateInfo*(sType: VkStructureType, pNext: pointer = nil, semaphoreType: VkSemaphoreType, initialValue: uint64): VkSemaphoreTypeCreateInfo =
  result = VkSemaphoreTypeCreateInfo(
    sType: sType,
    pNext: pNext,
    semaphoreType: semaphoreType,
    initialValue: initialValue,
  )

proc newVkTimelineSemaphoreSubmitInfo*(sType: VkStructureType, pNext: pointer = nil, waitSemaphoreValueCount: uint32, pWaitSemaphoreValues: ptr uint64, signalSemaphoreValueCount: uint32, pSignalSemaphoreValues: ptr uint64): VkTimelineSemaphoreSubmitInfo =
  result = VkTimelineSemaphoreSubmitInfo(
    sType: sType,
    pNext: pNext,
    waitSemaphoreValueCount: waitSemaphoreValueCount,
    pWaitSemaphoreValues: pWaitSemaphoreValues,
    signalSemaphoreValueCount: signalSemaphoreValueCount,
    pSignalSemaphoreValues: pSignalSemaphoreValues,
  )

proc newVkSemaphoreWaitInfo*(sType: VkStructureType, pNext: pointer = nil, flags: VkSemaphoreWaitFlags = 0.VkSemaphoreWaitFlags, semaphoreCount: uint32, pSemaphores: ptr VkSemaphore, pValues: ptr uint64): VkSemaphoreWaitInfo =
  result = VkSemaphoreWaitInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    semaphoreCount: semaphoreCount,
    pSemaphores: pSemaphores,
    pValues: pValues,
  )

proc newVkSemaphoreSignalInfo*(sType: VkStructureType, pNext: pointer = nil, semaphore: VkSemaphore, value: uint64): VkSemaphoreSignalInfo =
  result = VkSemaphoreSignalInfo(
    sType: sType,
    pNext: pNext,
    semaphore: semaphore,
    value: value,
  )

proc newVkVertexInputBindingDivisorDescriptionKHR*(binding: uint32, divisor: uint32): VkVertexInputBindingDivisorDescriptionKHR =
  result = VkVertexInputBindingDivisorDescriptionKHR(
    binding: binding,
    divisor: divisor,
  )

proc newVkPipelineVertexInputDivisorStateCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, vertexBindingDivisorCount: uint32, pVertexBindingDivisors: ptr VkVertexInputBindingDivisorDescriptionKHR): VkPipelineVertexInputDivisorStateCreateInfoKHR =
  result = VkPipelineVertexInputDivisorStateCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    vertexBindingDivisorCount: vertexBindingDivisorCount,
    pVertexBindingDivisors: pVertexBindingDivisors,
  )

proc newVkPhysicalDeviceVertexAttributeDivisorPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, maxVertexAttribDivisor: uint32): VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT =
  result = VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    sType: sType,
    pNext: pNext,
    maxVertexAttribDivisor: maxVertexAttribDivisor,
  )

proc newVkPhysicalDeviceVertexAttributeDivisorPropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, maxVertexAttribDivisor: uint32, supportsNonZeroFirstInstance: VkBool32): VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR =
  result = VkPhysicalDeviceVertexAttributeDivisorPropertiesKHR(
    sType: sType,
    pNext: pNext,
    maxVertexAttribDivisor: maxVertexAttribDivisor,
    supportsNonZeroFirstInstance: supportsNonZeroFirstInstance,
  )

proc newVkPhysicalDevicePCIBusInfoPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, pciDomain: uint32, pciBus: uint32, pciDevice: uint32, pciFunction: uint32): VkPhysicalDevicePCIBusInfoPropertiesEXT =
  result = VkPhysicalDevicePCIBusInfoPropertiesEXT(
    sType: sType,
    pNext: pNext,
    pciDomain: pciDomain,
    pciBus: pciBus,
    pciDevice: pciDevice,
    pciFunction: pciFunction,
  )

proc newVkImportAndroidHardwareBufferInfoANDROID*(sType: VkStructureType, pNext: pointer = nil, buffer: ptr AHardwareBuffer): VkImportAndroidHardwareBufferInfoANDROID =
  result = VkImportAndroidHardwareBufferInfoANDROID(
    sType: sType,
    pNext: pNext,
    buffer: buffer,
  )

proc newVkAndroidHardwareBufferUsageANDROID*(sType: VkStructureType, pNext: pointer = nil, androidHardwareBufferUsage: uint64): VkAndroidHardwareBufferUsageANDROID =
  result = VkAndroidHardwareBufferUsageANDROID(
    sType: sType,
    pNext: pNext,
    androidHardwareBufferUsage: androidHardwareBufferUsage,
  )

proc newVkAndroidHardwareBufferPropertiesANDROID*(sType: VkStructureType, pNext: pointer = nil, allocationSize: VkDeviceSize, memoryTypeBits: uint32): VkAndroidHardwareBufferPropertiesANDROID =
  result = VkAndroidHardwareBufferPropertiesANDROID(
    sType: sType,
    pNext: pNext,
    allocationSize: allocationSize,
    memoryTypeBits: memoryTypeBits,
  )

proc newVkMemoryGetAndroidHardwareBufferInfoANDROID*(sType: VkStructureType, pNext: pointer = nil, memory: VkDeviceMemory): VkMemoryGetAndroidHardwareBufferInfoANDROID =
  result = VkMemoryGetAndroidHardwareBufferInfoANDROID(
    sType: sType,
    pNext: pNext,
    memory: memory,
  )

proc newVkAndroidHardwareBufferFormatPropertiesANDROID*(sType: VkStructureType, pNext: pointer = nil, format: VkFormat, externalFormat: uint64, formatFeatures: VkFormatFeatureFlags, samplerYcbcrConversionComponents: VkComponentMapping, suggestedYcbcrModel: VkSamplerYcbcrModelConversion, suggestedYcbcrRange: VkSamplerYcbcrRange, suggestedXChromaOffset: VkChromaLocation, suggestedYChromaOffset: VkChromaLocation): VkAndroidHardwareBufferFormatPropertiesANDROID =
  result = VkAndroidHardwareBufferFormatPropertiesANDROID(
    sType: sType,
    pNext: pNext,
    format: format,
    externalFormat: externalFormat,
    formatFeatures: formatFeatures,
    samplerYcbcrConversionComponents: samplerYcbcrConversionComponents,
    suggestedYcbcrModel: suggestedYcbcrModel,
    suggestedYcbcrRange: suggestedYcbcrRange,
    suggestedXChromaOffset: suggestedXChromaOffset,
    suggestedYChromaOffset: suggestedYChromaOffset,
  )

proc newVkCommandBufferInheritanceConditionalRenderingInfoEXT*(sType: VkStructureType, pNext: pointer = nil, conditionalRenderingEnable: VkBool32): VkCommandBufferInheritanceConditionalRenderingInfoEXT =
  result = VkCommandBufferInheritanceConditionalRenderingInfoEXT(
    sType: sType,
    pNext: pNext,
    conditionalRenderingEnable: conditionalRenderingEnable,
  )

proc newVkExternalFormatANDROID*(sType: VkStructureType, pNext: pointer = nil, externalFormat: uint64): VkExternalFormatANDROID =
  result = VkExternalFormatANDROID(
    sType: sType,
    pNext: pNext,
    externalFormat: externalFormat,
  )

proc newVkPhysicalDevice8BitStorageFeatures*(sType: VkStructureType, pNext: pointer = nil, storageBuffer8BitAccess: VkBool32, uniformAndStorageBuffer8BitAccess: VkBool32, storagePushConstant8: VkBool32): VkPhysicalDevice8BitStorageFeatures =
  result = VkPhysicalDevice8BitStorageFeatures(
    sType: sType,
    pNext: pNext,
    storageBuffer8BitAccess: storageBuffer8BitAccess,
    uniformAndStorageBuffer8BitAccess: uniformAndStorageBuffer8BitAccess,
    storagePushConstant8: storagePushConstant8,
  )

proc newVkPhysicalDeviceConditionalRenderingFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, conditionalRendering: VkBool32, inheritedConditionalRendering: VkBool32): VkPhysicalDeviceConditionalRenderingFeaturesEXT =
  result = VkPhysicalDeviceConditionalRenderingFeaturesEXT(
    sType: sType,
    pNext: pNext,
    conditionalRendering: conditionalRendering,
    inheritedConditionalRendering: inheritedConditionalRendering,
  )

proc newVkPhysicalDeviceVulkanMemoryModelFeatures*(sType: VkStructureType, pNext: pointer = nil, vulkanMemoryModel: VkBool32, vulkanMemoryModelDeviceScope: VkBool32, vulkanMemoryModelAvailabilityVisibilityChains: VkBool32): VkPhysicalDeviceVulkanMemoryModelFeatures =
  result = VkPhysicalDeviceVulkanMemoryModelFeatures(
    sType: sType,
    pNext: pNext,
    vulkanMemoryModel: vulkanMemoryModel,
    vulkanMemoryModelDeviceScope: vulkanMemoryModelDeviceScope,
    vulkanMemoryModelAvailabilityVisibilityChains: vulkanMemoryModelAvailabilityVisibilityChains,
  )

proc newVkPhysicalDeviceShaderAtomicInt64Features*(sType: VkStructureType, pNext: pointer = nil, shaderBufferInt64Atomics: VkBool32, shaderSharedInt64Atomics: VkBool32): VkPhysicalDeviceShaderAtomicInt64Features =
  result = VkPhysicalDeviceShaderAtomicInt64Features(
    sType: sType,
    pNext: pNext,
    shaderBufferInt64Atomics: shaderBufferInt64Atomics,
    shaderSharedInt64Atomics: shaderSharedInt64Atomics,
  )

proc newVkPhysicalDeviceShaderAtomicFloatFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, shaderBufferFloat32Atomics: VkBool32, shaderBufferFloat32AtomicAdd: VkBool32, shaderBufferFloat64Atomics: VkBool32, shaderBufferFloat64AtomicAdd: VkBool32, shaderSharedFloat32Atomics: VkBool32, shaderSharedFloat32AtomicAdd: VkBool32, shaderSharedFloat64Atomics: VkBool32, shaderSharedFloat64AtomicAdd: VkBool32, shaderImageFloat32Atomics: VkBool32, shaderImageFloat32AtomicAdd: VkBool32, sparseImageFloat32Atomics: VkBool32, sparseImageFloat32AtomicAdd: VkBool32): VkPhysicalDeviceShaderAtomicFloatFeaturesEXT =
  result = VkPhysicalDeviceShaderAtomicFloatFeaturesEXT(
    sType: sType,
    pNext: pNext,
    shaderBufferFloat32Atomics: shaderBufferFloat32Atomics,
    shaderBufferFloat32AtomicAdd: shaderBufferFloat32AtomicAdd,
    shaderBufferFloat64Atomics: shaderBufferFloat64Atomics,
    shaderBufferFloat64AtomicAdd: shaderBufferFloat64AtomicAdd,
    shaderSharedFloat32Atomics: shaderSharedFloat32Atomics,
    shaderSharedFloat32AtomicAdd: shaderSharedFloat32AtomicAdd,
    shaderSharedFloat64Atomics: shaderSharedFloat64Atomics,
    shaderSharedFloat64AtomicAdd: shaderSharedFloat64AtomicAdd,
    shaderImageFloat32Atomics: shaderImageFloat32Atomics,
    shaderImageFloat32AtomicAdd: shaderImageFloat32AtomicAdd,
    sparseImageFloat32Atomics: sparseImageFloat32Atomics,
    sparseImageFloat32AtomicAdd: sparseImageFloat32AtomicAdd,
  )

proc newVkPhysicalDeviceShaderAtomicFloat2FeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, shaderBufferFloat16Atomics: VkBool32, shaderBufferFloat16AtomicAdd: VkBool32, shaderBufferFloat16AtomicMinMax: VkBool32, shaderBufferFloat32AtomicMinMax: VkBool32, shaderBufferFloat64AtomicMinMax: VkBool32, shaderSharedFloat16Atomics: VkBool32, shaderSharedFloat16AtomicAdd: VkBool32, shaderSharedFloat16AtomicMinMax: VkBool32, shaderSharedFloat32AtomicMinMax: VkBool32, shaderSharedFloat64AtomicMinMax: VkBool32, shaderImageFloat32AtomicMinMax: VkBool32, sparseImageFloat32AtomicMinMax: VkBool32): VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT =
  result = VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT(
    sType: sType,
    pNext: pNext,
    shaderBufferFloat16Atomics: shaderBufferFloat16Atomics,
    shaderBufferFloat16AtomicAdd: shaderBufferFloat16AtomicAdd,
    shaderBufferFloat16AtomicMinMax: shaderBufferFloat16AtomicMinMax,
    shaderBufferFloat32AtomicMinMax: shaderBufferFloat32AtomicMinMax,
    shaderBufferFloat64AtomicMinMax: shaderBufferFloat64AtomicMinMax,
    shaderSharedFloat16Atomics: shaderSharedFloat16Atomics,
    shaderSharedFloat16AtomicAdd: shaderSharedFloat16AtomicAdd,
    shaderSharedFloat16AtomicMinMax: shaderSharedFloat16AtomicMinMax,
    shaderSharedFloat32AtomicMinMax: shaderSharedFloat32AtomicMinMax,
    shaderSharedFloat64AtomicMinMax: shaderSharedFloat64AtomicMinMax,
    shaderImageFloat32AtomicMinMax: shaderImageFloat32AtomicMinMax,
    sparseImageFloat32AtomicMinMax: sparseImageFloat32AtomicMinMax,
  )

proc newVkPhysicalDeviceVertexAttributeDivisorFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, vertexAttributeInstanceRateDivisor: VkBool32, vertexAttributeInstanceRateZeroDivisor: VkBool32): VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR =
  result = VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR(
    sType: sType,
    pNext: pNext,
    vertexAttributeInstanceRateDivisor: vertexAttributeInstanceRateDivisor,
    vertexAttributeInstanceRateZeroDivisor: vertexAttributeInstanceRateZeroDivisor,
  )

proc newVkQueueFamilyCheckpointPropertiesNV*(sType: VkStructureType, pNext: pointer = nil, checkpointExecutionStageMask: VkPipelineStageFlags): VkQueueFamilyCheckpointPropertiesNV =
  result = VkQueueFamilyCheckpointPropertiesNV(
    sType: sType,
    pNext: pNext,
    checkpointExecutionStageMask: checkpointExecutionStageMask,
  )

proc newVkCheckpointDataNV*(sType: VkStructureType, pNext: pointer = nil, stage: VkPipelineStageFlagBits, pCheckpointMarker: pointer = nil): VkCheckpointDataNV =
  result = VkCheckpointDataNV(
    sType: sType,
    pNext: pNext,
    stage: stage,
    pCheckpointMarker: pCheckpointMarker,
  )

proc newVkPhysicalDeviceDepthStencilResolveProperties*(sType: VkStructureType, pNext: pointer = nil, supportedDepthResolveModes: VkResolveModeFlags, supportedStencilResolveModes: VkResolveModeFlags, independentResolveNone: VkBool32, independentResolve: VkBool32): VkPhysicalDeviceDepthStencilResolveProperties =
  result = VkPhysicalDeviceDepthStencilResolveProperties(
    sType: sType,
    pNext: pNext,
    supportedDepthResolveModes: supportedDepthResolveModes,
    supportedStencilResolveModes: supportedStencilResolveModes,
    independentResolveNone: independentResolveNone,
    independentResolve: independentResolve,
  )

proc newVkSubpassDescriptionDepthStencilResolve*(sType: VkStructureType, pNext: pointer = nil, depthResolveMode: VkResolveModeFlagBits, stencilResolveMode: VkResolveModeFlagBits, pDepthStencilResolveAttachment: ptr VkAttachmentReference2): VkSubpassDescriptionDepthStencilResolve =
  result = VkSubpassDescriptionDepthStencilResolve(
    sType: sType,
    pNext: pNext,
    depthResolveMode: depthResolveMode,
    stencilResolveMode: stencilResolveMode,
    pDepthStencilResolveAttachment: pDepthStencilResolveAttachment,
  )

proc newVkImageViewASTCDecodeModeEXT*(sType: VkStructureType, pNext: pointer = nil, decodeMode: VkFormat): VkImageViewASTCDecodeModeEXT =
  result = VkImageViewASTCDecodeModeEXT(
    sType: sType,
    pNext: pNext,
    decodeMode: decodeMode,
  )

proc newVkPhysicalDeviceASTCDecodeFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, decodeModeSharedExponent: VkBool32): VkPhysicalDeviceASTCDecodeFeaturesEXT =
  result = VkPhysicalDeviceASTCDecodeFeaturesEXT(
    sType: sType,
    pNext: pNext,
    decodeModeSharedExponent: decodeModeSharedExponent,
  )

proc newVkPhysicalDeviceTransformFeedbackFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, transformFeedback: VkBool32, geometryStreams: VkBool32): VkPhysicalDeviceTransformFeedbackFeaturesEXT =
  result = VkPhysicalDeviceTransformFeedbackFeaturesEXT(
    sType: sType,
    pNext: pNext,
    transformFeedback: transformFeedback,
    geometryStreams: geometryStreams,
  )

proc newVkPhysicalDeviceTransformFeedbackPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, maxTransformFeedbackStreams: uint32, maxTransformFeedbackBuffers: uint32, maxTransformFeedbackBufferSize: VkDeviceSize, maxTransformFeedbackStreamDataSize: uint32, maxTransformFeedbackBufferDataSize: uint32, maxTransformFeedbackBufferDataStride: uint32, transformFeedbackQueries: VkBool32, transformFeedbackStreamsLinesTriangles: VkBool32, transformFeedbackRasterizationStreamSelect: VkBool32, transformFeedbackDraw: VkBool32): VkPhysicalDeviceTransformFeedbackPropertiesEXT =
  result = VkPhysicalDeviceTransformFeedbackPropertiesEXT(
    sType: sType,
    pNext: pNext,
    maxTransformFeedbackStreams: maxTransformFeedbackStreams,
    maxTransformFeedbackBuffers: maxTransformFeedbackBuffers,
    maxTransformFeedbackBufferSize: maxTransformFeedbackBufferSize,
    maxTransformFeedbackStreamDataSize: maxTransformFeedbackStreamDataSize,
    maxTransformFeedbackBufferDataSize: maxTransformFeedbackBufferDataSize,
    maxTransformFeedbackBufferDataStride: maxTransformFeedbackBufferDataStride,
    transformFeedbackQueries: transformFeedbackQueries,
    transformFeedbackStreamsLinesTriangles: transformFeedbackStreamsLinesTriangles,
    transformFeedbackRasterizationStreamSelect: transformFeedbackRasterizationStreamSelect,
    transformFeedbackDraw: transformFeedbackDraw,
  )

proc newVkPipelineRasterizationStateStreamCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkPipelineRasterizationStateStreamCreateFlagsEXT = 0.VkPipelineRasterizationStateStreamCreateFlagsEXT, rasterizationStream: uint32): VkPipelineRasterizationStateStreamCreateInfoEXT =
  result = VkPipelineRasterizationStateStreamCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    rasterizationStream: rasterizationStream,
  )

proc newVkPhysicalDeviceRepresentativeFragmentTestFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, representativeFragmentTest: VkBool32): VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV =
  result = VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV(
    sType: sType,
    pNext: pNext,
    representativeFragmentTest: representativeFragmentTest,
  )

proc newVkPipelineRepresentativeFragmentTestStateCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, representativeFragmentTestEnable: VkBool32): VkPipelineRepresentativeFragmentTestStateCreateInfoNV =
  result = VkPipelineRepresentativeFragmentTestStateCreateInfoNV(
    sType: sType,
    pNext: pNext,
    representativeFragmentTestEnable: representativeFragmentTestEnable,
  )

proc newVkPhysicalDeviceExclusiveScissorFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, exclusiveScissor: VkBool32): VkPhysicalDeviceExclusiveScissorFeaturesNV =
  result = VkPhysicalDeviceExclusiveScissorFeaturesNV(
    sType: sType,
    pNext: pNext,
    exclusiveScissor: exclusiveScissor,
  )

proc newVkPipelineViewportExclusiveScissorStateCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, exclusiveScissorCount: uint32, pExclusiveScissors: ptr VkRect2D): VkPipelineViewportExclusiveScissorStateCreateInfoNV =
  result = VkPipelineViewportExclusiveScissorStateCreateInfoNV(
    sType: sType,
    pNext: pNext,
    exclusiveScissorCount: exclusiveScissorCount,
    pExclusiveScissors: pExclusiveScissors,
  )

proc newVkPhysicalDeviceCornerSampledImageFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, cornerSampledImage: VkBool32): VkPhysicalDeviceCornerSampledImageFeaturesNV =
  result = VkPhysicalDeviceCornerSampledImageFeaturesNV(
    sType: sType,
    pNext: pNext,
    cornerSampledImage: cornerSampledImage,
  )

proc newVkPhysicalDeviceComputeShaderDerivativesFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, computeDerivativeGroupQuads: VkBool32, computeDerivativeGroupLinear: VkBool32): VkPhysicalDeviceComputeShaderDerivativesFeaturesNV =
  result = VkPhysicalDeviceComputeShaderDerivativesFeaturesNV(
    sType: sType,
    pNext: pNext,
    computeDerivativeGroupQuads: computeDerivativeGroupQuads,
    computeDerivativeGroupLinear: computeDerivativeGroupLinear,
  )

proc newVkPhysicalDeviceShaderImageFootprintFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, imageFootprint: VkBool32): VkPhysicalDeviceShaderImageFootprintFeaturesNV =
  result = VkPhysicalDeviceShaderImageFootprintFeaturesNV(
    sType: sType,
    pNext: pNext,
    imageFootprint: imageFootprint,
  )

proc newVkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, dedicatedAllocationImageAliasing: VkBool32): VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV =
  result = VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(
    sType: sType,
    pNext: pNext,
    dedicatedAllocationImageAliasing: dedicatedAllocationImageAliasing,
  )

proc newVkPhysicalDeviceCopyMemoryIndirectFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, indirectCopy: VkBool32): VkPhysicalDeviceCopyMemoryIndirectFeaturesNV =
  result = VkPhysicalDeviceCopyMemoryIndirectFeaturesNV(
    sType: sType,
    pNext: pNext,
    indirectCopy: indirectCopy,
  )

proc newVkPhysicalDeviceCopyMemoryIndirectPropertiesNV*(sType: VkStructureType, pNext: pointer = nil, supportedQueues: VkQueueFlags): VkPhysicalDeviceCopyMemoryIndirectPropertiesNV =
  result = VkPhysicalDeviceCopyMemoryIndirectPropertiesNV(
    sType: sType,
    pNext: pNext,
    supportedQueues: supportedQueues,
  )

proc newVkPhysicalDeviceMemoryDecompressionFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, memoryDecompression: VkBool32): VkPhysicalDeviceMemoryDecompressionFeaturesNV =
  result = VkPhysicalDeviceMemoryDecompressionFeaturesNV(
    sType: sType,
    pNext: pNext,
    memoryDecompression: memoryDecompression,
  )

proc newVkPhysicalDeviceMemoryDecompressionPropertiesNV*(sType: VkStructureType, pNext: pointer = nil, decompressionMethods: VkMemoryDecompressionMethodFlagsNV, maxDecompressionIndirectCount: uint64): VkPhysicalDeviceMemoryDecompressionPropertiesNV =
  result = VkPhysicalDeviceMemoryDecompressionPropertiesNV(
    sType: sType,
    pNext: pNext,
    decompressionMethods: decompressionMethods,
    maxDecompressionIndirectCount: maxDecompressionIndirectCount,
  )

proc newVkShadingRatePaletteNV*(shadingRatePaletteEntryCount: uint32, pShadingRatePaletteEntries: ptr VkShadingRatePaletteEntryNV): VkShadingRatePaletteNV =
  result = VkShadingRatePaletteNV(
    shadingRatePaletteEntryCount: shadingRatePaletteEntryCount,
    pShadingRatePaletteEntries: pShadingRatePaletteEntries,
  )

proc newVkPipelineViewportShadingRateImageStateCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, shadingRateImageEnable: VkBool32, viewportCount: uint32, pShadingRatePalettes: ptr VkShadingRatePaletteNV): VkPipelineViewportShadingRateImageStateCreateInfoNV =
  result = VkPipelineViewportShadingRateImageStateCreateInfoNV(
    sType: sType,
    pNext: pNext,
    shadingRateImageEnable: shadingRateImageEnable,
    viewportCount: viewportCount,
    pShadingRatePalettes: pShadingRatePalettes,
  )

proc newVkPhysicalDeviceShadingRateImageFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, shadingRateImage: VkBool32, shadingRateCoarseSampleOrder: VkBool32): VkPhysicalDeviceShadingRateImageFeaturesNV =
  result = VkPhysicalDeviceShadingRateImageFeaturesNV(
    sType: sType,
    pNext: pNext,
    shadingRateImage: shadingRateImage,
    shadingRateCoarseSampleOrder: shadingRateCoarseSampleOrder,
  )

proc newVkPhysicalDeviceShadingRateImagePropertiesNV*(sType: VkStructureType, pNext: pointer = nil, shadingRateTexelSize: VkExtent2D, shadingRatePaletteSize: uint32, shadingRateMaxCoarseSamples: uint32): VkPhysicalDeviceShadingRateImagePropertiesNV =
  result = VkPhysicalDeviceShadingRateImagePropertiesNV(
    sType: sType,
    pNext: pNext,
    shadingRateTexelSize: shadingRateTexelSize,
    shadingRatePaletteSize: shadingRatePaletteSize,
    shadingRateMaxCoarseSamples: shadingRateMaxCoarseSamples,
  )

proc newVkPhysicalDeviceInvocationMaskFeaturesHUAWEI*(sType: VkStructureType, pNext: pointer = nil, invocationMask: VkBool32): VkPhysicalDeviceInvocationMaskFeaturesHUAWEI =
  result = VkPhysicalDeviceInvocationMaskFeaturesHUAWEI(
    sType: sType,
    pNext: pNext,
    invocationMask: invocationMask,
  )

proc newVkCoarseSampleLocationNV*(pixelX: uint32, pixelY: uint32, sample: uint32): VkCoarseSampleLocationNV =
  result = VkCoarseSampleLocationNV(
    pixelX: pixelX,
    pixelY: pixelY,
    sample: sample,
  )

proc newVkCoarseSampleOrderCustomNV*(shadingRate: VkShadingRatePaletteEntryNV, sampleCount: uint32, sampleLocationCount: uint32, pSampleLocations: ptr VkCoarseSampleLocationNV): VkCoarseSampleOrderCustomNV =
  result = VkCoarseSampleOrderCustomNV(
    shadingRate: shadingRate,
    sampleCount: sampleCount,
    sampleLocationCount: sampleLocationCount,
    pSampleLocations: pSampleLocations,
  )

proc newVkPipelineViewportCoarseSampleOrderStateCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: uint32, pCustomSampleOrders: ptr VkCoarseSampleOrderCustomNV): VkPipelineViewportCoarseSampleOrderStateCreateInfoNV =
  result = VkPipelineViewportCoarseSampleOrderStateCreateInfoNV(
    sType: sType,
    pNext: pNext,
    sampleOrderType: sampleOrderType,
    customSampleOrderCount: customSampleOrderCount,
    pCustomSampleOrders: pCustomSampleOrders,
  )

proc newVkPhysicalDeviceMeshShaderFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, taskShader: VkBool32, meshShader: VkBool32): VkPhysicalDeviceMeshShaderFeaturesNV =
  result = VkPhysicalDeviceMeshShaderFeaturesNV(
    sType: sType,
    pNext: pNext,
    taskShader: taskShader,
    meshShader: meshShader,
  )

proc newVkPhysicalDeviceMeshShaderPropertiesNV*(sType: VkStructureType, pNext: pointer = nil, maxDrawMeshTasksCount: uint32, maxTaskWorkGroupInvocations: uint32, maxTaskWorkGroupSize: array[3, uint32], maxTaskTotalMemorySize: uint32, maxTaskOutputCount: uint32, maxMeshWorkGroupInvocations: uint32, maxMeshWorkGroupSize: array[3, uint32], maxMeshTotalMemorySize: uint32, maxMeshOutputVertices: uint32, maxMeshOutputPrimitives: uint32, maxMeshMultiviewViewCount: uint32, meshOutputPerVertexGranularity: uint32, meshOutputPerPrimitiveGranularity: uint32): VkPhysicalDeviceMeshShaderPropertiesNV =
  result = VkPhysicalDeviceMeshShaderPropertiesNV(
    sType: sType,
    pNext: pNext,
    maxDrawMeshTasksCount: maxDrawMeshTasksCount,
    maxTaskWorkGroupInvocations: maxTaskWorkGroupInvocations,
    maxTaskWorkGroupSize: maxTaskWorkGroupSize,
    maxTaskTotalMemorySize: maxTaskTotalMemorySize,
    maxTaskOutputCount: maxTaskOutputCount,
    maxMeshWorkGroupInvocations: maxMeshWorkGroupInvocations,
    maxMeshWorkGroupSize: maxMeshWorkGroupSize,
    maxMeshTotalMemorySize: maxMeshTotalMemorySize,
    maxMeshOutputVertices: maxMeshOutputVertices,
    maxMeshOutputPrimitives: maxMeshOutputPrimitives,
    maxMeshMultiviewViewCount: maxMeshMultiviewViewCount,
    meshOutputPerVertexGranularity: meshOutputPerVertexGranularity,
    meshOutputPerPrimitiveGranularity: meshOutputPerPrimitiveGranularity,
  )

proc newVkDrawMeshTasksIndirectCommandNV*(taskCount: uint32, firstTask: uint32): VkDrawMeshTasksIndirectCommandNV =
  result = VkDrawMeshTasksIndirectCommandNV(
    taskCount: taskCount,
    firstTask: firstTask,
  )

proc newVkPhysicalDeviceMeshShaderFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, taskShader: VkBool32, meshShader: VkBool32, multiviewMeshShader: VkBool32, primitiveFragmentShadingRateMeshShader: VkBool32, meshShaderQueries: VkBool32): VkPhysicalDeviceMeshShaderFeaturesEXT =
  result = VkPhysicalDeviceMeshShaderFeaturesEXT(
    sType: sType,
    pNext: pNext,
    taskShader: taskShader,
    meshShader: meshShader,
    multiviewMeshShader: multiviewMeshShader,
    primitiveFragmentShadingRateMeshShader: primitiveFragmentShadingRateMeshShader,
    meshShaderQueries: meshShaderQueries,
  )

proc newVkPhysicalDeviceMeshShaderPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, maxTaskWorkGroupTotalCount: uint32, maxTaskWorkGroupCount: array[3, uint32], maxTaskWorkGroupInvocations: uint32, maxTaskWorkGroupSize: array[3, uint32], maxTaskPayloadSize: uint32, maxTaskSharedMemorySize: uint32, maxTaskPayloadAndSharedMemorySize: uint32, maxMeshWorkGroupTotalCount: uint32, maxMeshWorkGroupCount: array[3, uint32], maxMeshWorkGroupInvocations: uint32, maxMeshWorkGroupSize: array[3, uint32], maxMeshSharedMemorySize: uint32, maxMeshPayloadAndSharedMemorySize: uint32, maxMeshOutputMemorySize: uint32, maxMeshPayloadAndOutputMemorySize: uint32, maxMeshOutputComponents: uint32, maxMeshOutputVertices: uint32, maxMeshOutputPrimitives: uint32, maxMeshOutputLayers: uint32, maxMeshMultiviewViewCount: uint32, meshOutputPerVertexGranularity: uint32, meshOutputPerPrimitiveGranularity: uint32, maxPreferredTaskWorkGroupInvocations: uint32, maxPreferredMeshWorkGroupInvocations: uint32, prefersLocalInvocationVertexOutput: VkBool32, prefersLocalInvocationPrimitiveOutput: VkBool32, prefersCompactVertexOutput: VkBool32, prefersCompactPrimitiveOutput: VkBool32): VkPhysicalDeviceMeshShaderPropertiesEXT =
  result = VkPhysicalDeviceMeshShaderPropertiesEXT(
    sType: sType,
    pNext: pNext,
    maxTaskWorkGroupTotalCount: maxTaskWorkGroupTotalCount,
    maxTaskWorkGroupCount: maxTaskWorkGroupCount,
    maxTaskWorkGroupInvocations: maxTaskWorkGroupInvocations,
    maxTaskWorkGroupSize: maxTaskWorkGroupSize,
    maxTaskPayloadSize: maxTaskPayloadSize,
    maxTaskSharedMemorySize: maxTaskSharedMemorySize,
    maxTaskPayloadAndSharedMemorySize: maxTaskPayloadAndSharedMemorySize,
    maxMeshWorkGroupTotalCount: maxMeshWorkGroupTotalCount,
    maxMeshWorkGroupCount: maxMeshWorkGroupCount,
    maxMeshWorkGroupInvocations: maxMeshWorkGroupInvocations,
    maxMeshWorkGroupSize: maxMeshWorkGroupSize,
    maxMeshSharedMemorySize: maxMeshSharedMemorySize,
    maxMeshPayloadAndSharedMemorySize: maxMeshPayloadAndSharedMemorySize,
    maxMeshOutputMemorySize: maxMeshOutputMemorySize,
    maxMeshPayloadAndOutputMemorySize: maxMeshPayloadAndOutputMemorySize,
    maxMeshOutputComponents: maxMeshOutputComponents,
    maxMeshOutputVertices: maxMeshOutputVertices,
    maxMeshOutputPrimitives: maxMeshOutputPrimitives,
    maxMeshOutputLayers: maxMeshOutputLayers,
    maxMeshMultiviewViewCount: maxMeshMultiviewViewCount,
    meshOutputPerVertexGranularity: meshOutputPerVertexGranularity,
    meshOutputPerPrimitiveGranularity: meshOutputPerPrimitiveGranularity,
    maxPreferredTaskWorkGroupInvocations: maxPreferredTaskWorkGroupInvocations,
    maxPreferredMeshWorkGroupInvocations: maxPreferredMeshWorkGroupInvocations,
    prefersLocalInvocationVertexOutput: prefersLocalInvocationVertexOutput,
    prefersLocalInvocationPrimitiveOutput: prefersLocalInvocationPrimitiveOutput,
    prefersCompactVertexOutput: prefersCompactVertexOutput,
    prefersCompactPrimitiveOutput: prefersCompactPrimitiveOutput,
  )

proc newVkDrawMeshTasksIndirectCommandEXT*(groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32): VkDrawMeshTasksIndirectCommandEXT =
  result = VkDrawMeshTasksIndirectCommandEXT(
    groupCountX: groupCountX,
    groupCountY: groupCountY,
    groupCountZ: groupCountZ,
  )

proc newVkRayTracingShaderGroupCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, `type`: VkRayTracingShaderGroupTypeKHR, generalShader: uint32, closestHitShader: uint32, anyHitShader: uint32, intersectionShader: uint32): VkRayTracingShaderGroupCreateInfoNV =
  result = VkRayTracingShaderGroupCreateInfoNV(
    sType: sType,
    pNext: pNext,
    `type`: `type`,
    generalShader: generalShader,
    closestHitShader: closestHitShader,
    anyHitShader: anyHitShader,
    intersectionShader: intersectionShader,
  )

proc newVkRayTracingShaderGroupCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, `type`: VkRayTracingShaderGroupTypeKHR, generalShader: uint32, closestHitShader: uint32, anyHitShader: uint32, intersectionShader: uint32, pShaderGroupCaptureReplayHandle: pointer = nil): VkRayTracingShaderGroupCreateInfoKHR =
  result = VkRayTracingShaderGroupCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    `type`: `type`,
    generalShader: generalShader,
    closestHitShader: closestHitShader,
    anyHitShader: anyHitShader,
    intersectionShader: intersectionShader,
    pShaderGroupCaptureReplayHandle: pShaderGroupCaptureReplayHandle,
  )

proc newVkRayTracingPipelineCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, flags: VkPipelineCreateFlags = 0.VkPipelineCreateFlags, stageCount: uint32, pStages: ptr VkPipelineShaderStageCreateInfo, groupCount: uint32, pGroups: ptr VkRayTracingShaderGroupCreateInfoNV, maxRecursionDepth: uint32, layout: VkPipelineLayout, basePipelineHandle: VkPipeline, basePipelineIndex: int32): VkRayTracingPipelineCreateInfoNV =
  result = VkRayTracingPipelineCreateInfoNV(
    sType: sType,
    pNext: pNext,
    flags: flags,
    stageCount: stageCount,
    pStages: pStages,
    groupCount: groupCount,
    pGroups: pGroups,
    maxRecursionDepth: maxRecursionDepth,
    layout: layout,
    basePipelineHandle: basePipelineHandle,
    basePipelineIndex: basePipelineIndex,
  )

proc newVkRayTracingPipelineCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkPipelineCreateFlags = 0.VkPipelineCreateFlags, stageCount: uint32, pStages: ptr VkPipelineShaderStageCreateInfo, groupCount: uint32, pGroups: ptr VkRayTracingShaderGroupCreateInfoKHR, maxPipelineRayRecursionDepth: uint32, pLibraryInfo: ptr VkPipelineLibraryCreateInfoKHR, pLibraryInterface: ptr VkRayTracingPipelineInterfaceCreateInfoKHR, pDynamicState: ptr VkPipelineDynamicStateCreateInfo, layout: VkPipelineLayout, basePipelineHandle: VkPipeline, basePipelineIndex: int32): VkRayTracingPipelineCreateInfoKHR =
  result = VkRayTracingPipelineCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    stageCount: stageCount,
    pStages: pStages,
    groupCount: groupCount,
    pGroups: pGroups,
    maxPipelineRayRecursionDepth: maxPipelineRayRecursionDepth,
    pLibraryInfo: pLibraryInfo,
    pLibraryInterface: pLibraryInterface,
    pDynamicState: pDynamicState,
    layout: layout,
    basePipelineHandle: basePipelineHandle,
    basePipelineIndex: basePipelineIndex,
  )

proc newVkGeometryTrianglesNV*(sType: VkStructureType, pNext: pointer = nil, vertexData: VkBuffer, vertexOffset: VkDeviceSize, vertexCount: uint32, vertexStride: VkDeviceSize, vertexFormat: VkFormat, indexData: VkBuffer, indexOffset: VkDeviceSize, indexCount: uint32, indexType: VkIndexType, transformData: VkBuffer, transformOffset: VkDeviceSize): VkGeometryTrianglesNV =
  result = VkGeometryTrianglesNV(
    sType: sType,
    pNext: pNext,
    vertexData: vertexData,
    vertexOffset: vertexOffset,
    vertexCount: vertexCount,
    vertexStride: vertexStride,
    vertexFormat: vertexFormat,
    indexData: indexData,
    indexOffset: indexOffset,
    indexCount: indexCount,
    indexType: indexType,
    transformData: transformData,
    transformOffset: transformOffset,
  )

proc newVkGeometryAABBNV*(sType: VkStructureType, pNext: pointer = nil, aabbData: VkBuffer, numAABBs: uint32, stride: uint32, offset: VkDeviceSize): VkGeometryAABBNV =
  result = VkGeometryAABBNV(
    sType: sType,
    pNext: pNext,
    aabbData: aabbData,
    numAABBs: numAABBs,
    stride: stride,
    offset: offset,
  )

proc newVkGeometryDataNV*(triangles: VkGeometryTrianglesNV, aabbs: VkGeometryAABBNV): VkGeometryDataNV =
  result = VkGeometryDataNV(
    triangles: triangles,
    aabbs: aabbs,
  )

proc newVkGeometryNV*(sType: VkStructureType, pNext: pointer = nil, geometryType: VkGeometryTypeKHR, geometry: VkGeometryDataNV, flags: VkGeometryFlagsKHR = 0.VkGeometryFlagsKHR): VkGeometryNV =
  result = VkGeometryNV(
    sType: sType,
    pNext: pNext,
    geometryType: geometryType,
    geometry: geometry,
    flags: flags,
  )

proc newVkAccelerationStructureInfoNV*(sType: VkStructureType, pNext: pointer = nil, `type`: VkAccelerationStructureTypeNV, flags: VkBuildAccelerationStructureFlagsNV = 0.VkBuildAccelerationStructureFlagsNV, instanceCount: uint32, geometryCount: uint32, pGeometries: ptr VkGeometryNV): VkAccelerationStructureInfoNV =
  result = VkAccelerationStructureInfoNV(
    sType: sType,
    pNext: pNext,
    `type`: `type`,
    flags: flags,
    instanceCount: instanceCount,
    geometryCount: geometryCount,
    pGeometries: pGeometries,
  )

proc newVkAccelerationStructureCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, compactedSize: VkDeviceSize, info: VkAccelerationStructureInfoNV): VkAccelerationStructureCreateInfoNV =
  result = VkAccelerationStructureCreateInfoNV(
    sType: sType,
    pNext: pNext,
    compactedSize: compactedSize,
    info: info,
  )

proc newVkBindAccelerationStructureMemoryInfoNV*(sType: VkStructureType, pNext: pointer = nil, accelerationStructure: VkAccelerationStructureNV, memory: VkDeviceMemory, memoryOffset: VkDeviceSize, deviceIndexCount: uint32, pDeviceIndices: ptr uint32): VkBindAccelerationStructureMemoryInfoNV =
  result = VkBindAccelerationStructureMemoryInfoNV(
    sType: sType,
    pNext: pNext,
    accelerationStructure: accelerationStructure,
    memory: memory,
    memoryOffset: memoryOffset,
    deviceIndexCount: deviceIndexCount,
    pDeviceIndices: pDeviceIndices,
  )

proc newVkWriteDescriptorSetAccelerationStructureKHR*(sType: VkStructureType, pNext: pointer = nil, accelerationStructureCount: uint32, pAccelerationStructures: ptr VkAccelerationStructureKHR): VkWriteDescriptorSetAccelerationStructureKHR =
  result = VkWriteDescriptorSetAccelerationStructureKHR(
    sType: sType,
    pNext: pNext,
    accelerationStructureCount: accelerationStructureCount,
    pAccelerationStructures: pAccelerationStructures,
  )

proc newVkWriteDescriptorSetAccelerationStructureNV*(sType: VkStructureType, pNext: pointer = nil, accelerationStructureCount: uint32, pAccelerationStructures: ptr VkAccelerationStructureNV): VkWriteDescriptorSetAccelerationStructureNV =
  result = VkWriteDescriptorSetAccelerationStructureNV(
    sType: sType,
    pNext: pNext,
    accelerationStructureCount: accelerationStructureCount,
    pAccelerationStructures: pAccelerationStructures,
  )

proc newVkAccelerationStructureMemoryRequirementsInfoNV*(sType: VkStructureType, pNext: pointer = nil, `type`: VkAccelerationStructureMemoryRequirementsTypeNV, accelerationStructure: VkAccelerationStructureNV): VkAccelerationStructureMemoryRequirementsInfoNV =
  result = VkAccelerationStructureMemoryRequirementsInfoNV(
    sType: sType,
    pNext: pNext,
    `type`: `type`,
    accelerationStructure: accelerationStructure,
  )

proc newVkPhysicalDeviceAccelerationStructureFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, accelerationStructure: VkBool32, accelerationStructureCaptureReplay: VkBool32, accelerationStructureIndirectBuild: VkBool32, accelerationStructureHostCommands: VkBool32, descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32): VkPhysicalDeviceAccelerationStructureFeaturesKHR =
  result = VkPhysicalDeviceAccelerationStructureFeaturesKHR(
    sType: sType,
    pNext: pNext,
    accelerationStructure: accelerationStructure,
    accelerationStructureCaptureReplay: accelerationStructureCaptureReplay,
    accelerationStructureIndirectBuild: accelerationStructureIndirectBuild,
    accelerationStructureHostCommands: accelerationStructureHostCommands,
    descriptorBindingAccelerationStructureUpdateAfterBind: descriptorBindingAccelerationStructureUpdateAfterBind,
  )

proc newVkPhysicalDeviceRayTracingPipelineFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, rayTracingPipeline: VkBool32, rayTracingPipelineShaderGroupHandleCaptureReplay: VkBool32, rayTracingPipelineShaderGroupHandleCaptureReplayMixed: VkBool32, rayTracingPipelineTraceRaysIndirect: VkBool32, rayTraversalPrimitiveCulling: VkBool32): VkPhysicalDeviceRayTracingPipelineFeaturesKHR =
  result = VkPhysicalDeviceRayTracingPipelineFeaturesKHR(
    sType: sType,
    pNext: pNext,
    rayTracingPipeline: rayTracingPipeline,
    rayTracingPipelineShaderGroupHandleCaptureReplay: rayTracingPipelineShaderGroupHandleCaptureReplay,
    rayTracingPipelineShaderGroupHandleCaptureReplayMixed: rayTracingPipelineShaderGroupHandleCaptureReplayMixed,
    rayTracingPipelineTraceRaysIndirect: rayTracingPipelineTraceRaysIndirect,
    rayTraversalPrimitiveCulling: rayTraversalPrimitiveCulling,
  )

proc newVkPhysicalDeviceRayQueryFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, rayQuery: VkBool32): VkPhysicalDeviceRayQueryFeaturesKHR =
  result = VkPhysicalDeviceRayQueryFeaturesKHR(
    sType: sType,
    pNext: pNext,
    rayQuery: rayQuery,
  )

proc newVkPhysicalDeviceAccelerationStructurePropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, maxGeometryCount: uint64, maxInstanceCount: uint64, maxPrimitiveCount: uint64, maxPerStageDescriptorAccelerationStructures: uint32, maxPerStageDescriptorUpdateAfterBindAccelerationStructures: uint32, maxDescriptorSetAccelerationStructures: uint32, maxDescriptorSetUpdateAfterBindAccelerationStructures: uint32, minAccelerationStructureScratchOffsetAlignment: uint32): VkPhysicalDeviceAccelerationStructurePropertiesKHR =
  result = VkPhysicalDeviceAccelerationStructurePropertiesKHR(
    sType: sType,
    pNext: pNext,
    maxGeometryCount: maxGeometryCount,
    maxInstanceCount: maxInstanceCount,
    maxPrimitiveCount: maxPrimitiveCount,
    maxPerStageDescriptorAccelerationStructures: maxPerStageDescriptorAccelerationStructures,
    maxPerStageDescriptorUpdateAfterBindAccelerationStructures: maxPerStageDescriptorUpdateAfterBindAccelerationStructures,
    maxDescriptorSetAccelerationStructures: maxDescriptorSetAccelerationStructures,
    maxDescriptorSetUpdateAfterBindAccelerationStructures: maxDescriptorSetUpdateAfterBindAccelerationStructures,
    minAccelerationStructureScratchOffsetAlignment: minAccelerationStructureScratchOffsetAlignment,
  )

proc newVkPhysicalDeviceRayTracingPipelinePropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, shaderGroupHandleSize: uint32, maxRayRecursionDepth: uint32, maxShaderGroupStride: uint32, shaderGroupBaseAlignment: uint32, shaderGroupHandleCaptureReplaySize: uint32, maxRayDispatchInvocationCount: uint32, shaderGroupHandleAlignment: uint32, maxRayHitAttributeSize: uint32): VkPhysicalDeviceRayTracingPipelinePropertiesKHR =
  result = VkPhysicalDeviceRayTracingPipelinePropertiesKHR(
    sType: sType,
    pNext: pNext,
    shaderGroupHandleSize: shaderGroupHandleSize,
    maxRayRecursionDepth: maxRayRecursionDepth,
    maxShaderGroupStride: maxShaderGroupStride,
    shaderGroupBaseAlignment: shaderGroupBaseAlignment,
    shaderGroupHandleCaptureReplaySize: shaderGroupHandleCaptureReplaySize,
    maxRayDispatchInvocationCount: maxRayDispatchInvocationCount,
    shaderGroupHandleAlignment: shaderGroupHandleAlignment,
    maxRayHitAttributeSize: maxRayHitAttributeSize,
  )

proc newVkPhysicalDeviceRayTracingPropertiesNV*(sType: VkStructureType, pNext: pointer = nil, shaderGroupHandleSize: uint32, maxRecursionDepth: uint32, maxShaderGroupStride: uint32, shaderGroupBaseAlignment: uint32, maxGeometryCount: uint64, maxInstanceCount: uint64, maxTriangleCount: uint64, maxDescriptorSetAccelerationStructures: uint32): VkPhysicalDeviceRayTracingPropertiesNV =
  result = VkPhysicalDeviceRayTracingPropertiesNV(
    sType: sType,
    pNext: pNext,
    shaderGroupHandleSize: shaderGroupHandleSize,
    maxRecursionDepth: maxRecursionDepth,
    maxShaderGroupStride: maxShaderGroupStride,
    shaderGroupBaseAlignment: shaderGroupBaseAlignment,
    maxGeometryCount: maxGeometryCount,
    maxInstanceCount: maxInstanceCount,
    maxTriangleCount: maxTriangleCount,
    maxDescriptorSetAccelerationStructures: maxDescriptorSetAccelerationStructures,
  )

proc newVkStridedDeviceAddressRegionKHR*(deviceAddress: VkDeviceAddress, stride: VkDeviceSize, size: VkDeviceSize): VkStridedDeviceAddressRegionKHR =
  result = VkStridedDeviceAddressRegionKHR(
    deviceAddress: deviceAddress,
    stride: stride,
    size: size,
  )

proc newVkTraceRaysIndirectCommandKHR*(width: uint32, height: uint32, depth: uint32): VkTraceRaysIndirectCommandKHR =
  result = VkTraceRaysIndirectCommandKHR(
    width: width,
    height: height,
    depth: depth,
  )

proc newVkTraceRaysIndirectCommand2KHR*(raygenShaderRecordAddress: VkDeviceAddress, raygenShaderRecordSize: VkDeviceSize, missShaderBindingTableAddress: VkDeviceAddress, missShaderBindingTableSize: VkDeviceSize, missShaderBindingTableStride: VkDeviceSize, hitShaderBindingTableAddress: VkDeviceAddress, hitShaderBindingTableSize: VkDeviceSize, hitShaderBindingTableStride: VkDeviceSize, callableShaderBindingTableAddress: VkDeviceAddress, callableShaderBindingTableSize: VkDeviceSize, callableShaderBindingTableStride: VkDeviceSize, width: uint32, height: uint32, depth: uint32): VkTraceRaysIndirectCommand2KHR =
  result = VkTraceRaysIndirectCommand2KHR(
    raygenShaderRecordAddress: raygenShaderRecordAddress,
    raygenShaderRecordSize: raygenShaderRecordSize,
    missShaderBindingTableAddress: missShaderBindingTableAddress,
    missShaderBindingTableSize: missShaderBindingTableSize,
    missShaderBindingTableStride: missShaderBindingTableStride,
    hitShaderBindingTableAddress: hitShaderBindingTableAddress,
    hitShaderBindingTableSize: hitShaderBindingTableSize,
    hitShaderBindingTableStride: hitShaderBindingTableStride,
    callableShaderBindingTableAddress: callableShaderBindingTableAddress,
    callableShaderBindingTableSize: callableShaderBindingTableSize,
    callableShaderBindingTableStride: callableShaderBindingTableStride,
    width: width,
    height: height,
    depth: depth,
  )

proc newVkPhysicalDeviceRayTracingMaintenance1FeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, rayTracingMaintenance1: VkBool32, rayTracingPipelineTraceRaysIndirect2: VkBool32): VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR =
  result = VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR(
    sType: sType,
    pNext: pNext,
    rayTracingMaintenance1: rayTracingMaintenance1,
    rayTracingPipelineTraceRaysIndirect2: rayTracingPipelineTraceRaysIndirect2,
  )

proc newVkDrmFormatModifierPropertiesListEXT*(sType: VkStructureType, pNext: pointer = nil, drmFormatModifierCount: uint32, pDrmFormatModifierProperties: ptr VkDrmFormatModifierPropertiesEXT): VkDrmFormatModifierPropertiesListEXT =
  result = VkDrmFormatModifierPropertiesListEXT(
    sType: sType,
    pNext: pNext,
    drmFormatModifierCount: drmFormatModifierCount,
    pDrmFormatModifierProperties: pDrmFormatModifierProperties,
  )

proc newVkDrmFormatModifierPropertiesEXT*(drmFormatModifier: uint64, drmFormatModifierPlaneCount: uint32, drmFormatModifierTilingFeatures: VkFormatFeatureFlags): VkDrmFormatModifierPropertiesEXT =
  result = VkDrmFormatModifierPropertiesEXT(
    drmFormatModifier: drmFormatModifier,
    drmFormatModifierPlaneCount: drmFormatModifierPlaneCount,
    drmFormatModifierTilingFeatures: drmFormatModifierTilingFeatures,
  )

proc newVkPhysicalDeviceImageDrmFormatModifierInfoEXT*(sType: VkStructureType, pNext: pointer = nil, drmFormatModifier: uint64, sharingMode: VkSharingMode, queueFamilyIndexCount: uint32, pQueueFamilyIndices: ptr uint32): VkPhysicalDeviceImageDrmFormatModifierInfoEXT =
  result = VkPhysicalDeviceImageDrmFormatModifierInfoEXT(
    sType: sType,
    pNext: pNext,
    drmFormatModifier: drmFormatModifier,
    sharingMode: sharingMode,
    queueFamilyIndexCount: queueFamilyIndexCount,
    pQueueFamilyIndices: pQueueFamilyIndices,
  )

proc newVkImageDrmFormatModifierListCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, drmFormatModifierCount: uint32, pDrmFormatModifiers: ptr uint64): VkImageDrmFormatModifierListCreateInfoEXT =
  result = VkImageDrmFormatModifierListCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    drmFormatModifierCount: drmFormatModifierCount,
    pDrmFormatModifiers: pDrmFormatModifiers,
  )

proc newVkImageDrmFormatModifierExplicitCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, drmFormatModifier: uint64, drmFormatModifierPlaneCount: uint32, pPlaneLayouts: ptr VkSubresourceLayout): VkImageDrmFormatModifierExplicitCreateInfoEXT =
  result = VkImageDrmFormatModifierExplicitCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    drmFormatModifier: drmFormatModifier,
    drmFormatModifierPlaneCount: drmFormatModifierPlaneCount,
    pPlaneLayouts: pPlaneLayouts,
  )

proc newVkImageDrmFormatModifierPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, drmFormatModifier: uint64): VkImageDrmFormatModifierPropertiesEXT =
  result = VkImageDrmFormatModifierPropertiesEXT(
    sType: sType,
    pNext: pNext,
    drmFormatModifier: drmFormatModifier,
  )

proc newVkImageStencilUsageCreateInfo*(sType: VkStructureType, pNext: pointer = nil, stencilUsage: VkImageUsageFlags): VkImageStencilUsageCreateInfo =
  result = VkImageStencilUsageCreateInfo(
    sType: sType,
    pNext: pNext,
    stencilUsage: stencilUsage,
  )

proc newVkDeviceMemoryOverallocationCreateInfoAMD*(sType: VkStructureType, pNext: pointer = nil, overallocationBehavior: VkMemoryOverallocationBehaviorAMD): VkDeviceMemoryOverallocationCreateInfoAMD =
  result = VkDeviceMemoryOverallocationCreateInfoAMD(
    sType: sType,
    pNext: pNext,
    overallocationBehavior: overallocationBehavior,
  )

proc newVkPhysicalDeviceFragmentDensityMapFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, fragmentDensityMap: VkBool32, fragmentDensityMapDynamic: VkBool32, fragmentDensityMapNonSubsampledImages: VkBool32): VkPhysicalDeviceFragmentDensityMapFeaturesEXT =
  result = VkPhysicalDeviceFragmentDensityMapFeaturesEXT(
    sType: sType,
    pNext: pNext,
    fragmentDensityMap: fragmentDensityMap,
    fragmentDensityMapDynamic: fragmentDensityMapDynamic,
    fragmentDensityMapNonSubsampledImages: fragmentDensityMapNonSubsampledImages,
  )

proc newVkPhysicalDeviceFragmentDensityMap2FeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, fragmentDensityMapDeferred: VkBool32): VkPhysicalDeviceFragmentDensityMap2FeaturesEXT =
  result = VkPhysicalDeviceFragmentDensityMap2FeaturesEXT(
    sType: sType,
    pNext: pNext,
    fragmentDensityMapDeferred: fragmentDensityMapDeferred,
  )

proc newVkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM*(sType: VkStructureType, pNext: pointer = nil, fragmentDensityMapOffset: VkBool32): VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM =
  result = VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM(
    sType: sType,
    pNext: pNext,
    fragmentDensityMapOffset: fragmentDensityMapOffset,
  )

proc newVkPhysicalDeviceFragmentDensityMapPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, minFragmentDensityTexelSize: VkExtent2D, maxFragmentDensityTexelSize: VkExtent2D, fragmentDensityInvocations: VkBool32): VkPhysicalDeviceFragmentDensityMapPropertiesEXT =
  result = VkPhysicalDeviceFragmentDensityMapPropertiesEXT(
    sType: sType,
    pNext: pNext,
    minFragmentDensityTexelSize: minFragmentDensityTexelSize,
    maxFragmentDensityTexelSize: maxFragmentDensityTexelSize,
    fragmentDensityInvocations: fragmentDensityInvocations,
  )

proc newVkPhysicalDeviceFragmentDensityMap2PropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, subsampledLoads: VkBool32, subsampledCoarseReconstructionEarlyAccess: VkBool32, maxSubsampledArrayLayers: uint32, maxDescriptorSetSubsampledSamplers: uint32): VkPhysicalDeviceFragmentDensityMap2PropertiesEXT =
  result = VkPhysicalDeviceFragmentDensityMap2PropertiesEXT(
    sType: sType,
    pNext: pNext,
    subsampledLoads: subsampledLoads,
    subsampledCoarseReconstructionEarlyAccess: subsampledCoarseReconstructionEarlyAccess,
    maxSubsampledArrayLayers: maxSubsampledArrayLayers,
    maxDescriptorSetSubsampledSamplers: maxDescriptorSetSubsampledSamplers,
  )

proc newVkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM*(sType: VkStructureType, pNext: pointer = nil, fragmentDensityOffsetGranularity: VkExtent2D): VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM =
  result = VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM(
    sType: sType,
    pNext: pNext,
    fragmentDensityOffsetGranularity: fragmentDensityOffsetGranularity,
  )

proc newVkRenderPassFragmentDensityMapCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, fragmentDensityMapAttachment: VkAttachmentReference): VkRenderPassFragmentDensityMapCreateInfoEXT =
  result = VkRenderPassFragmentDensityMapCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    fragmentDensityMapAttachment: fragmentDensityMapAttachment,
  )

proc newVkSubpassFragmentDensityMapOffsetEndInfoQCOM*(sType: VkStructureType, pNext: pointer = nil, fragmentDensityOffsetCount: uint32, pFragmentDensityOffsets: ptr VkOffset2D): VkSubpassFragmentDensityMapOffsetEndInfoQCOM =
  result = VkSubpassFragmentDensityMapOffsetEndInfoQCOM(
    sType: sType,
    pNext: pNext,
    fragmentDensityOffsetCount: fragmentDensityOffsetCount,
    pFragmentDensityOffsets: pFragmentDensityOffsets,
  )

proc newVkPhysicalDeviceScalarBlockLayoutFeatures*(sType: VkStructureType, pNext: pointer = nil, scalarBlockLayout: VkBool32): VkPhysicalDeviceScalarBlockLayoutFeatures =
  result = VkPhysicalDeviceScalarBlockLayoutFeatures(
    sType: sType,
    pNext: pNext,
    scalarBlockLayout: scalarBlockLayout,
  )

proc newVkSurfaceProtectedCapabilitiesKHR*(sType: VkStructureType, pNext: pointer = nil, supportsProtected: VkBool32): VkSurfaceProtectedCapabilitiesKHR =
  result = VkSurfaceProtectedCapabilitiesKHR(
    sType: sType,
    pNext: pNext,
    supportsProtected: supportsProtected,
  )

proc newVkPhysicalDeviceUniformBufferStandardLayoutFeatures*(sType: VkStructureType, pNext: pointer = nil, uniformBufferStandardLayout: VkBool32): VkPhysicalDeviceUniformBufferStandardLayoutFeatures =
  result = VkPhysicalDeviceUniformBufferStandardLayoutFeatures(
    sType: sType,
    pNext: pNext,
    uniformBufferStandardLayout: uniformBufferStandardLayout,
  )

proc newVkPhysicalDeviceDepthClipEnableFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, depthClipEnable: VkBool32): VkPhysicalDeviceDepthClipEnableFeaturesEXT =
  result = VkPhysicalDeviceDepthClipEnableFeaturesEXT(
    sType: sType,
    pNext: pNext,
    depthClipEnable: depthClipEnable,
  )

proc newVkPipelineRasterizationDepthClipStateCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT = 0.VkPipelineRasterizationDepthClipStateCreateFlagsEXT, depthClipEnable: VkBool32): VkPipelineRasterizationDepthClipStateCreateInfoEXT =
  result = VkPipelineRasterizationDepthClipStateCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    depthClipEnable: depthClipEnable,
  )

proc newVkPhysicalDeviceMemoryBudgetPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, heapBudget: array[VK_MAX_MEMORY_HEAPS, VkDeviceSize], heapUsage: array[VK_MAX_MEMORY_HEAPS, VkDeviceSize]): VkPhysicalDeviceMemoryBudgetPropertiesEXT =
  result = VkPhysicalDeviceMemoryBudgetPropertiesEXT(
    sType: sType,
    pNext: pNext,
    heapBudget: heapBudget,
    heapUsage: heapUsage,
  )

proc newVkPhysicalDeviceMemoryPriorityFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, memoryPriority: VkBool32): VkPhysicalDeviceMemoryPriorityFeaturesEXT =
  result = VkPhysicalDeviceMemoryPriorityFeaturesEXT(
    sType: sType,
    pNext: pNext,
    memoryPriority: memoryPriority,
  )

proc newVkMemoryPriorityAllocateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, priority: float32): VkMemoryPriorityAllocateInfoEXT =
  result = VkMemoryPriorityAllocateInfoEXT(
    sType: sType,
    pNext: pNext,
    priority: priority,
  )

proc newVkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, pageableDeviceLocalMemory: VkBool32): VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT =
  result = VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT(
    sType: sType,
    pNext: pNext,
    pageableDeviceLocalMemory: pageableDeviceLocalMemory,
  )

proc newVkPhysicalDeviceBufferDeviceAddressFeatures*(sType: VkStructureType, pNext: pointer = nil, bufferDeviceAddress: VkBool32, bufferDeviceAddressCaptureReplay: VkBool32, bufferDeviceAddressMultiDevice: VkBool32): VkPhysicalDeviceBufferDeviceAddressFeatures =
  result = VkPhysicalDeviceBufferDeviceAddressFeatures(
    sType: sType,
    pNext: pNext,
    bufferDeviceAddress: bufferDeviceAddress,
    bufferDeviceAddressCaptureReplay: bufferDeviceAddressCaptureReplay,
    bufferDeviceAddressMultiDevice: bufferDeviceAddressMultiDevice,
  )

proc newVkPhysicalDeviceBufferDeviceAddressFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, bufferDeviceAddress: VkBool32, bufferDeviceAddressCaptureReplay: VkBool32, bufferDeviceAddressMultiDevice: VkBool32): VkPhysicalDeviceBufferDeviceAddressFeaturesEXT =
  result = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT(
    sType: sType,
    pNext: pNext,
    bufferDeviceAddress: bufferDeviceAddress,
    bufferDeviceAddressCaptureReplay: bufferDeviceAddressCaptureReplay,
    bufferDeviceAddressMultiDevice: bufferDeviceAddressMultiDevice,
  )

proc newVkBufferDeviceAddressInfo*(sType: VkStructureType, pNext: pointer = nil, buffer: VkBuffer): VkBufferDeviceAddressInfo =
  result = VkBufferDeviceAddressInfo(
    sType: sType,
    pNext: pNext,
    buffer: buffer,
  )

proc newVkBufferOpaqueCaptureAddressCreateInfo*(sType: VkStructureType, pNext: pointer = nil, opaqueCaptureAddress: uint64): VkBufferOpaqueCaptureAddressCreateInfo =
  result = VkBufferOpaqueCaptureAddressCreateInfo(
    sType: sType,
    pNext: pNext,
    opaqueCaptureAddress: opaqueCaptureAddress,
  )

proc newVkBufferDeviceAddressCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, deviceAddress: VkDeviceAddress): VkBufferDeviceAddressCreateInfoEXT =
  result = VkBufferDeviceAddressCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    deviceAddress: deviceAddress,
  )

proc newVkPhysicalDeviceImageViewImageFormatInfoEXT*(sType: VkStructureType, pNext: pointer = nil, imageViewType: VkImageViewType): VkPhysicalDeviceImageViewImageFormatInfoEXT =
  result = VkPhysicalDeviceImageViewImageFormatInfoEXT(
    sType: sType,
    pNext: pNext,
    imageViewType: imageViewType,
  )

proc newVkFilterCubicImageViewImageFormatPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, filterCubic: VkBool32, filterCubicMinmax: VkBool32): VkFilterCubicImageViewImageFormatPropertiesEXT =
  result = VkFilterCubicImageViewImageFormatPropertiesEXT(
    sType: sType,
    pNext: pNext,
    filterCubic: filterCubic,
    filterCubicMinmax: filterCubicMinmax,
  )

proc newVkPhysicalDeviceImagelessFramebufferFeatures*(sType: VkStructureType, pNext: pointer = nil, imagelessFramebuffer: VkBool32): VkPhysicalDeviceImagelessFramebufferFeatures =
  result = VkPhysicalDeviceImagelessFramebufferFeatures(
    sType: sType,
    pNext: pNext,
    imagelessFramebuffer: imagelessFramebuffer,
  )

proc newVkFramebufferAttachmentsCreateInfo*(sType: VkStructureType, pNext: pointer = nil, attachmentImageInfoCount: uint32, pAttachmentImageInfos: ptr VkFramebufferAttachmentImageInfo): VkFramebufferAttachmentsCreateInfo =
  result = VkFramebufferAttachmentsCreateInfo(
    sType: sType,
    pNext: pNext,
    attachmentImageInfoCount: attachmentImageInfoCount,
    pAttachmentImageInfos: pAttachmentImageInfos,
  )

proc newVkFramebufferAttachmentImageInfo*(sType: VkStructureType, pNext: pointer = nil, flags: VkImageCreateFlags = 0.VkImageCreateFlags, usage: VkImageUsageFlags, width: uint32, height: uint32, layerCount: uint32, viewFormatCount: uint32, pViewFormats: ptr VkFormat): VkFramebufferAttachmentImageInfo =
  result = VkFramebufferAttachmentImageInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    usage: usage,
    width: width,
    height: height,
    layerCount: layerCount,
    viewFormatCount: viewFormatCount,
    pViewFormats: pViewFormats,
  )

proc newVkRenderPassAttachmentBeginInfo*(sType: VkStructureType, pNext: pointer = nil, attachmentCount: uint32, pAttachments: ptr VkImageView): VkRenderPassAttachmentBeginInfo =
  result = VkRenderPassAttachmentBeginInfo(
    sType: sType,
    pNext: pNext,
    attachmentCount: attachmentCount,
    pAttachments: pAttachments,
  )

proc newVkPhysicalDeviceTextureCompressionASTCHDRFeatures*(sType: VkStructureType, pNext: pointer = nil, textureCompressionASTC_HDR: VkBool32): VkPhysicalDeviceTextureCompressionASTCHDRFeatures =
  result = VkPhysicalDeviceTextureCompressionASTCHDRFeatures(
    sType: sType,
    pNext: pNext,
    textureCompressionASTC_HDR: textureCompressionASTC_HDR,
  )

proc newVkPhysicalDeviceCooperativeMatrixFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, cooperativeMatrix: VkBool32, cooperativeMatrixRobustBufferAccess: VkBool32): VkPhysicalDeviceCooperativeMatrixFeaturesNV =
  result = VkPhysicalDeviceCooperativeMatrixFeaturesNV(
    sType: sType,
    pNext: pNext,
    cooperativeMatrix: cooperativeMatrix,
    cooperativeMatrixRobustBufferAccess: cooperativeMatrixRobustBufferAccess,
  )

proc newVkPhysicalDeviceCooperativeMatrixPropertiesNV*(sType: VkStructureType, pNext: pointer = nil, cooperativeMatrixSupportedStages: VkShaderStageFlags): VkPhysicalDeviceCooperativeMatrixPropertiesNV =
  result = VkPhysicalDeviceCooperativeMatrixPropertiesNV(
    sType: sType,
    pNext: pNext,
    cooperativeMatrixSupportedStages: cooperativeMatrixSupportedStages,
  )

proc newVkCooperativeMatrixPropertiesNV*(sType: VkStructureType, pNext: pointer = nil, MSize: uint32, NSize: uint32, KSize: uint32, AType: VkComponentTypeNV, BType: VkComponentTypeNV, CType: VkComponentTypeNV, DType: VkComponentTypeNV, scope: VkScopeNV): VkCooperativeMatrixPropertiesNV =
  result = VkCooperativeMatrixPropertiesNV(
    sType: sType,
    pNext: pNext,
    MSize: MSize,
    NSize: NSize,
    KSize: KSize,
    AType: AType,
    BType: BType,
    CType: CType,
    DType: DType,
    scope: scope,
  )

proc newVkPhysicalDeviceYcbcrImageArraysFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, ycbcrImageArrays: VkBool32): VkPhysicalDeviceYcbcrImageArraysFeaturesEXT =
  result = VkPhysicalDeviceYcbcrImageArraysFeaturesEXT(
    sType: sType,
    pNext: pNext,
    ycbcrImageArrays: ycbcrImageArrays,
  )

proc newVkImageViewHandleInfoNVX*(sType: VkStructureType, pNext: pointer = nil, imageView: VkImageView, descriptorType: VkDescriptorType, sampler: VkSampler): VkImageViewHandleInfoNVX =
  result = VkImageViewHandleInfoNVX(
    sType: sType,
    pNext: pNext,
    imageView: imageView,
    descriptorType: descriptorType,
    sampler: sampler,
  )

proc newVkImageViewAddressPropertiesNVX*(sType: VkStructureType, pNext: pointer = nil, deviceAddress: VkDeviceAddress, size: VkDeviceSize): VkImageViewAddressPropertiesNVX =
  result = VkImageViewAddressPropertiesNVX(
    sType: sType,
    pNext: pNext,
    deviceAddress: deviceAddress,
    size: size,
  )

proc newVkPresentFrameTokenGGP*(sType: VkStructureType, pNext: pointer = nil, frameToken: GgpFrameToken): VkPresentFrameTokenGGP =
  result = VkPresentFrameTokenGGP(
    sType: sType,
    pNext: pNext,
    frameToken: frameToken,
  )

proc newVkPipelineCreationFeedback*(flags: VkPipelineCreationFeedbackFlags = 0.VkPipelineCreationFeedbackFlags, duration: uint64): VkPipelineCreationFeedback =
  result = VkPipelineCreationFeedback(
    flags: flags,
    duration: duration,
  )

proc newVkPipelineCreationFeedbackCreateInfo*(sType: VkStructureType, pNext: pointer = nil, pPipelineCreationFeedback: ptr VkPipelineCreationFeedback, pipelineStageCreationFeedbackCount: uint32, pPipelineStageCreationFeedbacks: ptr ptr VkPipelineCreationFeedback): VkPipelineCreationFeedbackCreateInfo =
  result = VkPipelineCreationFeedbackCreateInfo(
    sType: sType,
    pNext: pNext,
    pPipelineCreationFeedback: pPipelineCreationFeedback,
    pipelineStageCreationFeedbackCount: pipelineStageCreationFeedbackCount,
    pPipelineStageCreationFeedbacks: pPipelineStageCreationFeedbacks,
  )

proc newVkSurfaceFullScreenExclusiveInfoEXT*(sType: VkStructureType, pNext: pointer = nil, fullScreenExclusive: VkFullScreenExclusiveEXT): VkSurfaceFullScreenExclusiveInfoEXT =
  result = VkSurfaceFullScreenExclusiveInfoEXT(
    sType: sType,
    pNext: pNext,
    fullScreenExclusive: fullScreenExclusive,
  )

proc newVkSurfaceFullScreenExclusiveWin32InfoEXT*(sType: VkStructureType, pNext: pointer = nil, hmonitor: HMONITOR): VkSurfaceFullScreenExclusiveWin32InfoEXT =
  result = VkSurfaceFullScreenExclusiveWin32InfoEXT(
    sType: sType,
    pNext: pNext,
    hmonitor: hmonitor,
  )

proc newVkSurfaceCapabilitiesFullScreenExclusiveEXT*(sType: VkStructureType, pNext: pointer = nil, fullScreenExclusiveSupported: VkBool32): VkSurfaceCapabilitiesFullScreenExclusiveEXT =
  result = VkSurfaceCapabilitiesFullScreenExclusiveEXT(
    sType: sType,
    pNext: pNext,
    fullScreenExclusiveSupported: fullScreenExclusiveSupported,
  )

proc newVkPhysicalDevicePresentBarrierFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, presentBarrier: VkBool32): VkPhysicalDevicePresentBarrierFeaturesNV =
  result = VkPhysicalDevicePresentBarrierFeaturesNV(
    sType: sType,
    pNext: pNext,
    presentBarrier: presentBarrier,
  )

proc newVkSurfaceCapabilitiesPresentBarrierNV*(sType: VkStructureType, pNext: pointer = nil, presentBarrierSupported: VkBool32): VkSurfaceCapabilitiesPresentBarrierNV =
  result = VkSurfaceCapabilitiesPresentBarrierNV(
    sType: sType,
    pNext: pNext,
    presentBarrierSupported: presentBarrierSupported,
  )

proc newVkSwapchainPresentBarrierCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, presentBarrierEnable: VkBool32): VkSwapchainPresentBarrierCreateInfoNV =
  result = VkSwapchainPresentBarrierCreateInfoNV(
    sType: sType,
    pNext: pNext,
    presentBarrierEnable: presentBarrierEnable,
  )

proc newVkPhysicalDevicePerformanceQueryFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, performanceCounterQueryPools: VkBool32, performanceCounterMultipleQueryPools: VkBool32): VkPhysicalDevicePerformanceQueryFeaturesKHR =
  result = VkPhysicalDevicePerformanceQueryFeaturesKHR(
    sType: sType,
    pNext: pNext,
    performanceCounterQueryPools: performanceCounterQueryPools,
    performanceCounterMultipleQueryPools: performanceCounterMultipleQueryPools,
  )

proc newVkPhysicalDevicePerformanceQueryPropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, allowCommandBufferQueryCopies: VkBool32): VkPhysicalDevicePerformanceQueryPropertiesKHR =
  result = VkPhysicalDevicePerformanceQueryPropertiesKHR(
    sType: sType,
    pNext: pNext,
    allowCommandBufferQueryCopies: allowCommandBufferQueryCopies,
  )

proc newVkPerformanceCounterKHR*(sType: VkStructureType, pNext: pointer = nil, unit: VkPerformanceCounterUnitKHR, scope: VkPerformanceCounterScopeKHR, storage: VkPerformanceCounterStorageKHR, uuid: array[VK_UUID_SIZE, uint8]): VkPerformanceCounterKHR =
  result = VkPerformanceCounterKHR(
    sType: sType,
    pNext: pNext,
    unit: unit,
    scope: scope,
    storage: storage,
    uuid: uuid,
  )

proc newVkPerformanceCounterDescriptionKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkPerformanceCounterDescriptionFlagsKHR = 0.VkPerformanceCounterDescriptionFlagsKHR, name: array[VK_MAX_DESCRIPTION_SIZE, char], category: array[VK_MAX_DESCRIPTION_SIZE, char], description: array[VK_MAX_DESCRIPTION_SIZE, char]): VkPerformanceCounterDescriptionKHR =
  result = VkPerformanceCounterDescriptionKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    name: name,
    category: category,
    description: description,
  )

proc newVkQueryPoolPerformanceCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, queueFamilyIndex: uint32, counterIndexCount: uint32, pCounterIndices: ptr uint32): VkQueryPoolPerformanceCreateInfoKHR =
  result = VkQueryPoolPerformanceCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    queueFamilyIndex: queueFamilyIndex,
    counterIndexCount: counterIndexCount,
    pCounterIndices: pCounterIndices,
  )

proc newVkAcquireProfilingLockInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkAcquireProfilingLockFlagsKHR = 0.VkAcquireProfilingLockFlagsKHR, timeout: uint64): VkAcquireProfilingLockInfoKHR =
  result = VkAcquireProfilingLockInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    timeout: timeout,
  )

proc newVkPerformanceQuerySubmitInfoKHR*(sType: VkStructureType, pNext: pointer = nil, counterPassIndex: uint32): VkPerformanceQuerySubmitInfoKHR =
  result = VkPerformanceQuerySubmitInfoKHR(
    sType: sType,
    pNext: pNext,
    counterPassIndex: counterPassIndex,
  )

proc newVkPerformanceQueryReservationInfoKHR*(sType: VkStructureType, pNext: pointer = nil, maxPerformanceQueriesPerPool: uint32): VkPerformanceQueryReservationInfoKHR =
  result = VkPerformanceQueryReservationInfoKHR(
    sType: sType,
    pNext: pNext,
    maxPerformanceQueriesPerPool: maxPerformanceQueriesPerPool,
  )

proc newVkHeadlessSurfaceCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkHeadlessSurfaceCreateFlagsEXT = 0.VkHeadlessSurfaceCreateFlagsEXT): VkHeadlessSurfaceCreateInfoEXT =
  result = VkHeadlessSurfaceCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
  )

proc newVkPhysicalDeviceCoverageReductionModeFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, coverageReductionMode: VkBool32): VkPhysicalDeviceCoverageReductionModeFeaturesNV =
  result = VkPhysicalDeviceCoverageReductionModeFeaturesNV(
    sType: sType,
    pNext: pNext,
    coverageReductionMode: coverageReductionMode,
  )

proc newVkPipelineCoverageReductionStateCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, flags: VkPipelineCoverageReductionStateCreateFlagsNV = 0.VkPipelineCoverageReductionStateCreateFlagsNV, coverageReductionMode: VkCoverageReductionModeNV): VkPipelineCoverageReductionStateCreateInfoNV =
  result = VkPipelineCoverageReductionStateCreateInfoNV(
    sType: sType,
    pNext: pNext,
    flags: flags,
    coverageReductionMode: coverageReductionMode,
  )

proc newVkFramebufferMixedSamplesCombinationNV*(sType: VkStructureType, pNext: pointer = nil, coverageReductionMode: VkCoverageReductionModeNV, rasterizationSamples: VkSampleCountFlagBits, depthStencilSamples: VkSampleCountFlags, colorSamples: VkSampleCountFlags): VkFramebufferMixedSamplesCombinationNV =
  result = VkFramebufferMixedSamplesCombinationNV(
    sType: sType,
    pNext: pNext,
    coverageReductionMode: coverageReductionMode,
    rasterizationSamples: rasterizationSamples,
    depthStencilSamples: depthStencilSamples,
    colorSamples: colorSamples,
  )

proc newVkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL*(sType: VkStructureType, pNext: pointer = nil, shaderIntegerFunctions2: VkBool32): VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL =
  result = VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(
    sType: sType,
    pNext: pNext,
    shaderIntegerFunctions2: shaderIntegerFunctions2,
  )

proc newVkPerformanceValueINTEL*(`type`: VkPerformanceValueTypeINTEL, data: VkPerformanceValueDataINTEL): VkPerformanceValueINTEL =
  result = VkPerformanceValueINTEL(
    `type`: `type`,
    data: data,
  )

proc newVkInitializePerformanceApiInfoINTEL*(sType: VkStructureType, pNext: pointer = nil, pUserData: pointer = nil): VkInitializePerformanceApiInfoINTEL =
  result = VkInitializePerformanceApiInfoINTEL(
    sType: sType,
    pNext: pNext,
    pUserData: pUserData,
  )

proc newVkQueryPoolPerformanceQueryCreateInfoINTEL*(sType: VkStructureType, pNext: pointer = nil, performanceCountersSampling: VkQueryPoolSamplingModeINTEL): VkQueryPoolPerformanceQueryCreateInfoINTEL =
  result = VkQueryPoolPerformanceQueryCreateInfoINTEL(
    sType: sType,
    pNext: pNext,
    performanceCountersSampling: performanceCountersSampling,
  )

proc newVkPerformanceMarkerInfoINTEL*(sType: VkStructureType, pNext: pointer = nil, marker: uint64): VkPerformanceMarkerInfoINTEL =
  result = VkPerformanceMarkerInfoINTEL(
    sType: sType,
    pNext: pNext,
    marker: marker,
  )

proc newVkPerformanceStreamMarkerInfoINTEL*(sType: VkStructureType, pNext: pointer = nil, marker: uint32): VkPerformanceStreamMarkerInfoINTEL =
  result = VkPerformanceStreamMarkerInfoINTEL(
    sType: sType,
    pNext: pNext,
    marker: marker,
  )

proc newVkPerformanceOverrideInfoINTEL*(sType: VkStructureType, pNext: pointer = nil, `type`: VkPerformanceOverrideTypeINTEL, enable: VkBool32, parameter: uint64): VkPerformanceOverrideInfoINTEL =
  result = VkPerformanceOverrideInfoINTEL(
    sType: sType,
    pNext: pNext,
    `type`: `type`,
    enable: enable,
    parameter: parameter,
  )

proc newVkPerformanceConfigurationAcquireInfoINTEL*(sType: VkStructureType, pNext: pointer = nil, `type`: VkPerformanceConfigurationTypeINTEL): VkPerformanceConfigurationAcquireInfoINTEL =
  result = VkPerformanceConfigurationAcquireInfoINTEL(
    sType: sType,
    pNext: pNext,
    `type`: `type`,
  )

proc newVkPhysicalDeviceShaderClockFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, shaderSubgroupClock: VkBool32, shaderDeviceClock: VkBool32): VkPhysicalDeviceShaderClockFeaturesKHR =
  result = VkPhysicalDeviceShaderClockFeaturesKHR(
    sType: sType,
    pNext: pNext,
    shaderSubgroupClock: shaderSubgroupClock,
    shaderDeviceClock: shaderDeviceClock,
  )

proc newVkPhysicalDeviceIndexTypeUint8FeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, indexTypeUint8: VkBool32): VkPhysicalDeviceIndexTypeUint8FeaturesKHR =
  result = VkPhysicalDeviceIndexTypeUint8FeaturesKHR(
    sType: sType,
    pNext: pNext,
    indexTypeUint8: indexTypeUint8,
  )

proc newVkPhysicalDeviceShaderSMBuiltinsPropertiesNV*(sType: VkStructureType, pNext: pointer = nil, shaderSMCount: uint32, shaderWarpsPerSM: uint32): VkPhysicalDeviceShaderSMBuiltinsPropertiesNV =
  result = VkPhysicalDeviceShaderSMBuiltinsPropertiesNV(
    sType: sType,
    pNext: pNext,
    shaderSMCount: shaderSMCount,
    shaderWarpsPerSM: shaderWarpsPerSM,
  )

proc newVkPhysicalDeviceShaderSMBuiltinsFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, shaderSMBuiltins: VkBool32): VkPhysicalDeviceShaderSMBuiltinsFeaturesNV =
  result = VkPhysicalDeviceShaderSMBuiltinsFeaturesNV(
    sType: sType,
    pNext: pNext,
    shaderSMBuiltins: shaderSMBuiltins,
  )

proc newVkPhysicalDeviceFragmentShaderInterlockFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, fragmentShaderSampleInterlock: VkBool32, fragmentShaderPixelInterlock: VkBool32, fragmentShaderShadingRateInterlock: VkBool32): VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT =
  result = VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT(
    sType: sType,
    pNext: pNext,
    fragmentShaderSampleInterlock: fragmentShaderSampleInterlock,
    fragmentShaderPixelInterlock: fragmentShaderPixelInterlock,
    fragmentShaderShadingRateInterlock: fragmentShaderShadingRateInterlock,
  )

proc newVkPhysicalDeviceSeparateDepthStencilLayoutsFeatures*(sType: VkStructureType, pNext: pointer = nil, separateDepthStencilLayouts: VkBool32): VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures =
  result = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures(
    sType: sType,
    pNext: pNext,
    separateDepthStencilLayouts: separateDepthStencilLayouts,
  )

proc newVkAttachmentReferenceStencilLayout*(sType: VkStructureType, pNext: pointer = nil, stencilLayout: VkImageLayout): VkAttachmentReferenceStencilLayout =
  result = VkAttachmentReferenceStencilLayout(
    sType: sType,
    pNext: pNext,
    stencilLayout: stencilLayout,
  )

proc newVkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, primitiveTopologyListRestart: VkBool32, primitiveTopologyPatchListRestart: VkBool32): VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT =
  result = VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT(
    sType: sType,
    pNext: pNext,
    primitiveTopologyListRestart: primitiveTopologyListRestart,
    primitiveTopologyPatchListRestart: primitiveTopologyPatchListRestart,
  )

proc newVkAttachmentDescriptionStencilLayout*(sType: VkStructureType, pNext: pointer = nil, stencilInitialLayout: VkImageLayout, stencilFinalLayout: VkImageLayout): VkAttachmentDescriptionStencilLayout =
  result = VkAttachmentDescriptionStencilLayout(
    sType: sType,
    pNext: pNext,
    stencilInitialLayout: stencilInitialLayout,
    stencilFinalLayout: stencilFinalLayout,
  )

proc newVkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, pipelineExecutableInfo: VkBool32): VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR =
  result = VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
    sType: sType,
    pNext: pNext,
    pipelineExecutableInfo: pipelineExecutableInfo,
  )

proc newVkPipelineInfoKHR*(sType: VkStructureType, pNext: pointer = nil, pipeline: VkPipeline): VkPipelineInfoKHR =
  result = VkPipelineInfoKHR(
    sType: sType,
    pNext: pNext,
    pipeline: pipeline,
  )

proc newVkPipelineExecutablePropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, stages: VkShaderStageFlags, name: array[VK_MAX_DESCRIPTION_SIZE, char], description: array[VK_MAX_DESCRIPTION_SIZE, char], subgroupSize: uint32): VkPipelineExecutablePropertiesKHR =
  result = VkPipelineExecutablePropertiesKHR(
    sType: sType,
    pNext: pNext,
    stages: stages,
    name: name,
    description: description,
    subgroupSize: subgroupSize,
  )

proc newVkPipelineExecutableInfoKHR*(sType: VkStructureType, pNext: pointer = nil, pipeline: VkPipeline, executableIndex: uint32): VkPipelineExecutableInfoKHR =
  result = VkPipelineExecutableInfoKHR(
    sType: sType,
    pNext: pNext,
    pipeline: pipeline,
    executableIndex: executableIndex,
  )

proc newVkPipelineExecutableStatisticKHR*(sType: VkStructureType, pNext: pointer = nil, name: array[VK_MAX_DESCRIPTION_SIZE, char], description: array[VK_MAX_DESCRIPTION_SIZE, char], format: VkPipelineExecutableStatisticFormatKHR, value: VkPipelineExecutableStatisticValueKHR): VkPipelineExecutableStatisticKHR =
  result = VkPipelineExecutableStatisticKHR(
    sType: sType,
    pNext: pNext,
    name: name,
    description: description,
    format: format,
    value: value,
  )

proc newVkPipelineExecutableInternalRepresentationKHR*(sType: VkStructureType, pNext: pointer = nil, name: array[VK_MAX_DESCRIPTION_SIZE, char], description: array[VK_MAX_DESCRIPTION_SIZE, char], isText: VkBool32, dataSize: uint, pData: pointer = nil): VkPipelineExecutableInternalRepresentationKHR =
  result = VkPipelineExecutableInternalRepresentationKHR(
    sType: sType,
    pNext: pNext,
    name: name,
    description: description,
    isText: isText,
    dataSize: dataSize,
    pData: pData,
  )

proc newVkPhysicalDeviceShaderDemoteToHelperInvocationFeatures*(sType: VkStructureType, pNext: pointer = nil, shaderDemoteToHelperInvocation: VkBool32): VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures =
  result = VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures(
    sType: sType,
    pNext: pNext,
    shaderDemoteToHelperInvocation: shaderDemoteToHelperInvocation,
  )

proc newVkPhysicalDeviceTexelBufferAlignmentFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, texelBufferAlignment: VkBool32): VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT =
  result = VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT(
    sType: sType,
    pNext: pNext,
    texelBufferAlignment: texelBufferAlignment,
  )

proc newVkPhysicalDeviceTexelBufferAlignmentProperties*(sType: VkStructureType, pNext: pointer = nil, storageTexelBufferOffsetAlignmentBytes: VkDeviceSize, storageTexelBufferOffsetSingleTexelAlignment: VkBool32, uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize, uniformTexelBufferOffsetSingleTexelAlignment: VkBool32): VkPhysicalDeviceTexelBufferAlignmentProperties =
  result = VkPhysicalDeviceTexelBufferAlignmentProperties(
    sType: sType,
    pNext: pNext,
    storageTexelBufferOffsetAlignmentBytes: storageTexelBufferOffsetAlignmentBytes,
    storageTexelBufferOffsetSingleTexelAlignment: storageTexelBufferOffsetSingleTexelAlignment,
    uniformTexelBufferOffsetAlignmentBytes: uniformTexelBufferOffsetAlignmentBytes,
    uniformTexelBufferOffsetSingleTexelAlignment: uniformTexelBufferOffsetSingleTexelAlignment,
  )

proc newVkPhysicalDeviceSubgroupSizeControlFeatures*(sType: VkStructureType, pNext: pointer = nil, subgroupSizeControl: VkBool32, computeFullSubgroups: VkBool32): VkPhysicalDeviceSubgroupSizeControlFeatures =
  result = VkPhysicalDeviceSubgroupSizeControlFeatures(
    sType: sType,
    pNext: pNext,
    subgroupSizeControl: subgroupSizeControl,
    computeFullSubgroups: computeFullSubgroups,
  )

proc newVkPhysicalDeviceSubgroupSizeControlProperties*(sType: VkStructureType, pNext: pointer = nil, minSubgroupSize: uint32, maxSubgroupSize: uint32, maxComputeWorkgroupSubgroups: uint32, requiredSubgroupSizeStages: VkShaderStageFlags): VkPhysicalDeviceSubgroupSizeControlProperties =
  result = VkPhysicalDeviceSubgroupSizeControlProperties(
    sType: sType,
    pNext: pNext,
    minSubgroupSize: minSubgroupSize,
    maxSubgroupSize: maxSubgroupSize,
    maxComputeWorkgroupSubgroups: maxComputeWorkgroupSubgroups,
    requiredSubgroupSizeStages: requiredSubgroupSizeStages,
  )

proc newVkPipelineShaderStageRequiredSubgroupSizeCreateInfo*(sType: VkStructureType, pNext: pointer = nil, requiredSubgroupSize: uint32): VkPipelineShaderStageRequiredSubgroupSizeCreateInfo =
  result = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo(
    sType: sType,
    pNext: pNext,
    requiredSubgroupSize: requiredSubgroupSize,
  )

proc newVkSubpassShadingPipelineCreateInfoHUAWEI*(sType: VkStructureType, pNext: pointer = nil, renderPass: VkRenderPass, subpass: uint32): VkSubpassShadingPipelineCreateInfoHUAWEI =
  result = VkSubpassShadingPipelineCreateInfoHUAWEI(
    sType: sType,
    pNext: pNext,
    renderPass: renderPass,
    subpass: subpass,
  )

proc newVkPhysicalDeviceSubpassShadingPropertiesHUAWEI*(sType: VkStructureType, pNext: pointer = nil, maxSubpassShadingWorkgroupSizeAspectRatio: uint32): VkPhysicalDeviceSubpassShadingPropertiesHUAWEI =
  result = VkPhysicalDeviceSubpassShadingPropertiesHUAWEI(
    sType: sType,
    pNext: pNext,
    maxSubpassShadingWorkgroupSizeAspectRatio: maxSubpassShadingWorkgroupSizeAspectRatio,
  )

proc newVkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI*(sType: VkStructureType, pNext: pointer = nil, maxWorkGroupCount: array[3, uint32], maxWorkGroupSize: array[3, uint32], maxOutputClusterCount: uint32, indirectBufferOffsetAlignment: VkDeviceSize): VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI =
  result = VkPhysicalDeviceClusterCullingShaderPropertiesHUAWEI(
    sType: sType,
    pNext: pNext,
    maxWorkGroupCount: maxWorkGroupCount,
    maxWorkGroupSize: maxWorkGroupSize,
    maxOutputClusterCount: maxOutputClusterCount,
    indirectBufferOffsetAlignment: indirectBufferOffsetAlignment,
  )

proc newVkMemoryOpaqueCaptureAddressAllocateInfo*(sType: VkStructureType, pNext: pointer = nil, opaqueCaptureAddress: uint64): VkMemoryOpaqueCaptureAddressAllocateInfo =
  result = VkMemoryOpaqueCaptureAddressAllocateInfo(
    sType: sType,
    pNext: pNext,
    opaqueCaptureAddress: opaqueCaptureAddress,
  )

proc newVkDeviceMemoryOpaqueCaptureAddressInfo*(sType: VkStructureType, pNext: pointer = nil, memory: VkDeviceMemory): VkDeviceMemoryOpaqueCaptureAddressInfo =
  result = VkDeviceMemoryOpaqueCaptureAddressInfo(
    sType: sType,
    pNext: pNext,
    memory: memory,
  )

proc newVkPhysicalDeviceLineRasterizationFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, rectangularLines: VkBool32, bresenhamLines: VkBool32, smoothLines: VkBool32, stippledRectangularLines: VkBool32, stippledBresenhamLines: VkBool32, stippledSmoothLines: VkBool32): VkPhysicalDeviceLineRasterizationFeaturesKHR =
  result = VkPhysicalDeviceLineRasterizationFeaturesKHR(
    sType: sType,
    pNext: pNext,
    rectangularLines: rectangularLines,
    bresenhamLines: bresenhamLines,
    smoothLines: smoothLines,
    stippledRectangularLines: stippledRectangularLines,
    stippledBresenhamLines: stippledBresenhamLines,
    stippledSmoothLines: stippledSmoothLines,
  )

proc newVkPhysicalDeviceLineRasterizationPropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, lineSubPixelPrecisionBits: uint32): VkPhysicalDeviceLineRasterizationPropertiesKHR =
  result = VkPhysicalDeviceLineRasterizationPropertiesKHR(
    sType: sType,
    pNext: pNext,
    lineSubPixelPrecisionBits: lineSubPixelPrecisionBits,
  )

proc newVkPipelineRasterizationLineStateCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, lineRasterizationMode: VkLineRasterizationModeKHR, stippledLineEnable: VkBool32, lineStippleFactor: uint32, lineStipplePattern: uint16): VkPipelineRasterizationLineStateCreateInfoKHR =
  result = VkPipelineRasterizationLineStateCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    lineRasterizationMode: lineRasterizationMode,
    stippledLineEnable: stippledLineEnable,
    lineStippleFactor: lineStippleFactor,
    lineStipplePattern: lineStipplePattern,
  )

proc newVkPhysicalDevicePipelineCreationCacheControlFeatures*(sType: VkStructureType, pNext: pointer = nil, pipelineCreationCacheControl: VkBool32): VkPhysicalDevicePipelineCreationCacheControlFeatures =
  result = VkPhysicalDevicePipelineCreationCacheControlFeatures(
    sType: sType,
    pNext: pNext,
    pipelineCreationCacheControl: pipelineCreationCacheControl,
  )

proc newVkPhysicalDeviceVulkan11Features*(sType: VkStructureType, pNext: pointer = nil, storageBuffer16BitAccess: VkBool32, uniformAndStorageBuffer16BitAccess: VkBool32, storagePushConstant16: VkBool32, storageInputOutput16: VkBool32, multiview: VkBool32, multiviewGeometryShader: VkBool32, multiviewTessellationShader: VkBool32, variablePointersStorageBuffer: VkBool32, variablePointers: VkBool32, protectedMemory: VkBool32, samplerYcbcrConversion: VkBool32, shaderDrawParameters: VkBool32): VkPhysicalDeviceVulkan11Features =
  result = VkPhysicalDeviceVulkan11Features(
    sType: sType,
    pNext: pNext,
    storageBuffer16BitAccess: storageBuffer16BitAccess,
    uniformAndStorageBuffer16BitAccess: uniformAndStorageBuffer16BitAccess,
    storagePushConstant16: storagePushConstant16,
    storageInputOutput16: storageInputOutput16,
    multiview: multiview,
    multiviewGeometryShader: multiviewGeometryShader,
    multiviewTessellationShader: multiviewTessellationShader,
    variablePointersStorageBuffer: variablePointersStorageBuffer,
    variablePointers: variablePointers,
    protectedMemory: protectedMemory,
    samplerYcbcrConversion: samplerYcbcrConversion,
    shaderDrawParameters: shaderDrawParameters,
  )

proc newVkPhysicalDeviceVulkan11Properties*(sType: VkStructureType, pNext: pointer = nil, deviceUUID: array[VK_UUID_SIZE, uint8], driverUUID: array[VK_UUID_SIZE, uint8], deviceLUID: array[VK_LUID_SIZE, uint8], deviceNodeMask: uint32, deviceLUIDValid: VkBool32, subgroupSize: uint32, subgroupSupportedStages: VkShaderStageFlags, subgroupSupportedOperations: VkSubgroupFeatureFlags, subgroupQuadOperationsInAllStages: VkBool32, pointClippingBehavior: VkPointClippingBehavior, maxMultiviewViewCount: uint32, maxMultiviewInstanceIndex: uint32, protectedNoFault: VkBool32, maxPerSetDescriptors: uint32, maxMemoryAllocationSize: VkDeviceSize): VkPhysicalDeviceVulkan11Properties =
  result = VkPhysicalDeviceVulkan11Properties(
    sType: sType,
    pNext: pNext,
    deviceUUID: deviceUUID,
    driverUUID: driverUUID,
    deviceLUID: deviceLUID,
    deviceNodeMask: deviceNodeMask,
    deviceLUIDValid: deviceLUIDValid,
    subgroupSize: subgroupSize,
    subgroupSupportedStages: subgroupSupportedStages,
    subgroupSupportedOperations: subgroupSupportedOperations,
    subgroupQuadOperationsInAllStages: subgroupQuadOperationsInAllStages,
    pointClippingBehavior: pointClippingBehavior,
    maxMultiviewViewCount: maxMultiviewViewCount,
    maxMultiviewInstanceIndex: maxMultiviewInstanceIndex,
    protectedNoFault: protectedNoFault,
    maxPerSetDescriptors: maxPerSetDescriptors,
    maxMemoryAllocationSize: maxMemoryAllocationSize,
  )

proc newVkPhysicalDeviceVulkan12Features*(sType: VkStructureType, pNext: pointer = nil, samplerMirrorClampToEdge: VkBool32, drawIndirectCount: VkBool32, storageBuffer8BitAccess: VkBool32, uniformAndStorageBuffer8BitAccess: VkBool32, storagePushConstant8: VkBool32, shaderBufferInt64Atomics: VkBool32, shaderSharedInt64Atomics: VkBool32, shaderFloat16: VkBool32, shaderInt8: VkBool32, descriptorIndexing: VkBool32, shaderInputAttachmentArrayDynamicIndexing: VkBool32, shaderUniformTexelBufferArrayDynamicIndexing: VkBool32, shaderStorageTexelBufferArrayDynamicIndexing: VkBool32, shaderUniformBufferArrayNonUniformIndexing: VkBool32, shaderSampledImageArrayNonUniformIndexing: VkBool32, shaderStorageBufferArrayNonUniformIndexing: VkBool32, shaderStorageImageArrayNonUniformIndexing: VkBool32, shaderInputAttachmentArrayNonUniformIndexing: VkBool32, shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32, shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32, descriptorBindingUniformBufferUpdateAfterBind: VkBool32, descriptorBindingSampledImageUpdateAfterBind: VkBool32, descriptorBindingStorageImageUpdateAfterBind: VkBool32, descriptorBindingStorageBufferUpdateAfterBind: VkBool32, descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32, descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32, descriptorBindingUpdateUnusedWhilePending: VkBool32, descriptorBindingPartiallyBound: VkBool32, descriptorBindingVariableDescriptorCount: VkBool32, runtimeDescriptorArray: VkBool32, samplerFilterMinmax: VkBool32, scalarBlockLayout: VkBool32, imagelessFramebuffer: VkBool32, uniformBufferStandardLayout: VkBool32, shaderSubgroupExtendedTypes: VkBool32, separateDepthStencilLayouts: VkBool32, hostQueryReset: VkBool32, timelineSemaphore: VkBool32, bufferDeviceAddress: VkBool32, bufferDeviceAddressCaptureReplay: VkBool32, bufferDeviceAddressMultiDevice: VkBool32, vulkanMemoryModel: VkBool32, vulkanMemoryModelDeviceScope: VkBool32, vulkanMemoryModelAvailabilityVisibilityChains: VkBool32, shaderOutputViewportIndex: VkBool32, shaderOutputLayer: VkBool32, subgroupBroadcastDynamicId: VkBool32): VkPhysicalDeviceVulkan12Features =
  result = VkPhysicalDeviceVulkan12Features(
    sType: sType,
    pNext: pNext,
    samplerMirrorClampToEdge: samplerMirrorClampToEdge,
    drawIndirectCount: drawIndirectCount,
    storageBuffer8BitAccess: storageBuffer8BitAccess,
    uniformAndStorageBuffer8BitAccess: uniformAndStorageBuffer8BitAccess,
    storagePushConstant8: storagePushConstant8,
    shaderBufferInt64Atomics: shaderBufferInt64Atomics,
    shaderSharedInt64Atomics: shaderSharedInt64Atomics,
    shaderFloat16: shaderFloat16,
    shaderInt8: shaderInt8,
    descriptorIndexing: descriptorIndexing,
    shaderInputAttachmentArrayDynamicIndexing: shaderInputAttachmentArrayDynamicIndexing,
    shaderUniformTexelBufferArrayDynamicIndexing: shaderUniformTexelBufferArrayDynamicIndexing,
    shaderStorageTexelBufferArrayDynamicIndexing: shaderStorageTexelBufferArrayDynamicIndexing,
    shaderUniformBufferArrayNonUniformIndexing: shaderUniformBufferArrayNonUniformIndexing,
    shaderSampledImageArrayNonUniformIndexing: shaderSampledImageArrayNonUniformIndexing,
    shaderStorageBufferArrayNonUniformIndexing: shaderStorageBufferArrayNonUniformIndexing,
    shaderStorageImageArrayNonUniformIndexing: shaderStorageImageArrayNonUniformIndexing,
    shaderInputAttachmentArrayNonUniformIndexing: shaderInputAttachmentArrayNonUniformIndexing,
    shaderUniformTexelBufferArrayNonUniformIndexing: shaderUniformTexelBufferArrayNonUniformIndexing,
    shaderStorageTexelBufferArrayNonUniformIndexing: shaderStorageTexelBufferArrayNonUniformIndexing,
    descriptorBindingUniformBufferUpdateAfterBind: descriptorBindingUniformBufferUpdateAfterBind,
    descriptorBindingSampledImageUpdateAfterBind: descriptorBindingSampledImageUpdateAfterBind,
    descriptorBindingStorageImageUpdateAfterBind: descriptorBindingStorageImageUpdateAfterBind,
    descriptorBindingStorageBufferUpdateAfterBind: descriptorBindingStorageBufferUpdateAfterBind,
    descriptorBindingUniformTexelBufferUpdateAfterBind: descriptorBindingUniformTexelBufferUpdateAfterBind,
    descriptorBindingStorageTexelBufferUpdateAfterBind: descriptorBindingStorageTexelBufferUpdateAfterBind,
    descriptorBindingUpdateUnusedWhilePending: descriptorBindingUpdateUnusedWhilePending,
    descriptorBindingPartiallyBound: descriptorBindingPartiallyBound,
    descriptorBindingVariableDescriptorCount: descriptorBindingVariableDescriptorCount,
    runtimeDescriptorArray: runtimeDescriptorArray,
    samplerFilterMinmax: samplerFilterMinmax,
    scalarBlockLayout: scalarBlockLayout,
    imagelessFramebuffer: imagelessFramebuffer,
    uniformBufferStandardLayout: uniformBufferStandardLayout,
    shaderSubgroupExtendedTypes: shaderSubgroupExtendedTypes,
    separateDepthStencilLayouts: separateDepthStencilLayouts,
    hostQueryReset: hostQueryReset,
    timelineSemaphore: timelineSemaphore,
    bufferDeviceAddress: bufferDeviceAddress,
    bufferDeviceAddressCaptureReplay: bufferDeviceAddressCaptureReplay,
    bufferDeviceAddressMultiDevice: bufferDeviceAddressMultiDevice,
    vulkanMemoryModel: vulkanMemoryModel,
    vulkanMemoryModelDeviceScope: vulkanMemoryModelDeviceScope,
    vulkanMemoryModelAvailabilityVisibilityChains: vulkanMemoryModelAvailabilityVisibilityChains,
    shaderOutputViewportIndex: shaderOutputViewportIndex,
    shaderOutputLayer: shaderOutputLayer,
    subgroupBroadcastDynamicId: subgroupBroadcastDynamicId,
  )

proc newVkPhysicalDeviceVulkan12Properties*(sType: VkStructureType, pNext: pointer = nil, driverID: VkDriverId, driverName: array[VK_MAX_DRIVER_NAME_SIZE, char], driverInfo: array[VK_MAX_DRIVER_INFO_SIZE, char], conformanceVersion: VkConformanceVersion, denormBehaviorIndependence: VkShaderFloatControlsIndependence, roundingModeIndependence: VkShaderFloatControlsIndependence, shaderSignedZeroInfNanPreserveFloat16: VkBool32, shaderSignedZeroInfNanPreserveFloat32: VkBool32, shaderSignedZeroInfNanPreserveFloat64: VkBool32, shaderDenormPreserveFloat16: VkBool32, shaderDenormPreserveFloat32: VkBool32, shaderDenormPreserveFloat64: VkBool32, shaderDenormFlushToZeroFloat16: VkBool32, shaderDenormFlushToZeroFloat32: VkBool32, shaderDenormFlushToZeroFloat64: VkBool32, shaderRoundingModeRTEFloat16: VkBool32, shaderRoundingModeRTEFloat32: VkBool32, shaderRoundingModeRTEFloat64: VkBool32, shaderRoundingModeRTZFloat16: VkBool32, shaderRoundingModeRTZFloat32: VkBool32, shaderRoundingModeRTZFloat64: VkBool32, maxUpdateAfterBindDescriptorsInAllPools: uint32, shaderUniformBufferArrayNonUniformIndexingNative: VkBool32, shaderSampledImageArrayNonUniformIndexingNative: VkBool32, shaderStorageBufferArrayNonUniformIndexingNative: VkBool32, shaderStorageImageArrayNonUniformIndexingNative: VkBool32, shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32, robustBufferAccessUpdateAfterBind: VkBool32, quadDivergentImplicitLod: VkBool32, maxPerStageDescriptorUpdateAfterBindSamplers: uint32, maxPerStageDescriptorUpdateAfterBindUniformBuffers: uint32, maxPerStageDescriptorUpdateAfterBindStorageBuffers: uint32, maxPerStageDescriptorUpdateAfterBindSampledImages: uint32, maxPerStageDescriptorUpdateAfterBindStorageImages: uint32, maxPerStageDescriptorUpdateAfterBindInputAttachments: uint32, maxPerStageUpdateAfterBindResources: uint32, maxDescriptorSetUpdateAfterBindSamplers: uint32, maxDescriptorSetUpdateAfterBindUniformBuffers: uint32, maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: uint32, maxDescriptorSetUpdateAfterBindStorageBuffers: uint32, maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: uint32, maxDescriptorSetUpdateAfterBindSampledImages: uint32, maxDescriptorSetUpdateAfterBindStorageImages: uint32, maxDescriptorSetUpdateAfterBindInputAttachments: uint32, supportedDepthResolveModes: VkResolveModeFlags, supportedStencilResolveModes: VkResolveModeFlags, independentResolveNone: VkBool32, independentResolve: VkBool32, filterMinmaxSingleComponentFormats: VkBool32, filterMinmaxImageComponentMapping: VkBool32, maxTimelineSemaphoreValueDifference: uint64, framebufferIntegerColorSampleCounts: VkSampleCountFlags): VkPhysicalDeviceVulkan12Properties =
  result = VkPhysicalDeviceVulkan12Properties(
    sType: sType,
    pNext: pNext,
    driverID: driverID,
    driverName: driverName,
    driverInfo: driverInfo,
    conformanceVersion: conformanceVersion,
    denormBehaviorIndependence: denormBehaviorIndependence,
    roundingModeIndependence: roundingModeIndependence,
    shaderSignedZeroInfNanPreserveFloat16: shaderSignedZeroInfNanPreserveFloat16,
    shaderSignedZeroInfNanPreserveFloat32: shaderSignedZeroInfNanPreserveFloat32,
    shaderSignedZeroInfNanPreserveFloat64: shaderSignedZeroInfNanPreserveFloat64,
    shaderDenormPreserveFloat16: shaderDenormPreserveFloat16,
    shaderDenormPreserveFloat32: shaderDenormPreserveFloat32,
    shaderDenormPreserveFloat64: shaderDenormPreserveFloat64,
    shaderDenormFlushToZeroFloat16: shaderDenormFlushToZeroFloat16,
    shaderDenormFlushToZeroFloat32: shaderDenormFlushToZeroFloat32,
    shaderDenormFlushToZeroFloat64: shaderDenormFlushToZeroFloat64,
    shaderRoundingModeRTEFloat16: shaderRoundingModeRTEFloat16,
    shaderRoundingModeRTEFloat32: shaderRoundingModeRTEFloat32,
    shaderRoundingModeRTEFloat64: shaderRoundingModeRTEFloat64,
    shaderRoundingModeRTZFloat16: shaderRoundingModeRTZFloat16,
    shaderRoundingModeRTZFloat32: shaderRoundingModeRTZFloat32,
    shaderRoundingModeRTZFloat64: shaderRoundingModeRTZFloat64,
    maxUpdateAfterBindDescriptorsInAllPools: maxUpdateAfterBindDescriptorsInAllPools,
    shaderUniformBufferArrayNonUniformIndexingNative: shaderUniformBufferArrayNonUniformIndexingNative,
    shaderSampledImageArrayNonUniformIndexingNative: shaderSampledImageArrayNonUniformIndexingNative,
    shaderStorageBufferArrayNonUniformIndexingNative: shaderStorageBufferArrayNonUniformIndexingNative,
    shaderStorageImageArrayNonUniformIndexingNative: shaderStorageImageArrayNonUniformIndexingNative,
    shaderInputAttachmentArrayNonUniformIndexingNative: shaderInputAttachmentArrayNonUniformIndexingNative,
    robustBufferAccessUpdateAfterBind: robustBufferAccessUpdateAfterBind,
    quadDivergentImplicitLod: quadDivergentImplicitLod,
    maxPerStageDescriptorUpdateAfterBindSamplers: maxPerStageDescriptorUpdateAfterBindSamplers,
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: maxPerStageDescriptorUpdateAfterBindUniformBuffers,
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: maxPerStageDescriptorUpdateAfterBindStorageBuffers,
    maxPerStageDescriptorUpdateAfterBindSampledImages: maxPerStageDescriptorUpdateAfterBindSampledImages,
    maxPerStageDescriptorUpdateAfterBindStorageImages: maxPerStageDescriptorUpdateAfterBindStorageImages,
    maxPerStageDescriptorUpdateAfterBindInputAttachments: maxPerStageDescriptorUpdateAfterBindInputAttachments,
    maxPerStageUpdateAfterBindResources: maxPerStageUpdateAfterBindResources,
    maxDescriptorSetUpdateAfterBindSamplers: maxDescriptorSetUpdateAfterBindSamplers,
    maxDescriptorSetUpdateAfterBindUniformBuffers: maxDescriptorSetUpdateAfterBindUniformBuffers,
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: maxDescriptorSetUpdateAfterBindUniformBuffersDynamic,
    maxDescriptorSetUpdateAfterBindStorageBuffers: maxDescriptorSetUpdateAfterBindStorageBuffers,
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: maxDescriptorSetUpdateAfterBindStorageBuffersDynamic,
    maxDescriptorSetUpdateAfterBindSampledImages: maxDescriptorSetUpdateAfterBindSampledImages,
    maxDescriptorSetUpdateAfterBindStorageImages: maxDescriptorSetUpdateAfterBindStorageImages,
    maxDescriptorSetUpdateAfterBindInputAttachments: maxDescriptorSetUpdateAfterBindInputAttachments,
    supportedDepthResolveModes: supportedDepthResolveModes,
    supportedStencilResolveModes: supportedStencilResolveModes,
    independentResolveNone: independentResolveNone,
    independentResolve: independentResolve,
    filterMinmaxSingleComponentFormats: filterMinmaxSingleComponentFormats,
    filterMinmaxImageComponentMapping: filterMinmaxImageComponentMapping,
    maxTimelineSemaphoreValueDifference: maxTimelineSemaphoreValueDifference,
    framebufferIntegerColorSampleCounts: framebufferIntegerColorSampleCounts,
  )

proc newVkPhysicalDeviceVulkan13Features*(sType: VkStructureType, pNext: pointer = nil, robustImageAccess: VkBool32, inlineUniformBlock: VkBool32, descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32, pipelineCreationCacheControl: VkBool32, privateData: VkBool32, shaderDemoteToHelperInvocation: VkBool32, shaderTerminateInvocation: VkBool32, subgroupSizeControl: VkBool32, computeFullSubgroups: VkBool32, synchronization2: VkBool32, textureCompressionASTC_HDR: VkBool32, shaderZeroInitializeWorkgroupMemory: VkBool32, dynamicRendering: VkBool32, shaderIntegerDotProduct: VkBool32, maintenance4: VkBool32): VkPhysicalDeviceVulkan13Features =
  result = VkPhysicalDeviceVulkan13Features(
    sType: sType,
    pNext: pNext,
    robustImageAccess: robustImageAccess,
    inlineUniformBlock: inlineUniformBlock,
    descriptorBindingInlineUniformBlockUpdateAfterBind: descriptorBindingInlineUniformBlockUpdateAfterBind,
    pipelineCreationCacheControl: pipelineCreationCacheControl,
    privateData: privateData,
    shaderDemoteToHelperInvocation: shaderDemoteToHelperInvocation,
    shaderTerminateInvocation: shaderTerminateInvocation,
    subgroupSizeControl: subgroupSizeControl,
    computeFullSubgroups: computeFullSubgroups,
    synchronization2: synchronization2,
    textureCompressionASTC_HDR: textureCompressionASTC_HDR,
    shaderZeroInitializeWorkgroupMemory: shaderZeroInitializeWorkgroupMemory,
    dynamicRendering: dynamicRendering,
    shaderIntegerDotProduct: shaderIntegerDotProduct,
    maintenance4: maintenance4,
  )

proc newVkPhysicalDeviceVulkan13Properties*(sType: VkStructureType, pNext: pointer = nil, minSubgroupSize: uint32, maxSubgroupSize: uint32, maxComputeWorkgroupSubgroups: uint32, requiredSubgroupSizeStages: VkShaderStageFlags, maxInlineUniformBlockSize: uint32, maxPerStageDescriptorInlineUniformBlocks: uint32, maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: uint32, maxDescriptorSetInlineUniformBlocks: uint32, maxDescriptorSetUpdateAfterBindInlineUniformBlocks: uint32, maxInlineUniformTotalSize: uint32, integerDotProduct8BitUnsignedAccelerated: VkBool32, integerDotProduct8BitSignedAccelerated: VkBool32, integerDotProduct8BitMixedSignednessAccelerated: VkBool32, integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32, integerDotProduct4x8BitPackedSignedAccelerated: VkBool32, integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32, integerDotProduct16BitUnsignedAccelerated: VkBool32, integerDotProduct16BitSignedAccelerated: VkBool32, integerDotProduct16BitMixedSignednessAccelerated: VkBool32, integerDotProduct32BitUnsignedAccelerated: VkBool32, integerDotProduct32BitSignedAccelerated: VkBool32, integerDotProduct32BitMixedSignednessAccelerated: VkBool32, integerDotProduct64BitUnsignedAccelerated: VkBool32, integerDotProduct64BitSignedAccelerated: VkBool32, integerDotProduct64BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32, storageTexelBufferOffsetAlignmentBytes: VkDeviceSize, storageTexelBufferOffsetSingleTexelAlignment: VkBool32, uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize, uniformTexelBufferOffsetSingleTexelAlignment: VkBool32, maxBufferSize: VkDeviceSize): VkPhysicalDeviceVulkan13Properties =
  result = VkPhysicalDeviceVulkan13Properties(
    sType: sType,
    pNext: pNext,
    minSubgroupSize: minSubgroupSize,
    maxSubgroupSize: maxSubgroupSize,
    maxComputeWorkgroupSubgroups: maxComputeWorkgroupSubgroups,
    requiredSubgroupSizeStages: requiredSubgroupSizeStages,
    maxInlineUniformBlockSize: maxInlineUniformBlockSize,
    maxPerStageDescriptorInlineUniformBlocks: maxPerStageDescriptorInlineUniformBlocks,
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks,
    maxDescriptorSetInlineUniformBlocks: maxDescriptorSetInlineUniformBlocks,
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: maxDescriptorSetUpdateAfterBindInlineUniformBlocks,
    maxInlineUniformTotalSize: maxInlineUniformTotalSize,
    integerDotProduct8BitUnsignedAccelerated: integerDotProduct8BitUnsignedAccelerated,
    integerDotProduct8BitSignedAccelerated: integerDotProduct8BitSignedAccelerated,
    integerDotProduct8BitMixedSignednessAccelerated: integerDotProduct8BitMixedSignednessAccelerated,
    integerDotProduct4x8BitPackedUnsignedAccelerated: integerDotProduct4x8BitPackedUnsignedAccelerated,
    integerDotProduct4x8BitPackedSignedAccelerated: integerDotProduct4x8BitPackedSignedAccelerated,
    integerDotProduct4x8BitPackedMixedSignednessAccelerated: integerDotProduct4x8BitPackedMixedSignednessAccelerated,
    integerDotProduct16BitUnsignedAccelerated: integerDotProduct16BitUnsignedAccelerated,
    integerDotProduct16BitSignedAccelerated: integerDotProduct16BitSignedAccelerated,
    integerDotProduct16BitMixedSignednessAccelerated: integerDotProduct16BitMixedSignednessAccelerated,
    integerDotProduct32BitUnsignedAccelerated: integerDotProduct32BitUnsignedAccelerated,
    integerDotProduct32BitSignedAccelerated: integerDotProduct32BitSignedAccelerated,
    integerDotProduct32BitMixedSignednessAccelerated: integerDotProduct32BitMixedSignednessAccelerated,
    integerDotProduct64BitUnsignedAccelerated: integerDotProduct64BitUnsignedAccelerated,
    integerDotProduct64BitSignedAccelerated: integerDotProduct64BitSignedAccelerated,
    integerDotProduct64BitMixedSignednessAccelerated: integerDotProduct64BitMixedSignednessAccelerated,
    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: integerDotProductAccumulatingSaturating8BitUnsignedAccelerated,
    integerDotProductAccumulatingSaturating8BitSignedAccelerated: integerDotProductAccumulatingSaturating8BitSignedAccelerated,
    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated,
    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated,
    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated,
    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated,
    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: integerDotProductAccumulatingSaturating16BitUnsignedAccelerated,
    integerDotProductAccumulatingSaturating16BitSignedAccelerated: integerDotProductAccumulatingSaturating16BitSignedAccelerated,
    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated,
    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: integerDotProductAccumulatingSaturating32BitUnsignedAccelerated,
    integerDotProductAccumulatingSaturating32BitSignedAccelerated: integerDotProductAccumulatingSaturating32BitSignedAccelerated,
    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated,
    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: integerDotProductAccumulatingSaturating64BitUnsignedAccelerated,
    integerDotProductAccumulatingSaturating64BitSignedAccelerated: integerDotProductAccumulatingSaturating64BitSignedAccelerated,
    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated,
    storageTexelBufferOffsetAlignmentBytes: storageTexelBufferOffsetAlignmentBytes,
    storageTexelBufferOffsetSingleTexelAlignment: storageTexelBufferOffsetSingleTexelAlignment,
    uniformTexelBufferOffsetAlignmentBytes: uniformTexelBufferOffsetAlignmentBytes,
    uniformTexelBufferOffsetSingleTexelAlignment: uniformTexelBufferOffsetSingleTexelAlignment,
    maxBufferSize: maxBufferSize,
  )

proc newVkPipelineCompilerControlCreateInfoAMD*(sType: VkStructureType, pNext: pointer = nil, compilerControlFlags: VkPipelineCompilerControlFlagsAMD): VkPipelineCompilerControlCreateInfoAMD =
  result = VkPipelineCompilerControlCreateInfoAMD(
    sType: sType,
    pNext: pNext,
    compilerControlFlags: compilerControlFlags,
  )

proc newVkPhysicalDeviceCoherentMemoryFeaturesAMD*(sType: VkStructureType, pNext: pointer = nil, deviceCoherentMemory: VkBool32): VkPhysicalDeviceCoherentMemoryFeaturesAMD =
  result = VkPhysicalDeviceCoherentMemoryFeaturesAMD(
    sType: sType,
    pNext: pNext,
    deviceCoherentMemory: deviceCoherentMemory,
  )

proc newVkFaultData*(sType: VkStructureType, pNext: pointer = nil, faultLevel: VkFaultLevel, faultType: VkFaultType): VkFaultData =
  result = VkFaultData(
    sType: sType,
    pNext: pNext,
    faultLevel: faultLevel,
    faultType: faultType,
  )

proc newVkFaultCallbackInfo*(sType: VkStructureType, pNext: pointer = nil, faultCount: uint32, pFaults: ptr VkFaultData, pfnFaultCallback: PFN_vkFaultCallbackFunction): VkFaultCallbackInfo =
  result = VkFaultCallbackInfo(
    sType: sType,
    pNext: pNext,
    faultCount: faultCount,
    pFaults: pFaults,
    pfnFaultCallback: pfnFaultCallback,
  )

proc newVkPhysicalDeviceToolProperties*(sType: VkStructureType, pNext: pointer = nil, name: array[VK_MAX_EXTENSION_NAME_SIZE, char], version: array[VK_MAX_EXTENSION_NAME_SIZE, char], purposes: VkToolPurposeFlags, description: array[VK_MAX_DESCRIPTION_SIZE, char], layer: array[VK_MAX_EXTENSION_NAME_SIZE, char]): VkPhysicalDeviceToolProperties =
  result = VkPhysicalDeviceToolProperties(
    sType: sType,
    pNext: pNext,
    name: name,
    version: version,
    purposes: purposes,
    description: description,
    layer: layer,
  )

proc newVkSamplerCustomBorderColorCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, customBorderColor: VkClearColorValue, format: VkFormat): VkSamplerCustomBorderColorCreateInfoEXT =
  result = VkSamplerCustomBorderColorCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    customBorderColor: customBorderColor,
    format: format,
  )

proc newVkPhysicalDeviceCustomBorderColorPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, maxCustomBorderColorSamplers: uint32): VkPhysicalDeviceCustomBorderColorPropertiesEXT =
  result = VkPhysicalDeviceCustomBorderColorPropertiesEXT(
    sType: sType,
    pNext: pNext,
    maxCustomBorderColorSamplers: maxCustomBorderColorSamplers,
  )

proc newVkPhysicalDeviceCustomBorderColorFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, customBorderColors: VkBool32, customBorderColorWithoutFormat: VkBool32): VkPhysicalDeviceCustomBorderColorFeaturesEXT =
  result = VkPhysicalDeviceCustomBorderColorFeaturesEXT(
    sType: sType,
    pNext: pNext,
    customBorderColors: customBorderColors,
    customBorderColorWithoutFormat: customBorderColorWithoutFormat,
  )

proc newVkSamplerBorderColorComponentMappingCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, components: VkComponentMapping, srgb: VkBool32): VkSamplerBorderColorComponentMappingCreateInfoEXT =
  result = VkSamplerBorderColorComponentMappingCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    components: components,
    srgb: srgb,
  )

proc newVkPhysicalDeviceBorderColorSwizzleFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, borderColorSwizzle: VkBool32, borderColorSwizzleFromImage: VkBool32): VkPhysicalDeviceBorderColorSwizzleFeaturesEXT =
  result = VkPhysicalDeviceBorderColorSwizzleFeaturesEXT(
    sType: sType,
    pNext: pNext,
    borderColorSwizzle: borderColorSwizzle,
    borderColorSwizzleFromImage: borderColorSwizzleFromImage,
  )

proc newVkAccelerationStructureGeometryTrianglesDataKHR*(sType: VkStructureType, pNext: pointer = nil, vertexFormat: VkFormat, vertexData: VkDeviceOrHostAddressConstKHR, vertexStride: VkDeviceSize, maxVertex: uint32, indexType: VkIndexType, indexData: VkDeviceOrHostAddressConstKHR, transformData: VkDeviceOrHostAddressConstKHR): VkAccelerationStructureGeometryTrianglesDataKHR =
  result = VkAccelerationStructureGeometryTrianglesDataKHR(
    sType: sType,
    pNext: pNext,
    vertexFormat: vertexFormat,
    vertexData: vertexData,
    vertexStride: vertexStride,
    maxVertex: maxVertex,
    indexType: indexType,
    indexData: indexData,
    transformData: transformData,
  )

proc newVkAccelerationStructureGeometryAabbsDataKHR*(sType: VkStructureType, pNext: pointer = nil, data: VkDeviceOrHostAddressConstKHR, stride: VkDeviceSize): VkAccelerationStructureGeometryAabbsDataKHR =
  result = VkAccelerationStructureGeometryAabbsDataKHR(
    sType: sType,
    pNext: pNext,
    data: data,
    stride: stride,
  )

proc newVkAccelerationStructureGeometryInstancesDataKHR*(sType: VkStructureType, pNext: pointer = nil, arrayOfPointers: VkBool32, data: VkDeviceOrHostAddressConstKHR): VkAccelerationStructureGeometryInstancesDataKHR =
  result = VkAccelerationStructureGeometryInstancesDataKHR(
    sType: sType,
    pNext: pNext,
    arrayOfPointers: arrayOfPointers,
    data: data,
  )

proc newVkAccelerationStructureGeometryKHR*(sType: VkStructureType, pNext: pointer = nil, geometryType: VkGeometryTypeKHR, geometry: VkAccelerationStructureGeometryDataKHR, flags: VkGeometryFlagsKHR = 0.VkGeometryFlagsKHR): VkAccelerationStructureGeometryKHR =
  result = VkAccelerationStructureGeometryKHR(
    sType: sType,
    pNext: pNext,
    geometryType: geometryType,
    geometry: geometry,
    flags: flags,
  )

proc newVkAccelerationStructureBuildGeometryInfoKHR*(sType: VkStructureType, pNext: pointer = nil, `type`: VkAccelerationStructureTypeKHR, flags: VkBuildAccelerationStructureFlagsKHR = 0.VkBuildAccelerationStructureFlagsKHR, mode: VkBuildAccelerationStructureModeKHR, srcAccelerationStructure: VkAccelerationStructureKHR, dstAccelerationStructure: VkAccelerationStructureKHR, geometryCount: uint32, pGeometries: ptr VkAccelerationStructureGeometryKHR, ppGeometries: ptr ptr VkAccelerationStructureGeometryKHR, scratchData: VkDeviceOrHostAddressKHR): VkAccelerationStructureBuildGeometryInfoKHR =
  result = VkAccelerationStructureBuildGeometryInfoKHR(
    sType: sType,
    pNext: pNext,
    `type`: `type`,
    flags: flags,
    mode: mode,
    srcAccelerationStructure: srcAccelerationStructure,
    dstAccelerationStructure: dstAccelerationStructure,
    geometryCount: geometryCount,
    pGeometries: pGeometries,
    ppGeometries: ppGeometries,
    scratchData: scratchData,
  )

proc newVkAccelerationStructureBuildRangeInfoKHR*(primitiveCount: uint32, primitiveOffset: uint32, firstVertex: uint32, transformOffset: uint32): VkAccelerationStructureBuildRangeInfoKHR =
  result = VkAccelerationStructureBuildRangeInfoKHR(
    primitiveCount: primitiveCount,
    primitiveOffset: primitiveOffset,
    firstVertex: firstVertex,
    transformOffset: transformOffset,
  )

proc newVkAccelerationStructureCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, createFlags: VkAccelerationStructureCreateFlagsKHR, buffer: VkBuffer, offset: VkDeviceSize, size: VkDeviceSize, `type`: VkAccelerationStructureTypeKHR, deviceAddress: VkDeviceAddress): VkAccelerationStructureCreateInfoKHR =
  result = VkAccelerationStructureCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    createFlags: createFlags,
    buffer: buffer,
    offset: offset,
    size: size,
    `type`: `type`,
    deviceAddress: deviceAddress,
  )

proc newVkAabbPositionsKHR*(minX: float32, minY: float32, minZ: float32, maxX: float32, maxY: float32, maxZ: float32): VkAabbPositionsKHR =
  result = VkAabbPositionsKHR(
    minX: minX,
    minY: minY,
    minZ: minZ,
    maxX: maxX,
    maxY: maxY,
    maxZ: maxZ,
  )

proc newVkTransformMatrixKHR*(matrix: array[3, float32]): VkTransformMatrixKHR =
  result = VkTransformMatrixKHR(
    matrix: matrix,
  )

proc newVkAccelerationStructureInstanceKHR*(transform: VkTransformMatrixKHR, instanceCustomIndex: uint32, mask: uint32, instanceShaderBindingTableRecordOffset: uint32, flags: VkGeometryInstanceFlagsKHR = 0.VkGeometryInstanceFlagsKHR, accelerationStructureReference: uint64): VkAccelerationStructureInstanceKHR =
  result = VkAccelerationStructureInstanceKHR(
    transform: transform,
    instanceCustomIndex: instanceCustomIndex,
    mask: mask,
    instanceShaderBindingTableRecordOffset: instanceShaderBindingTableRecordOffset,
    flags: flags,
    accelerationStructureReference: accelerationStructureReference,
  )

proc newVkAccelerationStructureDeviceAddressInfoKHR*(sType: VkStructureType, pNext: pointer = nil, accelerationStructure: VkAccelerationStructureKHR): VkAccelerationStructureDeviceAddressInfoKHR =
  result = VkAccelerationStructureDeviceAddressInfoKHR(
    sType: sType,
    pNext: pNext,
    accelerationStructure: accelerationStructure,
  )

proc newVkAccelerationStructureVersionInfoKHR*(sType: VkStructureType, pNext: pointer = nil, pVersionData: ptr uint8): VkAccelerationStructureVersionInfoKHR =
  result = VkAccelerationStructureVersionInfoKHR(
    sType: sType,
    pNext: pNext,
    pVersionData: pVersionData,
  )

proc newVkCopyAccelerationStructureInfoKHR*(sType: VkStructureType, pNext: pointer = nil, src: VkAccelerationStructureKHR, dst: VkAccelerationStructureKHR, mode: VkCopyAccelerationStructureModeKHR): VkCopyAccelerationStructureInfoKHR =
  result = VkCopyAccelerationStructureInfoKHR(
    sType: sType,
    pNext: pNext,
    src: src,
    dst: dst,
    mode: mode,
  )

proc newVkCopyAccelerationStructureToMemoryInfoKHR*(sType: VkStructureType, pNext: pointer = nil, src: VkAccelerationStructureKHR, dst: VkDeviceOrHostAddressKHR, mode: VkCopyAccelerationStructureModeKHR): VkCopyAccelerationStructureToMemoryInfoKHR =
  result = VkCopyAccelerationStructureToMemoryInfoKHR(
    sType: sType,
    pNext: pNext,
    src: src,
    dst: dst,
    mode: mode,
  )

proc newVkCopyMemoryToAccelerationStructureInfoKHR*(sType: VkStructureType, pNext: pointer = nil, src: VkDeviceOrHostAddressConstKHR, dst: VkAccelerationStructureKHR, mode: VkCopyAccelerationStructureModeKHR): VkCopyMemoryToAccelerationStructureInfoKHR =
  result = VkCopyMemoryToAccelerationStructureInfoKHR(
    sType: sType,
    pNext: pNext,
    src: src,
    dst: dst,
    mode: mode,
  )

proc newVkRayTracingPipelineInterfaceCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, maxPipelineRayPayloadSize: uint32, maxPipelineRayHitAttributeSize: uint32): VkRayTracingPipelineInterfaceCreateInfoKHR =
  result = VkRayTracingPipelineInterfaceCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    maxPipelineRayPayloadSize: maxPipelineRayPayloadSize,
    maxPipelineRayHitAttributeSize: maxPipelineRayHitAttributeSize,
  )

proc newVkPipelineLibraryCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, libraryCount: uint32, pLibraries: ptr VkPipeline): VkPipelineLibraryCreateInfoKHR =
  result = VkPipelineLibraryCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    libraryCount: libraryCount,
    pLibraries: pLibraries,
  )

proc newVkRefreshObjectKHR*(objectType: VkObjectType, objectHandle: uint64, flags: VkRefreshObjectFlagsKHR = 0.VkRefreshObjectFlagsKHR): VkRefreshObjectKHR =
  result = VkRefreshObjectKHR(
    objectType: objectType,
    objectHandle: objectHandle,
    flags: flags,
  )

proc newVkRefreshObjectListKHR*(sType: VkStructureType, pNext: pointer = nil, objectCount: uint32, pObjects: ptr VkRefreshObjectKHR): VkRefreshObjectListKHR =
  result = VkRefreshObjectListKHR(
    sType: sType,
    pNext: pNext,
    objectCount: objectCount,
    pObjects: pObjects,
  )

proc newVkPhysicalDeviceExtendedDynamicStateFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, extendedDynamicState: VkBool32): VkPhysicalDeviceExtendedDynamicStateFeaturesEXT =
  result = VkPhysicalDeviceExtendedDynamicStateFeaturesEXT(
    sType: sType,
    pNext: pNext,
    extendedDynamicState: extendedDynamicState,
  )

proc newVkPhysicalDeviceExtendedDynamicState2FeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, extendedDynamicState2: VkBool32, extendedDynamicState2LogicOp: VkBool32, extendedDynamicState2PatchControlPoints: VkBool32): VkPhysicalDeviceExtendedDynamicState2FeaturesEXT =
  result = VkPhysicalDeviceExtendedDynamicState2FeaturesEXT(
    sType: sType,
    pNext: pNext,
    extendedDynamicState2: extendedDynamicState2,
    extendedDynamicState2LogicOp: extendedDynamicState2LogicOp,
    extendedDynamicState2PatchControlPoints: extendedDynamicState2PatchControlPoints,
  )

proc newVkPhysicalDeviceExtendedDynamicState3FeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, extendedDynamicState3TessellationDomainOrigin: VkBool32, extendedDynamicState3DepthClampEnable: VkBool32, extendedDynamicState3PolygonMode: VkBool32, extendedDynamicState3RasterizationSamples: VkBool32, extendedDynamicState3SampleMask: VkBool32, extendedDynamicState3AlphaToCoverageEnable: VkBool32, extendedDynamicState3AlphaToOneEnable: VkBool32, extendedDynamicState3LogicOpEnable: VkBool32, extendedDynamicState3ColorBlendEnable: VkBool32, extendedDynamicState3ColorBlendEquation: VkBool32, extendedDynamicState3ColorWriteMask: VkBool32, extendedDynamicState3RasterizationStream: VkBool32, extendedDynamicState3ConservativeRasterizationMode: VkBool32, extendedDynamicState3ExtraPrimitiveOverestimationSize: VkBool32, extendedDynamicState3DepthClipEnable: VkBool32, extendedDynamicState3SampleLocationsEnable: VkBool32, extendedDynamicState3ColorBlendAdvanced: VkBool32, extendedDynamicState3ProvokingVertexMode: VkBool32, extendedDynamicState3LineRasterizationMode: VkBool32, extendedDynamicState3LineStippleEnable: VkBool32, extendedDynamicState3DepthClipNegativeOneToOne: VkBool32, extendedDynamicState3ViewportWScalingEnable: VkBool32, extendedDynamicState3ViewportSwizzle: VkBool32, extendedDynamicState3CoverageToColorEnable: VkBool32, extendedDynamicState3CoverageToColorLocation: VkBool32, extendedDynamicState3CoverageModulationMode: VkBool32, extendedDynamicState3CoverageModulationTableEnable: VkBool32, extendedDynamicState3CoverageModulationTable: VkBool32, extendedDynamicState3CoverageReductionMode: VkBool32, extendedDynamicState3RepresentativeFragmentTestEnable: VkBool32, extendedDynamicState3ShadingRateImageEnable: VkBool32): VkPhysicalDeviceExtendedDynamicState3FeaturesEXT =
  result = VkPhysicalDeviceExtendedDynamicState3FeaturesEXT(
    sType: sType,
    pNext: pNext,
    extendedDynamicState3TessellationDomainOrigin: extendedDynamicState3TessellationDomainOrigin,
    extendedDynamicState3DepthClampEnable: extendedDynamicState3DepthClampEnable,
    extendedDynamicState3PolygonMode: extendedDynamicState3PolygonMode,
    extendedDynamicState3RasterizationSamples: extendedDynamicState3RasterizationSamples,
    extendedDynamicState3SampleMask: extendedDynamicState3SampleMask,
    extendedDynamicState3AlphaToCoverageEnable: extendedDynamicState3AlphaToCoverageEnable,
    extendedDynamicState3AlphaToOneEnable: extendedDynamicState3AlphaToOneEnable,
    extendedDynamicState3LogicOpEnable: extendedDynamicState3LogicOpEnable,
    extendedDynamicState3ColorBlendEnable: extendedDynamicState3ColorBlendEnable,
    extendedDynamicState3ColorBlendEquation: extendedDynamicState3ColorBlendEquation,
    extendedDynamicState3ColorWriteMask: extendedDynamicState3ColorWriteMask,
    extendedDynamicState3RasterizationStream: extendedDynamicState3RasterizationStream,
    extendedDynamicState3ConservativeRasterizationMode: extendedDynamicState3ConservativeRasterizationMode,
    extendedDynamicState3ExtraPrimitiveOverestimationSize: extendedDynamicState3ExtraPrimitiveOverestimationSize,
    extendedDynamicState3DepthClipEnable: extendedDynamicState3DepthClipEnable,
    extendedDynamicState3SampleLocationsEnable: extendedDynamicState3SampleLocationsEnable,
    extendedDynamicState3ColorBlendAdvanced: extendedDynamicState3ColorBlendAdvanced,
    extendedDynamicState3ProvokingVertexMode: extendedDynamicState3ProvokingVertexMode,
    extendedDynamicState3LineRasterizationMode: extendedDynamicState3LineRasterizationMode,
    extendedDynamicState3LineStippleEnable: extendedDynamicState3LineStippleEnable,
    extendedDynamicState3DepthClipNegativeOneToOne: extendedDynamicState3DepthClipNegativeOneToOne,
    extendedDynamicState3ViewportWScalingEnable: extendedDynamicState3ViewportWScalingEnable,
    extendedDynamicState3ViewportSwizzle: extendedDynamicState3ViewportSwizzle,
    extendedDynamicState3CoverageToColorEnable: extendedDynamicState3CoverageToColorEnable,
    extendedDynamicState3CoverageToColorLocation: extendedDynamicState3CoverageToColorLocation,
    extendedDynamicState3CoverageModulationMode: extendedDynamicState3CoverageModulationMode,
    extendedDynamicState3CoverageModulationTableEnable: extendedDynamicState3CoverageModulationTableEnable,
    extendedDynamicState3CoverageModulationTable: extendedDynamicState3CoverageModulationTable,
    extendedDynamicState3CoverageReductionMode: extendedDynamicState3CoverageReductionMode,
    extendedDynamicState3RepresentativeFragmentTestEnable: extendedDynamicState3RepresentativeFragmentTestEnable,
    extendedDynamicState3ShadingRateImageEnable: extendedDynamicState3ShadingRateImageEnable,
  )

proc newVkPhysicalDeviceExtendedDynamicState3PropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, dynamicPrimitiveTopologyUnrestricted: VkBool32): VkPhysicalDeviceExtendedDynamicState3PropertiesEXT =
  result = VkPhysicalDeviceExtendedDynamicState3PropertiesEXT(
    sType: sType,
    pNext: pNext,
    dynamicPrimitiveTopologyUnrestricted: dynamicPrimitiveTopologyUnrestricted,
  )

proc newVkColorBlendEquationEXT*(srcColorBlendFactor: VkBlendFactor, dstColorBlendFactor: VkBlendFactor, colorBlendOp: VkBlendOp, srcAlphaBlendFactor: VkBlendFactor, dstAlphaBlendFactor: VkBlendFactor, alphaBlendOp: VkBlendOp): VkColorBlendEquationEXT =
  result = VkColorBlendEquationEXT(
    srcColorBlendFactor: srcColorBlendFactor,
    dstColorBlendFactor: dstColorBlendFactor,
    colorBlendOp: colorBlendOp,
    srcAlphaBlendFactor: srcAlphaBlendFactor,
    dstAlphaBlendFactor: dstAlphaBlendFactor,
    alphaBlendOp: alphaBlendOp,
  )

proc newVkColorBlendAdvancedEXT*(advancedBlendOp: VkBlendOp, srcPremultiplied: VkBool32, dstPremultiplied: VkBool32, blendOverlap: VkBlendOverlapEXT, clampResults: VkBool32): VkColorBlendAdvancedEXT =
  result = VkColorBlendAdvancedEXT(
    advancedBlendOp: advancedBlendOp,
    srcPremultiplied: srcPremultiplied,
    dstPremultiplied: dstPremultiplied,
    blendOverlap: blendOverlap,
    clampResults: clampResults,
  )

proc newVkRenderPassTransformBeginInfoQCOM*(sType: VkStructureType, pNext: pointer = nil, transform: VkSurfaceTransformFlagBitsKHR): VkRenderPassTransformBeginInfoQCOM =
  result = VkRenderPassTransformBeginInfoQCOM(
    sType: sType,
    pNext: pNext,
    transform: transform,
  )

proc newVkCopyCommandTransformInfoQCOM*(sType: VkStructureType, pNext: pointer = nil, transform: VkSurfaceTransformFlagBitsKHR): VkCopyCommandTransformInfoQCOM =
  result = VkCopyCommandTransformInfoQCOM(
    sType: sType,
    pNext: pNext,
    transform: transform,
  )

proc newVkCommandBufferInheritanceRenderPassTransformInfoQCOM*(sType: VkStructureType, pNext: pointer = nil, transform: VkSurfaceTransformFlagBitsKHR, renderArea: VkRect2D): VkCommandBufferInheritanceRenderPassTransformInfoQCOM =
  result = VkCommandBufferInheritanceRenderPassTransformInfoQCOM(
    sType: sType,
    pNext: pNext,
    transform: transform,
    renderArea: renderArea,
  )

proc newVkPhysicalDeviceDiagnosticsConfigFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, diagnosticsConfig: VkBool32): VkPhysicalDeviceDiagnosticsConfigFeaturesNV =
  result = VkPhysicalDeviceDiagnosticsConfigFeaturesNV(
    sType: sType,
    pNext: pNext,
    diagnosticsConfig: diagnosticsConfig,
  )

proc newVkDeviceDiagnosticsConfigCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, flags: VkDeviceDiagnosticsConfigFlagsNV = 0.VkDeviceDiagnosticsConfigFlagsNV): VkDeviceDiagnosticsConfigCreateInfoNV =
  result = VkDeviceDiagnosticsConfigCreateInfoNV(
    sType: sType,
    pNext: pNext,
    flags: flags,
  )

proc newVkPipelineOfflineCreateInfo*(sType: VkStructureType, pNext: pointer = nil, pipelineIdentifier: array[VK_UUID_SIZE, uint8], matchControl: VkPipelineMatchControl, poolEntrySize: VkDeviceSize): VkPipelineOfflineCreateInfo =
  result = VkPipelineOfflineCreateInfo(
    sType: sType,
    pNext: pNext,
    pipelineIdentifier: pipelineIdentifier,
    matchControl: matchControl,
    poolEntrySize: poolEntrySize,
  )

proc newVkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures*(sType: VkStructureType, pNext: pointer = nil, shaderZeroInitializeWorkgroupMemory: VkBool32): VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures =
  result = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures(
    sType: sType,
    pNext: pNext,
    shaderZeroInitializeWorkgroupMemory: shaderZeroInitializeWorkgroupMemory,
  )

proc newVkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, shaderSubgroupUniformControlFlow: VkBool32): VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR =
  result = VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR(
    sType: sType,
    pNext: pNext,
    shaderSubgroupUniformControlFlow: shaderSubgroupUniformControlFlow,
  )

proc newVkPhysicalDeviceRobustness2FeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, robustBufferAccess2: VkBool32, robustImageAccess2: VkBool32, nullDescriptor: VkBool32): VkPhysicalDeviceRobustness2FeaturesEXT =
  result = VkPhysicalDeviceRobustness2FeaturesEXT(
    sType: sType,
    pNext: pNext,
    robustBufferAccess2: robustBufferAccess2,
    robustImageAccess2: robustImageAccess2,
    nullDescriptor: nullDescriptor,
  )

proc newVkPhysicalDeviceRobustness2PropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, robustStorageBufferAccessSizeAlignment: VkDeviceSize, robustUniformBufferAccessSizeAlignment: VkDeviceSize): VkPhysicalDeviceRobustness2PropertiesEXT =
  result = VkPhysicalDeviceRobustness2PropertiesEXT(
    sType: sType,
    pNext: pNext,
    robustStorageBufferAccessSizeAlignment: robustStorageBufferAccessSizeAlignment,
    robustUniformBufferAccessSizeAlignment: robustUniformBufferAccessSizeAlignment,
  )

proc newVkPhysicalDeviceImageRobustnessFeatures*(sType: VkStructureType, pNext: pointer = nil, robustImageAccess: VkBool32): VkPhysicalDeviceImageRobustnessFeatures =
  result = VkPhysicalDeviceImageRobustnessFeatures(
    sType: sType,
    pNext: pNext,
    robustImageAccess: robustImageAccess,
  )

proc newVkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, workgroupMemoryExplicitLayout: VkBool32, workgroupMemoryExplicitLayoutScalarBlockLayout: VkBool32, workgroupMemoryExplicitLayout8BitAccess: VkBool32, workgroupMemoryExplicitLayout16BitAccess: VkBool32): VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR =
  result = VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(
    sType: sType,
    pNext: pNext,
    workgroupMemoryExplicitLayout: workgroupMemoryExplicitLayout,
    workgroupMemoryExplicitLayoutScalarBlockLayout: workgroupMemoryExplicitLayoutScalarBlockLayout,
    workgroupMemoryExplicitLayout8BitAccess: workgroupMemoryExplicitLayout8BitAccess,
    workgroupMemoryExplicitLayout16BitAccess: workgroupMemoryExplicitLayout16BitAccess,
  )

proc newVkPhysicalDevicePortabilitySubsetFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, constantAlphaColorBlendFactors: VkBool32, events: VkBool32, imageViewFormatReinterpretation: VkBool32, imageViewFormatSwizzle: VkBool32, imageView2DOn3DImage: VkBool32, multisampleArrayImage: VkBool32, mutableComparisonSamplers: VkBool32, pointPolygons: VkBool32, samplerMipLodBias: VkBool32, separateStencilMaskRef: VkBool32, shaderSampleRateInterpolationFunctions: VkBool32, tessellationIsolines: VkBool32, tessellationPointMode: VkBool32, triangleFans: VkBool32, vertexAttributeAccessBeyondStride: VkBool32): VkPhysicalDevicePortabilitySubsetFeaturesKHR =
  result = VkPhysicalDevicePortabilitySubsetFeaturesKHR(
    sType: sType,
    pNext: pNext,
    constantAlphaColorBlendFactors: constantAlphaColorBlendFactors,
    events: events,
    imageViewFormatReinterpretation: imageViewFormatReinterpretation,
    imageViewFormatSwizzle: imageViewFormatSwizzle,
    imageView2DOn3DImage: imageView2DOn3DImage,
    multisampleArrayImage: multisampleArrayImage,
    mutableComparisonSamplers: mutableComparisonSamplers,
    pointPolygons: pointPolygons,
    samplerMipLodBias: samplerMipLodBias,
    separateStencilMaskRef: separateStencilMaskRef,
    shaderSampleRateInterpolationFunctions: shaderSampleRateInterpolationFunctions,
    tessellationIsolines: tessellationIsolines,
    tessellationPointMode: tessellationPointMode,
    triangleFans: triangleFans,
    vertexAttributeAccessBeyondStride: vertexAttributeAccessBeyondStride,
  )

proc newVkPhysicalDevicePortabilitySubsetPropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, minVertexInputBindingStrideAlignment: uint32): VkPhysicalDevicePortabilitySubsetPropertiesKHR =
  result = VkPhysicalDevicePortabilitySubsetPropertiesKHR(
    sType: sType,
    pNext: pNext,
    minVertexInputBindingStrideAlignment: minVertexInputBindingStrideAlignment,
  )

proc newVkPhysicalDevice4444FormatsFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, formatA4R4G4B4: VkBool32, formatA4B4G4R4: VkBool32): VkPhysicalDevice4444FormatsFeaturesEXT =
  result = VkPhysicalDevice4444FormatsFeaturesEXT(
    sType: sType,
    pNext: pNext,
    formatA4R4G4B4: formatA4R4G4B4,
    formatA4B4G4R4: formatA4B4G4R4,
  )

proc newVkPhysicalDeviceSubpassShadingFeaturesHUAWEI*(sType: VkStructureType, pNext: pointer = nil, subpassShading: VkBool32): VkPhysicalDeviceSubpassShadingFeaturesHUAWEI =
  result = VkPhysicalDeviceSubpassShadingFeaturesHUAWEI(
    sType: sType,
    pNext: pNext,
    subpassShading: subpassShading,
  )

proc newVkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI*(sType: VkStructureType, pNext: pointer = nil, clustercullingShader: VkBool32, multiviewClusterCullingShader: VkBool32): VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI =
  result = VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI(
    sType: sType,
    pNext: pNext,
    clustercullingShader: clustercullingShader,
    multiviewClusterCullingShader: multiviewClusterCullingShader,
  )

proc newVkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI*(sType: VkStructureType, pNext: pointer = nil, clusterShadingRate: VkBool32): VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI =
  result = VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI(
    sType: sType,
    pNext: pNext,
    clusterShadingRate: clusterShadingRate,
  )

proc newVkBufferCopy2*(sType: VkStructureType, pNext: pointer = nil, srcOffset: VkDeviceSize, dstOffset: VkDeviceSize, size: VkDeviceSize): VkBufferCopy2 =
  result = VkBufferCopy2(
    sType: sType,
    pNext: pNext,
    srcOffset: srcOffset,
    dstOffset: dstOffset,
    size: size,
  )

proc newVkImageCopy2*(sType: VkStructureType, pNext: pointer = nil, srcSubresource: VkImageSubresourceLayers, srcOffset: VkOffset3D, dstSubresource: VkImageSubresourceLayers, dstOffset: VkOffset3D, extent: VkExtent3D): VkImageCopy2 =
  result = VkImageCopy2(
    sType: sType,
    pNext: pNext,
    srcSubresource: srcSubresource,
    srcOffset: srcOffset,
    dstSubresource: dstSubresource,
    dstOffset: dstOffset,
    extent: extent,
  )

proc newVkImageBlit2*(sType: VkStructureType, pNext: pointer = nil, srcSubresource: VkImageSubresourceLayers, srcOffsets: array[2, VkOffset3D], dstSubresource: VkImageSubresourceLayers, dstOffsets: array[2, VkOffset3D]): VkImageBlit2 =
  result = VkImageBlit2(
    sType: sType,
    pNext: pNext,
    srcSubresource: srcSubresource,
    srcOffsets: srcOffsets,
    dstSubresource: dstSubresource,
    dstOffsets: dstOffsets,
  )

proc newVkBufferImageCopy2*(sType: VkStructureType, pNext: pointer = nil, bufferOffset: VkDeviceSize, bufferRowLength: uint32, bufferImageHeight: uint32, imageSubresource: VkImageSubresourceLayers, imageOffset: VkOffset3D, imageExtent: VkExtent3D): VkBufferImageCopy2 =
  result = VkBufferImageCopy2(
    sType: sType,
    pNext: pNext,
    bufferOffset: bufferOffset,
    bufferRowLength: bufferRowLength,
    bufferImageHeight: bufferImageHeight,
    imageSubresource: imageSubresource,
    imageOffset: imageOffset,
    imageExtent: imageExtent,
  )

proc newVkImageResolve2*(sType: VkStructureType, pNext: pointer = nil, srcSubresource: VkImageSubresourceLayers, srcOffset: VkOffset3D, dstSubresource: VkImageSubresourceLayers, dstOffset: VkOffset3D, extent: VkExtent3D): VkImageResolve2 =
  result = VkImageResolve2(
    sType: sType,
    pNext: pNext,
    srcSubresource: srcSubresource,
    srcOffset: srcOffset,
    dstSubresource: dstSubresource,
    dstOffset: dstOffset,
    extent: extent,
  )

proc newVkCopyBufferInfo2*(sType: VkStructureType, pNext: pointer = nil, srcBuffer: VkBuffer, dstBuffer: VkBuffer, regionCount: uint32, pRegions: ptr VkBufferCopy2): VkCopyBufferInfo2 =
  result = VkCopyBufferInfo2(
    sType: sType,
    pNext: pNext,
    srcBuffer: srcBuffer,
    dstBuffer: dstBuffer,
    regionCount: regionCount,
    pRegions: pRegions,
  )

proc newVkCopyImageInfo2*(sType: VkStructureType, pNext: pointer = nil, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkImageCopy2): VkCopyImageInfo2 =
  result = VkCopyImageInfo2(
    sType: sType,
    pNext: pNext,
    srcImage: srcImage,
    srcImageLayout: srcImageLayout,
    dstImage: dstImage,
    dstImageLayout: dstImageLayout,
    regionCount: regionCount,
    pRegions: pRegions,
  )

proc newVkBlitImageInfo2*(sType: VkStructureType, pNext: pointer = nil, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkImageBlit2, filter: VkFilter): VkBlitImageInfo2 =
  result = VkBlitImageInfo2(
    sType: sType,
    pNext: pNext,
    srcImage: srcImage,
    srcImageLayout: srcImageLayout,
    dstImage: dstImage,
    dstImageLayout: dstImageLayout,
    regionCount: regionCount,
    pRegions: pRegions,
    filter: filter,
  )

proc newVkCopyBufferToImageInfo2*(sType: VkStructureType, pNext: pointer = nil, srcBuffer: VkBuffer, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkBufferImageCopy2): VkCopyBufferToImageInfo2 =
  result = VkCopyBufferToImageInfo2(
    sType: sType,
    pNext: pNext,
    srcBuffer: srcBuffer,
    dstImage: dstImage,
    dstImageLayout: dstImageLayout,
    regionCount: regionCount,
    pRegions: pRegions,
  )

proc newVkCopyImageToBufferInfo2*(sType: VkStructureType, pNext: pointer = nil, srcImage: VkImage, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer, regionCount: uint32, pRegions: ptr VkBufferImageCopy2): VkCopyImageToBufferInfo2 =
  result = VkCopyImageToBufferInfo2(
    sType: sType,
    pNext: pNext,
    srcImage: srcImage,
    srcImageLayout: srcImageLayout,
    dstBuffer: dstBuffer,
    regionCount: regionCount,
    pRegions: pRegions,
  )

proc newVkResolveImageInfo2*(sType: VkStructureType, pNext: pointer = nil, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkImageResolve2): VkResolveImageInfo2 =
  result = VkResolveImageInfo2(
    sType: sType,
    pNext: pNext,
    srcImage: srcImage,
    srcImageLayout: srcImageLayout,
    dstImage: dstImage,
    dstImageLayout: dstImageLayout,
    regionCount: regionCount,
    pRegions: pRegions,
  )

proc newVkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, shaderImageInt64Atomics: VkBool32, sparseImageInt64Atomics: VkBool32): VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT =
  result = VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT(
    sType: sType,
    pNext: pNext,
    shaderImageInt64Atomics: shaderImageInt64Atomics,
    sparseImageInt64Atomics: sparseImageInt64Atomics,
  )

proc newVkFragmentShadingRateAttachmentInfoKHR*(sType: VkStructureType, pNext: pointer = nil, pFragmentShadingRateAttachment: ptr VkAttachmentReference2, shadingRateAttachmentTexelSize: VkExtent2D): VkFragmentShadingRateAttachmentInfoKHR =
  result = VkFragmentShadingRateAttachmentInfoKHR(
    sType: sType,
    pNext: pNext,
    pFragmentShadingRateAttachment: pFragmentShadingRateAttachment,
    shadingRateAttachmentTexelSize: shadingRateAttachmentTexelSize,
  )

proc newVkPipelineFragmentShadingRateStateCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, fragmentSize: VkExtent2D, combinerOps: array[2, VkFragmentShadingRateCombinerOpKHR]): VkPipelineFragmentShadingRateStateCreateInfoKHR =
  result = VkPipelineFragmentShadingRateStateCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    fragmentSize: fragmentSize,
    combinerOps: combinerOps,
  )

proc newVkPhysicalDeviceFragmentShadingRateFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, pipelineFragmentShadingRate: VkBool32, primitiveFragmentShadingRate: VkBool32, attachmentFragmentShadingRate: VkBool32): VkPhysicalDeviceFragmentShadingRateFeaturesKHR =
  result = VkPhysicalDeviceFragmentShadingRateFeaturesKHR(
    sType: sType,
    pNext: pNext,
    pipelineFragmentShadingRate: pipelineFragmentShadingRate,
    primitiveFragmentShadingRate: primitiveFragmentShadingRate,
    attachmentFragmentShadingRate: attachmentFragmentShadingRate,
  )

proc newVkPhysicalDeviceFragmentShadingRatePropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, minFragmentShadingRateAttachmentTexelSize: VkExtent2D, maxFragmentShadingRateAttachmentTexelSize: VkExtent2D, maxFragmentShadingRateAttachmentTexelSizeAspectRatio: uint32, primitiveFragmentShadingRateWithMultipleViewports: VkBool32, layeredShadingRateAttachments: VkBool32, fragmentShadingRateNonTrivialCombinerOps: VkBool32, maxFragmentSize: VkExtent2D, maxFragmentSizeAspectRatio: uint32, maxFragmentShadingRateCoverageSamples: uint32, maxFragmentShadingRateRasterizationSamples: VkSampleCountFlagBits, fragmentShadingRateWithShaderDepthStencilWrites: VkBool32, fragmentShadingRateWithSampleMask: VkBool32, fragmentShadingRateWithShaderSampleMask: VkBool32, fragmentShadingRateWithConservativeRasterization: VkBool32, fragmentShadingRateWithFragmentShaderInterlock: VkBool32, fragmentShadingRateWithCustomSampleLocations: VkBool32, fragmentShadingRateStrictMultiplyCombiner: VkBool32): VkPhysicalDeviceFragmentShadingRatePropertiesKHR =
  result = VkPhysicalDeviceFragmentShadingRatePropertiesKHR(
    sType: sType,
    pNext: pNext,
    minFragmentShadingRateAttachmentTexelSize: minFragmentShadingRateAttachmentTexelSize,
    maxFragmentShadingRateAttachmentTexelSize: maxFragmentShadingRateAttachmentTexelSize,
    maxFragmentShadingRateAttachmentTexelSizeAspectRatio: maxFragmentShadingRateAttachmentTexelSizeAspectRatio,
    primitiveFragmentShadingRateWithMultipleViewports: primitiveFragmentShadingRateWithMultipleViewports,
    layeredShadingRateAttachments: layeredShadingRateAttachments,
    fragmentShadingRateNonTrivialCombinerOps: fragmentShadingRateNonTrivialCombinerOps,
    maxFragmentSize: maxFragmentSize,
    maxFragmentSizeAspectRatio: maxFragmentSizeAspectRatio,
    maxFragmentShadingRateCoverageSamples: maxFragmentShadingRateCoverageSamples,
    maxFragmentShadingRateRasterizationSamples: maxFragmentShadingRateRasterizationSamples,
    fragmentShadingRateWithShaderDepthStencilWrites: fragmentShadingRateWithShaderDepthStencilWrites,
    fragmentShadingRateWithSampleMask: fragmentShadingRateWithSampleMask,
    fragmentShadingRateWithShaderSampleMask: fragmentShadingRateWithShaderSampleMask,
    fragmentShadingRateWithConservativeRasterization: fragmentShadingRateWithConservativeRasterization,
    fragmentShadingRateWithFragmentShaderInterlock: fragmentShadingRateWithFragmentShaderInterlock,
    fragmentShadingRateWithCustomSampleLocations: fragmentShadingRateWithCustomSampleLocations,
    fragmentShadingRateStrictMultiplyCombiner: fragmentShadingRateStrictMultiplyCombiner,
  )

proc newVkPhysicalDeviceFragmentShadingRateKHR*(sType: VkStructureType, pNext: pointer = nil, sampleCounts: VkSampleCountFlags, fragmentSize: VkExtent2D): VkPhysicalDeviceFragmentShadingRateKHR =
  result = VkPhysicalDeviceFragmentShadingRateKHR(
    sType: sType,
    pNext: pNext,
    sampleCounts: sampleCounts,
    fragmentSize: fragmentSize,
  )

proc newVkPhysicalDeviceShaderTerminateInvocationFeatures*(sType: VkStructureType, pNext: pointer = nil, shaderTerminateInvocation: VkBool32): VkPhysicalDeviceShaderTerminateInvocationFeatures =
  result = VkPhysicalDeviceShaderTerminateInvocationFeatures(
    sType: sType,
    pNext: pNext,
    shaderTerminateInvocation: shaderTerminateInvocation,
  )

proc newVkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, fragmentShadingRateEnums: VkBool32, supersampleFragmentShadingRates: VkBool32, noInvocationFragmentShadingRates: VkBool32): VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV =
  result = VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV(
    sType: sType,
    pNext: pNext,
    fragmentShadingRateEnums: fragmentShadingRateEnums,
    supersampleFragmentShadingRates: supersampleFragmentShadingRates,
    noInvocationFragmentShadingRates: noInvocationFragmentShadingRates,
  )

proc newVkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV*(sType: VkStructureType, pNext: pointer = nil, maxFragmentShadingRateInvocationCount: VkSampleCountFlagBits): VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV =
  result = VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV(
    sType: sType,
    pNext: pNext,
    maxFragmentShadingRateInvocationCount: maxFragmentShadingRateInvocationCount,
  )

proc newVkPipelineFragmentShadingRateEnumStateCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, shadingRateType: VkFragmentShadingRateTypeNV, shadingRate: VkFragmentShadingRateNV, combinerOps: array[2, VkFragmentShadingRateCombinerOpKHR]): VkPipelineFragmentShadingRateEnumStateCreateInfoNV =
  result = VkPipelineFragmentShadingRateEnumStateCreateInfoNV(
    sType: sType,
    pNext: pNext,
    shadingRateType: shadingRateType,
    shadingRate: shadingRate,
    combinerOps: combinerOps,
  )

proc newVkAccelerationStructureBuildSizesInfoKHR*(sType: VkStructureType, pNext: pointer = nil, accelerationStructureSize: VkDeviceSize, updateScratchSize: VkDeviceSize, buildScratchSize: VkDeviceSize): VkAccelerationStructureBuildSizesInfoKHR =
  result = VkAccelerationStructureBuildSizesInfoKHR(
    sType: sType,
    pNext: pNext,
    accelerationStructureSize: accelerationStructureSize,
    updateScratchSize: updateScratchSize,
    buildScratchSize: buildScratchSize,
  )

proc newVkPhysicalDeviceImage2DViewOf3DFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, image2DViewOf3D: VkBool32, sampler2DViewOf3D: VkBool32): VkPhysicalDeviceImage2DViewOf3DFeaturesEXT =
  result = VkPhysicalDeviceImage2DViewOf3DFeaturesEXT(
    sType: sType,
    pNext: pNext,
    image2DViewOf3D: image2DViewOf3D,
    sampler2DViewOf3D: sampler2DViewOf3D,
  )

proc newVkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, imageSlicedViewOf3D: VkBool32): VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT =
  result = VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT(
    sType: sType,
    pNext: pNext,
    imageSlicedViewOf3D: imageSlicedViewOf3D,
  )

proc newVkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, attachmentFeedbackLoopDynamicState: VkBool32): VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT =
  result = VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT(
    sType: sType,
    pNext: pNext,
    attachmentFeedbackLoopDynamicState: attachmentFeedbackLoopDynamicState,
  )

proc newVkPhysicalDeviceMutableDescriptorTypeFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, mutableDescriptorType: VkBool32): VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT =
  result = VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT(
    sType: sType,
    pNext: pNext,
    mutableDescriptorType: mutableDescriptorType,
  )

proc newVkMutableDescriptorTypeListEXT*(descriptorTypeCount: uint32, pDescriptorTypes: ptr VkDescriptorType): VkMutableDescriptorTypeListEXT =
  result = VkMutableDescriptorTypeListEXT(
    descriptorTypeCount: descriptorTypeCount,
    pDescriptorTypes: pDescriptorTypes,
  )

proc newVkMutableDescriptorTypeCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, mutableDescriptorTypeListCount: uint32, pMutableDescriptorTypeLists: ptr VkMutableDescriptorTypeListEXT): VkMutableDescriptorTypeCreateInfoEXT =
  result = VkMutableDescriptorTypeCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    mutableDescriptorTypeListCount: mutableDescriptorTypeListCount,
    pMutableDescriptorTypeLists: pMutableDescriptorTypeLists,
  )

proc newVkPhysicalDeviceDepthClipControlFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, depthClipControl: VkBool32): VkPhysicalDeviceDepthClipControlFeaturesEXT =
  result = VkPhysicalDeviceDepthClipControlFeaturesEXT(
    sType: sType,
    pNext: pNext,
    depthClipControl: depthClipControl,
  )

proc newVkPipelineViewportDepthClipControlCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, negativeOneToOne: VkBool32): VkPipelineViewportDepthClipControlCreateInfoEXT =
  result = VkPipelineViewportDepthClipControlCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    negativeOneToOne: negativeOneToOne,
  )

proc newVkPhysicalDeviceVertexInputDynamicStateFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, vertexInputDynamicState: VkBool32): VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT =
  result = VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT(
    sType: sType,
    pNext: pNext,
    vertexInputDynamicState: vertexInputDynamicState,
  )

proc newVkPhysicalDeviceExternalMemoryRDMAFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, externalMemoryRDMA: VkBool32): VkPhysicalDeviceExternalMemoryRDMAFeaturesNV =
  result = VkPhysicalDeviceExternalMemoryRDMAFeaturesNV(
    sType: sType,
    pNext: pNext,
    externalMemoryRDMA: externalMemoryRDMA,
  )

proc newVkVertexInputBindingDescription2EXT*(sType: VkStructureType, pNext: pointer = nil, binding: uint32, stride: uint32, inputRate: VkVertexInputRate, divisor: uint32): VkVertexInputBindingDescription2EXT =
  result = VkVertexInputBindingDescription2EXT(
    sType: sType,
    pNext: pNext,
    binding: binding,
    stride: stride,
    inputRate: inputRate,
    divisor: divisor,
  )

proc newVkVertexInputAttributeDescription2EXT*(sType: VkStructureType, pNext: pointer = nil, location: uint32, binding: uint32, format: VkFormat, offset: uint32): VkVertexInputAttributeDescription2EXT =
  result = VkVertexInputAttributeDescription2EXT(
    sType: sType,
    pNext: pNext,
    location: location,
    binding: binding,
    format: format,
    offset: offset,
  )

proc newVkPhysicalDeviceColorWriteEnableFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, colorWriteEnable: VkBool32): VkPhysicalDeviceColorWriteEnableFeaturesEXT =
  result = VkPhysicalDeviceColorWriteEnableFeaturesEXT(
    sType: sType,
    pNext: pNext,
    colorWriteEnable: colorWriteEnable,
  )

proc newVkPipelineColorWriteCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, attachmentCount: uint32, pColorWriteEnables: ptr VkBool32): VkPipelineColorWriteCreateInfoEXT =
  result = VkPipelineColorWriteCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    attachmentCount: attachmentCount,
    pColorWriteEnables: pColorWriteEnables,
  )

proc newVkMemoryBarrier2*(sType: VkStructureType, pNext: pointer = nil, srcStageMask: VkPipelineStageFlags2, srcAccessMask: VkAccessFlags2, dstStageMask: VkPipelineStageFlags2, dstAccessMask: VkAccessFlags2): VkMemoryBarrier2 =
  result = VkMemoryBarrier2(
    sType: sType,
    pNext: pNext,
    srcStageMask: srcStageMask,
    srcAccessMask: srcAccessMask,
    dstStageMask: dstStageMask,
    dstAccessMask: dstAccessMask,
  )

proc newVkImageMemoryBarrier2*(sType: VkStructureType, pNext: pointer = nil, srcStageMask: VkPipelineStageFlags2, srcAccessMask: VkAccessFlags2, dstStageMask: VkPipelineStageFlags2, dstAccessMask: VkAccessFlags2, oldLayout: VkImageLayout, newLayout: VkImageLayout, srcQueueFamilyIndex: uint32, dstQueueFamilyIndex: uint32, image: VkImage, subresourceRange: VkImageSubresourceRange): VkImageMemoryBarrier2 =
  result = VkImageMemoryBarrier2(
    sType: sType,
    pNext: pNext,
    srcStageMask: srcStageMask,
    srcAccessMask: srcAccessMask,
    dstStageMask: dstStageMask,
    dstAccessMask: dstAccessMask,
    oldLayout: oldLayout,
    newLayout: newLayout,
    srcQueueFamilyIndex: srcQueueFamilyIndex,
    dstQueueFamilyIndex: dstQueueFamilyIndex,
    image: image,
    subresourceRange: subresourceRange,
  )

proc newVkBufferMemoryBarrier2*(sType: VkStructureType, pNext: pointer = nil, srcStageMask: VkPipelineStageFlags2, srcAccessMask: VkAccessFlags2, dstStageMask: VkPipelineStageFlags2, dstAccessMask: VkAccessFlags2, srcQueueFamilyIndex: uint32, dstQueueFamilyIndex: uint32, buffer: VkBuffer, offset: VkDeviceSize, size: VkDeviceSize): VkBufferMemoryBarrier2 =
  result = VkBufferMemoryBarrier2(
    sType: sType,
    pNext: pNext,
    srcStageMask: srcStageMask,
    srcAccessMask: srcAccessMask,
    dstStageMask: dstStageMask,
    dstAccessMask: dstAccessMask,
    srcQueueFamilyIndex: srcQueueFamilyIndex,
    dstQueueFamilyIndex: dstQueueFamilyIndex,
    buffer: buffer,
    offset: offset,
    size: size,
  )

proc newVkDependencyInfo*(sType: VkStructureType, pNext: pointer = nil, dependencyFlags: VkDependencyFlags, memoryBarrierCount: uint32, pMemoryBarriers: ptr VkMemoryBarrier2, bufferMemoryBarrierCount: uint32, pBufferMemoryBarriers: ptr VkBufferMemoryBarrier2, imageMemoryBarrierCount: uint32, pImageMemoryBarriers: ptr VkImageMemoryBarrier2): VkDependencyInfo =
  result = VkDependencyInfo(
    sType: sType,
    pNext: pNext,
    dependencyFlags: dependencyFlags,
    memoryBarrierCount: memoryBarrierCount,
    pMemoryBarriers: pMemoryBarriers,
    bufferMemoryBarrierCount: bufferMemoryBarrierCount,
    pBufferMemoryBarriers: pBufferMemoryBarriers,
    imageMemoryBarrierCount: imageMemoryBarrierCount,
    pImageMemoryBarriers: pImageMemoryBarriers,
  )

proc newVkSemaphoreSubmitInfo*(sType: VkStructureType, pNext: pointer = nil, semaphore: VkSemaphore, value: uint64, stageMask: VkPipelineStageFlags2, deviceIndex: uint32): VkSemaphoreSubmitInfo =
  result = VkSemaphoreSubmitInfo(
    sType: sType,
    pNext: pNext,
    semaphore: semaphore,
    value: value,
    stageMask: stageMask,
    deviceIndex: deviceIndex,
  )

proc newVkCommandBufferSubmitInfo*(sType: VkStructureType, pNext: pointer = nil, commandBuffer: VkCommandBuffer, deviceMask: uint32): VkCommandBufferSubmitInfo =
  result = VkCommandBufferSubmitInfo(
    sType: sType,
    pNext: pNext,
    commandBuffer: commandBuffer,
    deviceMask: deviceMask,
  )

proc newVkSubmitInfo2*(sType: VkStructureType, pNext: pointer = nil, flags: VkSubmitFlags = 0.VkSubmitFlags, waitSemaphoreInfoCount: uint32, pWaitSemaphoreInfos: ptr VkSemaphoreSubmitInfo, commandBufferInfoCount: uint32, pCommandBufferInfos: ptr VkCommandBufferSubmitInfo, signalSemaphoreInfoCount: uint32, pSignalSemaphoreInfos: ptr VkSemaphoreSubmitInfo): VkSubmitInfo2 =
  result = VkSubmitInfo2(
    sType: sType,
    pNext: pNext,
    flags: flags,
    waitSemaphoreInfoCount: waitSemaphoreInfoCount,
    pWaitSemaphoreInfos: pWaitSemaphoreInfos,
    commandBufferInfoCount: commandBufferInfoCount,
    pCommandBufferInfos: pCommandBufferInfos,
    signalSemaphoreInfoCount: signalSemaphoreInfoCount,
    pSignalSemaphoreInfos: pSignalSemaphoreInfos,
  )

proc newVkQueueFamilyCheckpointProperties2NV*(sType: VkStructureType, pNext: pointer = nil, checkpointExecutionStageMask: VkPipelineStageFlags2): VkQueueFamilyCheckpointProperties2NV =
  result = VkQueueFamilyCheckpointProperties2NV(
    sType: sType,
    pNext: pNext,
    checkpointExecutionStageMask: checkpointExecutionStageMask,
  )

proc newVkCheckpointData2NV*(sType: VkStructureType, pNext: pointer = nil, stage: VkPipelineStageFlags2, pCheckpointMarker: pointer = nil): VkCheckpointData2NV =
  result = VkCheckpointData2NV(
    sType: sType,
    pNext: pNext,
    stage: stage,
    pCheckpointMarker: pCheckpointMarker,
  )

proc newVkPhysicalDeviceSynchronization2Features*(sType: VkStructureType, pNext: pointer = nil, synchronization2: VkBool32): VkPhysicalDeviceSynchronization2Features =
  result = VkPhysicalDeviceSynchronization2Features(
    sType: sType,
    pNext: pNext,
    synchronization2: synchronization2,
  )

proc newVkPhysicalDeviceHostImageCopyFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, hostImageCopy: VkBool32): VkPhysicalDeviceHostImageCopyFeaturesEXT =
  result = VkPhysicalDeviceHostImageCopyFeaturesEXT(
    sType: sType,
    pNext: pNext,
    hostImageCopy: hostImageCopy,
  )

proc newVkPhysicalDeviceHostImageCopyPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, copySrcLayoutCount: uint32, pCopySrcLayouts: ptr VkImageLayout, copyDstLayoutCount: uint32, pCopyDstLayouts: ptr VkImageLayout, optimalTilingLayoutUUID: array[VK_UUID_SIZE, uint8], identicalMemoryTypeRequirements: VkBool32): VkPhysicalDeviceHostImageCopyPropertiesEXT =
  result = VkPhysicalDeviceHostImageCopyPropertiesEXT(
    sType: sType,
    pNext: pNext,
    copySrcLayoutCount: copySrcLayoutCount,
    pCopySrcLayouts: pCopySrcLayouts,
    copyDstLayoutCount: copyDstLayoutCount,
    pCopyDstLayouts: pCopyDstLayouts,
    optimalTilingLayoutUUID: optimalTilingLayoutUUID,
    identicalMemoryTypeRequirements: identicalMemoryTypeRequirements,
  )

proc newVkMemoryToImageCopyEXT*(sType: VkStructureType, pNext: pointer = nil, pHostPointer: pointer = nil, memoryRowLength: uint32, memoryImageHeight: uint32, imageSubresource: VkImageSubresourceLayers, imageOffset: VkOffset3D, imageExtent: VkExtent3D): VkMemoryToImageCopyEXT =
  result = VkMemoryToImageCopyEXT(
    sType: sType,
    pNext: pNext,
    pHostPointer: pHostPointer,
    memoryRowLength: memoryRowLength,
    memoryImageHeight: memoryImageHeight,
    imageSubresource: imageSubresource,
    imageOffset: imageOffset,
    imageExtent: imageExtent,
  )

proc newVkImageToMemoryCopyEXT*(sType: VkStructureType, pNext: pointer = nil, pHostPointer: pointer = nil, memoryRowLength: uint32, memoryImageHeight: uint32, imageSubresource: VkImageSubresourceLayers, imageOffset: VkOffset3D, imageExtent: VkExtent3D): VkImageToMemoryCopyEXT =
  result = VkImageToMemoryCopyEXT(
    sType: sType,
    pNext: pNext,
    pHostPointer: pHostPointer,
    memoryRowLength: memoryRowLength,
    memoryImageHeight: memoryImageHeight,
    imageSubresource: imageSubresource,
    imageOffset: imageOffset,
    imageExtent: imageExtent,
  )

proc newVkCopyMemoryToImageInfoEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkHostImageCopyFlagsEXT = 0.VkHostImageCopyFlagsEXT, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkMemoryToImageCopyEXT): VkCopyMemoryToImageInfoEXT =
  result = VkCopyMemoryToImageInfoEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    dstImage: dstImage,
    dstImageLayout: dstImageLayout,
    regionCount: regionCount,
    pRegions: pRegions,
  )

proc newVkCopyImageToMemoryInfoEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkHostImageCopyFlagsEXT = 0.VkHostImageCopyFlagsEXT, srcImage: VkImage, srcImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkImageToMemoryCopyEXT): VkCopyImageToMemoryInfoEXT =
  result = VkCopyImageToMemoryInfoEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    srcImage: srcImage,
    srcImageLayout: srcImageLayout,
    regionCount: regionCount,
    pRegions: pRegions,
  )

proc newVkCopyImageToImageInfoEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkHostImageCopyFlagsEXT = 0.VkHostImageCopyFlagsEXT, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkImageCopy2): VkCopyImageToImageInfoEXT =
  result = VkCopyImageToImageInfoEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    srcImage: srcImage,
    srcImageLayout: srcImageLayout,
    dstImage: dstImage,
    dstImageLayout: dstImageLayout,
    regionCount: regionCount,
    pRegions: pRegions,
  )

proc newVkHostImageLayoutTransitionInfoEXT*(sType: VkStructureType, pNext: pointer = nil, image: VkImage, oldLayout: VkImageLayout, newLayout: VkImageLayout, subresourceRange: VkImageSubresourceRange): VkHostImageLayoutTransitionInfoEXT =
  result = VkHostImageLayoutTransitionInfoEXT(
    sType: sType,
    pNext: pNext,
    image: image,
    oldLayout: oldLayout,
    newLayout: newLayout,
    subresourceRange: subresourceRange,
  )

proc newVkSubresourceHostMemcpySizeEXT*(sType: VkStructureType, pNext: pointer = nil, size: VkDeviceSize): VkSubresourceHostMemcpySizeEXT =
  result = VkSubresourceHostMemcpySizeEXT(
    sType: sType,
    pNext: pNext,
    size: size,
  )

proc newVkHostImageCopyDevicePerformanceQueryEXT*(sType: VkStructureType, pNext: pointer = nil, optimalDeviceAccess: VkBool32, identicalMemoryLayout: VkBool32): VkHostImageCopyDevicePerformanceQueryEXT =
  result = VkHostImageCopyDevicePerformanceQueryEXT(
    sType: sType,
    pNext: pNext,
    optimalDeviceAccess: optimalDeviceAccess,
    identicalMemoryLayout: identicalMemoryLayout,
  )

proc newVkPhysicalDeviceVulkanSC10Properties*(sType: VkStructureType, pNext: pointer = nil, deviceNoDynamicHostAllocations: VkBool32, deviceDestroyFreesMemory: VkBool32, commandPoolMultipleCommandBuffersRecording: VkBool32, commandPoolResetCommandBuffer: VkBool32, commandBufferSimultaneousUse: VkBool32, secondaryCommandBufferNullOrImagelessFramebuffer: VkBool32, recycleDescriptorSetMemory: VkBool32, recyclePipelineMemory: VkBool32, maxRenderPassSubpasses: uint32, maxRenderPassDependencies: uint32, maxSubpassInputAttachments: uint32, maxSubpassPreserveAttachments: uint32, maxFramebufferAttachments: uint32, maxDescriptorSetLayoutBindings: uint32, maxQueryFaultCount: uint32, maxCallbackFaultCount: uint32, maxCommandPoolCommandBuffers: uint32, maxCommandBufferSize: VkDeviceSize): VkPhysicalDeviceVulkanSC10Properties =
  result = VkPhysicalDeviceVulkanSC10Properties(
    sType: sType,
    pNext: pNext,
    deviceNoDynamicHostAllocations: deviceNoDynamicHostAllocations,
    deviceDestroyFreesMemory: deviceDestroyFreesMemory,
    commandPoolMultipleCommandBuffersRecording: commandPoolMultipleCommandBuffersRecording,
    commandPoolResetCommandBuffer: commandPoolResetCommandBuffer,
    commandBufferSimultaneousUse: commandBufferSimultaneousUse,
    secondaryCommandBufferNullOrImagelessFramebuffer: secondaryCommandBufferNullOrImagelessFramebuffer,
    recycleDescriptorSetMemory: recycleDescriptorSetMemory,
    recyclePipelineMemory: recyclePipelineMemory,
    maxRenderPassSubpasses: maxRenderPassSubpasses,
    maxRenderPassDependencies: maxRenderPassDependencies,
    maxSubpassInputAttachments: maxSubpassInputAttachments,
    maxSubpassPreserveAttachments: maxSubpassPreserveAttachments,
    maxFramebufferAttachments: maxFramebufferAttachments,
    maxDescriptorSetLayoutBindings: maxDescriptorSetLayoutBindings,
    maxQueryFaultCount: maxQueryFaultCount,
    maxCallbackFaultCount: maxCallbackFaultCount,
    maxCommandPoolCommandBuffers: maxCommandPoolCommandBuffers,
    maxCommandBufferSize: maxCommandBufferSize,
  )

proc newVkPipelinePoolSize*(sType: VkStructureType, pNext: pointer = nil, poolEntrySize: VkDeviceSize, poolEntryCount: uint32): VkPipelinePoolSize =
  result = VkPipelinePoolSize(
    sType: sType,
    pNext: pNext,
    poolEntrySize: poolEntrySize,
    poolEntryCount: poolEntryCount,
  )

proc newVkDeviceObjectReservationCreateInfo*(sType: VkStructureType, pNext: pointer = nil, pipelineCacheCreateInfoCount: uint32, pPipelineCacheCreateInfos: ptr VkPipelineCacheCreateInfo, pipelinePoolSizeCount: uint32, pPipelinePoolSizes: ptr VkPipelinePoolSize, semaphoreRequestCount: uint32, commandBufferRequestCount: uint32, fenceRequestCount: uint32, deviceMemoryRequestCount: uint32, bufferRequestCount: uint32, imageRequestCount: uint32, eventRequestCount: uint32, queryPoolRequestCount: uint32, bufferViewRequestCount: uint32, imageViewRequestCount: uint32, layeredImageViewRequestCount: uint32, pipelineCacheRequestCount: uint32, pipelineLayoutRequestCount: uint32, renderPassRequestCount: uint32, graphicsPipelineRequestCount: uint32, computePipelineRequestCount: uint32, descriptorSetLayoutRequestCount: uint32, samplerRequestCount: uint32, descriptorPoolRequestCount: uint32, descriptorSetRequestCount: uint32, framebufferRequestCount: uint32, commandPoolRequestCount: uint32, samplerYcbcrConversionRequestCount: uint32, surfaceRequestCount: uint32, swapchainRequestCount: uint32, displayModeRequestCount: uint32, subpassDescriptionRequestCount: uint32, attachmentDescriptionRequestCount: uint32, descriptorSetLayoutBindingRequestCount: uint32, descriptorSetLayoutBindingLimit: uint32, maxImageViewMipLevels: uint32, maxImageViewArrayLayers: uint32, maxLayeredImageViewMipLevels: uint32, maxOcclusionQueriesPerPool: uint32, maxPipelineStatisticsQueriesPerPool: uint32, maxTimestampQueriesPerPool: uint32, maxImmutableSamplersPerDescriptorSetLayout: uint32): VkDeviceObjectReservationCreateInfo =
  result = VkDeviceObjectReservationCreateInfo(
    sType: sType,
    pNext: pNext,
    pipelineCacheCreateInfoCount: pipelineCacheCreateInfoCount,
    pPipelineCacheCreateInfos: pPipelineCacheCreateInfos,
    pipelinePoolSizeCount: pipelinePoolSizeCount,
    pPipelinePoolSizes: pPipelinePoolSizes,
    semaphoreRequestCount: semaphoreRequestCount,
    commandBufferRequestCount: commandBufferRequestCount,
    fenceRequestCount: fenceRequestCount,
    deviceMemoryRequestCount: deviceMemoryRequestCount,
    bufferRequestCount: bufferRequestCount,
    imageRequestCount: imageRequestCount,
    eventRequestCount: eventRequestCount,
    queryPoolRequestCount: queryPoolRequestCount,
    bufferViewRequestCount: bufferViewRequestCount,
    imageViewRequestCount: imageViewRequestCount,
    layeredImageViewRequestCount: layeredImageViewRequestCount,
    pipelineCacheRequestCount: pipelineCacheRequestCount,
    pipelineLayoutRequestCount: pipelineLayoutRequestCount,
    renderPassRequestCount: renderPassRequestCount,
    graphicsPipelineRequestCount: graphicsPipelineRequestCount,
    computePipelineRequestCount: computePipelineRequestCount,
    descriptorSetLayoutRequestCount: descriptorSetLayoutRequestCount,
    samplerRequestCount: samplerRequestCount,
    descriptorPoolRequestCount: descriptorPoolRequestCount,
    descriptorSetRequestCount: descriptorSetRequestCount,
    framebufferRequestCount: framebufferRequestCount,
    commandPoolRequestCount: commandPoolRequestCount,
    samplerYcbcrConversionRequestCount: samplerYcbcrConversionRequestCount,
    surfaceRequestCount: surfaceRequestCount,
    swapchainRequestCount: swapchainRequestCount,
    displayModeRequestCount: displayModeRequestCount,
    subpassDescriptionRequestCount: subpassDescriptionRequestCount,
    attachmentDescriptionRequestCount: attachmentDescriptionRequestCount,
    descriptorSetLayoutBindingRequestCount: descriptorSetLayoutBindingRequestCount,
    descriptorSetLayoutBindingLimit: descriptorSetLayoutBindingLimit,
    maxImageViewMipLevels: maxImageViewMipLevels,
    maxImageViewArrayLayers: maxImageViewArrayLayers,
    maxLayeredImageViewMipLevels: maxLayeredImageViewMipLevels,
    maxOcclusionQueriesPerPool: maxOcclusionQueriesPerPool,
    maxPipelineStatisticsQueriesPerPool: maxPipelineStatisticsQueriesPerPool,
    maxTimestampQueriesPerPool: maxTimestampQueriesPerPool,
    maxImmutableSamplersPerDescriptorSetLayout: maxImmutableSamplersPerDescriptorSetLayout,
  )

proc newVkCommandPoolMemoryReservationCreateInfo*(sType: VkStructureType, pNext: pointer = nil, commandPoolReservedSize: VkDeviceSize, commandPoolMaxCommandBuffers: uint32): VkCommandPoolMemoryReservationCreateInfo =
  result = VkCommandPoolMemoryReservationCreateInfo(
    sType: sType,
    pNext: pNext,
    commandPoolReservedSize: commandPoolReservedSize,
    commandPoolMaxCommandBuffers: commandPoolMaxCommandBuffers,
  )

proc newVkCommandPoolMemoryConsumption*(sType: VkStructureType, pNext: pointer = nil, commandPoolAllocated: VkDeviceSize, commandPoolReservedSize: VkDeviceSize, commandBufferAllocated: VkDeviceSize): VkCommandPoolMemoryConsumption =
  result = VkCommandPoolMemoryConsumption(
    sType: sType,
    pNext: pNext,
    commandPoolAllocated: commandPoolAllocated,
    commandPoolReservedSize: commandPoolReservedSize,
    commandBufferAllocated: commandBufferAllocated,
  )

proc newVkPhysicalDeviceVulkanSC10Features*(sType: VkStructureType, pNext: pointer = nil, shaderAtomicInstructions: VkBool32): VkPhysicalDeviceVulkanSC10Features =
  result = VkPhysicalDeviceVulkanSC10Features(
    sType: sType,
    pNext: pNext,
    shaderAtomicInstructions: shaderAtomicInstructions,
  )

proc newVkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, primitivesGeneratedQuery: VkBool32, primitivesGeneratedQueryWithRasterizerDiscard: VkBool32, primitivesGeneratedQueryWithNonZeroStreams: VkBool32): VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT =
  result = VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT(
    sType: sType,
    pNext: pNext,
    primitivesGeneratedQuery: primitivesGeneratedQuery,
    primitivesGeneratedQueryWithRasterizerDiscard: primitivesGeneratedQueryWithRasterizerDiscard,
    primitivesGeneratedQueryWithNonZeroStreams: primitivesGeneratedQueryWithNonZeroStreams,
  )

proc newVkPhysicalDeviceLegacyDitheringFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, legacyDithering: VkBool32): VkPhysicalDeviceLegacyDitheringFeaturesEXT =
  result = VkPhysicalDeviceLegacyDitheringFeaturesEXT(
    sType: sType,
    pNext: pNext,
    legacyDithering: legacyDithering,
  )

proc newVkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, multisampledRenderToSingleSampled: VkBool32): VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT =
  result = VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT(
    sType: sType,
    pNext: pNext,
    multisampledRenderToSingleSampled: multisampledRenderToSingleSampled,
  )

proc newVkSubpassResolvePerformanceQueryEXT*(sType: VkStructureType, pNext: pointer = nil, optimal: VkBool32): VkSubpassResolvePerformanceQueryEXT =
  result = VkSubpassResolvePerformanceQueryEXT(
    sType: sType,
    pNext: pNext,
    optimal: optimal,
  )

proc newVkMultisampledRenderToSingleSampledInfoEXT*(sType: VkStructureType, pNext: pointer = nil, multisampledRenderToSingleSampledEnable: VkBool32, rasterizationSamples: VkSampleCountFlagBits): VkMultisampledRenderToSingleSampledInfoEXT =
  result = VkMultisampledRenderToSingleSampledInfoEXT(
    sType: sType,
    pNext: pNext,
    multisampledRenderToSingleSampledEnable: multisampledRenderToSingleSampledEnable,
    rasterizationSamples: rasterizationSamples,
  )

proc newVkPhysicalDevicePipelineProtectedAccessFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, pipelineProtectedAccess: VkBool32): VkPhysicalDevicePipelineProtectedAccessFeaturesEXT =
  result = VkPhysicalDevicePipelineProtectedAccessFeaturesEXT(
    sType: sType,
    pNext: pNext,
    pipelineProtectedAccess: pipelineProtectedAccess,
  )

proc newVkQueueFamilyVideoPropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, videoCodecOperations: VkVideoCodecOperationFlagsKHR): VkQueueFamilyVideoPropertiesKHR =
  result = VkQueueFamilyVideoPropertiesKHR(
    sType: sType,
    pNext: pNext,
    videoCodecOperations: videoCodecOperations,
  )

proc newVkQueueFamilyQueryResultStatusPropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, queryResultStatusSupport: VkBool32): VkQueueFamilyQueryResultStatusPropertiesKHR =
  result = VkQueueFamilyQueryResultStatusPropertiesKHR(
    sType: sType,
    pNext: pNext,
    queryResultStatusSupport: queryResultStatusSupport,
  )

proc newVkVideoProfileListInfoKHR*(sType: VkStructureType, pNext: pointer = nil, profileCount: uint32, pProfiles: ptr VkVideoProfileInfoKHR): VkVideoProfileListInfoKHR =
  result = VkVideoProfileListInfoKHR(
    sType: sType,
    pNext: pNext,
    profileCount: profileCount,
    pProfiles: pProfiles,
  )

proc newVkPhysicalDeviceVideoFormatInfoKHR*(sType: VkStructureType, pNext: pointer = nil, imageUsage: VkImageUsageFlags): VkPhysicalDeviceVideoFormatInfoKHR =
  result = VkPhysicalDeviceVideoFormatInfoKHR(
    sType: sType,
    pNext: pNext,
    imageUsage: imageUsage,
  )

proc newVkVideoFormatPropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, format: VkFormat, componentMapping: VkComponentMapping, imageCreateFlags: VkImageCreateFlags, imageType: VkImageType, imageTiling: VkImageTiling, imageUsageFlags: VkImageUsageFlags): VkVideoFormatPropertiesKHR =
  result = VkVideoFormatPropertiesKHR(
    sType: sType,
    pNext: pNext,
    format: format,
    componentMapping: componentMapping,
    imageCreateFlags: imageCreateFlags,
    imageType: imageType,
    imageTiling: imageTiling,
    imageUsageFlags: imageUsageFlags,
  )

proc newVkVideoProfileInfoKHR*(sType: VkStructureType, pNext: pointer = nil, videoCodecOperation: VkVideoCodecOperationFlagBitsKHR, chromaSubsampling: VkVideoChromaSubsamplingFlagsKHR, lumaBitDepth: VkVideoComponentBitDepthFlagsKHR, chromaBitDepth: VkVideoComponentBitDepthFlagsKHR): VkVideoProfileInfoKHR =
  result = VkVideoProfileInfoKHR(
    sType: sType,
    pNext: pNext,
    videoCodecOperation: videoCodecOperation,
    chromaSubsampling: chromaSubsampling,
    lumaBitDepth: lumaBitDepth,
    chromaBitDepth: chromaBitDepth,
  )

proc newVkVideoCapabilitiesKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkVideoCapabilityFlagsKHR = 0.VkVideoCapabilityFlagsKHR, minBitstreamBufferOffsetAlignment: VkDeviceSize, minBitstreamBufferSizeAlignment: VkDeviceSize, pictureAccessGranularity: VkExtent2D, minCodedExtent: VkExtent2D, maxCodedExtent: VkExtent2D, maxDpbSlots: uint32, maxActiveReferencePictures: uint32, stdHeaderVersion: VkExtensionProperties): VkVideoCapabilitiesKHR =
  result = VkVideoCapabilitiesKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    minBitstreamBufferOffsetAlignment: minBitstreamBufferOffsetAlignment,
    minBitstreamBufferSizeAlignment: minBitstreamBufferSizeAlignment,
    pictureAccessGranularity: pictureAccessGranularity,
    minCodedExtent: minCodedExtent,
    maxCodedExtent: maxCodedExtent,
    maxDpbSlots: maxDpbSlots,
    maxActiveReferencePictures: maxActiveReferencePictures,
    stdHeaderVersion: stdHeaderVersion,
  )

proc newVkVideoSessionMemoryRequirementsKHR*(sType: VkStructureType, pNext: pointer = nil, memoryBindIndex: uint32, memoryRequirements: VkMemoryRequirements): VkVideoSessionMemoryRequirementsKHR =
  result = VkVideoSessionMemoryRequirementsKHR(
    sType: sType,
    pNext: pNext,
    memoryBindIndex: memoryBindIndex,
    memoryRequirements: memoryRequirements,
  )

proc newVkBindVideoSessionMemoryInfoKHR*(sType: VkStructureType, pNext: pointer = nil, memoryBindIndex: uint32, memory: VkDeviceMemory, memoryOffset: VkDeviceSize, memorySize: VkDeviceSize): VkBindVideoSessionMemoryInfoKHR =
  result = VkBindVideoSessionMemoryInfoKHR(
    sType: sType,
    pNext: pNext,
    memoryBindIndex: memoryBindIndex,
    memory: memory,
    memoryOffset: memoryOffset,
    memorySize: memorySize,
  )

proc newVkVideoPictureResourceInfoKHR*(sType: VkStructureType, pNext: pointer = nil, codedOffset: VkOffset2D, codedExtent: VkExtent2D, baseArrayLayer: uint32, imageViewBinding: VkImageView): VkVideoPictureResourceInfoKHR =
  result = VkVideoPictureResourceInfoKHR(
    sType: sType,
    pNext: pNext,
    codedOffset: codedOffset,
    codedExtent: codedExtent,
    baseArrayLayer: baseArrayLayer,
    imageViewBinding: imageViewBinding,
  )

proc newVkVideoReferenceSlotInfoKHR*(sType: VkStructureType, pNext: pointer = nil, slotIndex: int32, pPictureResource: ptr VkVideoPictureResourceInfoKHR): VkVideoReferenceSlotInfoKHR =
  result = VkVideoReferenceSlotInfoKHR(
    sType: sType,
    pNext: pNext,
    slotIndex: slotIndex,
    pPictureResource: pPictureResource,
  )

proc newVkVideoDecodeCapabilitiesKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkVideoDecodeCapabilityFlagsKHR = 0.VkVideoDecodeCapabilityFlagsKHR): VkVideoDecodeCapabilitiesKHR =
  result = VkVideoDecodeCapabilitiesKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
  )

proc newVkVideoDecodeUsageInfoKHR*(sType: VkStructureType, pNext: pointer = nil, videoUsageHints: VkVideoDecodeUsageFlagsKHR): VkVideoDecodeUsageInfoKHR =
  result = VkVideoDecodeUsageInfoKHR(
    sType: sType,
    pNext: pNext,
    videoUsageHints: videoUsageHints,
  )

proc newVkVideoDecodeInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkVideoDecodeFlagsKHR = 0.VkVideoDecodeFlagsKHR, srcBuffer: VkBuffer, srcBufferOffset: VkDeviceSize, srcBufferRange: VkDeviceSize, dstPictureResource: VkVideoPictureResourceInfoKHR, pSetupReferenceSlot: ptr VkVideoReferenceSlotInfoKHR, referenceSlotCount: uint32, pReferenceSlots: ptr VkVideoReferenceSlotInfoKHR): VkVideoDecodeInfoKHR =
  result = VkVideoDecodeInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    srcBuffer: srcBuffer,
    srcBufferOffset: srcBufferOffset,
    srcBufferRange: srcBufferRange,
    dstPictureResource: dstPictureResource,
    pSetupReferenceSlot: pSetupReferenceSlot,
    referenceSlotCount: referenceSlotCount,
    pReferenceSlots: pReferenceSlots,
  )

proc newVkPhysicalDeviceVideoMaintenance1FeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, videoMaintenance1: VkBool32): VkPhysicalDeviceVideoMaintenance1FeaturesKHR =
  result = VkPhysicalDeviceVideoMaintenance1FeaturesKHR(
    sType: sType,
    pNext: pNext,
    videoMaintenance1: videoMaintenance1,
  )

proc newVkVideoInlineQueryInfoKHR*(sType: VkStructureType, pNext: pointer = nil, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32): VkVideoInlineQueryInfoKHR =
  result = VkVideoInlineQueryInfoKHR(
    sType: sType,
    pNext: pNext,
    queryPool: queryPool,
    firstQuery: firstQuery,
    queryCount: queryCount,
  )

proc newVkVideoDecodeH264ProfileInfoKHR*(sType: VkStructureType, pNext: pointer = nil, stdProfileIdc: StdVideoH264ProfileIdc, pictureLayout: VkVideoDecodeH264PictureLayoutFlagBitsKHR): VkVideoDecodeH264ProfileInfoKHR =
  result = VkVideoDecodeH264ProfileInfoKHR(
    sType: sType,
    pNext: pNext,
    stdProfileIdc: stdProfileIdc,
    pictureLayout: pictureLayout,
  )

proc newVkVideoDecodeH264CapabilitiesKHR*(sType: VkStructureType, pNext: pointer = nil, maxLevelIdc: StdVideoH264LevelIdc, fieldOffsetGranularity: VkOffset2D): VkVideoDecodeH264CapabilitiesKHR =
  result = VkVideoDecodeH264CapabilitiesKHR(
    sType: sType,
    pNext: pNext,
    maxLevelIdc: maxLevelIdc,
    fieldOffsetGranularity: fieldOffsetGranularity,
  )

proc newVkVideoDecodeH264SessionParametersAddInfoKHR*(sType: VkStructureType, pNext: pointer = nil, stdSPSCount: uint32, pStdSPSs: ptr StdVideoH264SequenceParameterSet, stdPPSCount: uint32, pStdPPSs: ptr StdVideoH264PictureParameterSet): VkVideoDecodeH264SessionParametersAddInfoKHR =
  result = VkVideoDecodeH264SessionParametersAddInfoKHR(
    sType: sType,
    pNext: pNext,
    stdSPSCount: stdSPSCount,
    pStdSPSs: pStdSPSs,
    stdPPSCount: stdPPSCount,
    pStdPPSs: pStdPPSs,
  )

proc newVkVideoDecodeH264SessionParametersCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, maxStdSPSCount: uint32, maxStdPPSCount: uint32, pParametersAddInfo: ptr VkVideoDecodeH264SessionParametersAddInfoKHR): VkVideoDecodeH264SessionParametersCreateInfoKHR =
  result = VkVideoDecodeH264SessionParametersCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    maxStdSPSCount: maxStdSPSCount,
    maxStdPPSCount: maxStdPPSCount,
    pParametersAddInfo: pParametersAddInfo,
  )

proc newVkVideoDecodeH264PictureInfoKHR*(sType: VkStructureType, pNext: pointer = nil, pStdPictureInfo: ptr StdVideoDecodeH264PictureInfo, sliceCount: uint32, pSliceOffsets: ptr uint32): VkVideoDecodeH264PictureInfoKHR =
  result = VkVideoDecodeH264PictureInfoKHR(
    sType: sType,
    pNext: pNext,
    pStdPictureInfo: pStdPictureInfo,
    sliceCount: sliceCount,
    pSliceOffsets: pSliceOffsets,
  )

proc newVkVideoDecodeH264DpbSlotInfoKHR*(sType: VkStructureType, pNext: pointer = nil, pStdReferenceInfo: ptr StdVideoDecodeH264ReferenceInfo): VkVideoDecodeH264DpbSlotInfoKHR =
  result = VkVideoDecodeH264DpbSlotInfoKHR(
    sType: sType,
    pNext: pNext,
    pStdReferenceInfo: pStdReferenceInfo,
  )

proc newVkVideoDecodeH265ProfileInfoKHR*(sType: VkStructureType, pNext: pointer = nil, stdProfileIdc: StdVideoH265ProfileIdc): VkVideoDecodeH265ProfileInfoKHR =
  result = VkVideoDecodeH265ProfileInfoKHR(
    sType: sType,
    pNext: pNext,
    stdProfileIdc: stdProfileIdc,
  )

proc newVkVideoDecodeH265CapabilitiesKHR*(sType: VkStructureType, pNext: pointer = nil, maxLevelIdc: StdVideoH265LevelIdc): VkVideoDecodeH265CapabilitiesKHR =
  result = VkVideoDecodeH265CapabilitiesKHR(
    sType: sType,
    pNext: pNext,
    maxLevelIdc: maxLevelIdc,
  )

proc newVkVideoDecodeH265SessionParametersAddInfoKHR*(sType: VkStructureType, pNext: pointer = nil, stdVPSCount: uint32, pStdVPSs: ptr StdVideoH265VideoParameterSet, stdSPSCount: uint32, pStdSPSs: ptr StdVideoH265SequenceParameterSet, stdPPSCount: uint32, pStdPPSs: ptr StdVideoH265PictureParameterSet): VkVideoDecodeH265SessionParametersAddInfoKHR =
  result = VkVideoDecodeH265SessionParametersAddInfoKHR(
    sType: sType,
    pNext: pNext,
    stdVPSCount: stdVPSCount,
    pStdVPSs: pStdVPSs,
    stdSPSCount: stdSPSCount,
    pStdSPSs: pStdSPSs,
    stdPPSCount: stdPPSCount,
    pStdPPSs: pStdPPSs,
  )

proc newVkVideoDecodeH265SessionParametersCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, maxStdVPSCount: uint32, maxStdSPSCount: uint32, maxStdPPSCount: uint32, pParametersAddInfo: ptr VkVideoDecodeH265SessionParametersAddInfoKHR): VkVideoDecodeH265SessionParametersCreateInfoKHR =
  result = VkVideoDecodeH265SessionParametersCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    maxStdVPSCount: maxStdVPSCount,
    maxStdSPSCount: maxStdSPSCount,
    maxStdPPSCount: maxStdPPSCount,
    pParametersAddInfo: pParametersAddInfo,
  )

proc newVkVideoDecodeH265PictureInfoKHR*(sType: VkStructureType, pNext: pointer = nil, pStdPictureInfo: ptr StdVideoDecodeH265PictureInfo, sliceSegmentCount: uint32, pSliceSegmentOffsets: ptr uint32): VkVideoDecodeH265PictureInfoKHR =
  result = VkVideoDecodeH265PictureInfoKHR(
    sType: sType,
    pNext: pNext,
    pStdPictureInfo: pStdPictureInfo,
    sliceSegmentCount: sliceSegmentCount,
    pSliceSegmentOffsets: pSliceSegmentOffsets,
  )

proc newVkVideoDecodeH265DpbSlotInfoKHR*(sType: VkStructureType, pNext: pointer = nil, pStdReferenceInfo: ptr StdVideoDecodeH265ReferenceInfo): VkVideoDecodeH265DpbSlotInfoKHR =
  result = VkVideoDecodeH265DpbSlotInfoKHR(
    sType: sType,
    pNext: pNext,
    pStdReferenceInfo: pStdReferenceInfo,
  )

proc newVkVideoDecodeAV1ProfileInfoKHR*(sType: VkStructureType, pNext: pointer = nil, stdProfile: StdVideoAV1Profile, filmGrainSupport: VkBool32): VkVideoDecodeAV1ProfileInfoKHR =
  result = VkVideoDecodeAV1ProfileInfoKHR(
    sType: sType,
    pNext: pNext,
    stdProfile: stdProfile,
    filmGrainSupport: filmGrainSupport,
  )

proc newVkVideoDecodeAV1CapabilitiesKHR*(sType: VkStructureType, pNext: pointer = nil, maxLevel: StdVideoAV1Level): VkVideoDecodeAV1CapabilitiesKHR =
  result = VkVideoDecodeAV1CapabilitiesKHR(
    sType: sType,
    pNext: pNext,
    maxLevel: maxLevel,
  )

proc newVkVideoDecodeAV1SessionParametersCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, pStdSequenceHeader: ptr StdVideoAV1SequenceHeader): VkVideoDecodeAV1SessionParametersCreateInfoKHR =
  result = VkVideoDecodeAV1SessionParametersCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    pStdSequenceHeader: pStdSequenceHeader,
  )

proc newVkVideoDecodeAV1PictureInfoKHR*(sType: VkStructureType, pNext: pointer = nil, pStdPictureInfo: ptr StdVideoDecodeAV1PictureInfo, referenceNameSlotIndices: array[VK_MAX_VIDEO_AV1_REFERENCES_PER_FRAME_KHR, int32], frameHeaderOffset: uint32, tileCount: uint32, pTileOffsets: ptr uint32, pTileSizes: ptr uint32): VkVideoDecodeAV1PictureInfoKHR =
  result = VkVideoDecodeAV1PictureInfoKHR(
    sType: sType,
    pNext: pNext,
    pStdPictureInfo: pStdPictureInfo,
    referenceNameSlotIndices: referenceNameSlotIndices,
    frameHeaderOffset: frameHeaderOffset,
    tileCount: tileCount,
    pTileOffsets: pTileOffsets,
    pTileSizes: pTileSizes,
  )

proc newVkVideoDecodeAV1DpbSlotInfoKHR*(sType: VkStructureType, pNext: pointer = nil, pStdReferenceInfo: ptr StdVideoDecodeAV1ReferenceInfo): VkVideoDecodeAV1DpbSlotInfoKHR =
  result = VkVideoDecodeAV1DpbSlotInfoKHR(
    sType: sType,
    pNext: pNext,
    pStdReferenceInfo: pStdReferenceInfo,
  )

proc newVkVideoSessionCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, queueFamilyIndex: uint32, flags: VkVideoSessionCreateFlagsKHR = 0.VkVideoSessionCreateFlagsKHR, pVideoProfile: ptr VkVideoProfileInfoKHR, pictureFormat: VkFormat, maxCodedExtent: VkExtent2D, referencePictureFormat: VkFormat, maxDpbSlots: uint32, maxActiveReferencePictures: uint32, pStdHeaderVersion: ptr VkExtensionProperties): VkVideoSessionCreateInfoKHR =
  result = VkVideoSessionCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    queueFamilyIndex: queueFamilyIndex,
    flags: flags,
    pVideoProfile: pVideoProfile,
    pictureFormat: pictureFormat,
    maxCodedExtent: maxCodedExtent,
    referencePictureFormat: referencePictureFormat,
    maxDpbSlots: maxDpbSlots,
    maxActiveReferencePictures: maxActiveReferencePictures,
    pStdHeaderVersion: pStdHeaderVersion,
  )

proc newVkVideoSessionParametersCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkVideoSessionParametersCreateFlagsKHR = 0.VkVideoSessionParametersCreateFlagsKHR, videoSessionParametersTemplate: VkVideoSessionParametersKHR, videoSession: VkVideoSessionKHR): VkVideoSessionParametersCreateInfoKHR =
  result = VkVideoSessionParametersCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    videoSessionParametersTemplate: videoSessionParametersTemplate,
    videoSession: videoSession,
  )

proc newVkVideoSessionParametersUpdateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, updateSequenceCount: uint32): VkVideoSessionParametersUpdateInfoKHR =
  result = VkVideoSessionParametersUpdateInfoKHR(
    sType: sType,
    pNext: pNext,
    updateSequenceCount: updateSequenceCount,
  )

proc newVkVideoEncodeSessionParametersGetInfoKHR*(sType: VkStructureType, pNext: pointer = nil, videoSessionParameters: VkVideoSessionParametersKHR): VkVideoEncodeSessionParametersGetInfoKHR =
  result = VkVideoEncodeSessionParametersGetInfoKHR(
    sType: sType,
    pNext: pNext,
    videoSessionParameters: videoSessionParameters,
  )

proc newVkVideoEncodeSessionParametersFeedbackInfoKHR*(sType: VkStructureType, pNext: pointer = nil, hasOverrides: VkBool32): VkVideoEncodeSessionParametersFeedbackInfoKHR =
  result = VkVideoEncodeSessionParametersFeedbackInfoKHR(
    sType: sType,
    pNext: pNext,
    hasOverrides: hasOverrides,
  )

proc newVkVideoBeginCodingInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkVideoBeginCodingFlagsKHR = 0.VkVideoBeginCodingFlagsKHR, videoSession: VkVideoSessionKHR, videoSessionParameters: VkVideoSessionParametersKHR, referenceSlotCount: uint32, pReferenceSlots: ptr VkVideoReferenceSlotInfoKHR): VkVideoBeginCodingInfoKHR =
  result = VkVideoBeginCodingInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    videoSession: videoSession,
    videoSessionParameters: videoSessionParameters,
    referenceSlotCount: referenceSlotCount,
    pReferenceSlots: pReferenceSlots,
  )

proc newVkVideoEndCodingInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkVideoEndCodingFlagsKHR = 0.VkVideoEndCodingFlagsKHR): VkVideoEndCodingInfoKHR =
  result = VkVideoEndCodingInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
  )

proc newVkVideoCodingControlInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkVideoCodingControlFlagsKHR = 0.VkVideoCodingControlFlagsKHR): VkVideoCodingControlInfoKHR =
  result = VkVideoCodingControlInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
  )

proc newVkVideoEncodeUsageInfoKHR*(sType: VkStructureType, pNext: pointer = nil, videoUsageHints: VkVideoEncodeUsageFlagsKHR, videoContentHints: VkVideoEncodeContentFlagsKHR, tuningMode: VkVideoEncodeTuningModeKHR): VkVideoEncodeUsageInfoKHR =
  result = VkVideoEncodeUsageInfoKHR(
    sType: sType,
    pNext: pNext,
    videoUsageHints: videoUsageHints,
    videoContentHints: videoContentHints,
    tuningMode: tuningMode,
  )

proc newVkVideoEncodeInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkVideoEncodeFlagsKHR = 0.VkVideoEncodeFlagsKHR, dstBuffer: VkBuffer, dstBufferOffset: VkDeviceSize, dstBufferRange: VkDeviceSize, srcPictureResource: VkVideoPictureResourceInfoKHR, pSetupReferenceSlot: ptr VkVideoReferenceSlotInfoKHR, referenceSlotCount: uint32, pReferenceSlots: ptr VkVideoReferenceSlotInfoKHR, precedingExternallyEncodedBytes: uint32): VkVideoEncodeInfoKHR =
  result = VkVideoEncodeInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    dstBuffer: dstBuffer,
    dstBufferOffset: dstBufferOffset,
    dstBufferRange: dstBufferRange,
    srcPictureResource: srcPictureResource,
    pSetupReferenceSlot: pSetupReferenceSlot,
    referenceSlotCount: referenceSlotCount,
    pReferenceSlots: pReferenceSlots,
    precedingExternallyEncodedBytes: precedingExternallyEncodedBytes,
  )

proc newVkQueryPoolVideoEncodeFeedbackCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, encodeFeedbackFlags: VkVideoEncodeFeedbackFlagsKHR): VkQueryPoolVideoEncodeFeedbackCreateInfoKHR =
  result = VkQueryPoolVideoEncodeFeedbackCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    encodeFeedbackFlags: encodeFeedbackFlags,
  )

proc newVkVideoEncodeQualityLevelInfoKHR*(sType: VkStructureType, pNext: pointer = nil, qualityLevel: uint32): VkVideoEncodeQualityLevelInfoKHR =
  result = VkVideoEncodeQualityLevelInfoKHR(
    sType: sType,
    pNext: pNext,
    qualityLevel: qualityLevel,
  )

proc newVkPhysicalDeviceVideoEncodeQualityLevelInfoKHR*(sType: VkStructureType, pNext: pointer = nil, pVideoProfile: ptr VkVideoProfileInfoKHR, qualityLevel: uint32): VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR =
  result = VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR(
    sType: sType,
    pNext: pNext,
    pVideoProfile: pVideoProfile,
    qualityLevel: qualityLevel,
  )

proc newVkVideoEncodeQualityLevelPropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, preferredRateControlMode: VkVideoEncodeRateControlModeFlagBitsKHR, preferredRateControlLayerCount: uint32): VkVideoEncodeQualityLevelPropertiesKHR =
  result = VkVideoEncodeQualityLevelPropertiesKHR(
    sType: sType,
    pNext: pNext,
    preferredRateControlMode: preferredRateControlMode,
    preferredRateControlLayerCount: preferredRateControlLayerCount,
  )

proc newVkVideoEncodeRateControlInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkVideoEncodeRateControlFlagsKHR = 0.VkVideoEncodeRateControlFlagsKHR, rateControlMode: VkVideoEncodeRateControlModeFlagBitsKHR, layerCount: uint32, pLayers: ptr VkVideoEncodeRateControlLayerInfoKHR, virtualBufferSizeInMs: uint32, initialVirtualBufferSizeInMs: uint32): VkVideoEncodeRateControlInfoKHR =
  result = VkVideoEncodeRateControlInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    rateControlMode: rateControlMode,
    layerCount: layerCount,
    pLayers: pLayers,
    virtualBufferSizeInMs: virtualBufferSizeInMs,
    initialVirtualBufferSizeInMs: initialVirtualBufferSizeInMs,
  )

proc newVkVideoEncodeRateControlLayerInfoKHR*(sType: VkStructureType, pNext: pointer = nil, averageBitrate: uint64, maxBitrate: uint64, frameRateNumerator: uint32, frameRateDenominator: uint32): VkVideoEncodeRateControlLayerInfoKHR =
  result = VkVideoEncodeRateControlLayerInfoKHR(
    sType: sType,
    pNext: pNext,
    averageBitrate: averageBitrate,
    maxBitrate: maxBitrate,
    frameRateNumerator: frameRateNumerator,
    frameRateDenominator: frameRateDenominator,
  )

proc newVkVideoEncodeCapabilitiesKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkVideoEncodeCapabilityFlagsKHR = 0.VkVideoEncodeCapabilityFlagsKHR, rateControlModes: VkVideoEncodeRateControlModeFlagsKHR, maxRateControlLayers: uint32, maxBitrate: uint64, maxQualityLevels: uint32, encodeInputPictureGranularity: VkExtent2D, supportedEncodeFeedbackFlags: VkVideoEncodeFeedbackFlagsKHR): VkVideoEncodeCapabilitiesKHR =
  result = VkVideoEncodeCapabilitiesKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    rateControlModes: rateControlModes,
    maxRateControlLayers: maxRateControlLayers,
    maxBitrate: maxBitrate,
    maxQualityLevels: maxQualityLevels,
    encodeInputPictureGranularity: encodeInputPictureGranularity,
    supportedEncodeFeedbackFlags: supportedEncodeFeedbackFlags,
  )

proc newVkVideoEncodeH264CapabilitiesKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkVideoEncodeH264CapabilityFlagsKHR = 0.VkVideoEncodeH264CapabilityFlagsKHR, maxLevelIdc: StdVideoH264LevelIdc, maxSliceCount: uint32, maxPPictureL0ReferenceCount: uint32, maxBPictureL0ReferenceCount: uint32, maxL1ReferenceCount: uint32, maxTemporalLayerCount: uint32, expectDyadicTemporalLayerPattern: VkBool32, minQp: int32, maxQp: int32, prefersGopRemainingFrames: VkBool32, requiresGopRemainingFrames: VkBool32, stdSyntaxFlags: VkVideoEncodeH264StdFlagsKHR): VkVideoEncodeH264CapabilitiesKHR =
  result = VkVideoEncodeH264CapabilitiesKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    maxLevelIdc: maxLevelIdc,
    maxSliceCount: maxSliceCount,
    maxPPictureL0ReferenceCount: maxPPictureL0ReferenceCount,
    maxBPictureL0ReferenceCount: maxBPictureL0ReferenceCount,
    maxL1ReferenceCount: maxL1ReferenceCount,
    maxTemporalLayerCount: maxTemporalLayerCount,
    expectDyadicTemporalLayerPattern: expectDyadicTemporalLayerPattern,
    minQp: minQp,
    maxQp: maxQp,
    prefersGopRemainingFrames: prefersGopRemainingFrames,
    requiresGopRemainingFrames: requiresGopRemainingFrames,
    stdSyntaxFlags: stdSyntaxFlags,
  )

proc newVkVideoEncodeH264QualityLevelPropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, preferredRateControlFlags: VkVideoEncodeH264RateControlFlagsKHR, preferredGopFrameCount: uint32, preferredIdrPeriod: uint32, preferredConsecutiveBFrameCount: uint32, preferredTemporalLayerCount: uint32, preferredConstantQp: VkVideoEncodeH264QpKHR, preferredMaxL0ReferenceCount: uint32, preferredMaxL1ReferenceCount: uint32, preferredStdEntropyCodingModeFlag: VkBool32): VkVideoEncodeH264QualityLevelPropertiesKHR =
  result = VkVideoEncodeH264QualityLevelPropertiesKHR(
    sType: sType,
    pNext: pNext,
    preferredRateControlFlags: preferredRateControlFlags,
    preferredGopFrameCount: preferredGopFrameCount,
    preferredIdrPeriod: preferredIdrPeriod,
    preferredConsecutiveBFrameCount: preferredConsecutiveBFrameCount,
    preferredTemporalLayerCount: preferredTemporalLayerCount,
    preferredConstantQp: preferredConstantQp,
    preferredMaxL0ReferenceCount: preferredMaxL0ReferenceCount,
    preferredMaxL1ReferenceCount: preferredMaxL1ReferenceCount,
    preferredStdEntropyCodingModeFlag: preferredStdEntropyCodingModeFlag,
  )

proc newVkVideoEncodeH264SessionCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, useMaxLevelIdc: VkBool32, maxLevelIdc: StdVideoH264LevelIdc): VkVideoEncodeH264SessionCreateInfoKHR =
  result = VkVideoEncodeH264SessionCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    useMaxLevelIdc: useMaxLevelIdc,
    maxLevelIdc: maxLevelIdc,
  )

proc newVkVideoEncodeH264SessionParametersAddInfoKHR*(sType: VkStructureType, pNext: pointer = nil, stdSPSCount: uint32, pStdSPSs: ptr StdVideoH264SequenceParameterSet, stdPPSCount: uint32, pStdPPSs: ptr StdVideoH264PictureParameterSet): VkVideoEncodeH264SessionParametersAddInfoKHR =
  result = VkVideoEncodeH264SessionParametersAddInfoKHR(
    sType: sType,
    pNext: pNext,
    stdSPSCount: stdSPSCount,
    pStdSPSs: pStdSPSs,
    stdPPSCount: stdPPSCount,
    pStdPPSs: pStdPPSs,
  )

proc newVkVideoEncodeH264SessionParametersCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, maxStdSPSCount: uint32, maxStdPPSCount: uint32, pParametersAddInfo: ptr VkVideoEncodeH264SessionParametersAddInfoKHR): VkVideoEncodeH264SessionParametersCreateInfoKHR =
  result = VkVideoEncodeH264SessionParametersCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    maxStdSPSCount: maxStdSPSCount,
    maxStdPPSCount: maxStdPPSCount,
    pParametersAddInfo: pParametersAddInfo,
  )

proc newVkVideoEncodeH264SessionParametersGetInfoKHR*(sType: VkStructureType, pNext: pointer = nil, writeStdSPS: VkBool32, writeStdPPS: VkBool32, stdSPSId: uint32, stdPPSId: uint32): VkVideoEncodeH264SessionParametersGetInfoKHR =
  result = VkVideoEncodeH264SessionParametersGetInfoKHR(
    sType: sType,
    pNext: pNext,
    writeStdSPS: writeStdSPS,
    writeStdPPS: writeStdPPS,
    stdSPSId: stdSPSId,
    stdPPSId: stdPPSId,
  )

proc newVkVideoEncodeH264SessionParametersFeedbackInfoKHR*(sType: VkStructureType, pNext: pointer = nil, hasStdSPSOverrides: VkBool32, hasStdPPSOverrides: VkBool32): VkVideoEncodeH264SessionParametersFeedbackInfoKHR =
  result = VkVideoEncodeH264SessionParametersFeedbackInfoKHR(
    sType: sType,
    pNext: pNext,
    hasStdSPSOverrides: hasStdSPSOverrides,
    hasStdPPSOverrides: hasStdPPSOverrides,
  )

proc newVkVideoEncodeH264DpbSlotInfoKHR*(sType: VkStructureType, pNext: pointer = nil, pStdReferenceInfo: ptr StdVideoEncodeH264ReferenceInfo): VkVideoEncodeH264DpbSlotInfoKHR =
  result = VkVideoEncodeH264DpbSlotInfoKHR(
    sType: sType,
    pNext: pNext,
    pStdReferenceInfo: pStdReferenceInfo,
  )

proc newVkVideoEncodeH264PictureInfoKHR*(sType: VkStructureType, pNext: pointer = nil, naluSliceEntryCount: uint32, pNaluSliceEntries: ptr VkVideoEncodeH264NaluSliceInfoKHR, pStdPictureInfo: ptr StdVideoEncodeH264PictureInfo, generatePrefixNalu: VkBool32): VkVideoEncodeH264PictureInfoKHR =
  result = VkVideoEncodeH264PictureInfoKHR(
    sType: sType,
    pNext: pNext,
    naluSliceEntryCount: naluSliceEntryCount,
    pNaluSliceEntries: pNaluSliceEntries,
    pStdPictureInfo: pStdPictureInfo,
    generatePrefixNalu: generatePrefixNalu,
  )

proc newVkVideoEncodeH264ProfileInfoKHR*(sType: VkStructureType, pNext: pointer = nil, stdProfileIdc: StdVideoH264ProfileIdc): VkVideoEncodeH264ProfileInfoKHR =
  result = VkVideoEncodeH264ProfileInfoKHR(
    sType: sType,
    pNext: pNext,
    stdProfileIdc: stdProfileIdc,
  )

proc newVkVideoEncodeH264NaluSliceInfoKHR*(sType: VkStructureType, pNext: pointer = nil, constantQp: int32, pStdSliceHeader: ptr StdVideoEncodeH264SliceHeader): VkVideoEncodeH264NaluSliceInfoKHR =
  result = VkVideoEncodeH264NaluSliceInfoKHR(
    sType: sType,
    pNext: pNext,
    constantQp: constantQp,
    pStdSliceHeader: pStdSliceHeader,
  )

proc newVkVideoEncodeH264RateControlInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkVideoEncodeH264RateControlFlagsKHR = 0.VkVideoEncodeH264RateControlFlagsKHR, gopFrameCount: uint32, idrPeriod: uint32, consecutiveBFrameCount: uint32, temporalLayerCount: uint32): VkVideoEncodeH264RateControlInfoKHR =
  result = VkVideoEncodeH264RateControlInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    gopFrameCount: gopFrameCount,
    idrPeriod: idrPeriod,
    consecutiveBFrameCount: consecutiveBFrameCount,
    temporalLayerCount: temporalLayerCount,
  )

proc newVkVideoEncodeH264QpKHR*(qpI: int32, qpP: int32, qpB: int32): VkVideoEncodeH264QpKHR =
  result = VkVideoEncodeH264QpKHR(
    qpI: qpI,
    qpP: qpP,
    qpB: qpB,
  )

proc newVkVideoEncodeH264FrameSizeKHR*(frameISize: uint32, framePSize: uint32, frameBSize: uint32): VkVideoEncodeH264FrameSizeKHR =
  result = VkVideoEncodeH264FrameSizeKHR(
    frameISize: frameISize,
    framePSize: framePSize,
    frameBSize: frameBSize,
  )

proc newVkVideoEncodeH264GopRemainingFrameInfoKHR*(sType: VkStructureType, pNext: pointer = nil, useGopRemainingFrames: VkBool32, gopRemainingI: uint32, gopRemainingP: uint32, gopRemainingB: uint32): VkVideoEncodeH264GopRemainingFrameInfoKHR =
  result = VkVideoEncodeH264GopRemainingFrameInfoKHR(
    sType: sType,
    pNext: pNext,
    useGopRemainingFrames: useGopRemainingFrames,
    gopRemainingI: gopRemainingI,
    gopRemainingP: gopRemainingP,
    gopRemainingB: gopRemainingB,
  )

proc newVkVideoEncodeH264RateControlLayerInfoKHR*(sType: VkStructureType, pNext: pointer = nil, useMinQp: VkBool32, minQp: VkVideoEncodeH264QpKHR, useMaxQp: VkBool32, maxQp: VkVideoEncodeH264QpKHR, useMaxFrameSize: VkBool32, maxFrameSize: VkVideoEncodeH264FrameSizeKHR): VkVideoEncodeH264RateControlLayerInfoKHR =
  result = VkVideoEncodeH264RateControlLayerInfoKHR(
    sType: sType,
    pNext: pNext,
    useMinQp: useMinQp,
    minQp: minQp,
    useMaxQp: useMaxQp,
    maxQp: maxQp,
    useMaxFrameSize: useMaxFrameSize,
    maxFrameSize: maxFrameSize,
  )

proc newVkVideoEncodeH265CapabilitiesKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkVideoEncodeH265CapabilityFlagsKHR = 0.VkVideoEncodeH265CapabilityFlagsKHR, maxLevelIdc: StdVideoH265LevelIdc, maxSliceSegmentCount: uint32, maxTiles: VkExtent2D, ctbSizes: VkVideoEncodeH265CtbSizeFlagsKHR, transformBlockSizes: VkVideoEncodeH265TransformBlockSizeFlagsKHR, maxPPictureL0ReferenceCount: uint32, maxBPictureL0ReferenceCount: uint32, maxL1ReferenceCount: uint32, maxSubLayerCount: uint32, expectDyadicTemporalSubLayerPattern: VkBool32, minQp: int32, maxQp: int32, prefersGopRemainingFrames: VkBool32, requiresGopRemainingFrames: VkBool32, stdSyntaxFlags: VkVideoEncodeH265StdFlagsKHR): VkVideoEncodeH265CapabilitiesKHR =
  result = VkVideoEncodeH265CapabilitiesKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    maxLevelIdc: maxLevelIdc,
    maxSliceSegmentCount: maxSliceSegmentCount,
    maxTiles: maxTiles,
    ctbSizes: ctbSizes,
    transformBlockSizes: transformBlockSizes,
    maxPPictureL0ReferenceCount: maxPPictureL0ReferenceCount,
    maxBPictureL0ReferenceCount: maxBPictureL0ReferenceCount,
    maxL1ReferenceCount: maxL1ReferenceCount,
    maxSubLayerCount: maxSubLayerCount,
    expectDyadicTemporalSubLayerPattern: expectDyadicTemporalSubLayerPattern,
    minQp: minQp,
    maxQp: maxQp,
    prefersGopRemainingFrames: prefersGopRemainingFrames,
    requiresGopRemainingFrames: requiresGopRemainingFrames,
    stdSyntaxFlags: stdSyntaxFlags,
  )

proc newVkVideoEncodeH265QualityLevelPropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, preferredRateControlFlags: VkVideoEncodeH265RateControlFlagsKHR, preferredGopFrameCount: uint32, preferredIdrPeriod: uint32, preferredConsecutiveBFrameCount: uint32, preferredSubLayerCount: uint32, preferredConstantQp: VkVideoEncodeH265QpKHR, preferredMaxL0ReferenceCount: uint32, preferredMaxL1ReferenceCount: uint32): VkVideoEncodeH265QualityLevelPropertiesKHR =
  result = VkVideoEncodeH265QualityLevelPropertiesKHR(
    sType: sType,
    pNext: pNext,
    preferredRateControlFlags: preferredRateControlFlags,
    preferredGopFrameCount: preferredGopFrameCount,
    preferredIdrPeriod: preferredIdrPeriod,
    preferredConsecutiveBFrameCount: preferredConsecutiveBFrameCount,
    preferredSubLayerCount: preferredSubLayerCount,
    preferredConstantQp: preferredConstantQp,
    preferredMaxL0ReferenceCount: preferredMaxL0ReferenceCount,
    preferredMaxL1ReferenceCount: preferredMaxL1ReferenceCount,
  )

proc newVkVideoEncodeH265SessionCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, useMaxLevelIdc: VkBool32, maxLevelIdc: StdVideoH265LevelIdc): VkVideoEncodeH265SessionCreateInfoKHR =
  result = VkVideoEncodeH265SessionCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    useMaxLevelIdc: useMaxLevelIdc,
    maxLevelIdc: maxLevelIdc,
  )

proc newVkVideoEncodeH265SessionParametersAddInfoKHR*(sType: VkStructureType, pNext: pointer = nil, stdVPSCount: uint32, pStdVPSs: ptr StdVideoH265VideoParameterSet, stdSPSCount: uint32, pStdSPSs: ptr StdVideoH265SequenceParameterSet, stdPPSCount: uint32, pStdPPSs: ptr StdVideoH265PictureParameterSet): VkVideoEncodeH265SessionParametersAddInfoKHR =
  result = VkVideoEncodeH265SessionParametersAddInfoKHR(
    sType: sType,
    pNext: pNext,
    stdVPSCount: stdVPSCount,
    pStdVPSs: pStdVPSs,
    stdSPSCount: stdSPSCount,
    pStdSPSs: pStdSPSs,
    stdPPSCount: stdPPSCount,
    pStdPPSs: pStdPPSs,
  )

proc newVkVideoEncodeH265SessionParametersCreateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, maxStdVPSCount: uint32, maxStdSPSCount: uint32, maxStdPPSCount: uint32, pParametersAddInfo: ptr VkVideoEncodeH265SessionParametersAddInfoKHR): VkVideoEncodeH265SessionParametersCreateInfoKHR =
  result = VkVideoEncodeH265SessionParametersCreateInfoKHR(
    sType: sType,
    pNext: pNext,
    maxStdVPSCount: maxStdVPSCount,
    maxStdSPSCount: maxStdSPSCount,
    maxStdPPSCount: maxStdPPSCount,
    pParametersAddInfo: pParametersAddInfo,
  )

proc newVkVideoEncodeH265SessionParametersGetInfoKHR*(sType: VkStructureType, pNext: pointer = nil, writeStdVPS: VkBool32, writeStdSPS: VkBool32, writeStdPPS: VkBool32, stdVPSId: uint32, stdSPSId: uint32, stdPPSId: uint32): VkVideoEncodeH265SessionParametersGetInfoKHR =
  result = VkVideoEncodeH265SessionParametersGetInfoKHR(
    sType: sType,
    pNext: pNext,
    writeStdVPS: writeStdVPS,
    writeStdSPS: writeStdSPS,
    writeStdPPS: writeStdPPS,
    stdVPSId: stdVPSId,
    stdSPSId: stdSPSId,
    stdPPSId: stdPPSId,
  )

proc newVkVideoEncodeH265SessionParametersFeedbackInfoKHR*(sType: VkStructureType, pNext: pointer = nil, hasStdVPSOverrides: VkBool32, hasStdSPSOverrides: VkBool32, hasStdPPSOverrides: VkBool32): VkVideoEncodeH265SessionParametersFeedbackInfoKHR =
  result = VkVideoEncodeH265SessionParametersFeedbackInfoKHR(
    sType: sType,
    pNext: pNext,
    hasStdVPSOverrides: hasStdVPSOverrides,
    hasStdSPSOverrides: hasStdSPSOverrides,
    hasStdPPSOverrides: hasStdPPSOverrides,
  )

proc newVkVideoEncodeH265PictureInfoKHR*(sType: VkStructureType, pNext: pointer = nil, naluSliceSegmentEntryCount: uint32, pNaluSliceSegmentEntries: ptr VkVideoEncodeH265NaluSliceSegmentInfoKHR, pStdPictureInfo: ptr StdVideoEncodeH265PictureInfo): VkVideoEncodeH265PictureInfoKHR =
  result = VkVideoEncodeH265PictureInfoKHR(
    sType: sType,
    pNext: pNext,
    naluSliceSegmentEntryCount: naluSliceSegmentEntryCount,
    pNaluSliceSegmentEntries: pNaluSliceSegmentEntries,
    pStdPictureInfo: pStdPictureInfo,
  )

proc newVkVideoEncodeH265NaluSliceSegmentInfoKHR*(sType: VkStructureType, pNext: pointer = nil, constantQp: int32, pStdSliceSegmentHeader: ptr StdVideoEncodeH265SliceSegmentHeader): VkVideoEncodeH265NaluSliceSegmentInfoKHR =
  result = VkVideoEncodeH265NaluSliceSegmentInfoKHR(
    sType: sType,
    pNext: pNext,
    constantQp: constantQp,
    pStdSliceSegmentHeader: pStdSliceSegmentHeader,
  )

proc newVkVideoEncodeH265RateControlInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkVideoEncodeH265RateControlFlagsKHR = 0.VkVideoEncodeH265RateControlFlagsKHR, gopFrameCount: uint32, idrPeriod: uint32, consecutiveBFrameCount: uint32, subLayerCount: uint32): VkVideoEncodeH265RateControlInfoKHR =
  result = VkVideoEncodeH265RateControlInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    gopFrameCount: gopFrameCount,
    idrPeriod: idrPeriod,
    consecutiveBFrameCount: consecutiveBFrameCount,
    subLayerCount: subLayerCount,
  )

proc newVkVideoEncodeH265QpKHR*(qpI: int32, qpP: int32, qpB: int32): VkVideoEncodeH265QpKHR =
  result = VkVideoEncodeH265QpKHR(
    qpI: qpI,
    qpP: qpP,
    qpB: qpB,
  )

proc newVkVideoEncodeH265FrameSizeKHR*(frameISize: uint32, framePSize: uint32, frameBSize: uint32): VkVideoEncodeH265FrameSizeKHR =
  result = VkVideoEncodeH265FrameSizeKHR(
    frameISize: frameISize,
    framePSize: framePSize,
    frameBSize: frameBSize,
  )

proc newVkVideoEncodeH265GopRemainingFrameInfoKHR*(sType: VkStructureType, pNext: pointer = nil, useGopRemainingFrames: VkBool32, gopRemainingI: uint32, gopRemainingP: uint32, gopRemainingB: uint32): VkVideoEncodeH265GopRemainingFrameInfoKHR =
  result = VkVideoEncodeH265GopRemainingFrameInfoKHR(
    sType: sType,
    pNext: pNext,
    useGopRemainingFrames: useGopRemainingFrames,
    gopRemainingI: gopRemainingI,
    gopRemainingP: gopRemainingP,
    gopRemainingB: gopRemainingB,
  )

proc newVkVideoEncodeH265RateControlLayerInfoKHR*(sType: VkStructureType, pNext: pointer = nil, useMinQp: VkBool32, minQp: VkVideoEncodeH265QpKHR, useMaxQp: VkBool32, maxQp: VkVideoEncodeH265QpKHR, useMaxFrameSize: VkBool32, maxFrameSize: VkVideoEncodeH265FrameSizeKHR): VkVideoEncodeH265RateControlLayerInfoKHR =
  result = VkVideoEncodeH265RateControlLayerInfoKHR(
    sType: sType,
    pNext: pNext,
    useMinQp: useMinQp,
    minQp: minQp,
    useMaxQp: useMaxQp,
    maxQp: maxQp,
    useMaxFrameSize: useMaxFrameSize,
    maxFrameSize: maxFrameSize,
  )

proc newVkVideoEncodeH265ProfileInfoKHR*(sType: VkStructureType, pNext: pointer = nil, stdProfileIdc: StdVideoH265ProfileIdc): VkVideoEncodeH265ProfileInfoKHR =
  result = VkVideoEncodeH265ProfileInfoKHR(
    sType: sType,
    pNext: pNext,
    stdProfileIdc: stdProfileIdc,
  )

proc newVkVideoEncodeH265DpbSlotInfoKHR*(sType: VkStructureType, pNext: pointer = nil, pStdReferenceInfo: ptr StdVideoEncodeH265ReferenceInfo): VkVideoEncodeH265DpbSlotInfoKHR =
  result = VkVideoEncodeH265DpbSlotInfoKHR(
    sType: sType,
    pNext: pNext,
    pStdReferenceInfo: pStdReferenceInfo,
  )

proc newVkPhysicalDeviceInheritedViewportScissorFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, inheritedViewportScissor2D: VkBool32): VkPhysicalDeviceInheritedViewportScissorFeaturesNV =
  result = VkPhysicalDeviceInheritedViewportScissorFeaturesNV(
    sType: sType,
    pNext: pNext,
    inheritedViewportScissor2D: inheritedViewportScissor2D,
  )

proc newVkCommandBufferInheritanceViewportScissorInfoNV*(sType: VkStructureType, pNext: pointer = nil, viewportScissor2D: VkBool32, viewportDepthCount: uint32, pViewportDepths: ptr VkViewport): VkCommandBufferInheritanceViewportScissorInfoNV =
  result = VkCommandBufferInheritanceViewportScissorInfoNV(
    sType: sType,
    pNext: pNext,
    viewportScissor2D: viewportScissor2D,
    viewportDepthCount: viewportDepthCount,
    pViewportDepths: pViewportDepths,
  )

proc newVkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, ycbcr2plane444Formats: VkBool32): VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT =
  result = VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(
    sType: sType,
    pNext: pNext,
    ycbcr2plane444Formats: ycbcr2plane444Formats,
  )

proc newVkPhysicalDeviceProvokingVertexFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, provokingVertexLast: VkBool32, transformFeedbackPreservesProvokingVertex: VkBool32): VkPhysicalDeviceProvokingVertexFeaturesEXT =
  result = VkPhysicalDeviceProvokingVertexFeaturesEXT(
    sType: sType,
    pNext: pNext,
    provokingVertexLast: provokingVertexLast,
    transformFeedbackPreservesProvokingVertex: transformFeedbackPreservesProvokingVertex,
  )

proc newVkPhysicalDeviceProvokingVertexPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, provokingVertexModePerPipeline: VkBool32, transformFeedbackPreservesTriangleFanProvokingVertex: VkBool32): VkPhysicalDeviceProvokingVertexPropertiesEXT =
  result = VkPhysicalDeviceProvokingVertexPropertiesEXT(
    sType: sType,
    pNext: pNext,
    provokingVertexModePerPipeline: provokingVertexModePerPipeline,
    transformFeedbackPreservesTriangleFanProvokingVertex: transformFeedbackPreservesTriangleFanProvokingVertex,
  )

proc newVkPipelineRasterizationProvokingVertexStateCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, provokingVertexMode: VkProvokingVertexModeEXT): VkPipelineRasterizationProvokingVertexStateCreateInfoEXT =
  result = VkPipelineRasterizationProvokingVertexStateCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    provokingVertexMode: provokingVertexMode,
  )

proc newVkCuModuleCreateInfoNVX*(sType: VkStructureType, pNext: pointer = nil, dataSize: uint, pData: pointer = nil): VkCuModuleCreateInfoNVX =
  result = VkCuModuleCreateInfoNVX(
    sType: sType,
    pNext: pNext,
    dataSize: dataSize,
    pData: pData,
  )

proc newVkCuFunctionCreateInfoNVX*(sType: VkStructureType, pNext: pointer = nil, module: VkCuModuleNVX, pName: cstring): VkCuFunctionCreateInfoNVX =
  result = VkCuFunctionCreateInfoNVX(
    sType: sType,
    pNext: pNext,
    module: module,
    pName: pName,
  )

proc newVkCuLaunchInfoNVX*(sType: VkStructureType, pNext: pointer = nil, function: VkCuFunctionNVX, gridDimX: uint32, gridDimY: uint32, gridDimZ: uint32, blockDimX: uint32, blockDimY: uint32, blockDimZ: uint32, sharedMemBytes: uint32, paramCount: uint, pParams: ptr pointer, extraCount: uint, pExtras: ptr pointer): VkCuLaunchInfoNVX =
  result = VkCuLaunchInfoNVX(
    sType: sType,
    pNext: pNext,
    function: function,
    gridDimX: gridDimX,
    gridDimY: gridDimY,
    gridDimZ: gridDimZ,
    blockDimX: blockDimX,
    blockDimY: blockDimY,
    blockDimZ: blockDimZ,
    sharedMemBytes: sharedMemBytes,
    paramCount: paramCount,
    pParams: pParams,
    extraCount: extraCount,
    pExtras: pExtras,
  )

proc newVkPhysicalDeviceDescriptorBufferFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, descriptorBuffer: VkBool32, descriptorBufferCaptureReplay: VkBool32, descriptorBufferImageLayoutIgnored: VkBool32, descriptorBufferPushDescriptors: VkBool32): VkPhysicalDeviceDescriptorBufferFeaturesEXT =
  result = VkPhysicalDeviceDescriptorBufferFeaturesEXT(
    sType: sType,
    pNext: pNext,
    descriptorBuffer: descriptorBuffer,
    descriptorBufferCaptureReplay: descriptorBufferCaptureReplay,
    descriptorBufferImageLayoutIgnored: descriptorBufferImageLayoutIgnored,
    descriptorBufferPushDescriptors: descriptorBufferPushDescriptors,
  )

proc newVkPhysicalDeviceDescriptorBufferPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, combinedImageSamplerDescriptorSingleArray: VkBool32, bufferlessPushDescriptors: VkBool32, allowSamplerImageViewPostSubmitCreation: VkBool32, descriptorBufferOffsetAlignment: VkDeviceSize, maxDescriptorBufferBindings: uint32, maxResourceDescriptorBufferBindings: uint32, maxSamplerDescriptorBufferBindings: uint32, maxEmbeddedImmutableSamplerBindings: uint32, maxEmbeddedImmutableSamplers: uint32, bufferCaptureReplayDescriptorDataSize: uint, imageCaptureReplayDescriptorDataSize: uint, imageViewCaptureReplayDescriptorDataSize: uint, samplerCaptureReplayDescriptorDataSize: uint, accelerationStructureCaptureReplayDescriptorDataSize: uint, samplerDescriptorSize: uint, combinedImageSamplerDescriptorSize: uint, sampledImageDescriptorSize: uint, storageImageDescriptorSize: uint, uniformTexelBufferDescriptorSize: uint, robustUniformTexelBufferDescriptorSize: uint, storageTexelBufferDescriptorSize: uint, robustStorageTexelBufferDescriptorSize: uint, uniformBufferDescriptorSize: uint, robustUniformBufferDescriptorSize: uint, storageBufferDescriptorSize: uint, robustStorageBufferDescriptorSize: uint, inputAttachmentDescriptorSize: uint, accelerationStructureDescriptorSize: uint, maxSamplerDescriptorBufferRange: VkDeviceSize, maxResourceDescriptorBufferRange: VkDeviceSize, samplerDescriptorBufferAddressSpaceSize: VkDeviceSize, resourceDescriptorBufferAddressSpaceSize: VkDeviceSize, descriptorBufferAddressSpaceSize: VkDeviceSize): VkPhysicalDeviceDescriptorBufferPropertiesEXT =
  result = VkPhysicalDeviceDescriptorBufferPropertiesEXT(
    sType: sType,
    pNext: pNext,
    combinedImageSamplerDescriptorSingleArray: combinedImageSamplerDescriptorSingleArray,
    bufferlessPushDescriptors: bufferlessPushDescriptors,
    allowSamplerImageViewPostSubmitCreation: allowSamplerImageViewPostSubmitCreation,
    descriptorBufferOffsetAlignment: descriptorBufferOffsetAlignment,
    maxDescriptorBufferBindings: maxDescriptorBufferBindings,
    maxResourceDescriptorBufferBindings: maxResourceDescriptorBufferBindings,
    maxSamplerDescriptorBufferBindings: maxSamplerDescriptorBufferBindings,
    maxEmbeddedImmutableSamplerBindings: maxEmbeddedImmutableSamplerBindings,
    maxEmbeddedImmutableSamplers: maxEmbeddedImmutableSamplers,
    bufferCaptureReplayDescriptorDataSize: bufferCaptureReplayDescriptorDataSize,
    imageCaptureReplayDescriptorDataSize: imageCaptureReplayDescriptorDataSize,
    imageViewCaptureReplayDescriptorDataSize: imageViewCaptureReplayDescriptorDataSize,
    samplerCaptureReplayDescriptorDataSize: samplerCaptureReplayDescriptorDataSize,
    accelerationStructureCaptureReplayDescriptorDataSize: accelerationStructureCaptureReplayDescriptorDataSize,
    samplerDescriptorSize: samplerDescriptorSize,
    combinedImageSamplerDescriptorSize: combinedImageSamplerDescriptorSize,
    sampledImageDescriptorSize: sampledImageDescriptorSize,
    storageImageDescriptorSize: storageImageDescriptorSize,
    uniformTexelBufferDescriptorSize: uniformTexelBufferDescriptorSize,
    robustUniformTexelBufferDescriptorSize: robustUniformTexelBufferDescriptorSize,
    storageTexelBufferDescriptorSize: storageTexelBufferDescriptorSize,
    robustStorageTexelBufferDescriptorSize: robustStorageTexelBufferDescriptorSize,
    uniformBufferDescriptorSize: uniformBufferDescriptorSize,
    robustUniformBufferDescriptorSize: robustUniformBufferDescriptorSize,
    storageBufferDescriptorSize: storageBufferDescriptorSize,
    robustStorageBufferDescriptorSize: robustStorageBufferDescriptorSize,
    inputAttachmentDescriptorSize: inputAttachmentDescriptorSize,
    accelerationStructureDescriptorSize: accelerationStructureDescriptorSize,
    maxSamplerDescriptorBufferRange: maxSamplerDescriptorBufferRange,
    maxResourceDescriptorBufferRange: maxResourceDescriptorBufferRange,
    samplerDescriptorBufferAddressSpaceSize: samplerDescriptorBufferAddressSpaceSize,
    resourceDescriptorBufferAddressSpaceSize: resourceDescriptorBufferAddressSpaceSize,
    descriptorBufferAddressSpaceSize: descriptorBufferAddressSpaceSize,
  )

proc newVkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, combinedImageSamplerDensityMapDescriptorSize: uint): VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT =
  result = VkPhysicalDeviceDescriptorBufferDensityMapPropertiesEXT(
    sType: sType,
    pNext: pNext,
    combinedImageSamplerDensityMapDescriptorSize: combinedImageSamplerDensityMapDescriptorSize,
  )

proc newVkDescriptorAddressInfoEXT*(sType: VkStructureType, pNext: pointer = nil, address: VkDeviceAddress, range: VkDeviceSize, format: VkFormat): VkDescriptorAddressInfoEXT =
  result = VkDescriptorAddressInfoEXT(
    sType: sType,
    pNext: pNext,
    address: address,
    range: range,
    format: format,
  )

proc newVkDescriptorBufferBindingInfoEXT*(sType: VkStructureType, pNext: pointer = nil, address: VkDeviceAddress, usage: VkBufferUsageFlags): VkDescriptorBufferBindingInfoEXT =
  result = VkDescriptorBufferBindingInfoEXT(
    sType: sType,
    pNext: pNext,
    address: address,
    usage: usage,
  )

proc newVkDescriptorBufferBindingPushDescriptorBufferHandleEXT*(sType: VkStructureType, pNext: pointer = nil, buffer: VkBuffer): VkDescriptorBufferBindingPushDescriptorBufferHandleEXT =
  result = VkDescriptorBufferBindingPushDescriptorBufferHandleEXT(
    sType: sType,
    pNext: pNext,
    buffer: buffer,
  )

proc newVkDescriptorGetInfoEXT*(sType: VkStructureType, pNext: pointer = nil, `type`: VkDescriptorType, data: VkDescriptorDataEXT): VkDescriptorGetInfoEXT =
  result = VkDescriptorGetInfoEXT(
    sType: sType,
    pNext: pNext,
    `type`: `type`,
    data: data,
  )

proc newVkBufferCaptureDescriptorDataInfoEXT*(sType: VkStructureType, pNext: pointer = nil, buffer: VkBuffer): VkBufferCaptureDescriptorDataInfoEXT =
  result = VkBufferCaptureDescriptorDataInfoEXT(
    sType: sType,
    pNext: pNext,
    buffer: buffer,
  )

proc newVkImageCaptureDescriptorDataInfoEXT*(sType: VkStructureType, pNext: pointer = nil, image: VkImage): VkImageCaptureDescriptorDataInfoEXT =
  result = VkImageCaptureDescriptorDataInfoEXT(
    sType: sType,
    pNext: pNext,
    image: image,
  )

proc newVkImageViewCaptureDescriptorDataInfoEXT*(sType: VkStructureType, pNext: pointer = nil, imageView: VkImageView): VkImageViewCaptureDescriptorDataInfoEXT =
  result = VkImageViewCaptureDescriptorDataInfoEXT(
    sType: sType,
    pNext: pNext,
    imageView: imageView,
  )

proc newVkSamplerCaptureDescriptorDataInfoEXT*(sType: VkStructureType, pNext: pointer = nil, sampler: VkSampler): VkSamplerCaptureDescriptorDataInfoEXT =
  result = VkSamplerCaptureDescriptorDataInfoEXT(
    sType: sType,
    pNext: pNext,
    sampler: sampler,
  )

proc newVkAccelerationStructureCaptureDescriptorDataInfoEXT*(sType: VkStructureType, pNext: pointer = nil, accelerationStructure: VkAccelerationStructureKHR, accelerationStructureNV: VkAccelerationStructureNV): VkAccelerationStructureCaptureDescriptorDataInfoEXT =
  result = VkAccelerationStructureCaptureDescriptorDataInfoEXT(
    sType: sType,
    pNext: pNext,
    accelerationStructure: accelerationStructure,
    accelerationStructureNV: accelerationStructureNV,
  )

proc newVkOpaqueCaptureDescriptorDataCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, opaqueCaptureDescriptorData: pointer = nil): VkOpaqueCaptureDescriptorDataCreateInfoEXT =
  result = VkOpaqueCaptureDescriptorDataCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    opaqueCaptureDescriptorData: opaqueCaptureDescriptorData,
  )

proc newVkPhysicalDeviceShaderIntegerDotProductFeatures*(sType: VkStructureType, pNext: pointer = nil, shaderIntegerDotProduct: VkBool32): VkPhysicalDeviceShaderIntegerDotProductFeatures =
  result = VkPhysicalDeviceShaderIntegerDotProductFeatures(
    sType: sType,
    pNext: pNext,
    shaderIntegerDotProduct: shaderIntegerDotProduct,
  )

proc newVkPhysicalDeviceShaderIntegerDotProductProperties*(sType: VkStructureType, pNext: pointer = nil, integerDotProduct8BitUnsignedAccelerated: VkBool32, integerDotProduct8BitSignedAccelerated: VkBool32, integerDotProduct8BitMixedSignednessAccelerated: VkBool32, integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32, integerDotProduct4x8BitPackedSignedAccelerated: VkBool32, integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32, integerDotProduct16BitUnsignedAccelerated: VkBool32, integerDotProduct16BitSignedAccelerated: VkBool32, integerDotProduct16BitMixedSignednessAccelerated: VkBool32, integerDotProduct32BitUnsignedAccelerated: VkBool32, integerDotProduct32BitSignedAccelerated: VkBool32, integerDotProduct32BitMixedSignednessAccelerated: VkBool32, integerDotProduct64BitUnsignedAccelerated: VkBool32, integerDotProduct64BitSignedAccelerated: VkBool32, integerDotProduct64BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32, integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32, integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32): VkPhysicalDeviceShaderIntegerDotProductProperties =
  result = VkPhysicalDeviceShaderIntegerDotProductProperties(
    sType: sType,
    pNext: pNext,
    integerDotProduct8BitUnsignedAccelerated: integerDotProduct8BitUnsignedAccelerated,
    integerDotProduct8BitSignedAccelerated: integerDotProduct8BitSignedAccelerated,
    integerDotProduct8BitMixedSignednessAccelerated: integerDotProduct8BitMixedSignednessAccelerated,
    integerDotProduct4x8BitPackedUnsignedAccelerated: integerDotProduct4x8BitPackedUnsignedAccelerated,
    integerDotProduct4x8BitPackedSignedAccelerated: integerDotProduct4x8BitPackedSignedAccelerated,
    integerDotProduct4x8BitPackedMixedSignednessAccelerated: integerDotProduct4x8BitPackedMixedSignednessAccelerated,
    integerDotProduct16BitUnsignedAccelerated: integerDotProduct16BitUnsignedAccelerated,
    integerDotProduct16BitSignedAccelerated: integerDotProduct16BitSignedAccelerated,
    integerDotProduct16BitMixedSignednessAccelerated: integerDotProduct16BitMixedSignednessAccelerated,
    integerDotProduct32BitUnsignedAccelerated: integerDotProduct32BitUnsignedAccelerated,
    integerDotProduct32BitSignedAccelerated: integerDotProduct32BitSignedAccelerated,
    integerDotProduct32BitMixedSignednessAccelerated: integerDotProduct32BitMixedSignednessAccelerated,
    integerDotProduct64BitUnsignedAccelerated: integerDotProduct64BitUnsignedAccelerated,
    integerDotProduct64BitSignedAccelerated: integerDotProduct64BitSignedAccelerated,
    integerDotProduct64BitMixedSignednessAccelerated: integerDotProduct64BitMixedSignednessAccelerated,
    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: integerDotProductAccumulatingSaturating8BitUnsignedAccelerated,
    integerDotProductAccumulatingSaturating8BitSignedAccelerated: integerDotProductAccumulatingSaturating8BitSignedAccelerated,
    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated,
    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated,
    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated,
    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated,
    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: integerDotProductAccumulatingSaturating16BitUnsignedAccelerated,
    integerDotProductAccumulatingSaturating16BitSignedAccelerated: integerDotProductAccumulatingSaturating16BitSignedAccelerated,
    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated,
    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: integerDotProductAccumulatingSaturating32BitUnsignedAccelerated,
    integerDotProductAccumulatingSaturating32BitSignedAccelerated: integerDotProductAccumulatingSaturating32BitSignedAccelerated,
    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated,
    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: integerDotProductAccumulatingSaturating64BitUnsignedAccelerated,
    integerDotProductAccumulatingSaturating64BitSignedAccelerated: integerDotProductAccumulatingSaturating64BitSignedAccelerated,
    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated,
  )

proc newVkPhysicalDeviceDrmPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, hasPrimary: VkBool32, hasRender: VkBool32, primaryMajor: int64, primaryMinor: int64, renderMajor: int64, renderMinor: int64): VkPhysicalDeviceDrmPropertiesEXT =
  result = VkPhysicalDeviceDrmPropertiesEXT(
    sType: sType,
    pNext: pNext,
    hasPrimary: hasPrimary,
    hasRender: hasRender,
    primaryMajor: primaryMajor,
    primaryMinor: primaryMinor,
    renderMajor: renderMajor,
    renderMinor: renderMinor,
  )

proc newVkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, fragmentShaderBarycentric: VkBool32): VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR =
  result = VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR(
    sType: sType,
    pNext: pNext,
    fragmentShaderBarycentric: fragmentShaderBarycentric,
  )

proc newVkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, triStripVertexOrderIndependentOfProvokingVertex: VkBool32): VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR =
  result = VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR(
    sType: sType,
    pNext: pNext,
    triStripVertexOrderIndependentOfProvokingVertex: triStripVertexOrderIndependentOfProvokingVertex,
  )

proc newVkPhysicalDeviceRayTracingMotionBlurFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, rayTracingMotionBlur: VkBool32, rayTracingMotionBlurPipelineTraceRaysIndirect: VkBool32): VkPhysicalDeviceRayTracingMotionBlurFeaturesNV =
  result = VkPhysicalDeviceRayTracingMotionBlurFeaturesNV(
    sType: sType,
    pNext: pNext,
    rayTracingMotionBlur: rayTracingMotionBlur,
    rayTracingMotionBlurPipelineTraceRaysIndirect: rayTracingMotionBlurPipelineTraceRaysIndirect,
  )

proc newVkAccelerationStructureGeometryMotionTrianglesDataNV*(sType: VkStructureType, pNext: pointer = nil, vertexData: VkDeviceOrHostAddressConstKHR): VkAccelerationStructureGeometryMotionTrianglesDataNV =
  result = VkAccelerationStructureGeometryMotionTrianglesDataNV(
    sType: sType,
    pNext: pNext,
    vertexData: vertexData,
  )

proc newVkAccelerationStructureMotionInfoNV*(sType: VkStructureType, pNext: pointer = nil, maxInstances: uint32, flags: VkAccelerationStructureMotionInfoFlagsNV = 0.VkAccelerationStructureMotionInfoFlagsNV): VkAccelerationStructureMotionInfoNV =
  result = VkAccelerationStructureMotionInfoNV(
    sType: sType,
    pNext: pNext,
    maxInstances: maxInstances,
    flags: flags,
  )

proc newVkSRTDataNV*(sx: float32, a: float32, b: float32, pvx: float32, sy: float32, c: float32, pvy: float32, sz: float32, pvz: float32, qx: float32, qy: float32, qz: float32, qw: float32, tx: float32, ty: float32, tz: float32): VkSRTDataNV =
  result = VkSRTDataNV(
    sx: sx,
    a: a,
    b: b,
    pvx: pvx,
    sy: sy,
    c: c,
    pvy: pvy,
    sz: sz,
    pvz: pvz,
    qx: qx,
    qy: qy,
    qz: qz,
    qw: qw,
    tx: tx,
    ty: ty,
    tz: tz,
  )

proc newVkAccelerationStructureSRTMotionInstanceNV*(transformT0: VkSRTDataNV, transformT1: VkSRTDataNV, instanceCustomIndex: uint32, mask: uint32, instanceShaderBindingTableRecordOffset: uint32, flags: VkGeometryInstanceFlagsKHR = 0.VkGeometryInstanceFlagsKHR, accelerationStructureReference: uint64): VkAccelerationStructureSRTMotionInstanceNV =
  result = VkAccelerationStructureSRTMotionInstanceNV(
    transformT0: transformT0,
    transformT1: transformT1,
    instanceCustomIndex: instanceCustomIndex,
    mask: mask,
    instanceShaderBindingTableRecordOffset: instanceShaderBindingTableRecordOffset,
    flags: flags,
    accelerationStructureReference: accelerationStructureReference,
  )

proc newVkAccelerationStructureMatrixMotionInstanceNV*(transformT0: VkTransformMatrixKHR, transformT1: VkTransformMatrixKHR, instanceCustomIndex: uint32, mask: uint32, instanceShaderBindingTableRecordOffset: uint32, flags: VkGeometryInstanceFlagsKHR = 0.VkGeometryInstanceFlagsKHR, accelerationStructureReference: uint64): VkAccelerationStructureMatrixMotionInstanceNV =
  result = VkAccelerationStructureMatrixMotionInstanceNV(
    transformT0: transformT0,
    transformT1: transformT1,
    instanceCustomIndex: instanceCustomIndex,
    mask: mask,
    instanceShaderBindingTableRecordOffset: instanceShaderBindingTableRecordOffset,
    flags: flags,
    accelerationStructureReference: accelerationStructureReference,
  )

proc newVkAccelerationStructureMotionInstanceNV*(`type`: VkAccelerationStructureMotionInstanceTypeNV, flags: VkAccelerationStructureMotionInstanceFlagsNV = 0.VkAccelerationStructureMotionInstanceFlagsNV, data: VkAccelerationStructureMotionInstanceDataNV): VkAccelerationStructureMotionInstanceNV =
  result = VkAccelerationStructureMotionInstanceNV(
    `type`: `type`,
    flags: flags,
    data: data,
  )

proc newVkMemoryGetRemoteAddressInfoNV*(sType: VkStructureType, pNext: pointer = nil, memory: VkDeviceMemory, handleType: VkExternalMemoryHandleTypeFlagBits): VkMemoryGetRemoteAddressInfoNV =
  result = VkMemoryGetRemoteAddressInfoNV(
    sType: sType,
    pNext: pNext,
    memory: memory,
    handleType: handleType,
  )

proc newVkImportMemoryBufferCollectionFUCHSIA*(sType: VkStructureType, pNext: pointer = nil, collection: VkBufferCollectionFUCHSIA, index: uint32): VkImportMemoryBufferCollectionFUCHSIA =
  result = VkImportMemoryBufferCollectionFUCHSIA(
    sType: sType,
    pNext: pNext,
    collection: collection,
    index: index,
  )

proc newVkBufferCollectionImageCreateInfoFUCHSIA*(sType: VkStructureType, pNext: pointer = nil, collection: VkBufferCollectionFUCHSIA, index: uint32): VkBufferCollectionImageCreateInfoFUCHSIA =
  result = VkBufferCollectionImageCreateInfoFUCHSIA(
    sType: sType,
    pNext: pNext,
    collection: collection,
    index: index,
  )

proc newVkBufferCollectionBufferCreateInfoFUCHSIA*(sType: VkStructureType, pNext: pointer = nil, collection: VkBufferCollectionFUCHSIA, index: uint32): VkBufferCollectionBufferCreateInfoFUCHSIA =
  result = VkBufferCollectionBufferCreateInfoFUCHSIA(
    sType: sType,
    pNext: pNext,
    collection: collection,
    index: index,
  )

proc newVkBufferCollectionCreateInfoFUCHSIA*(sType: VkStructureType, pNext: pointer = nil, collectionToken: zx_handle_t): VkBufferCollectionCreateInfoFUCHSIA =
  result = VkBufferCollectionCreateInfoFUCHSIA(
    sType: sType,
    pNext: pNext,
    collectionToken: collectionToken,
  )

proc newVkBufferCollectionPropertiesFUCHSIA*(sType: VkStructureType, pNext: pointer = nil, memoryTypeBits: uint32, bufferCount: uint32, createInfoIndex: uint32, sysmemPixelFormat: uint64, formatFeatures: VkFormatFeatureFlags, sysmemColorSpaceIndex: VkSysmemColorSpaceFUCHSIA, samplerYcbcrConversionComponents: VkComponentMapping, suggestedYcbcrModel: VkSamplerYcbcrModelConversion, suggestedYcbcrRange: VkSamplerYcbcrRange, suggestedXChromaOffset: VkChromaLocation, suggestedYChromaOffset: VkChromaLocation): VkBufferCollectionPropertiesFUCHSIA =
  result = VkBufferCollectionPropertiesFUCHSIA(
    sType: sType,
    pNext: pNext,
    memoryTypeBits: memoryTypeBits,
    bufferCount: bufferCount,
    createInfoIndex: createInfoIndex,
    sysmemPixelFormat: sysmemPixelFormat,
    formatFeatures: formatFeatures,
    sysmemColorSpaceIndex: sysmemColorSpaceIndex,
    samplerYcbcrConversionComponents: samplerYcbcrConversionComponents,
    suggestedYcbcrModel: suggestedYcbcrModel,
    suggestedYcbcrRange: suggestedYcbcrRange,
    suggestedXChromaOffset: suggestedXChromaOffset,
    suggestedYChromaOffset: suggestedYChromaOffset,
  )

proc newVkBufferConstraintsInfoFUCHSIA*(sType: VkStructureType, pNext: pointer = nil, createInfo: VkBufferCreateInfo, requiredFormatFeatures: VkFormatFeatureFlags, bufferCollectionConstraints: VkBufferCollectionConstraintsInfoFUCHSIA): VkBufferConstraintsInfoFUCHSIA =
  result = VkBufferConstraintsInfoFUCHSIA(
    sType: sType,
    pNext: pNext,
    createInfo: createInfo,
    requiredFormatFeatures: requiredFormatFeatures,
    bufferCollectionConstraints: bufferCollectionConstraints,
  )

proc newVkSysmemColorSpaceFUCHSIA*(sType: VkStructureType, pNext: pointer = nil, colorSpace: uint32): VkSysmemColorSpaceFUCHSIA =
  result = VkSysmemColorSpaceFUCHSIA(
    sType: sType,
    pNext: pNext,
    colorSpace: colorSpace,
  )

proc newVkImageFormatConstraintsInfoFUCHSIA*(sType: VkStructureType, pNext: pointer = nil, imageCreateInfo: VkImageCreateInfo, requiredFormatFeatures: VkFormatFeatureFlags, flags: VkImageFormatConstraintsFlagsFUCHSIA = 0.VkImageFormatConstraintsFlagsFUCHSIA, sysmemPixelFormat: uint64, colorSpaceCount: uint32, pColorSpaces: ptr VkSysmemColorSpaceFUCHSIA): VkImageFormatConstraintsInfoFUCHSIA =
  result = VkImageFormatConstraintsInfoFUCHSIA(
    sType: sType,
    pNext: pNext,
    imageCreateInfo: imageCreateInfo,
    requiredFormatFeatures: requiredFormatFeatures,
    flags: flags,
    sysmemPixelFormat: sysmemPixelFormat,
    colorSpaceCount: colorSpaceCount,
    pColorSpaces: pColorSpaces,
  )

proc newVkImageConstraintsInfoFUCHSIA*(sType: VkStructureType, pNext: pointer = nil, formatConstraintsCount: uint32, pFormatConstraints: ptr VkImageFormatConstraintsInfoFUCHSIA, bufferCollectionConstraints: VkBufferCollectionConstraintsInfoFUCHSIA, flags: VkImageConstraintsInfoFlagsFUCHSIA = 0.VkImageConstraintsInfoFlagsFUCHSIA): VkImageConstraintsInfoFUCHSIA =
  result = VkImageConstraintsInfoFUCHSIA(
    sType: sType,
    pNext: pNext,
    formatConstraintsCount: formatConstraintsCount,
    pFormatConstraints: pFormatConstraints,
    bufferCollectionConstraints: bufferCollectionConstraints,
    flags: flags,
  )

proc newVkBufferCollectionConstraintsInfoFUCHSIA*(sType: VkStructureType, pNext: pointer = nil, minBufferCount: uint32, maxBufferCount: uint32, minBufferCountForCamping: uint32, minBufferCountForDedicatedSlack: uint32, minBufferCountForSharedSlack: uint32): VkBufferCollectionConstraintsInfoFUCHSIA =
  result = VkBufferCollectionConstraintsInfoFUCHSIA(
    sType: sType,
    pNext: pNext,
    minBufferCount: minBufferCount,
    maxBufferCount: maxBufferCount,
    minBufferCountForCamping: minBufferCountForCamping,
    minBufferCountForDedicatedSlack: minBufferCountForDedicatedSlack,
    minBufferCountForSharedSlack: minBufferCountForSharedSlack,
  )

proc newVkCudaModuleCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, dataSize: uint, pData: pointer = nil): VkCudaModuleCreateInfoNV =
  result = VkCudaModuleCreateInfoNV(
    sType: sType,
    pNext: pNext,
    dataSize: dataSize,
    pData: pData,
  )

proc newVkCudaFunctionCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, module: VkCudaModuleNV, pName: cstring): VkCudaFunctionCreateInfoNV =
  result = VkCudaFunctionCreateInfoNV(
    sType: sType,
    pNext: pNext,
    module: module,
    pName: pName,
  )

proc newVkCudaLaunchInfoNV*(sType: VkStructureType, pNext: pointer = nil, function: VkCudaFunctionNV, gridDimX: uint32, gridDimY: uint32, gridDimZ: uint32, blockDimX: uint32, blockDimY: uint32, blockDimZ: uint32, sharedMemBytes: uint32, paramCount: uint, pParams: ptr pointer, extraCount: uint, pExtras: ptr pointer): VkCudaLaunchInfoNV =
  result = VkCudaLaunchInfoNV(
    sType: sType,
    pNext: pNext,
    function: function,
    gridDimX: gridDimX,
    gridDimY: gridDimY,
    gridDimZ: gridDimZ,
    blockDimX: blockDimX,
    blockDimY: blockDimY,
    blockDimZ: blockDimZ,
    sharedMemBytes: sharedMemBytes,
    paramCount: paramCount,
    pParams: pParams,
    extraCount: extraCount,
    pExtras: pExtras,
  )

proc newVkPhysicalDeviceRGBA10X6FormatsFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, formatRgba10x6WithoutYCbCrSampler: VkBool32): VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT =
  result = VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT(
    sType: sType,
    pNext: pNext,
    formatRgba10x6WithoutYCbCrSampler: formatRgba10x6WithoutYCbCrSampler,
  )

proc newVkFormatProperties3*(sType: VkStructureType, pNext: pointer = nil, linearTilingFeatures: VkFormatFeatureFlags2, optimalTilingFeatures: VkFormatFeatureFlags2, bufferFeatures: VkFormatFeatureFlags2): VkFormatProperties3 =
  result = VkFormatProperties3(
    sType: sType,
    pNext: pNext,
    linearTilingFeatures: linearTilingFeatures,
    optimalTilingFeatures: optimalTilingFeatures,
    bufferFeatures: bufferFeatures,
  )

proc newVkDrmFormatModifierPropertiesList2EXT*(sType: VkStructureType, pNext: pointer = nil, drmFormatModifierCount: uint32, pDrmFormatModifierProperties: ptr VkDrmFormatModifierProperties2EXT): VkDrmFormatModifierPropertiesList2EXT =
  result = VkDrmFormatModifierPropertiesList2EXT(
    sType: sType,
    pNext: pNext,
    drmFormatModifierCount: drmFormatModifierCount,
    pDrmFormatModifierProperties: pDrmFormatModifierProperties,
  )

proc newVkDrmFormatModifierProperties2EXT*(drmFormatModifier: uint64, drmFormatModifierPlaneCount: uint32, drmFormatModifierTilingFeatures: VkFormatFeatureFlags2): VkDrmFormatModifierProperties2EXT =
  result = VkDrmFormatModifierProperties2EXT(
    drmFormatModifier: drmFormatModifier,
    drmFormatModifierPlaneCount: drmFormatModifierPlaneCount,
    drmFormatModifierTilingFeatures: drmFormatModifierTilingFeatures,
  )

proc newVkAndroidHardwareBufferFormatProperties2ANDROID*(sType: VkStructureType, pNext: pointer = nil, format: VkFormat, externalFormat: uint64, formatFeatures: VkFormatFeatureFlags2, samplerYcbcrConversionComponents: VkComponentMapping, suggestedYcbcrModel: VkSamplerYcbcrModelConversion, suggestedYcbcrRange: VkSamplerYcbcrRange, suggestedXChromaOffset: VkChromaLocation, suggestedYChromaOffset: VkChromaLocation): VkAndroidHardwareBufferFormatProperties2ANDROID =
  result = VkAndroidHardwareBufferFormatProperties2ANDROID(
    sType: sType,
    pNext: pNext,
    format: format,
    externalFormat: externalFormat,
    formatFeatures: formatFeatures,
    samplerYcbcrConversionComponents: samplerYcbcrConversionComponents,
    suggestedYcbcrModel: suggestedYcbcrModel,
    suggestedYcbcrRange: suggestedYcbcrRange,
    suggestedXChromaOffset: suggestedXChromaOffset,
    suggestedYChromaOffset: suggestedYChromaOffset,
  )

proc newVkPipelineRenderingCreateInfo*(sType: VkStructureType, pNext: pointer = nil, viewMask: uint32, colorAttachmentCount: uint32, pColorAttachmentFormats: ptr VkFormat, depthAttachmentFormat: VkFormat, stencilAttachmentFormat: VkFormat): VkPipelineRenderingCreateInfo =
  result = VkPipelineRenderingCreateInfo(
    sType: sType,
    pNext: pNext,
    viewMask: viewMask,
    colorAttachmentCount: colorAttachmentCount,
    pColorAttachmentFormats: pColorAttachmentFormats,
    depthAttachmentFormat: depthAttachmentFormat,
    stencilAttachmentFormat: stencilAttachmentFormat,
  )

proc newVkRenderingInfo*(sType: VkStructureType, pNext: pointer = nil, flags: VkRenderingFlags = 0.VkRenderingFlags, renderArea: VkRect2D, layerCount: uint32, viewMask: uint32, colorAttachmentCount: uint32, pColorAttachments: ptr VkRenderingAttachmentInfo, pDepthAttachment: ptr VkRenderingAttachmentInfo, pStencilAttachment: ptr VkRenderingAttachmentInfo): VkRenderingInfo =
  result = VkRenderingInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    renderArea: renderArea,
    layerCount: layerCount,
    viewMask: viewMask,
    colorAttachmentCount: colorAttachmentCount,
    pColorAttachments: pColorAttachments,
    pDepthAttachment: pDepthAttachment,
    pStencilAttachment: pStencilAttachment,
  )

proc newVkRenderingAttachmentInfo*(sType: VkStructureType, pNext: pointer = nil, imageView: VkImageView, imageLayout: VkImageLayout, resolveMode: VkResolveModeFlagBits, resolveImageView: VkImageView, resolveImageLayout: VkImageLayout, loadOp: VkAttachmentLoadOp, storeOp: VkAttachmentStoreOp, clearValue: VkClearValue): VkRenderingAttachmentInfo =
  result = VkRenderingAttachmentInfo(
    sType: sType,
    pNext: pNext,
    imageView: imageView,
    imageLayout: imageLayout,
    resolveMode: resolveMode,
    resolveImageView: resolveImageView,
    resolveImageLayout: resolveImageLayout,
    loadOp: loadOp,
    storeOp: storeOp,
    clearValue: clearValue,
  )

proc newVkRenderingFragmentShadingRateAttachmentInfoKHR*(sType: VkStructureType, pNext: pointer = nil, imageView: VkImageView, imageLayout: VkImageLayout, shadingRateAttachmentTexelSize: VkExtent2D): VkRenderingFragmentShadingRateAttachmentInfoKHR =
  result = VkRenderingFragmentShadingRateAttachmentInfoKHR(
    sType: sType,
    pNext: pNext,
    imageView: imageView,
    imageLayout: imageLayout,
    shadingRateAttachmentTexelSize: shadingRateAttachmentTexelSize,
  )

proc newVkRenderingFragmentDensityMapAttachmentInfoEXT*(sType: VkStructureType, pNext: pointer = nil, imageView: VkImageView, imageLayout: VkImageLayout): VkRenderingFragmentDensityMapAttachmentInfoEXT =
  result = VkRenderingFragmentDensityMapAttachmentInfoEXT(
    sType: sType,
    pNext: pNext,
    imageView: imageView,
    imageLayout: imageLayout,
  )

proc newVkPhysicalDeviceDynamicRenderingFeatures*(sType: VkStructureType, pNext: pointer = nil, dynamicRendering: VkBool32): VkPhysicalDeviceDynamicRenderingFeatures =
  result = VkPhysicalDeviceDynamicRenderingFeatures(
    sType: sType,
    pNext: pNext,
    dynamicRendering: dynamicRendering,
  )

proc newVkCommandBufferInheritanceRenderingInfo*(sType: VkStructureType, pNext: pointer = nil, flags: VkRenderingFlags = 0.VkRenderingFlags, viewMask: uint32, colorAttachmentCount: uint32, pColorAttachmentFormats: ptr VkFormat, depthAttachmentFormat: VkFormat, stencilAttachmentFormat: VkFormat, rasterizationSamples: VkSampleCountFlagBits): VkCommandBufferInheritanceRenderingInfo =
  result = VkCommandBufferInheritanceRenderingInfo(
    sType: sType,
    pNext: pNext,
    flags: flags,
    viewMask: viewMask,
    colorAttachmentCount: colorAttachmentCount,
    pColorAttachmentFormats: pColorAttachmentFormats,
    depthAttachmentFormat: depthAttachmentFormat,
    stencilAttachmentFormat: stencilAttachmentFormat,
    rasterizationSamples: rasterizationSamples,
  )

proc newVkAttachmentSampleCountInfoAMD*(sType: VkStructureType, pNext: pointer = nil, colorAttachmentCount: uint32, pColorAttachmentSamples: ptr VkSampleCountFlagBits, depthStencilAttachmentSamples: VkSampleCountFlagBits): VkAttachmentSampleCountInfoAMD =
  result = VkAttachmentSampleCountInfoAMD(
    sType: sType,
    pNext: pNext,
    colorAttachmentCount: colorAttachmentCount,
    pColorAttachmentSamples: pColorAttachmentSamples,
    depthStencilAttachmentSamples: depthStencilAttachmentSamples,
  )

proc newVkMultiviewPerViewAttributesInfoNVX*(sType: VkStructureType, pNext: pointer = nil, perViewAttributes: VkBool32, perViewAttributesPositionXOnly: VkBool32): VkMultiviewPerViewAttributesInfoNVX =
  result = VkMultiviewPerViewAttributesInfoNVX(
    sType: sType,
    pNext: pNext,
    perViewAttributes: perViewAttributes,
    perViewAttributesPositionXOnly: perViewAttributesPositionXOnly,
  )

proc newVkPhysicalDeviceImageViewMinLodFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, minLod: VkBool32): VkPhysicalDeviceImageViewMinLodFeaturesEXT =
  result = VkPhysicalDeviceImageViewMinLodFeaturesEXT(
    sType: sType,
    pNext: pNext,
    minLod: minLod,
  )

proc newVkImageViewMinLodCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, minLod: float32): VkImageViewMinLodCreateInfoEXT =
  result = VkImageViewMinLodCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    minLod: minLod,
  )

proc newVkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, rasterizationOrderColorAttachmentAccess: VkBool32, rasterizationOrderDepthAttachmentAccess: VkBool32, rasterizationOrderStencilAttachmentAccess: VkBool32): VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT =
  result = VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT(
    sType: sType,
    pNext: pNext,
    rasterizationOrderColorAttachmentAccess: rasterizationOrderColorAttachmentAccess,
    rasterizationOrderDepthAttachmentAccess: rasterizationOrderDepthAttachmentAccess,
    rasterizationOrderStencilAttachmentAccess: rasterizationOrderStencilAttachmentAccess,
  )

proc newVkPhysicalDeviceLinearColorAttachmentFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, linearColorAttachment: VkBool32): VkPhysicalDeviceLinearColorAttachmentFeaturesNV =
  result = VkPhysicalDeviceLinearColorAttachmentFeaturesNV(
    sType: sType,
    pNext: pNext,
    linearColorAttachment: linearColorAttachment,
  )

proc newVkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, graphicsPipelineLibrary: VkBool32): VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT =
  result = VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT(
    sType: sType,
    pNext: pNext,
    graphicsPipelineLibrary: graphicsPipelineLibrary,
  )

proc newVkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, graphicsPipelineLibraryFastLinking: VkBool32, graphicsPipelineLibraryIndependentInterpolationDecoration: VkBool32): VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT =
  result = VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT(
    sType: sType,
    pNext: pNext,
    graphicsPipelineLibraryFastLinking: graphicsPipelineLibraryFastLinking,
    graphicsPipelineLibraryIndependentInterpolationDecoration: graphicsPipelineLibraryIndependentInterpolationDecoration,
  )

proc newVkGraphicsPipelineLibraryCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkGraphicsPipelineLibraryFlagsEXT = 0.VkGraphicsPipelineLibraryFlagsEXT): VkGraphicsPipelineLibraryCreateInfoEXT =
  result = VkGraphicsPipelineLibraryCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
  )

proc newVkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE*(sType: VkStructureType, pNext: pointer = nil, descriptorSetHostMapping: VkBool32): VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE =
  result = VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE(
    sType: sType,
    pNext: pNext,
    descriptorSetHostMapping: descriptorSetHostMapping,
  )

proc newVkDescriptorSetBindingReferenceVALVE*(sType: VkStructureType, pNext: pointer = nil, descriptorSetLayout: VkDescriptorSetLayout, binding: uint32): VkDescriptorSetBindingReferenceVALVE =
  result = VkDescriptorSetBindingReferenceVALVE(
    sType: sType,
    pNext: pNext,
    descriptorSetLayout: descriptorSetLayout,
    binding: binding,
  )

proc newVkDescriptorSetLayoutHostMappingInfoVALVE*(sType: VkStructureType, pNext: pointer = nil, descriptorOffset: uint, descriptorSize: uint32): VkDescriptorSetLayoutHostMappingInfoVALVE =
  result = VkDescriptorSetLayoutHostMappingInfoVALVE(
    sType: sType,
    pNext: pNext,
    descriptorOffset: descriptorOffset,
    descriptorSize: descriptorSize,
  )

proc newVkPhysicalDeviceNestedCommandBufferFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, nestedCommandBuffer: VkBool32, nestedCommandBufferRendering: VkBool32, nestedCommandBufferSimultaneousUse: VkBool32): VkPhysicalDeviceNestedCommandBufferFeaturesEXT =
  result = VkPhysicalDeviceNestedCommandBufferFeaturesEXT(
    sType: sType,
    pNext: pNext,
    nestedCommandBuffer: nestedCommandBuffer,
    nestedCommandBufferRendering: nestedCommandBufferRendering,
    nestedCommandBufferSimultaneousUse: nestedCommandBufferSimultaneousUse,
  )

proc newVkPhysicalDeviceNestedCommandBufferPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, maxCommandBufferNestingLevel: uint32): VkPhysicalDeviceNestedCommandBufferPropertiesEXT =
  result = VkPhysicalDeviceNestedCommandBufferPropertiesEXT(
    sType: sType,
    pNext: pNext,
    maxCommandBufferNestingLevel: maxCommandBufferNestingLevel,
  )

proc newVkPhysicalDeviceShaderModuleIdentifierFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, shaderModuleIdentifier: VkBool32): VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT =
  result = VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT(
    sType: sType,
    pNext: pNext,
    shaderModuleIdentifier: shaderModuleIdentifier,
  )

proc newVkPhysicalDeviceShaderModuleIdentifierPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, shaderModuleIdentifierAlgorithmUUID: array[VK_UUID_SIZE, uint8]): VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT =
  result = VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT(
    sType: sType,
    pNext: pNext,
    shaderModuleIdentifierAlgorithmUUID: shaderModuleIdentifierAlgorithmUUID,
  )

proc newVkPipelineShaderStageModuleIdentifierCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, identifierSize: uint32, pIdentifier: ptr uint8): VkPipelineShaderStageModuleIdentifierCreateInfoEXT =
  result = VkPipelineShaderStageModuleIdentifierCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    identifierSize: identifierSize,
    pIdentifier: pIdentifier,
  )

proc newVkShaderModuleIdentifierEXT*(sType: VkStructureType, pNext: pointer = nil, identifierSize: uint32, identifier: array[VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT, uint8]): VkShaderModuleIdentifierEXT =
  result = VkShaderModuleIdentifierEXT(
    sType: sType,
    pNext: pNext,
    identifierSize: identifierSize,
    identifier: identifier,
  )

proc newVkImageCompressionControlEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkImageCompressionFlagsEXT = 0.VkImageCompressionFlagsEXT, compressionControlPlaneCount: uint32, pFixedRateFlags: ptr VkImageCompressionFixedRateFlagsEXT): VkImageCompressionControlEXT =
  result = VkImageCompressionControlEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    compressionControlPlaneCount: compressionControlPlaneCount,
    pFixedRateFlags: pFixedRateFlags,
  )

proc newVkPhysicalDeviceImageCompressionControlFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, imageCompressionControl: VkBool32): VkPhysicalDeviceImageCompressionControlFeaturesEXT =
  result = VkPhysicalDeviceImageCompressionControlFeaturesEXT(
    sType: sType,
    pNext: pNext,
    imageCompressionControl: imageCompressionControl,
  )

proc newVkImageCompressionPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, imageCompressionFlags: VkImageCompressionFlagsEXT, imageCompressionFixedRateFlags: VkImageCompressionFixedRateFlagsEXT): VkImageCompressionPropertiesEXT =
  result = VkImageCompressionPropertiesEXT(
    sType: sType,
    pNext: pNext,
    imageCompressionFlags: imageCompressionFlags,
    imageCompressionFixedRateFlags: imageCompressionFixedRateFlags,
  )

proc newVkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, imageCompressionControlSwapchain: VkBool32): VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT =
  result = VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT(
    sType: sType,
    pNext: pNext,
    imageCompressionControlSwapchain: imageCompressionControlSwapchain,
  )

proc newVkImageSubresource2KHR*(sType: VkStructureType, pNext: pointer = nil, imageSubresource: VkImageSubresource): VkImageSubresource2KHR =
  result = VkImageSubresource2KHR(
    sType: sType,
    pNext: pNext,
    imageSubresource: imageSubresource,
  )

proc newVkSubresourceLayout2KHR*(sType: VkStructureType, pNext: pointer = nil, subresourceLayout: VkSubresourceLayout): VkSubresourceLayout2KHR =
  result = VkSubresourceLayout2KHR(
    sType: sType,
    pNext: pNext,
    subresourceLayout: subresourceLayout,
  )

proc newVkRenderPassCreationControlEXT*(sType: VkStructureType, pNext: pointer = nil, disallowMerging: VkBool32): VkRenderPassCreationControlEXT =
  result = VkRenderPassCreationControlEXT(
    sType: sType,
    pNext: pNext,
    disallowMerging: disallowMerging,
  )

proc newVkRenderPassCreationFeedbackInfoEXT*(postMergeSubpassCount: uint32): VkRenderPassCreationFeedbackInfoEXT =
  result = VkRenderPassCreationFeedbackInfoEXT(
    postMergeSubpassCount: postMergeSubpassCount,
  )

proc newVkRenderPassCreationFeedbackCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, pRenderPassFeedback: ptr VkRenderPassCreationFeedbackInfoEXT): VkRenderPassCreationFeedbackCreateInfoEXT =
  result = VkRenderPassCreationFeedbackCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    pRenderPassFeedback: pRenderPassFeedback,
  )

proc newVkRenderPassSubpassFeedbackInfoEXT*(subpassMergeStatus: VkSubpassMergeStatusEXT, description: array[VK_MAX_DESCRIPTION_SIZE, char], postMergeIndex: uint32): VkRenderPassSubpassFeedbackInfoEXT =
  result = VkRenderPassSubpassFeedbackInfoEXT(
    subpassMergeStatus: subpassMergeStatus,
    description: description,
    postMergeIndex: postMergeIndex,
  )

proc newVkRenderPassSubpassFeedbackCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, pSubpassFeedback: ptr VkRenderPassSubpassFeedbackInfoEXT): VkRenderPassSubpassFeedbackCreateInfoEXT =
  result = VkRenderPassSubpassFeedbackCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    pSubpassFeedback: pSubpassFeedback,
  )

proc newVkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, subpassMergeFeedback: VkBool32): VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT =
  result = VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT(
    sType: sType,
    pNext: pNext,
    subpassMergeFeedback: subpassMergeFeedback,
  )

proc newVkMicromapBuildInfoEXT*(sType: VkStructureType, pNext: pointer = nil, `type`: VkMicromapTypeEXT, flags: VkBuildMicromapFlagsEXT = 0.VkBuildMicromapFlagsEXT, mode: VkBuildMicromapModeEXT, dstMicromap: VkMicromapEXT, usageCountsCount: uint32, pUsageCounts: ptr VkMicromapUsageEXT, ppUsageCounts: ptr ptr VkMicromapUsageEXT, data: VkDeviceOrHostAddressConstKHR, scratchData: VkDeviceOrHostAddressKHR, triangleArray: VkDeviceOrHostAddressConstKHR, triangleArrayStride: VkDeviceSize): VkMicromapBuildInfoEXT =
  result = VkMicromapBuildInfoEXT(
    sType: sType,
    pNext: pNext,
    `type`: `type`,
    flags: flags,
    mode: mode,
    dstMicromap: dstMicromap,
    usageCountsCount: usageCountsCount,
    pUsageCounts: pUsageCounts,
    ppUsageCounts: ppUsageCounts,
    data: data,
    scratchData: scratchData,
    triangleArray: triangleArray,
    triangleArrayStride: triangleArrayStride,
  )

proc newVkMicromapCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, createFlags: VkMicromapCreateFlagsEXT, buffer: VkBuffer, offset: VkDeviceSize, size: VkDeviceSize, `type`: VkMicromapTypeEXT, deviceAddress: VkDeviceAddress): VkMicromapCreateInfoEXT =
  result = VkMicromapCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    createFlags: createFlags,
    buffer: buffer,
    offset: offset,
    size: size,
    `type`: `type`,
    deviceAddress: deviceAddress,
  )

proc newVkMicromapVersionInfoEXT*(sType: VkStructureType, pNext: pointer = nil, pVersionData: ptr uint8): VkMicromapVersionInfoEXT =
  result = VkMicromapVersionInfoEXT(
    sType: sType,
    pNext: pNext,
    pVersionData: pVersionData,
  )

proc newVkCopyMicromapInfoEXT*(sType: VkStructureType, pNext: pointer = nil, src: VkMicromapEXT, dst: VkMicromapEXT, mode: VkCopyMicromapModeEXT): VkCopyMicromapInfoEXT =
  result = VkCopyMicromapInfoEXT(
    sType: sType,
    pNext: pNext,
    src: src,
    dst: dst,
    mode: mode,
  )

proc newVkCopyMicromapToMemoryInfoEXT*(sType: VkStructureType, pNext: pointer = nil, src: VkMicromapEXT, dst: VkDeviceOrHostAddressKHR, mode: VkCopyMicromapModeEXT): VkCopyMicromapToMemoryInfoEXT =
  result = VkCopyMicromapToMemoryInfoEXT(
    sType: sType,
    pNext: pNext,
    src: src,
    dst: dst,
    mode: mode,
  )

proc newVkCopyMemoryToMicromapInfoEXT*(sType: VkStructureType, pNext: pointer = nil, src: VkDeviceOrHostAddressConstKHR, dst: VkMicromapEXT, mode: VkCopyMicromapModeEXT): VkCopyMemoryToMicromapInfoEXT =
  result = VkCopyMemoryToMicromapInfoEXT(
    sType: sType,
    pNext: pNext,
    src: src,
    dst: dst,
    mode: mode,
  )

proc newVkMicromapBuildSizesInfoEXT*(sType: VkStructureType, pNext: pointer = nil, micromapSize: VkDeviceSize, buildScratchSize: VkDeviceSize, discardable: VkBool32): VkMicromapBuildSizesInfoEXT =
  result = VkMicromapBuildSizesInfoEXT(
    sType: sType,
    pNext: pNext,
    micromapSize: micromapSize,
    buildScratchSize: buildScratchSize,
    discardable: discardable,
  )

proc newVkMicromapUsageEXT*(count: uint32, subdivisionLevel: uint32, format: uint32): VkMicromapUsageEXT =
  result = VkMicromapUsageEXT(
    count: count,
    subdivisionLevel: subdivisionLevel,
    format: format,
  )

proc newVkMicromapTriangleEXT*(dataOffset: uint32, subdivisionLevel: uint16, format: uint16): VkMicromapTriangleEXT =
  result = VkMicromapTriangleEXT(
    dataOffset: dataOffset,
    subdivisionLevel: subdivisionLevel,
    format: format,
  )

proc newVkPhysicalDeviceOpacityMicromapFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, micromap: VkBool32, micromapCaptureReplay: VkBool32, micromapHostCommands: VkBool32): VkPhysicalDeviceOpacityMicromapFeaturesEXT =
  result = VkPhysicalDeviceOpacityMicromapFeaturesEXT(
    sType: sType,
    pNext: pNext,
    micromap: micromap,
    micromapCaptureReplay: micromapCaptureReplay,
    micromapHostCommands: micromapHostCommands,
  )

proc newVkPhysicalDeviceOpacityMicromapPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, maxOpacity2StateSubdivisionLevel: uint32, maxOpacity4StateSubdivisionLevel: uint32): VkPhysicalDeviceOpacityMicromapPropertiesEXT =
  result = VkPhysicalDeviceOpacityMicromapPropertiesEXT(
    sType: sType,
    pNext: pNext,
    maxOpacity2StateSubdivisionLevel: maxOpacity2StateSubdivisionLevel,
    maxOpacity4StateSubdivisionLevel: maxOpacity4StateSubdivisionLevel,
  )

proc newVkAccelerationStructureTrianglesOpacityMicromapEXT*(sType: VkStructureType, pNext: pointer = nil, indexType: VkIndexType, indexBuffer: VkDeviceOrHostAddressConstKHR, indexStride: VkDeviceSize, baseTriangle: uint32, usageCountsCount: uint32, pUsageCounts: ptr VkMicromapUsageEXT, ppUsageCounts: ptr ptr VkMicromapUsageEXT, micromap: VkMicromapEXT): VkAccelerationStructureTrianglesOpacityMicromapEXT =
  result = VkAccelerationStructureTrianglesOpacityMicromapEXT(
    sType: sType,
    pNext: pNext,
    indexType: indexType,
    indexBuffer: indexBuffer,
    indexStride: indexStride,
    baseTriangle: baseTriangle,
    usageCountsCount: usageCountsCount,
    pUsageCounts: pUsageCounts,
    ppUsageCounts: ppUsageCounts,
    micromap: micromap,
  )

proc newVkPhysicalDeviceDisplacementMicromapFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, displacementMicromap: VkBool32): VkPhysicalDeviceDisplacementMicromapFeaturesNV =
  result = VkPhysicalDeviceDisplacementMicromapFeaturesNV(
    sType: sType,
    pNext: pNext,
    displacementMicromap: displacementMicromap,
  )

proc newVkPhysicalDeviceDisplacementMicromapPropertiesNV*(sType: VkStructureType, pNext: pointer = nil, maxDisplacementMicromapSubdivisionLevel: uint32): VkPhysicalDeviceDisplacementMicromapPropertiesNV =
  result = VkPhysicalDeviceDisplacementMicromapPropertiesNV(
    sType: sType,
    pNext: pNext,
    maxDisplacementMicromapSubdivisionLevel: maxDisplacementMicromapSubdivisionLevel,
  )

proc newVkAccelerationStructureTrianglesDisplacementMicromapNV*(sType: VkStructureType, pNext: pointer = nil, displacementBiasAndScaleFormat: VkFormat, displacementVectorFormat: VkFormat, displacementBiasAndScaleBuffer: VkDeviceOrHostAddressConstKHR, displacementBiasAndScaleStride: VkDeviceSize, displacementVectorBuffer: VkDeviceOrHostAddressConstKHR, displacementVectorStride: VkDeviceSize, displacedMicromapPrimitiveFlags: VkDeviceOrHostAddressConstKHR, displacedMicromapPrimitiveFlagsStride: VkDeviceSize, indexType: VkIndexType, indexBuffer: VkDeviceOrHostAddressConstKHR, indexStride: VkDeviceSize, baseTriangle: uint32, usageCountsCount: uint32, pUsageCounts: ptr VkMicromapUsageEXT, ppUsageCounts: ptr ptr VkMicromapUsageEXT, micromap: VkMicromapEXT): VkAccelerationStructureTrianglesDisplacementMicromapNV =
  result = VkAccelerationStructureTrianglesDisplacementMicromapNV(
    sType: sType,
    pNext: pNext,
    displacementBiasAndScaleFormat: displacementBiasAndScaleFormat,
    displacementVectorFormat: displacementVectorFormat,
    displacementBiasAndScaleBuffer: displacementBiasAndScaleBuffer,
    displacementBiasAndScaleStride: displacementBiasAndScaleStride,
    displacementVectorBuffer: displacementVectorBuffer,
    displacementVectorStride: displacementVectorStride,
    displacedMicromapPrimitiveFlags: displacedMicromapPrimitiveFlags,
    displacedMicromapPrimitiveFlagsStride: displacedMicromapPrimitiveFlagsStride,
    indexType: indexType,
    indexBuffer: indexBuffer,
    indexStride: indexStride,
    baseTriangle: baseTriangle,
    usageCountsCount: usageCountsCount,
    pUsageCounts: pUsageCounts,
    ppUsageCounts: ppUsageCounts,
    micromap: micromap,
  )

proc newVkPipelinePropertiesIdentifierEXT*(sType: VkStructureType, pNext: pointer = nil, pipelineIdentifier: array[VK_UUID_SIZE, uint8]): VkPipelinePropertiesIdentifierEXT =
  result = VkPipelinePropertiesIdentifierEXT(
    sType: sType,
    pNext: pNext,
    pipelineIdentifier: pipelineIdentifier,
  )

proc newVkPhysicalDevicePipelinePropertiesFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, pipelinePropertiesIdentifier: VkBool32): VkPhysicalDevicePipelinePropertiesFeaturesEXT =
  result = VkPhysicalDevicePipelinePropertiesFeaturesEXT(
    sType: sType,
    pNext: pNext,
    pipelinePropertiesIdentifier: pipelinePropertiesIdentifier,
  )

proc newVkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD*(sType: VkStructureType, pNext: pointer = nil, shaderEarlyAndLateFragmentTests: VkBool32): VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD =
  result = VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD(
    sType: sType,
    pNext: pNext,
    shaderEarlyAndLateFragmentTests: shaderEarlyAndLateFragmentTests,
  )

proc newVkExternalMemoryAcquireUnmodifiedEXT*(sType: VkStructureType, pNext: pointer = nil, acquireUnmodifiedMemory: VkBool32): VkExternalMemoryAcquireUnmodifiedEXT =
  result = VkExternalMemoryAcquireUnmodifiedEXT(
    sType: sType,
    pNext: pNext,
    acquireUnmodifiedMemory: acquireUnmodifiedMemory,
  )

proc newVkExportMetalObjectCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, exportObjectType: VkExportMetalObjectTypeFlagBitsEXT): VkExportMetalObjectCreateInfoEXT =
  result = VkExportMetalObjectCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    exportObjectType: exportObjectType,
  )

proc newVkExportMetalObjectsInfoEXT*(sType: VkStructureType, pNext: pointer = nil): VkExportMetalObjectsInfoEXT =
  result = VkExportMetalObjectsInfoEXT(
    sType: sType,
    pNext: pNext,
  )

proc newVkExportMetalDeviceInfoEXT*(sType: VkStructureType, pNext: pointer = nil, mtlDevice: MTLDevice_id): VkExportMetalDeviceInfoEXT =
  result = VkExportMetalDeviceInfoEXT(
    sType: sType,
    pNext: pNext,
    mtlDevice: mtlDevice,
  )

proc newVkExportMetalCommandQueueInfoEXT*(sType: VkStructureType, pNext: pointer = nil, queue: VkQueue, mtlCommandQueue: MTLCommandQueue_id): VkExportMetalCommandQueueInfoEXT =
  result = VkExportMetalCommandQueueInfoEXT(
    sType: sType,
    pNext: pNext,
    queue: queue,
    mtlCommandQueue: mtlCommandQueue,
  )

proc newVkExportMetalBufferInfoEXT*(sType: VkStructureType, pNext: pointer = nil, memory: VkDeviceMemory, mtlBuffer: MTLBuffer_id): VkExportMetalBufferInfoEXT =
  result = VkExportMetalBufferInfoEXT(
    sType: sType,
    pNext: pNext,
    memory: memory,
    mtlBuffer: mtlBuffer,
  )

proc newVkImportMetalBufferInfoEXT*(sType: VkStructureType, pNext: pointer = nil, mtlBuffer: MTLBuffer_id): VkImportMetalBufferInfoEXT =
  result = VkImportMetalBufferInfoEXT(
    sType: sType,
    pNext: pNext,
    mtlBuffer: mtlBuffer,
  )

proc newVkExportMetalTextureInfoEXT*(sType: VkStructureType, pNext: pointer = nil, image: VkImage, imageView: VkImageView, bufferView: VkBufferView, plane: VkImageAspectFlagBits, mtlTexture: MTLTexture_id): VkExportMetalTextureInfoEXT =
  result = VkExportMetalTextureInfoEXT(
    sType: sType,
    pNext: pNext,
    image: image,
    imageView: imageView,
    bufferView: bufferView,
    plane: plane,
    mtlTexture: mtlTexture,
  )

proc newVkImportMetalTextureInfoEXT*(sType: VkStructureType, pNext: pointer = nil, plane: VkImageAspectFlagBits, mtlTexture: MTLTexture_id): VkImportMetalTextureInfoEXT =
  result = VkImportMetalTextureInfoEXT(
    sType: sType,
    pNext: pNext,
    plane: plane,
    mtlTexture: mtlTexture,
  )

proc newVkExportMetalIOSurfaceInfoEXT*(sType: VkStructureType, pNext: pointer = nil, image: VkImage, ioSurface: IOSurfaceRef): VkExportMetalIOSurfaceInfoEXT =
  result = VkExportMetalIOSurfaceInfoEXT(
    sType: sType,
    pNext: pNext,
    image: image,
    ioSurface: ioSurface,
  )

proc newVkImportMetalIOSurfaceInfoEXT*(sType: VkStructureType, pNext: pointer = nil, ioSurface: IOSurfaceRef): VkImportMetalIOSurfaceInfoEXT =
  result = VkImportMetalIOSurfaceInfoEXT(
    sType: sType,
    pNext: pNext,
    ioSurface: ioSurface,
  )

proc newVkExportMetalSharedEventInfoEXT*(sType: VkStructureType, pNext: pointer = nil, semaphore: VkSemaphore, event: VkEvent, mtlSharedEvent: MTLSharedEvent_id): VkExportMetalSharedEventInfoEXT =
  result = VkExportMetalSharedEventInfoEXT(
    sType: sType,
    pNext: pNext,
    semaphore: semaphore,
    event: event,
    mtlSharedEvent: mtlSharedEvent,
  )

proc newVkImportMetalSharedEventInfoEXT*(sType: VkStructureType, pNext: pointer = nil, mtlSharedEvent: MTLSharedEvent_id): VkImportMetalSharedEventInfoEXT =
  result = VkImportMetalSharedEventInfoEXT(
    sType: sType,
    pNext: pNext,
    mtlSharedEvent: mtlSharedEvent,
  )

proc newVkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, nonSeamlessCubeMap: VkBool32): VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT =
  result = VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT(
    sType: sType,
    pNext: pNext,
    nonSeamlessCubeMap: nonSeamlessCubeMap,
  )

proc newVkPhysicalDevicePipelineRobustnessFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, pipelineRobustness: VkBool32): VkPhysicalDevicePipelineRobustnessFeaturesEXT =
  result = VkPhysicalDevicePipelineRobustnessFeaturesEXT(
    sType: sType,
    pNext: pNext,
    pipelineRobustness: pipelineRobustness,
  )

proc newVkPipelineRobustnessCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, storageBuffers: VkPipelineRobustnessBufferBehaviorEXT, uniformBuffers: VkPipelineRobustnessBufferBehaviorEXT, vertexInputs: VkPipelineRobustnessBufferBehaviorEXT, images: VkPipelineRobustnessImageBehaviorEXT): VkPipelineRobustnessCreateInfoEXT =
  result = VkPipelineRobustnessCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    storageBuffers: storageBuffers,
    uniformBuffers: uniformBuffers,
    vertexInputs: vertexInputs,
    images: images,
  )

proc newVkPhysicalDevicePipelineRobustnessPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, defaultRobustnessStorageBuffers: VkPipelineRobustnessBufferBehaviorEXT, defaultRobustnessUniformBuffers: VkPipelineRobustnessBufferBehaviorEXT, defaultRobustnessVertexInputs: VkPipelineRobustnessBufferBehaviorEXT, defaultRobustnessImages: VkPipelineRobustnessImageBehaviorEXT): VkPhysicalDevicePipelineRobustnessPropertiesEXT =
  result = VkPhysicalDevicePipelineRobustnessPropertiesEXT(
    sType: sType,
    pNext: pNext,
    defaultRobustnessStorageBuffers: defaultRobustnessStorageBuffers,
    defaultRobustnessUniformBuffers: defaultRobustnessUniformBuffers,
    defaultRobustnessVertexInputs: defaultRobustnessVertexInputs,
    defaultRobustnessImages: defaultRobustnessImages,
  )

proc newVkImageViewSampleWeightCreateInfoQCOM*(sType: VkStructureType, pNext: pointer = nil, filterCenter: VkOffset2D, filterSize: VkExtent2D, numPhases: uint32): VkImageViewSampleWeightCreateInfoQCOM =
  result = VkImageViewSampleWeightCreateInfoQCOM(
    sType: sType,
    pNext: pNext,
    filterCenter: filterCenter,
    filterSize: filterSize,
    numPhases: numPhases,
  )

proc newVkPhysicalDeviceImageProcessingFeaturesQCOM*(sType: VkStructureType, pNext: pointer = nil, textureSampleWeighted: VkBool32, textureBoxFilter: VkBool32, textureBlockMatch: VkBool32): VkPhysicalDeviceImageProcessingFeaturesQCOM =
  result = VkPhysicalDeviceImageProcessingFeaturesQCOM(
    sType: sType,
    pNext: pNext,
    textureSampleWeighted: textureSampleWeighted,
    textureBoxFilter: textureBoxFilter,
    textureBlockMatch: textureBlockMatch,
  )

proc newVkPhysicalDeviceImageProcessingPropertiesQCOM*(sType: VkStructureType, pNext: pointer = nil, maxWeightFilterPhases: uint32, maxWeightFilterDimension: VkExtent2D, maxBlockMatchRegion: VkExtent2D, maxBoxFilterBlockSize: VkExtent2D): VkPhysicalDeviceImageProcessingPropertiesQCOM =
  result = VkPhysicalDeviceImageProcessingPropertiesQCOM(
    sType: sType,
    pNext: pNext,
    maxWeightFilterPhases: maxWeightFilterPhases,
    maxWeightFilterDimension: maxWeightFilterDimension,
    maxBlockMatchRegion: maxBlockMatchRegion,
    maxBoxFilterBlockSize: maxBoxFilterBlockSize,
  )

proc newVkPhysicalDeviceTilePropertiesFeaturesQCOM*(sType: VkStructureType, pNext: pointer = nil, tileProperties: VkBool32): VkPhysicalDeviceTilePropertiesFeaturesQCOM =
  result = VkPhysicalDeviceTilePropertiesFeaturesQCOM(
    sType: sType,
    pNext: pNext,
    tileProperties: tileProperties,
  )

proc newVkTilePropertiesQCOM*(sType: VkStructureType, pNext: pointer = nil, tileSize: VkExtent3D, apronSize: VkExtent2D, origin: VkOffset2D): VkTilePropertiesQCOM =
  result = VkTilePropertiesQCOM(
    sType: sType,
    pNext: pNext,
    tileSize: tileSize,
    apronSize: apronSize,
    origin: origin,
  )

proc newVkPhysicalDeviceAmigoProfilingFeaturesSEC*(sType: VkStructureType, pNext: pointer = nil, amigoProfiling: VkBool32): VkPhysicalDeviceAmigoProfilingFeaturesSEC =
  result = VkPhysicalDeviceAmigoProfilingFeaturesSEC(
    sType: sType,
    pNext: pNext,
    amigoProfiling: amigoProfiling,
  )

proc newVkAmigoProfilingSubmitInfoSEC*(sType: VkStructureType, pNext: pointer = nil, firstDrawTimestamp: uint64, swapBufferTimestamp: uint64): VkAmigoProfilingSubmitInfoSEC =
  result = VkAmigoProfilingSubmitInfoSEC(
    sType: sType,
    pNext: pNext,
    firstDrawTimestamp: firstDrawTimestamp,
    swapBufferTimestamp: swapBufferTimestamp,
  )

proc newVkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, attachmentFeedbackLoopLayout: VkBool32): VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT =
  result = VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT(
    sType: sType,
    pNext: pNext,
    attachmentFeedbackLoopLayout: attachmentFeedbackLoopLayout,
  )

proc newVkPhysicalDeviceDepthClampZeroOneFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, depthClampZeroOne: VkBool32): VkPhysicalDeviceDepthClampZeroOneFeaturesEXT =
  result = VkPhysicalDeviceDepthClampZeroOneFeaturesEXT(
    sType: sType,
    pNext: pNext,
    depthClampZeroOne: depthClampZeroOne,
  )

proc newVkPhysicalDeviceAddressBindingReportFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, reportAddressBinding: VkBool32): VkPhysicalDeviceAddressBindingReportFeaturesEXT =
  result = VkPhysicalDeviceAddressBindingReportFeaturesEXT(
    sType: sType,
    pNext: pNext,
    reportAddressBinding: reportAddressBinding,
  )

proc newVkDeviceAddressBindingCallbackDataEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkDeviceAddressBindingFlagsEXT = 0.VkDeviceAddressBindingFlagsEXT, baseAddress: VkDeviceAddress, size: VkDeviceSize, bindingType: VkDeviceAddressBindingTypeEXT): VkDeviceAddressBindingCallbackDataEXT =
  result = VkDeviceAddressBindingCallbackDataEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    baseAddress: baseAddress,
    size: size,
    bindingType: bindingType,
  )

proc newVkPhysicalDeviceOpticalFlowFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, opticalFlow: VkBool32): VkPhysicalDeviceOpticalFlowFeaturesNV =
  result = VkPhysicalDeviceOpticalFlowFeaturesNV(
    sType: sType,
    pNext: pNext,
    opticalFlow: opticalFlow,
  )

proc newVkPhysicalDeviceOpticalFlowPropertiesNV*(sType: VkStructureType, pNext: pointer = nil, supportedOutputGridSizes: VkOpticalFlowGridSizeFlagsNV, supportedHintGridSizes: VkOpticalFlowGridSizeFlagsNV, hintSupported: VkBool32, costSupported: VkBool32, bidirectionalFlowSupported: VkBool32, globalFlowSupported: VkBool32, minWidth: uint32, minHeight: uint32, maxWidth: uint32, maxHeight: uint32, maxNumRegionsOfInterest: uint32): VkPhysicalDeviceOpticalFlowPropertiesNV =
  result = VkPhysicalDeviceOpticalFlowPropertiesNV(
    sType: sType,
    pNext: pNext,
    supportedOutputGridSizes: supportedOutputGridSizes,
    supportedHintGridSizes: supportedHintGridSizes,
    hintSupported: hintSupported,
    costSupported: costSupported,
    bidirectionalFlowSupported: bidirectionalFlowSupported,
    globalFlowSupported: globalFlowSupported,
    minWidth: minWidth,
    minHeight: minHeight,
    maxWidth: maxWidth,
    maxHeight: maxHeight,
    maxNumRegionsOfInterest: maxNumRegionsOfInterest,
  )

proc newVkOpticalFlowImageFormatInfoNV*(sType: VkStructureType, pNext: pointer = nil, usage: VkOpticalFlowUsageFlagsNV): VkOpticalFlowImageFormatInfoNV =
  result = VkOpticalFlowImageFormatInfoNV(
    sType: sType,
    pNext: pNext,
    usage: usage,
  )

proc newVkOpticalFlowImageFormatPropertiesNV*(sType: VkStructureType, pNext: pointer = nil, format: VkFormat): VkOpticalFlowImageFormatPropertiesNV =
  result = VkOpticalFlowImageFormatPropertiesNV(
    sType: sType,
    pNext: pNext,
    format: format,
  )

proc newVkOpticalFlowSessionCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, width: uint32, height: uint32, imageFormat: VkFormat, flowVectorFormat: VkFormat, costFormat: VkFormat, outputGridSize: VkOpticalFlowGridSizeFlagsNV, hintGridSize: VkOpticalFlowGridSizeFlagsNV, performanceLevel: VkOpticalFlowPerformanceLevelNV, flags: VkOpticalFlowSessionCreateFlagsNV = 0.VkOpticalFlowSessionCreateFlagsNV): VkOpticalFlowSessionCreateInfoNV =
  result = VkOpticalFlowSessionCreateInfoNV(
    sType: sType,
    pNext: pNext,
    width: width,
    height: height,
    imageFormat: imageFormat,
    flowVectorFormat: flowVectorFormat,
    costFormat: costFormat,
    outputGridSize: outputGridSize,
    hintGridSize: hintGridSize,
    performanceLevel: performanceLevel,
    flags: flags,
  )

proc newVkOpticalFlowSessionCreatePrivateDataInfoNV*(sType: VkStructureType, pNext: pointer = nil, id: uint32, size: uint32, pPrivateData: pointer = nil): VkOpticalFlowSessionCreatePrivateDataInfoNV =
  result = VkOpticalFlowSessionCreatePrivateDataInfoNV(
    sType: sType,
    pNext: pNext,
    id: id,
    size: size,
    pPrivateData: pPrivateData,
  )

proc newVkOpticalFlowExecuteInfoNV*(sType: VkStructureType, pNext: pointer = nil, flags: VkOpticalFlowExecuteFlagsNV = 0.VkOpticalFlowExecuteFlagsNV, regionCount: uint32, pRegions: ptr VkRect2D): VkOpticalFlowExecuteInfoNV =
  result = VkOpticalFlowExecuteInfoNV(
    sType: sType,
    pNext: pNext,
    flags: flags,
    regionCount: regionCount,
    pRegions: pRegions,
  )

proc newVkPhysicalDeviceFaultFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, deviceFault: VkBool32, deviceFaultVendorBinary: VkBool32): VkPhysicalDeviceFaultFeaturesEXT =
  result = VkPhysicalDeviceFaultFeaturesEXT(
    sType: sType,
    pNext: pNext,
    deviceFault: deviceFault,
    deviceFaultVendorBinary: deviceFaultVendorBinary,
  )

proc newVkDeviceFaultAddressInfoEXT*(addressType: VkDeviceFaultAddressTypeEXT, reportedAddress: VkDeviceAddress, addressPrecision: VkDeviceSize): VkDeviceFaultAddressInfoEXT =
  result = VkDeviceFaultAddressInfoEXT(
    addressType: addressType,
    reportedAddress: reportedAddress,
    addressPrecision: addressPrecision,
  )

proc newVkDeviceFaultVendorInfoEXT*(description: array[VK_MAX_DESCRIPTION_SIZE, char], vendorFaultCode: uint64, vendorFaultData: uint64): VkDeviceFaultVendorInfoEXT =
  result = VkDeviceFaultVendorInfoEXT(
    description: description,
    vendorFaultCode: vendorFaultCode,
    vendorFaultData: vendorFaultData,
  )

proc newVkDeviceFaultCountsEXT*(sType: VkStructureType, pNext: pointer = nil, addressInfoCount: uint32, vendorInfoCount: uint32, vendorBinarySize: VkDeviceSize): VkDeviceFaultCountsEXT =
  result = VkDeviceFaultCountsEXT(
    sType: sType,
    pNext: pNext,
    addressInfoCount: addressInfoCount,
    vendorInfoCount: vendorInfoCount,
    vendorBinarySize: vendorBinarySize,
  )

proc newVkDeviceFaultInfoEXT*(sType: VkStructureType, pNext: pointer = nil, description: array[VK_MAX_DESCRIPTION_SIZE, char], pAddressInfos: ptr VkDeviceFaultAddressInfoEXT, pVendorInfos: ptr VkDeviceFaultVendorInfoEXT, pVendorBinaryData: pointer = nil): VkDeviceFaultInfoEXT =
  result = VkDeviceFaultInfoEXT(
    sType: sType,
    pNext: pNext,
    description: description,
    pAddressInfos: pAddressInfos,
    pVendorInfos: pVendorInfos,
    pVendorBinaryData: pVendorBinaryData,
  )

proc newVkDeviceFaultVendorBinaryHeaderVersionOneEXT*(headerSize: uint32, headerVersion: VkDeviceFaultVendorBinaryHeaderVersionEXT, vendorID: uint32, deviceID: uint32, driverVersion: uint32, pipelineCacheUUID: array[VK_UUID_SIZE, uint8], applicationNameOffset: uint32, applicationVersion: uint32, engineNameOffset: uint32, engineVersion: uint32, apiVersion: uint32): VkDeviceFaultVendorBinaryHeaderVersionOneEXT =
  result = VkDeviceFaultVendorBinaryHeaderVersionOneEXT(
    headerSize: headerSize,
    headerVersion: headerVersion,
    vendorID: vendorID,
    deviceID: deviceID,
    driverVersion: driverVersion,
    pipelineCacheUUID: pipelineCacheUUID,
    applicationNameOffset: applicationNameOffset,
    applicationVersion: applicationVersion,
    engineNameOffset: engineNameOffset,
    engineVersion: engineVersion,
    apiVersion: apiVersion,
  )

proc newVkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, pipelineLibraryGroupHandles: VkBool32): VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT =
  result = VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT(
    sType: sType,
    pNext: pNext,
    pipelineLibraryGroupHandles: pipelineLibraryGroupHandles,
  )

proc newVkDepthBiasInfoEXT*(sType: VkStructureType, pNext: pointer = nil, depthBiasConstantFactor: float32, depthBiasClamp: float32, depthBiasSlopeFactor: float32): VkDepthBiasInfoEXT =
  result = VkDepthBiasInfoEXT(
    sType: sType,
    pNext: pNext,
    depthBiasConstantFactor: depthBiasConstantFactor,
    depthBiasClamp: depthBiasClamp,
    depthBiasSlopeFactor: depthBiasSlopeFactor,
  )

proc newVkDepthBiasRepresentationInfoEXT*(sType: VkStructureType, pNext: pointer = nil, depthBiasRepresentation: VkDepthBiasRepresentationEXT, depthBiasExact: VkBool32): VkDepthBiasRepresentationInfoEXT =
  result = VkDepthBiasRepresentationInfoEXT(
    sType: sType,
    pNext: pNext,
    depthBiasRepresentation: depthBiasRepresentation,
    depthBiasExact: depthBiasExact,
  )

proc newVkDecompressMemoryRegionNV*(srcAddress: VkDeviceAddress, dstAddress: VkDeviceAddress, compressedSize: VkDeviceSize, decompressedSize: VkDeviceSize, decompressionMethod: VkMemoryDecompressionMethodFlagsNV): VkDecompressMemoryRegionNV =
  result = VkDecompressMemoryRegionNV(
    srcAddress: srcAddress,
    dstAddress: dstAddress,
    compressedSize: compressedSize,
    decompressedSize: decompressedSize,
    decompressionMethod: decompressionMethod,
  )

proc newVkPhysicalDeviceShaderCoreBuiltinsPropertiesARM*(sType: VkStructureType, pNext: pointer = nil, shaderCoreMask: uint64, shaderCoreCount: uint32, shaderWarpsPerCore: uint32): VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM =
  result = VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM(
    sType: sType,
    pNext: pNext,
    shaderCoreMask: shaderCoreMask,
    shaderCoreCount: shaderCoreCount,
    shaderWarpsPerCore: shaderWarpsPerCore,
  )

proc newVkPhysicalDeviceShaderCoreBuiltinsFeaturesARM*(sType: VkStructureType, pNext: pointer = nil, shaderCoreBuiltins: VkBool32): VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM =
  result = VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM(
    sType: sType,
    pNext: pNext,
    shaderCoreBuiltins: shaderCoreBuiltins,
  )

proc newVkFrameBoundaryEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkFrameBoundaryFlagsEXT = 0.VkFrameBoundaryFlagsEXT, frameID: uint64, imageCount: uint32, pImages: ptr VkImage, bufferCount: uint32, pBuffers: ptr VkBuffer, tagName: uint64, tagSize: uint, pTag: pointer = nil): VkFrameBoundaryEXT =
  result = VkFrameBoundaryEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    frameID: frameID,
    imageCount: imageCount,
    pImages: pImages,
    bufferCount: bufferCount,
    pBuffers: pBuffers,
    tagName: tagName,
    tagSize: tagSize,
    pTag: pTag,
  )

proc newVkPhysicalDeviceFrameBoundaryFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, frameBoundary: VkBool32): VkPhysicalDeviceFrameBoundaryFeaturesEXT =
  result = VkPhysicalDeviceFrameBoundaryFeaturesEXT(
    sType: sType,
    pNext: pNext,
    frameBoundary: frameBoundary,
  )

proc newVkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, dynamicRenderingUnusedAttachments: VkBool32): VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT =
  result = VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT(
    sType: sType,
    pNext: pNext,
    dynamicRenderingUnusedAttachments: dynamicRenderingUnusedAttachments,
  )

proc newVkSurfacePresentModeEXT*(sType: VkStructureType, pNext: pointer = nil, presentMode: VkPresentModeKHR): VkSurfacePresentModeEXT =
  result = VkSurfacePresentModeEXT(
    sType: sType,
    pNext: pNext,
    presentMode: presentMode,
  )

proc newVkSurfacePresentScalingCapabilitiesEXT*(sType: VkStructureType, pNext: pointer = nil, supportedPresentScaling: VkPresentScalingFlagsEXT, supportedPresentGravityX: VkPresentGravityFlagsEXT, supportedPresentGravityY: VkPresentGravityFlagsEXT, minScaledImageExtent: VkExtent2D, maxScaledImageExtent: VkExtent2D): VkSurfacePresentScalingCapabilitiesEXT =
  result = VkSurfacePresentScalingCapabilitiesEXT(
    sType: sType,
    pNext: pNext,
    supportedPresentScaling: supportedPresentScaling,
    supportedPresentGravityX: supportedPresentGravityX,
    supportedPresentGravityY: supportedPresentGravityY,
    minScaledImageExtent: minScaledImageExtent,
    maxScaledImageExtent: maxScaledImageExtent,
  )

proc newVkSurfacePresentModeCompatibilityEXT*(sType: VkStructureType, pNext: pointer = nil, presentModeCount: uint32, pPresentModes: ptr VkPresentModeKHR): VkSurfacePresentModeCompatibilityEXT =
  result = VkSurfacePresentModeCompatibilityEXT(
    sType: sType,
    pNext: pNext,
    presentModeCount: presentModeCount,
    pPresentModes: pPresentModes,
  )

proc newVkPhysicalDeviceSwapchainMaintenance1FeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, swapchainMaintenance1: VkBool32): VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT =
  result = VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT(
    sType: sType,
    pNext: pNext,
    swapchainMaintenance1: swapchainMaintenance1,
  )

proc newVkSwapchainPresentFenceInfoEXT*(sType: VkStructureType, pNext: pointer = nil, swapchainCount: uint32, pFences: ptr VkFence): VkSwapchainPresentFenceInfoEXT =
  result = VkSwapchainPresentFenceInfoEXT(
    sType: sType,
    pNext: pNext,
    swapchainCount: swapchainCount,
    pFences: pFences,
  )

proc newVkSwapchainPresentModesCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, presentModeCount: uint32, pPresentModes: ptr VkPresentModeKHR): VkSwapchainPresentModesCreateInfoEXT =
  result = VkSwapchainPresentModesCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    presentModeCount: presentModeCount,
    pPresentModes: pPresentModes,
  )

proc newVkSwapchainPresentModeInfoEXT*(sType: VkStructureType, pNext: pointer = nil, swapchainCount: uint32, pPresentModes: ptr VkPresentModeKHR): VkSwapchainPresentModeInfoEXT =
  result = VkSwapchainPresentModeInfoEXT(
    sType: sType,
    pNext: pNext,
    swapchainCount: swapchainCount,
    pPresentModes: pPresentModes,
  )

proc newVkSwapchainPresentScalingCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, scalingBehavior: VkPresentScalingFlagsEXT, presentGravityX: VkPresentGravityFlagsEXT, presentGravityY: VkPresentGravityFlagsEXT): VkSwapchainPresentScalingCreateInfoEXT =
  result = VkSwapchainPresentScalingCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    scalingBehavior: scalingBehavior,
    presentGravityX: presentGravityX,
    presentGravityY: presentGravityY,
  )

proc newVkReleaseSwapchainImagesInfoEXT*(sType: VkStructureType, pNext: pointer = nil, swapchain: VkSwapchainKHR, imageIndexCount: uint32, pImageIndices: ptr uint32): VkReleaseSwapchainImagesInfoEXT =
  result = VkReleaseSwapchainImagesInfoEXT(
    sType: sType,
    pNext: pNext,
    swapchain: swapchain,
    imageIndexCount: imageIndexCount,
    pImageIndices: pImageIndices,
  )

proc newVkPhysicalDeviceDepthBiasControlFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, depthBiasControl: VkBool32, leastRepresentableValueForceUnormRepresentation: VkBool32, floatRepresentation: VkBool32, depthBiasExact: VkBool32): VkPhysicalDeviceDepthBiasControlFeaturesEXT =
  result = VkPhysicalDeviceDepthBiasControlFeaturesEXT(
    sType: sType,
    pNext: pNext,
    depthBiasControl: depthBiasControl,
    leastRepresentableValueForceUnormRepresentation: leastRepresentableValueForceUnormRepresentation,
    floatRepresentation: floatRepresentation,
    depthBiasExact: depthBiasExact,
  )

proc newVkPhysicalDeviceRayTracingInvocationReorderFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, rayTracingInvocationReorder: VkBool32): VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV =
  result = VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV(
    sType: sType,
    pNext: pNext,
    rayTracingInvocationReorder: rayTracingInvocationReorder,
  )

proc newVkPhysicalDeviceRayTracingInvocationReorderPropertiesNV*(sType: VkStructureType, pNext: pointer = nil, rayTracingInvocationReorderReorderingHint: VkRayTracingInvocationReorderModeNV): VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV =
  result = VkPhysicalDeviceRayTracingInvocationReorderPropertiesNV(
    sType: sType,
    pNext: pNext,
    rayTracingInvocationReorderReorderingHint: rayTracingInvocationReorderReorderingHint,
  )

proc newVkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, extendedSparseAddressSpace: VkBool32): VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV =
  result = VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV(
    sType: sType,
    pNext: pNext,
    extendedSparseAddressSpace: extendedSparseAddressSpace,
  )

proc newVkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV*(sType: VkStructureType, pNext: pointer = nil, extendedSparseAddressSpaceSize: VkDeviceSize, extendedSparseImageUsageFlags: VkImageUsageFlags, extendedSparseBufferUsageFlags: VkBufferUsageFlags): VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV =
  result = VkPhysicalDeviceExtendedSparseAddressSpacePropertiesNV(
    sType: sType,
    pNext: pNext,
    extendedSparseAddressSpaceSize: extendedSparseAddressSpaceSize,
    extendedSparseImageUsageFlags: extendedSparseImageUsageFlags,
    extendedSparseBufferUsageFlags: extendedSparseBufferUsageFlags,
  )

proc newVkDirectDriverLoadingInfoLUNARG*(sType: VkStructureType, pNext: pointer = nil, flags: VkDirectDriverLoadingFlagsLUNARG = 0.VkDirectDriverLoadingFlagsLUNARG, pfnGetInstanceProcAddr: PFN_vkGetInstanceProcAddrLUNARG): VkDirectDriverLoadingInfoLUNARG =
  result = VkDirectDriverLoadingInfoLUNARG(
    sType: sType,
    pNext: pNext,
    flags: flags,
    pfnGetInstanceProcAddr: pfnGetInstanceProcAddr,
  )

proc newVkDirectDriverLoadingListLUNARG*(sType: VkStructureType, pNext: pointer = nil, mode: VkDirectDriverLoadingModeLUNARG, driverCount: uint32, pDrivers: ptr VkDirectDriverLoadingInfoLUNARG): VkDirectDriverLoadingListLUNARG =
  result = VkDirectDriverLoadingListLUNARG(
    sType: sType,
    pNext: pNext,
    mode: mode,
    driverCount: driverCount,
    pDrivers: pDrivers,
  )

proc newVkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM*(sType: VkStructureType, pNext: pointer = nil, multiviewPerViewViewports: VkBool32): VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM =
  result = VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM(
    sType: sType,
    pNext: pNext,
    multiviewPerViewViewports: multiviewPerViewViewports,
  )

proc newVkPhysicalDeviceRayTracingPositionFetchFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, rayTracingPositionFetch: VkBool32): VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR =
  result = VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR(
    sType: sType,
    pNext: pNext,
    rayTracingPositionFetch: rayTracingPositionFetch,
  )

proc newVkDeviceImageSubresourceInfoKHR*(sType: VkStructureType, pNext: pointer = nil, pCreateInfo: ptr VkImageCreateInfo, pSubresource: ptr VkImageSubresource2KHR): VkDeviceImageSubresourceInfoKHR =
  result = VkDeviceImageSubresourceInfoKHR(
    sType: sType,
    pNext: pNext,
    pCreateInfo: pCreateInfo,
    pSubresource: pSubresource,
  )

proc newVkPhysicalDeviceShaderCorePropertiesARM*(sType: VkStructureType, pNext: pointer = nil, pixelRate: uint32, texelRate: uint32, fmaRate: uint32): VkPhysicalDeviceShaderCorePropertiesARM =
  result = VkPhysicalDeviceShaderCorePropertiesARM(
    sType: sType,
    pNext: pNext,
    pixelRate: pixelRate,
    texelRate: texelRate,
    fmaRate: fmaRate,
  )

proc newVkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM*(sType: VkStructureType, pNext: pointer = nil, multiviewPerViewRenderAreas: VkBool32): VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM =
  result = VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM(
    sType: sType,
    pNext: pNext,
    multiviewPerViewRenderAreas: multiviewPerViewRenderAreas,
  )

proc newVkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM*(sType: VkStructureType, pNext: pointer = nil, perViewRenderAreaCount: uint32, pPerViewRenderAreas: ptr VkRect2D): VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM =
  result = VkMultiviewPerViewRenderAreasRenderPassBeginInfoQCOM(
    sType: sType,
    pNext: pNext,
    perViewRenderAreaCount: perViewRenderAreaCount,
    pPerViewRenderAreas: pPerViewRenderAreas,
  )

proc newVkQueryLowLatencySupportNV*(sType: VkStructureType, pNext: pointer = nil, pQueriedLowLatencyData: pointer = nil): VkQueryLowLatencySupportNV =
  result = VkQueryLowLatencySupportNV(
    sType: sType,
    pNext: pNext,
    pQueriedLowLatencyData: pQueriedLowLatencyData,
  )

proc newVkMemoryMapInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkMemoryMapFlags = 0.VkMemoryMapFlags, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize): VkMemoryMapInfoKHR =
  result = VkMemoryMapInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    memory: memory,
    offset: offset,
    size: size,
  )

proc newVkMemoryUnmapInfoKHR*(sType: VkStructureType, pNext: pointer = nil, flags: VkMemoryUnmapFlagsKHR = 0.VkMemoryUnmapFlagsKHR, memory: VkDeviceMemory): VkMemoryUnmapInfoKHR =
  result = VkMemoryUnmapInfoKHR(
    sType: sType,
    pNext: pNext,
    flags: flags,
    memory: memory,
  )

proc newVkPhysicalDeviceShaderObjectFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, shaderObject: VkBool32): VkPhysicalDeviceShaderObjectFeaturesEXT =
  result = VkPhysicalDeviceShaderObjectFeaturesEXT(
    sType: sType,
    pNext: pNext,
    shaderObject: shaderObject,
  )

proc newVkPhysicalDeviceShaderObjectPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, shaderBinaryUUID: array[VK_UUID_SIZE, uint8], shaderBinaryVersion: uint32): VkPhysicalDeviceShaderObjectPropertiesEXT =
  result = VkPhysicalDeviceShaderObjectPropertiesEXT(
    sType: sType,
    pNext: pNext,
    shaderBinaryUUID: shaderBinaryUUID,
    shaderBinaryVersion: shaderBinaryVersion,
  )

proc newVkShaderCreateInfoEXT*(sType: VkStructureType, pNext: pointer = nil, flags: VkShaderCreateFlagsEXT = 0.VkShaderCreateFlagsEXT, stage: VkShaderStageFlagBits, nextStage: VkShaderStageFlags, codeType: VkShaderCodeTypeEXT, codeSize: uint, pCode: pointer = nil, pName: cstring, setLayoutCount: uint32, pSetLayouts: ptr VkDescriptorSetLayout, pushConstantRangeCount: uint32, pPushConstantRanges: ptr VkPushConstantRange, pSpecializationInfo: ptr VkSpecializationInfo): VkShaderCreateInfoEXT =
  result = VkShaderCreateInfoEXT(
    sType: sType,
    pNext: pNext,
    flags: flags,
    stage: stage,
    nextStage: nextStage,
    codeType: codeType,
    codeSize: codeSize,
    pCode: pCode,
    pName: pName,
    setLayoutCount: setLayoutCount,
    pSetLayouts: pSetLayouts,
    pushConstantRangeCount: pushConstantRangeCount,
    pPushConstantRanges: pPushConstantRanges,
    pSpecializationInfo: pSpecializationInfo,
  )

proc newVkPhysicalDeviceShaderTileImageFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, shaderTileImageColorReadAccess: VkBool32, shaderTileImageDepthReadAccess: VkBool32, shaderTileImageStencilReadAccess: VkBool32): VkPhysicalDeviceShaderTileImageFeaturesEXT =
  result = VkPhysicalDeviceShaderTileImageFeaturesEXT(
    sType: sType,
    pNext: pNext,
    shaderTileImageColorReadAccess: shaderTileImageColorReadAccess,
    shaderTileImageDepthReadAccess: shaderTileImageDepthReadAccess,
    shaderTileImageStencilReadAccess: shaderTileImageStencilReadAccess,
  )

proc newVkPhysicalDeviceShaderTileImagePropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, shaderTileImageCoherentReadAccelerated: VkBool32, shaderTileImageReadSampleFromPixelRateInvocation: VkBool32, shaderTileImageReadFromHelperInvocation: VkBool32): VkPhysicalDeviceShaderTileImagePropertiesEXT =
  result = VkPhysicalDeviceShaderTileImagePropertiesEXT(
    sType: sType,
    pNext: pNext,
    shaderTileImageCoherentReadAccelerated: shaderTileImageCoherentReadAccelerated,
    shaderTileImageReadSampleFromPixelRateInvocation: shaderTileImageReadSampleFromPixelRateInvocation,
    shaderTileImageReadFromHelperInvocation: shaderTileImageReadFromHelperInvocation,
  )

proc newVkImportScreenBufferInfoQNX*(sType: VkStructureType, pNext: pointer = nil, buffer: ptr screen_buffer): VkImportScreenBufferInfoQNX =
  result = VkImportScreenBufferInfoQNX(
    sType: sType,
    pNext: pNext,
    buffer: buffer,
  )

proc newVkScreenBufferPropertiesQNX*(sType: VkStructureType, pNext: pointer = nil, allocationSize: VkDeviceSize, memoryTypeBits: uint32): VkScreenBufferPropertiesQNX =
  result = VkScreenBufferPropertiesQNX(
    sType: sType,
    pNext: pNext,
    allocationSize: allocationSize,
    memoryTypeBits: memoryTypeBits,
  )

proc newVkScreenBufferFormatPropertiesQNX*(sType: VkStructureType, pNext: pointer = nil, format: VkFormat, externalFormat: uint64, screenUsage: uint64, formatFeatures: VkFormatFeatureFlags, samplerYcbcrConversionComponents: VkComponentMapping, suggestedYcbcrModel: VkSamplerYcbcrModelConversion, suggestedYcbcrRange: VkSamplerYcbcrRange, suggestedXChromaOffset: VkChromaLocation, suggestedYChromaOffset: VkChromaLocation): VkScreenBufferFormatPropertiesQNX =
  result = VkScreenBufferFormatPropertiesQNX(
    sType: sType,
    pNext: pNext,
    format: format,
    externalFormat: externalFormat,
    screenUsage: screenUsage,
    formatFeatures: formatFeatures,
    samplerYcbcrConversionComponents: samplerYcbcrConversionComponents,
    suggestedYcbcrModel: suggestedYcbcrModel,
    suggestedYcbcrRange: suggestedYcbcrRange,
    suggestedXChromaOffset: suggestedXChromaOffset,
    suggestedYChromaOffset: suggestedYChromaOffset,
  )

proc newVkExternalFormatQNX*(sType: VkStructureType, pNext: pointer = nil, externalFormat: uint64): VkExternalFormatQNX =
  result = VkExternalFormatQNX(
    sType: sType,
    pNext: pNext,
    externalFormat: externalFormat,
  )

proc newVkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX*(sType: VkStructureType, pNext: pointer = nil, screenBufferImport: VkBool32): VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX =
  result = VkPhysicalDeviceExternalMemoryScreenBufferFeaturesQNX(
    sType: sType,
    pNext: pNext,
    screenBufferImport: screenBufferImport,
  )

proc newVkPhysicalDeviceCooperativeMatrixFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, cooperativeMatrix: VkBool32, cooperativeMatrixRobustBufferAccess: VkBool32): VkPhysicalDeviceCooperativeMatrixFeaturesKHR =
  result = VkPhysicalDeviceCooperativeMatrixFeaturesKHR(
    sType: sType,
    pNext: pNext,
    cooperativeMatrix: cooperativeMatrix,
    cooperativeMatrixRobustBufferAccess: cooperativeMatrixRobustBufferAccess,
  )

proc newVkCooperativeMatrixPropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, MSize: uint32, NSize: uint32, KSize: uint32, AType: VkComponentTypeKHR, BType: VkComponentTypeKHR, CType: VkComponentTypeKHR, ResultType: VkComponentTypeKHR, saturatingAccumulation: VkBool32, scope: VkScopeKHR): VkCooperativeMatrixPropertiesKHR =
  result = VkCooperativeMatrixPropertiesKHR(
    sType: sType,
    pNext: pNext,
    MSize: MSize,
    NSize: NSize,
    KSize: KSize,
    AType: AType,
    BType: BType,
    CType: CType,
    ResultType: ResultType,
    saturatingAccumulation: saturatingAccumulation,
    scope: scope,
  )

proc newVkPhysicalDeviceCooperativeMatrixPropertiesKHR*(sType: VkStructureType, pNext: pointer = nil, cooperativeMatrixSupportedStages: VkShaderStageFlags): VkPhysicalDeviceCooperativeMatrixPropertiesKHR =
  result = VkPhysicalDeviceCooperativeMatrixPropertiesKHR(
    sType: sType,
    pNext: pNext,
    cooperativeMatrixSupportedStages: cooperativeMatrixSupportedStages,
  )

proc newVkPhysicalDeviceShaderEnqueuePropertiesAMDX*(sType: VkStructureType, pNext: pointer = nil, maxExecutionGraphDepth: uint32, maxExecutionGraphShaderOutputNodes: uint32, maxExecutionGraphShaderPayloadSize: uint32, maxExecutionGraphShaderPayloadCount: uint32, executionGraphDispatchAddressAlignment: uint32): VkPhysicalDeviceShaderEnqueuePropertiesAMDX =
  result = VkPhysicalDeviceShaderEnqueuePropertiesAMDX(
    sType: sType,
    pNext: pNext,
    maxExecutionGraphDepth: maxExecutionGraphDepth,
    maxExecutionGraphShaderOutputNodes: maxExecutionGraphShaderOutputNodes,
    maxExecutionGraphShaderPayloadSize: maxExecutionGraphShaderPayloadSize,
    maxExecutionGraphShaderPayloadCount: maxExecutionGraphShaderPayloadCount,
    executionGraphDispatchAddressAlignment: executionGraphDispatchAddressAlignment,
  )

proc newVkPhysicalDeviceShaderEnqueueFeaturesAMDX*(sType: VkStructureType, pNext: pointer = nil, shaderEnqueue: VkBool32): VkPhysicalDeviceShaderEnqueueFeaturesAMDX =
  result = VkPhysicalDeviceShaderEnqueueFeaturesAMDX(
    sType: sType,
    pNext: pNext,
    shaderEnqueue: shaderEnqueue,
  )

proc newVkExecutionGraphPipelineCreateInfoAMDX*(sType: VkStructureType, pNext: pointer = nil, flags: VkPipelineCreateFlags = 0.VkPipelineCreateFlags, stageCount: uint32, pStages: ptr VkPipelineShaderStageCreateInfo, pLibraryInfo: ptr VkPipelineLibraryCreateInfoKHR, layout: VkPipelineLayout, basePipelineHandle: VkPipeline, basePipelineIndex: int32): VkExecutionGraphPipelineCreateInfoAMDX =
  result = VkExecutionGraphPipelineCreateInfoAMDX(
    sType: sType,
    pNext: pNext,
    flags: flags,
    stageCount: stageCount,
    pStages: pStages,
    pLibraryInfo: pLibraryInfo,
    layout: layout,
    basePipelineHandle: basePipelineHandle,
    basePipelineIndex: basePipelineIndex,
  )

proc newVkPipelineShaderStageNodeCreateInfoAMDX*(sType: VkStructureType, pNext: pointer = nil, pName: cstring, index: uint32): VkPipelineShaderStageNodeCreateInfoAMDX =
  result = VkPipelineShaderStageNodeCreateInfoAMDX(
    sType: sType,
    pNext: pNext,
    pName: pName,
    index: index,
  )

proc newVkExecutionGraphPipelineScratchSizeAMDX*(sType: VkStructureType, pNext: pointer = nil, size: VkDeviceSize): VkExecutionGraphPipelineScratchSizeAMDX =
  result = VkExecutionGraphPipelineScratchSizeAMDX(
    sType: sType,
    pNext: pNext,
    size: size,
  )

proc newVkDispatchGraphInfoAMDX*(nodeIndex: uint32, payloadCount: uint32, payloads: VkDeviceOrHostAddressConstAMDX, payloadStride: uint64): VkDispatchGraphInfoAMDX =
  result = VkDispatchGraphInfoAMDX(
    nodeIndex: nodeIndex,
    payloadCount: payloadCount,
    payloads: payloads,
    payloadStride: payloadStride,
  )

proc newVkDispatchGraphCountInfoAMDX*(count: uint32, infos: VkDeviceOrHostAddressConstAMDX, stride: uint64): VkDispatchGraphCountInfoAMDX =
  result = VkDispatchGraphCountInfoAMDX(
    count: count,
    infos: infos,
    stride: stride,
  )

proc newVkBindMemoryStatusKHR*(sType: VkStructureType, pNext: pointer = nil, pResult: ptr VkResult): VkBindMemoryStatusKHR =
  result = VkBindMemoryStatusKHR(
    sType: sType,
    pNext: pNext,
    pResult: pResult,
  )

proc newVkBindDescriptorSetsInfoKHR*(sType: VkStructureType, pNext: pointer = nil, stageFlags: VkShaderStageFlags, layout: VkPipelineLayout, firstSet: uint32, descriptorSetCount: uint32, pDescriptorSets: ptr VkDescriptorSet, dynamicOffsetCount: uint32, pDynamicOffsets: ptr uint32): VkBindDescriptorSetsInfoKHR =
  result = VkBindDescriptorSetsInfoKHR(
    sType: sType,
    pNext: pNext,
    stageFlags: stageFlags,
    layout: layout,
    firstSet: firstSet,
    descriptorSetCount: descriptorSetCount,
    pDescriptorSets: pDescriptorSets,
    dynamicOffsetCount: dynamicOffsetCount,
    pDynamicOffsets: pDynamicOffsets,
  )

proc newVkPushConstantsInfoKHR*(sType: VkStructureType, pNext: pointer = nil, layout: VkPipelineLayout, stageFlags: VkShaderStageFlags, offset: uint32, size: uint32, pValues: pointer = nil): VkPushConstantsInfoKHR =
  result = VkPushConstantsInfoKHR(
    sType: sType,
    pNext: pNext,
    layout: layout,
    stageFlags: stageFlags,
    offset: offset,
    size: size,
    pValues: pValues,
  )

proc newVkPushDescriptorSetInfoKHR*(sType: VkStructureType, pNext: pointer = nil, stageFlags: VkShaderStageFlags, layout: VkPipelineLayout, set: uint32, descriptorWriteCount: uint32, pDescriptorWrites: ptr VkWriteDescriptorSet): VkPushDescriptorSetInfoKHR =
  result = VkPushDescriptorSetInfoKHR(
    sType: sType,
    pNext: pNext,
    stageFlags: stageFlags,
    layout: layout,
    set: set,
    descriptorWriteCount: descriptorWriteCount,
    pDescriptorWrites: pDescriptorWrites,
  )

proc newVkPushDescriptorSetWithTemplateInfoKHR*(sType: VkStructureType, pNext: pointer = nil, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: uint32, pData: pointer = nil): VkPushDescriptorSetWithTemplateInfoKHR =
  result = VkPushDescriptorSetWithTemplateInfoKHR(
    sType: sType,
    pNext: pNext,
    descriptorUpdateTemplate: descriptorUpdateTemplate,
    layout: layout,
    set: set,
    pData: pData,
  )

proc newVkSetDescriptorBufferOffsetsInfoEXT*(sType: VkStructureType, pNext: pointer = nil, stageFlags: VkShaderStageFlags, layout: VkPipelineLayout, firstSet: uint32, setCount: uint32, pBufferIndices: ptr uint32, pOffsets: ptr VkDeviceSize): VkSetDescriptorBufferOffsetsInfoEXT =
  result = VkSetDescriptorBufferOffsetsInfoEXT(
    sType: sType,
    pNext: pNext,
    stageFlags: stageFlags,
    layout: layout,
    firstSet: firstSet,
    setCount: setCount,
    pBufferIndices: pBufferIndices,
    pOffsets: pOffsets,
  )

proc newVkBindDescriptorBufferEmbeddedSamplersInfoEXT*(sType: VkStructureType, pNext: pointer = nil, stageFlags: VkShaderStageFlags, layout: VkPipelineLayout, set: uint32): VkBindDescriptorBufferEmbeddedSamplersInfoEXT =
  result = VkBindDescriptorBufferEmbeddedSamplersInfoEXT(
    sType: sType,
    pNext: pNext,
    stageFlags: stageFlags,
    layout: layout,
    set: set,
  )

proc newVkPhysicalDeviceCubicClampFeaturesQCOM*(sType: VkStructureType, pNext: pointer = nil, cubicRangeClamp: VkBool32): VkPhysicalDeviceCubicClampFeaturesQCOM =
  result = VkPhysicalDeviceCubicClampFeaturesQCOM(
    sType: sType,
    pNext: pNext,
    cubicRangeClamp: cubicRangeClamp,
  )

proc newVkPhysicalDeviceYcbcrDegammaFeaturesQCOM*(sType: VkStructureType, pNext: pointer = nil, ycbcrDegamma: VkBool32): VkPhysicalDeviceYcbcrDegammaFeaturesQCOM =
  result = VkPhysicalDeviceYcbcrDegammaFeaturesQCOM(
    sType: sType,
    pNext: pNext,
    ycbcrDegamma: ycbcrDegamma,
  )

proc newVkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM*(sType: VkStructureType, pNext: pointer = nil, enableYDegamma: VkBool32, enableCbCrDegamma: VkBool32): VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM =
  result = VkSamplerYcbcrConversionYcbcrDegammaCreateInfoQCOM(
    sType: sType,
    pNext: pNext,
    enableYDegamma: enableYDegamma,
    enableCbCrDegamma: enableCbCrDegamma,
  )

proc newVkPhysicalDeviceCubicWeightsFeaturesQCOM*(sType: VkStructureType, pNext: pointer = nil, selectableCubicWeights: VkBool32): VkPhysicalDeviceCubicWeightsFeaturesQCOM =
  result = VkPhysicalDeviceCubicWeightsFeaturesQCOM(
    sType: sType,
    pNext: pNext,
    selectableCubicWeights: selectableCubicWeights,
  )

proc newVkSamplerCubicWeightsCreateInfoQCOM*(sType: VkStructureType, pNext: pointer = nil, cubicWeights: VkCubicFilterWeightsQCOM): VkSamplerCubicWeightsCreateInfoQCOM =
  result = VkSamplerCubicWeightsCreateInfoQCOM(
    sType: sType,
    pNext: pNext,
    cubicWeights: cubicWeights,
  )

proc newVkBlitImageCubicWeightsInfoQCOM*(sType: VkStructureType, pNext: pointer = nil, cubicWeights: VkCubicFilterWeightsQCOM): VkBlitImageCubicWeightsInfoQCOM =
  result = VkBlitImageCubicWeightsInfoQCOM(
    sType: sType,
    pNext: pNext,
    cubicWeights: cubicWeights,
  )

proc newVkPhysicalDeviceImageProcessing2FeaturesQCOM*(sType: VkStructureType, pNext: pointer = nil, textureBlockMatch2: VkBool32): VkPhysicalDeviceImageProcessing2FeaturesQCOM =
  result = VkPhysicalDeviceImageProcessing2FeaturesQCOM(
    sType: sType,
    pNext: pNext,
    textureBlockMatch2: textureBlockMatch2,
  )

proc newVkPhysicalDeviceImageProcessing2PropertiesQCOM*(sType: VkStructureType, pNext: pointer = nil, maxBlockMatchWindow: VkExtent2D): VkPhysicalDeviceImageProcessing2PropertiesQCOM =
  result = VkPhysicalDeviceImageProcessing2PropertiesQCOM(
    sType: sType,
    pNext: pNext,
    maxBlockMatchWindow: maxBlockMatchWindow,
  )

proc newVkSamplerBlockMatchWindowCreateInfoQCOM*(sType: VkStructureType, pNext: pointer = nil, windowExtent: VkExtent2D, windowCompareMode: VkBlockMatchWindowCompareModeQCOM): VkSamplerBlockMatchWindowCreateInfoQCOM =
  result = VkSamplerBlockMatchWindowCreateInfoQCOM(
    sType: sType,
    pNext: pNext,
    windowExtent: windowExtent,
    windowCompareMode: windowCompareMode,
  )

proc newVkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, descriptorPoolOverallocation: VkBool32): VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV =
  result = VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV(
    sType: sType,
    pNext: pNext,
    descriptorPoolOverallocation: descriptorPoolOverallocation,
  )

proc newVkPhysicalDeviceLayeredDriverPropertiesMSFT*(sType: VkStructureType, pNext: pointer = nil, underlyingAPI: VkLayeredDriverUnderlyingApiMSFT): VkPhysicalDeviceLayeredDriverPropertiesMSFT =
  result = VkPhysicalDeviceLayeredDriverPropertiesMSFT(
    sType: sType,
    pNext: pNext,
    underlyingAPI: underlyingAPI,
  )

proc newVkPhysicalDevicePerStageDescriptorSetFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, perStageDescriptorSet: VkBool32, dynamicPipelineLayout: VkBool32): VkPhysicalDevicePerStageDescriptorSetFeaturesNV =
  result = VkPhysicalDevicePerStageDescriptorSetFeaturesNV(
    sType: sType,
    pNext: pNext,
    perStageDescriptorSet: perStageDescriptorSet,
    dynamicPipelineLayout: dynamicPipelineLayout,
  )

proc newVkPhysicalDeviceExternalFormatResolveFeaturesANDROID*(sType: VkStructureType, pNext: pointer = nil, externalFormatResolve: VkBool32): VkPhysicalDeviceExternalFormatResolveFeaturesANDROID =
  result = VkPhysicalDeviceExternalFormatResolveFeaturesANDROID(
    sType: sType,
    pNext: pNext,
    externalFormatResolve: externalFormatResolve,
  )

proc newVkPhysicalDeviceExternalFormatResolvePropertiesANDROID*(sType: VkStructureType, pNext: pointer = nil, nullColorAttachmentWithExternalFormatResolve: VkBool32, externalFormatResolveChromaOffsetX: VkChromaLocation, externalFormatResolveChromaOffsetY: VkChromaLocation): VkPhysicalDeviceExternalFormatResolvePropertiesANDROID =
  result = VkPhysicalDeviceExternalFormatResolvePropertiesANDROID(
    sType: sType,
    pNext: pNext,
    nullColorAttachmentWithExternalFormatResolve: nullColorAttachmentWithExternalFormatResolve,
    externalFormatResolveChromaOffsetX: externalFormatResolveChromaOffsetX,
    externalFormatResolveChromaOffsetY: externalFormatResolveChromaOffsetY,
  )

proc newVkAndroidHardwareBufferFormatResolvePropertiesANDROID*(sType: VkStructureType, pNext: pointer = nil, colorAttachmentFormat: VkFormat): VkAndroidHardwareBufferFormatResolvePropertiesANDROID =
  result = VkAndroidHardwareBufferFormatResolvePropertiesANDROID(
    sType: sType,
    pNext: pNext,
    colorAttachmentFormat: colorAttachmentFormat,
  )

proc newVkLatencySleepModeInfoNV*(sType: VkStructureType, pNext: pointer = nil, lowLatencyMode: VkBool32, lowLatencyBoost: VkBool32, minimumIntervalUs: uint32): VkLatencySleepModeInfoNV =
  result = VkLatencySleepModeInfoNV(
    sType: sType,
    pNext: pNext,
    lowLatencyMode: lowLatencyMode,
    lowLatencyBoost: lowLatencyBoost,
    minimumIntervalUs: minimumIntervalUs,
  )

proc newVkLatencySleepInfoNV*(sType: VkStructureType, pNext: pointer = nil, signalSemaphore: VkSemaphore, value: uint64): VkLatencySleepInfoNV =
  result = VkLatencySleepInfoNV(
    sType: sType,
    pNext: pNext,
    signalSemaphore: signalSemaphore,
    value: value,
  )

proc newVkSetLatencyMarkerInfoNV*(sType: VkStructureType, pNext: pointer = nil, presentID: uint64, marker: VkLatencyMarkerNV): VkSetLatencyMarkerInfoNV =
  result = VkSetLatencyMarkerInfoNV(
    sType: sType,
    pNext: pNext,
    presentID: presentID,
    marker: marker,
  )

proc newVkGetLatencyMarkerInfoNV*(sType: VkStructureType, pNext: pointer = nil, timingCount: uint32, pTimings: ptr VkLatencyTimingsFrameReportNV): VkGetLatencyMarkerInfoNV =
  result = VkGetLatencyMarkerInfoNV(
    sType: sType,
    pNext: pNext,
    timingCount: timingCount,
    pTimings: pTimings,
  )

proc newVkLatencyTimingsFrameReportNV*(sType: VkStructureType, pNext: pointer = nil, presentID: uint64, inputSampleTimeUs: uint64, simStartTimeUs: uint64, simEndTimeUs: uint64, renderSubmitStartTimeUs: uint64, renderSubmitEndTimeUs: uint64, presentStartTimeUs: uint64, presentEndTimeUs: uint64, driverStartTimeUs: uint64, driverEndTimeUs: uint64, osRenderQueueStartTimeUs: uint64, osRenderQueueEndTimeUs: uint64, gpuRenderStartTimeUs: uint64, gpuRenderEndTimeUs: uint64): VkLatencyTimingsFrameReportNV =
  result = VkLatencyTimingsFrameReportNV(
    sType: sType,
    pNext: pNext,
    presentID: presentID,
    inputSampleTimeUs: inputSampleTimeUs,
    simStartTimeUs: simStartTimeUs,
    simEndTimeUs: simEndTimeUs,
    renderSubmitStartTimeUs: renderSubmitStartTimeUs,
    renderSubmitEndTimeUs: renderSubmitEndTimeUs,
    presentStartTimeUs: presentStartTimeUs,
    presentEndTimeUs: presentEndTimeUs,
    driverStartTimeUs: driverStartTimeUs,
    driverEndTimeUs: driverEndTimeUs,
    osRenderQueueStartTimeUs: osRenderQueueStartTimeUs,
    osRenderQueueEndTimeUs: osRenderQueueEndTimeUs,
    gpuRenderStartTimeUs: gpuRenderStartTimeUs,
    gpuRenderEndTimeUs: gpuRenderEndTimeUs,
  )

proc newVkOutOfBandQueueTypeInfoNV*(sType: VkStructureType, pNext: pointer = nil, queueType: VkOutOfBandQueueTypeNV): VkOutOfBandQueueTypeInfoNV =
  result = VkOutOfBandQueueTypeInfoNV(
    sType: sType,
    pNext: pNext,
    queueType: queueType,
  )

proc newVkLatencySubmissionPresentIdNV*(sType: VkStructureType, pNext: pointer = nil, presentID: uint64): VkLatencySubmissionPresentIdNV =
  result = VkLatencySubmissionPresentIdNV(
    sType: sType,
    pNext: pNext,
    presentID: presentID,
  )

proc newVkSwapchainLatencyCreateInfoNV*(sType: VkStructureType, pNext: pointer = nil, latencyModeEnable: VkBool32): VkSwapchainLatencyCreateInfoNV =
  result = VkSwapchainLatencyCreateInfoNV(
    sType: sType,
    pNext: pNext,
    latencyModeEnable: latencyModeEnable,
  )

proc newVkLatencySurfaceCapabilitiesNV*(sType: VkStructureType, pNext: pointer = nil, presentModeCount: uint32, pPresentModes: ptr VkPresentModeKHR): VkLatencySurfaceCapabilitiesNV =
  result = VkLatencySurfaceCapabilitiesNV(
    sType: sType,
    pNext: pNext,
    presentModeCount: presentModeCount,
    pPresentModes: pPresentModes,
  )

proc newVkPhysicalDeviceCudaKernelLaunchFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, cudaKernelLaunchFeatures: VkBool32): VkPhysicalDeviceCudaKernelLaunchFeaturesNV =
  result = VkPhysicalDeviceCudaKernelLaunchFeaturesNV(
    sType: sType,
    pNext: pNext,
    cudaKernelLaunchFeatures: cudaKernelLaunchFeatures,
  )

proc newVkPhysicalDeviceCudaKernelLaunchPropertiesNV*(sType: VkStructureType, pNext: pointer = nil, computeCapabilityMinor: uint32, computeCapabilityMajor: uint32): VkPhysicalDeviceCudaKernelLaunchPropertiesNV =
  result = VkPhysicalDeviceCudaKernelLaunchPropertiesNV(
    sType: sType,
    pNext: pNext,
    computeCapabilityMinor: computeCapabilityMinor,
    computeCapabilityMajor: computeCapabilityMajor,
  )

proc newVkDeviceQueueShaderCoreControlCreateInfoARM*(sType: VkStructureType, pNext: pointer = nil, shaderCoreCount: uint32): VkDeviceQueueShaderCoreControlCreateInfoARM =
  result = VkDeviceQueueShaderCoreControlCreateInfoARM(
    sType: sType,
    pNext: pNext,
    shaderCoreCount: shaderCoreCount,
  )

proc newVkPhysicalDeviceSchedulingControlsFeaturesARM*(sType: VkStructureType, pNext: pointer = nil, schedulingControls: VkBool32): VkPhysicalDeviceSchedulingControlsFeaturesARM =
  result = VkPhysicalDeviceSchedulingControlsFeaturesARM(
    sType: sType,
    pNext: pNext,
    schedulingControls: schedulingControls,
  )

proc newVkPhysicalDeviceSchedulingControlsPropertiesARM*(sType: VkStructureType, pNext: pointer = nil, schedulingControlsFlags: VkPhysicalDeviceSchedulingControlsFlagsARM): VkPhysicalDeviceSchedulingControlsPropertiesARM =
  result = VkPhysicalDeviceSchedulingControlsPropertiesARM(
    sType: sType,
    pNext: pNext,
    schedulingControlsFlags: schedulingControlsFlags,
  )

proc newVkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG*(sType: VkStructureType, pNext: pointer = nil, relaxedLineRasterization: VkBool32): VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG =
  result = VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG(
    sType: sType,
    pNext: pNext,
    relaxedLineRasterization: relaxedLineRasterization,
  )

proc newVkPhysicalDeviceRenderPassStripedFeaturesARM*(sType: VkStructureType, pNext: pointer = nil, renderPassStriped: VkBool32): VkPhysicalDeviceRenderPassStripedFeaturesARM =
  result = VkPhysicalDeviceRenderPassStripedFeaturesARM(
    sType: sType,
    pNext: pNext,
    renderPassStriped: renderPassStriped,
  )

proc newVkPhysicalDeviceRenderPassStripedPropertiesARM*(sType: VkStructureType, pNext: pointer = nil, renderPassStripeGranularity: VkExtent2D, maxRenderPassStripes: uint32): VkPhysicalDeviceRenderPassStripedPropertiesARM =
  result = VkPhysicalDeviceRenderPassStripedPropertiesARM(
    sType: sType,
    pNext: pNext,
    renderPassStripeGranularity: renderPassStripeGranularity,
    maxRenderPassStripes: maxRenderPassStripes,
  )

proc newVkRenderPassStripeInfoARM*(sType: VkStructureType, pNext: pointer = nil, stripeArea: VkRect2D): VkRenderPassStripeInfoARM =
  result = VkRenderPassStripeInfoARM(
    sType: sType,
    pNext: pNext,
    stripeArea: stripeArea,
  )

proc newVkRenderPassStripeBeginInfoARM*(sType: VkStructureType, pNext: pointer = nil, stripeInfoCount: uint32, pStripeInfos: ptr VkRenderPassStripeInfoARM): VkRenderPassStripeBeginInfoARM =
  result = VkRenderPassStripeBeginInfoARM(
    sType: sType,
    pNext: pNext,
    stripeInfoCount: stripeInfoCount,
    pStripeInfos: pStripeInfos,
  )

proc newVkRenderPassStripeSubmitInfoARM*(sType: VkStructureType, pNext: pointer = nil, stripeSemaphoreInfoCount: uint32, pStripeSemaphoreInfos: ptr VkSemaphoreSubmitInfo): VkRenderPassStripeSubmitInfoARM =
  result = VkRenderPassStripeSubmitInfoARM(
    sType: sType,
    pNext: pNext,
    stripeSemaphoreInfoCount: stripeSemaphoreInfoCount,
    pStripeSemaphoreInfos: pStripeSemaphoreInfos,
  )

proc newVkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, shaderMaximalReconvergence: VkBool32): VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR =
  result = VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR(
    sType: sType,
    pNext: pNext,
    shaderMaximalReconvergence: shaderMaximalReconvergence,
  )

proc newVkPhysicalDeviceShaderSubgroupRotateFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, shaderSubgroupRotate: VkBool32, shaderSubgroupRotateClustered: VkBool32): VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR =
  result = VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR(
    sType: sType,
    pNext: pNext,
    shaderSubgroupRotate: shaderSubgroupRotate,
    shaderSubgroupRotateClustered: shaderSubgroupRotateClustered,
  )

proc newVkPhysicalDeviceShaderExpectAssumeFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, shaderExpectAssume: VkBool32): VkPhysicalDeviceShaderExpectAssumeFeaturesKHR =
  result = VkPhysicalDeviceShaderExpectAssumeFeaturesKHR(
    sType: sType,
    pNext: pNext,
    shaderExpectAssume: shaderExpectAssume,
  )

proc newVkPhysicalDeviceShaderFloatControls2FeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, shaderFloatControls2: VkBool32): VkPhysicalDeviceShaderFloatControls2FeaturesKHR =
  result = VkPhysicalDeviceShaderFloatControls2FeaturesKHR(
    sType: sType,
    pNext: pNext,
    shaderFloatControls2: shaderFloatControls2,
  )

proc newVkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, dynamicRenderingLocalRead: VkBool32): VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR =
  result = VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR(
    sType: sType,
    pNext: pNext,
    dynamicRenderingLocalRead: dynamicRenderingLocalRead,
  )

proc newVkRenderingAttachmentLocationInfoKHR*(sType: VkStructureType, pNext: pointer = nil, colorAttachmentCount: uint32, pColorAttachmentLocations: ptr uint32): VkRenderingAttachmentLocationInfoKHR =
  result = VkRenderingAttachmentLocationInfoKHR(
    sType: sType,
    pNext: pNext,
    colorAttachmentCount: colorAttachmentCount,
    pColorAttachmentLocations: pColorAttachmentLocations,
  )

proc newVkRenderingInputAttachmentIndexInfoKHR*(sType: VkStructureType, pNext: pointer = nil, colorAttachmentCount: uint32, pColorAttachmentInputIndices: ptr uint32, pDepthInputAttachmentIndex: ptr uint32, pStencilInputAttachmentIndex: ptr uint32): VkRenderingInputAttachmentIndexInfoKHR =
  result = VkRenderingInputAttachmentIndexInfoKHR(
    sType: sType,
    pNext: pNext,
    colorAttachmentCount: colorAttachmentCount,
    pColorAttachmentInputIndices: pColorAttachmentInputIndices,
    pDepthInputAttachmentIndex: pDepthInputAttachmentIndex,
    pStencilInputAttachmentIndex: pStencilInputAttachmentIndex,
  )

proc newVkPhysicalDeviceShaderQuadControlFeaturesKHR*(sType: VkStructureType, pNext: pointer = nil, shaderQuadControl: VkBool32): VkPhysicalDeviceShaderQuadControlFeaturesKHR =
  result = VkPhysicalDeviceShaderQuadControlFeaturesKHR(
    sType: sType,
    pNext: pNext,
    shaderQuadControl: shaderQuadControl,
  )

proc newVkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, shaderFloat16VectorAtomics: VkBool32): VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV =
  result = VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV(
    sType: sType,
    pNext: pNext,
    shaderFloat16VectorAtomics: shaderFloat16VectorAtomics,
  )

proc newVkPhysicalDeviceMapMemoryPlacedFeaturesEXT*(sType: VkStructureType, pNext: pointer = nil, memoryMapPlaced: VkBool32, memoryMapRangePlaced: VkBool32, memoryUnmapReserve: VkBool32): VkPhysicalDeviceMapMemoryPlacedFeaturesEXT =
  result = VkPhysicalDeviceMapMemoryPlacedFeaturesEXT(
    sType: sType,
    pNext: pNext,
    memoryMapPlaced: memoryMapPlaced,
    memoryMapRangePlaced: memoryMapRangePlaced,
    memoryUnmapReserve: memoryUnmapReserve,
  )

proc newVkPhysicalDeviceMapMemoryPlacedPropertiesEXT*(sType: VkStructureType, pNext: pointer = nil, minPlacedMemoryMapAlignment: VkDeviceSize): VkPhysicalDeviceMapMemoryPlacedPropertiesEXT =
  result = VkPhysicalDeviceMapMemoryPlacedPropertiesEXT(
    sType: sType,
    pNext: pNext,
    minPlacedMemoryMapAlignment: minPlacedMemoryMapAlignment,
  )

proc newVkMemoryMapPlacedInfoEXT*(sType: VkStructureType, pNext: pointer = nil, pPlacedAddress: pointer = nil): VkMemoryMapPlacedInfoEXT =
  result = VkMemoryMapPlacedInfoEXT(
    sType: sType,
    pNext: pNext,
    pPlacedAddress: pPlacedAddress,
  )

proc newVkPhysicalDeviceRawAccessChainsFeaturesNV*(sType: VkStructureType, pNext: pointer = nil, shaderRawAccessChains: VkBool32): VkPhysicalDeviceRawAccessChainsFeaturesNV =
  result = VkPhysicalDeviceRawAccessChainsFeaturesNV(
    sType: sType,
    pNext: pNext,
    shaderRawAccessChains: shaderRawAccessChains,
  )

# Procs
var
  vkDestroyInstance*: proc (instance: VkInstance, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkEnumeratePhysicalDevices*: proc (instance: VkInstance, pPhysicalDeviceCount: ptr uint32, pPhysicalDevices: ptr VkPhysicalDevice): VkResult {.stdcall.}
  vkGetDeviceProcAddr*: proc (device: VkDevice, pName: cstring): PFN_vkVoidFunction {.stdcall.}
  vkGetInstanceProcAddr*: proc (instance: VkInstance, pName: cstring): PFN_vkVoidFunction {.stdcall.}
  vkGetPhysicalDeviceProperties*: proc (physicalDevice: VkPhysicalDevice, pProperties: ptr VkPhysicalDeviceProperties) {.stdcall.}
  vkGetPhysicalDeviceQueueFamilyProperties*: proc (physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: ptr uint32, pQueueFamilyProperties: ptr VkQueueFamilyProperties) {.stdcall.}
  vkGetPhysicalDeviceMemoryProperties*: proc (physicalDevice: VkPhysicalDevice, pMemoryProperties: ptr VkPhysicalDeviceMemoryProperties) {.stdcall.}
  vkGetPhysicalDeviceFeatures*: proc (physicalDevice: VkPhysicalDevice, pFeatures: ptr VkPhysicalDeviceFeatures) {.stdcall.}
  vkGetPhysicalDeviceFormatProperties*: proc (physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: ptr VkFormatProperties) {.stdcall.}
  vkGetPhysicalDeviceImageFormatProperties*: proc (physicalDevice: VkPhysicalDevice, format: VkFormat, `type`: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, pImageFormatProperties: ptr VkImageFormatProperties): VkResult {.stdcall.}
  vkCreateDevice*: proc (physicalDevice: VkPhysicalDevice, pCreateInfo: ptr VkDeviceCreateInfo, pAllocator: ptr VkAllocationCallbacks, pDevice: ptr VkDevice): VkResult {.stdcall.}
  vkDestroyDevice*: proc (device: VkDevice, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkEnumerateDeviceLayerProperties*: proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkLayerProperties): VkResult {.stdcall.}
  vkEnumerateDeviceExtensionProperties*: proc (physicalDevice: VkPhysicalDevice, pLayerName: cstring, pPropertyCount: ptr uint32, pProperties: ptr VkExtensionProperties): VkResult {.stdcall.}
  vkGetDeviceQueue*: proc (device: VkDevice, queueFamilyIndex: uint32, queueIndex: uint32, pQueue: ptr VkQueue) {.stdcall.}
  vkQueueSubmit*: proc (queue: VkQueue, submitCount: uint32, pSubmits: ptr VkSubmitInfo, fence: VkFence): VkResult {.stdcall.}
  vkQueueWaitIdle*: proc (queue: VkQueue): VkResult {.stdcall.}
  vkDeviceWaitIdle*: proc (device: VkDevice): VkResult {.stdcall.}
  vkAllocateMemory*: proc (device: VkDevice, pAllocateInfo: ptr VkMemoryAllocateInfo, pAllocator: ptr VkAllocationCallbacks, pMemory: ptr VkDeviceMemory): VkResult {.stdcall.}
  vkFreeMemory*: proc (device: VkDevice, memory: VkDeviceMemory, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkMapMemory*: proc (device: VkDevice, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize, flags: VkMemoryMapFlags, ppData: ptr pointer): VkResult {.stdcall.}
  vkUnmapMemory*: proc (device: VkDevice, memory: VkDeviceMemory) {.stdcall.}
  vkFlushMappedMemoryRanges*: proc (device: VkDevice, memoryRangeCount: uint32, pMemoryRanges: ptr VkMappedMemoryRange): VkResult {.stdcall.}
  vkInvalidateMappedMemoryRanges*: proc (device: VkDevice, memoryRangeCount: uint32, pMemoryRanges: ptr VkMappedMemoryRange): VkResult {.stdcall.}
  vkGetDeviceMemoryCommitment*: proc (device: VkDevice, memory: VkDeviceMemory, pCommittedMemoryInBytes: ptr VkDeviceSize) {.stdcall.}
  vkGetBufferMemoryRequirements*: proc (device: VkDevice, buffer: VkBuffer, pMemoryRequirements: ptr VkMemoryRequirements) {.stdcall.}
  vkBindBufferMemory*: proc (device: VkDevice, buffer: VkBuffer, memory: VkDeviceMemory, memoryOffset: VkDeviceSize): VkResult {.stdcall.}
  vkGetImageMemoryRequirements*: proc (device: VkDevice, image: VkImage, pMemoryRequirements: ptr VkMemoryRequirements) {.stdcall.}
  vkBindImageMemory*: proc (device: VkDevice, image: VkImage, memory: VkDeviceMemory, memoryOffset: VkDeviceSize): VkResult {.stdcall.}
  vkGetImageSparseMemoryRequirements*: proc (device: VkDevice, image: VkImage, pSparseMemoryRequirementCount: ptr uint32, pSparseMemoryRequirements: ptr VkSparseImageMemoryRequirements) {.stdcall.}
  vkGetPhysicalDeviceSparseImageFormatProperties*: proc (physicalDevice: VkPhysicalDevice, format: VkFormat, `type`: VkImageType, samples: VkSampleCountFlagBits, usage: VkImageUsageFlags, tiling: VkImageTiling, pPropertyCount: ptr uint32, pProperties: ptr VkSparseImageFormatProperties) {.stdcall.}
  vkQueueBindSparse*: proc (queue: VkQueue, bindInfoCount: uint32, pBindInfo: ptr VkBindSparseInfo, fence: VkFence): VkResult {.stdcall.}
  vkCreateFence*: proc (device: VkDevice, pCreateInfo: ptr VkFenceCreateInfo, pAllocator: ptr VkAllocationCallbacks, pFence: ptr VkFence): VkResult {.stdcall.}
  vkDestroyFence*: proc (device: VkDevice, fence: VkFence, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkResetFences*: proc (device: VkDevice, fenceCount: uint32, pFences: ptr VkFence): VkResult {.stdcall.}
  vkGetFenceStatus*: proc (device: VkDevice, fence: VkFence): VkResult {.stdcall.}
  vkWaitForFences*: proc (device: VkDevice, fenceCount: uint32, pFences: ptr VkFence, waitAll: VkBool32, timeout: uint64): VkResult {.stdcall.}
  vkCreateSemaphore*: proc (device: VkDevice, pCreateInfo: ptr VkSemaphoreCreateInfo, pAllocator: ptr VkAllocationCallbacks, pSemaphore: ptr VkSemaphore): VkResult {.stdcall.}
  vkDestroySemaphore*: proc (device: VkDevice, semaphore: VkSemaphore, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkCreateEvent*: proc (device: VkDevice, pCreateInfo: ptr VkEventCreateInfo, pAllocator: ptr VkAllocationCallbacks, pEvent: ptr VkEvent): VkResult {.stdcall.}
  vkDestroyEvent*: proc (device: VkDevice, event: VkEvent, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkGetEventStatus*: proc (device: VkDevice, event: VkEvent): VkResult {.stdcall.}
  vkSetEvent*: proc (device: VkDevice, event: VkEvent): VkResult {.stdcall.}
  vkResetEvent*: proc (device: VkDevice, event: VkEvent): VkResult {.stdcall.}
  vkCreateQueryPool*: proc (device: VkDevice, pCreateInfo: ptr VkQueryPoolCreateInfo, pAllocator: ptr VkAllocationCallbacks, pQueryPool: ptr VkQueryPool): VkResult {.stdcall.}
  vkDestroyQueryPool*: proc (device: VkDevice, queryPool: VkQueryPool, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkGetQueryPoolResults*: proc (device: VkDevice, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32, dataSize: uint, pData: pointer, stride: VkDeviceSize, flags: VkQueryResultFlags): VkResult {.stdcall.}
  vkResetQueryPool*: proc (device: VkDevice, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32) {.stdcall.}
  vkCreateBuffer*: proc (device: VkDevice, pCreateInfo: ptr VkBufferCreateInfo, pAllocator: ptr VkAllocationCallbacks, pBuffer: ptr VkBuffer): VkResult {.stdcall.}
  vkDestroyBuffer*: proc (device: VkDevice, buffer: VkBuffer, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkCreateBufferView*: proc (device: VkDevice, pCreateInfo: ptr VkBufferViewCreateInfo, pAllocator: ptr VkAllocationCallbacks, pView: ptr VkBufferView): VkResult {.stdcall.}
  vkDestroyBufferView*: proc (device: VkDevice, bufferView: VkBufferView, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkCreateImage*: proc (device: VkDevice, pCreateInfo: ptr VkImageCreateInfo, pAllocator: ptr VkAllocationCallbacks, pImage: ptr VkImage): VkResult {.stdcall.}
  vkDestroyImage*: proc (device: VkDevice, image: VkImage, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkGetImageSubresourceLayout*: proc (device: VkDevice, image: VkImage, pSubresource: ptr VkImageSubresource, pLayout: ptr VkSubresourceLayout) {.stdcall.}
  vkCreateImageView*: proc (device: VkDevice, pCreateInfo: ptr VkImageViewCreateInfo, pAllocator: ptr VkAllocationCallbacks, pView: ptr VkImageView): VkResult {.stdcall.}
  vkDestroyImageView*: proc (device: VkDevice, imageView: VkImageView, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkCreateShaderModule*: proc (device: VkDevice, pCreateInfo: ptr VkShaderModuleCreateInfo, pAllocator: ptr VkAllocationCallbacks, pShaderModule: ptr VkShaderModule): VkResult {.stdcall.}
  vkDestroyShaderModule*: proc (device: VkDevice, shaderModule: VkShaderModule, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkCreatePipelineCache*: proc (device: VkDevice, pCreateInfo: ptr VkPipelineCacheCreateInfo, pAllocator: ptr VkAllocationCallbacks, pPipelineCache: ptr VkPipelineCache): VkResult {.stdcall.}
  vkDestroyPipelineCache*: proc (device: VkDevice, pipelineCache: VkPipelineCache, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkGetPipelineCacheData*: proc (device: VkDevice, pipelineCache: VkPipelineCache, pDataSize: ptr uint, pData: pointer): VkResult {.stdcall.}
  vkMergePipelineCaches*: proc (device: VkDevice, dstCache: VkPipelineCache, srcCacheCount: uint32, pSrcCaches: ptr VkPipelineCache): VkResult {.stdcall.}
  vkCreateGraphicsPipelines*: proc (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: ptr VkGraphicsPipelineCreateInfo, pAllocator: ptr VkAllocationCallbacks, pPipelines: ptr VkPipeline): VkResult {.stdcall.}
  vkCreateComputePipelines*: proc (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: ptr VkComputePipelineCreateInfo, pAllocator: ptr VkAllocationCallbacks, pPipelines: ptr VkPipeline): VkResult {.stdcall.}
  vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI*: proc (device: VkDevice, renderpass: VkRenderPass, pMaxWorkgroupSize: ptr VkExtent2D): VkResult {.stdcall.}
  vkDestroyPipeline*: proc (device: VkDevice, pipeline: VkPipeline, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkCreatePipelineLayout*: proc (device: VkDevice, pCreateInfo: ptr VkPipelineLayoutCreateInfo, pAllocator: ptr VkAllocationCallbacks, pPipelineLayout: ptr VkPipelineLayout): VkResult {.stdcall.}
  vkDestroyPipelineLayout*: proc (device: VkDevice, pipelineLayout: VkPipelineLayout, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkCreateSampler*: proc (device: VkDevice, pCreateInfo: ptr VkSamplerCreateInfo, pAllocator: ptr VkAllocationCallbacks, pSampler: ptr VkSampler): VkResult {.stdcall.}
  vkDestroySampler*: proc (device: VkDevice, sampler: VkSampler, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkCreateDescriptorSetLayout*: proc (device: VkDevice, pCreateInfo: ptr VkDescriptorSetLayoutCreateInfo, pAllocator: ptr VkAllocationCallbacks, pSetLayout: ptr VkDescriptorSetLayout): VkResult {.stdcall.}
  vkDestroyDescriptorSetLayout*: proc (device: VkDevice, descriptorSetLayout: VkDescriptorSetLayout, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkCreateDescriptorPool*: proc (device: VkDevice, pCreateInfo: ptr VkDescriptorPoolCreateInfo, pAllocator: ptr VkAllocationCallbacks, pDescriptorPool: ptr VkDescriptorPool): VkResult {.stdcall.}
  vkDestroyDescriptorPool*: proc (device: VkDevice, descriptorPool: VkDescriptorPool, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkResetDescriptorPool*: proc (device: VkDevice, descriptorPool: VkDescriptorPool, flags: VkDescriptorPoolResetFlags): VkResult {.stdcall.}
  vkAllocateDescriptorSets*: proc (device: VkDevice, pAllocateInfo: ptr VkDescriptorSetAllocateInfo, pDescriptorSets: ptr VkDescriptorSet): VkResult {.stdcall.}
  vkFreeDescriptorSets*: proc (device: VkDevice, descriptorPool: VkDescriptorPool, descriptorSetCount: uint32, pDescriptorSets: ptr VkDescriptorSet): VkResult {.stdcall.}
  vkUpdateDescriptorSets*: proc (device: VkDevice, descriptorWriteCount: uint32, pDescriptorWrites: ptr VkWriteDescriptorSet, descriptorCopyCount: uint32, pDescriptorCopies: ptr VkCopyDescriptorSet) {.stdcall.}
  vkCreateFramebuffer*: proc (device: VkDevice, pCreateInfo: ptr VkFramebufferCreateInfo, pAllocator: ptr VkAllocationCallbacks, pFramebuffer: ptr VkFramebuffer): VkResult {.stdcall.}
  vkDestroyFramebuffer*: proc (device: VkDevice, framebuffer: VkFramebuffer, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkCreateRenderPass*: proc (device: VkDevice, pCreateInfo: ptr VkRenderPassCreateInfo, pAllocator: ptr VkAllocationCallbacks, pRenderPass: ptr VkRenderPass): VkResult {.stdcall.}
  vkDestroyRenderPass*: proc (device: VkDevice, renderPass: VkRenderPass, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkGetRenderAreaGranularity*: proc (device: VkDevice, renderPass: VkRenderPass, pGranularity: ptr VkExtent2D) {.stdcall.}
  vkGetRenderingAreaGranularityKHR*: proc (device: VkDevice, pRenderingAreaInfo: ptr VkRenderingAreaInfoKHR, pGranularity: ptr VkExtent2D) {.stdcall.}
  vkCreateCommandPool*: proc (device: VkDevice, pCreateInfo: ptr VkCommandPoolCreateInfo, pAllocator: ptr VkAllocationCallbacks, pCommandPool: ptr VkCommandPool): VkResult {.stdcall.}
  vkDestroyCommandPool*: proc (device: VkDevice, commandPool: VkCommandPool, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkResetCommandPool*: proc (device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolResetFlags): VkResult {.stdcall.}
  vkAllocateCommandBuffers*: proc (device: VkDevice, pAllocateInfo: ptr VkCommandBufferAllocateInfo, pCommandBuffers: ptr VkCommandBuffer): VkResult {.stdcall.}
  vkFreeCommandBuffers*: proc (device: VkDevice, commandPool: VkCommandPool, commandBufferCount: uint32, pCommandBuffers: ptr VkCommandBuffer) {.stdcall.}
  vkBeginCommandBuffer*: proc (commandBuffer: VkCommandBuffer, pBeginInfo: ptr VkCommandBufferBeginInfo): VkResult {.stdcall.}
  vkEndCommandBuffer*: proc (commandBuffer: VkCommandBuffer): VkResult {.stdcall.}
  vkResetCommandBuffer*: proc (commandBuffer: VkCommandBuffer, flags: VkCommandBufferResetFlags): VkResult {.stdcall.}
  vkCmdBindPipeline*: proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline) {.stdcall.}
  vkCmdSetAttachmentFeedbackLoopEnableEXT*: proc (commandBuffer: VkCommandBuffer, aspectMask: VkImageAspectFlags) {.stdcall.}
  vkCmdSetViewport*: proc (commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pViewports: ptr VkViewport) {.stdcall.}
  vkCmdSetScissor*: proc (commandBuffer: VkCommandBuffer, firstScissor: uint32, scissorCount: uint32, pScissors: ptr VkRect2D) {.stdcall.}
  vkCmdSetLineWidth*: proc (commandBuffer: VkCommandBuffer, lineWidth: float32) {.stdcall.}
  vkCmdSetDepthBias*: proc (commandBuffer: VkCommandBuffer, depthBiasConstantFactor: float32, depthBiasClamp: float32, depthBiasSlopeFactor: float32) {.stdcall.}
  vkCmdSetBlendConstants*: proc (commandBuffer: VkCommandBuffer, blendConstants: array[4, float32]) {.stdcall.}
  vkCmdSetDepthBounds*: proc (commandBuffer: VkCommandBuffer, minDepthBounds: float32, maxDepthBounds: float32) {.stdcall.}
  vkCmdSetStencilCompareMask*: proc (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, compareMask: uint32) {.stdcall.}
  vkCmdSetStencilWriteMask*: proc (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, writeMask: uint32) {.stdcall.}
  vkCmdSetStencilReference*: proc (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, reference: uint32) {.stdcall.}
  vkCmdBindDescriptorSets*: proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: uint32, descriptorSetCount: uint32, pDescriptorSets: ptr VkDescriptorSet, dynamicOffsetCount: uint32, pDynamicOffsets: ptr uint32) {.stdcall.}
  vkCmdBindIndexBuffer*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, indexType: VkIndexType) {.stdcall.}
  vkCmdBindVertexBuffers*: proc (commandBuffer: VkCommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: ptr VkBuffer, pOffsets: ptr VkDeviceSize) {.stdcall.}
  vkCmdDraw*: proc (commandBuffer: VkCommandBuffer, vertexCount: uint32, instanceCount: uint32, firstVertex: uint32, firstInstance: uint32) {.stdcall.}
  vkCmdDrawIndexed*: proc (commandBuffer: VkCommandBuffer, indexCount: uint32, instanceCount: uint32, firstIndex: uint32, vertexOffset: int32, firstInstance: uint32) {.stdcall.}
  vkCmdDrawMultiEXT*: proc (commandBuffer: VkCommandBuffer, drawCount: uint32, pVertexInfo: ptr VkMultiDrawInfoEXT, instanceCount: uint32, firstInstance: uint32, stride: uint32) {.stdcall.}
  vkCmdDrawMultiIndexedEXT*: proc (commandBuffer: VkCommandBuffer, drawCount: uint32, pIndexInfo: ptr VkMultiDrawIndexedInfoEXT, instanceCount: uint32, firstInstance: uint32, stride: uint32, pVertexOffset: ptr int32) {.stdcall.}
  vkCmdDrawIndirect*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: uint32, stride: uint32) {.stdcall.}
  vkCmdDrawIndexedIndirect*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: uint32, stride: uint32) {.stdcall.}
  vkCmdDispatch*: proc (commandBuffer: VkCommandBuffer, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32) {.stdcall.}
  vkCmdDispatchIndirect*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize) {.stdcall.}
  vkCmdSubpassShadingHUAWEI*: proc (commandBuffer: VkCommandBuffer) {.stdcall.}
  vkCmdDrawClusterHUAWEI*: proc (commandBuffer: VkCommandBuffer, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32) {.stdcall.}
  vkCmdDrawClusterIndirectHUAWEI*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize) {.stdcall.}
  vkCmdUpdatePipelineIndirectBufferNV*: proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline) {.stdcall.}
  vkCmdCopyBuffer*: proc (commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstBuffer: VkBuffer, regionCount: uint32, pRegions: ptr VkBufferCopy) {.stdcall.}
  vkCmdCopyImage*: proc (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkImageCopy) {.stdcall.}
  vkCmdBlitImage*: proc (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkImageBlit, filter: VkFilter) {.stdcall.}
  vkCmdCopyBufferToImage*: proc (commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkBufferImageCopy) {.stdcall.}
  vkCmdCopyImageToBuffer*: proc (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer, regionCount: uint32, pRegions: ptr VkBufferImageCopy) {.stdcall.}
  vkCmdCopyMemoryIndirectNV*: proc (commandBuffer: VkCommandBuffer, copyBufferAddress: VkDeviceAddress, copyCount: uint32, stride: uint32) {.stdcall.}
  vkCmdCopyMemoryToImageIndirectNV*: proc (commandBuffer: VkCommandBuffer, copyBufferAddress: VkDeviceAddress, copyCount: uint32, stride: uint32, dstImage: VkImage, dstImageLayout: VkImageLayout, pImageSubresources: ptr VkImageSubresourceLayers) {.stdcall.}
  vkCmdUpdateBuffer*: proc (commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, dataSize: VkDeviceSize, pData: pointer) {.stdcall.}
  vkCmdFillBuffer*: proc (commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, size: VkDeviceSize, data: uint32) {.stdcall.}
  vkCmdClearColorImage*: proc (commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pColor: ptr VkClearColorValue, rangeCount: uint32, pRanges: ptr VkImageSubresourceRange) {.stdcall.}
  vkCmdClearDepthStencilImage*: proc (commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pDepthStencil: ptr VkClearDepthStencilValue, rangeCount: uint32, pRanges: ptr VkImageSubresourceRange) {.stdcall.}
  vkCmdClearAttachments*: proc (commandBuffer: VkCommandBuffer, attachmentCount: uint32, pAttachments: ptr VkClearAttachment, rectCount: uint32, pRects: ptr VkClearRect) {.stdcall.}
  vkCmdResolveImage*: proc (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkImageResolve) {.stdcall.}
  vkCmdSetEvent*: proc (commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags) {.stdcall.}
  vkCmdResetEvent*: proc (commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags) {.stdcall.}
  vkCmdWaitEvents*: proc (commandBuffer: VkCommandBuffer, eventCount: uint32, pEvents: ptr VkEvent, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, memoryBarrierCount: uint32, pMemoryBarriers: ptr VkMemoryBarrier, bufferMemoryBarrierCount: uint32, pBufferMemoryBarriers: ptr VkBufferMemoryBarrier, imageMemoryBarrierCount: uint32, pImageMemoryBarriers: ptr VkImageMemoryBarrier) {.stdcall.}
  vkCmdPipelineBarrier*: proc (commandBuffer: VkCommandBuffer, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, dependencyFlags: VkDependencyFlags, memoryBarrierCount: uint32, pMemoryBarriers: ptr VkMemoryBarrier, bufferMemoryBarrierCount: uint32, pBufferMemoryBarriers: ptr VkBufferMemoryBarrier, imageMemoryBarrierCount: uint32, pImageMemoryBarriers: ptr VkImageMemoryBarrier) {.stdcall.}
  vkCmdBeginQuery*: proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32, flags: VkQueryControlFlags) {.stdcall.}
  vkCmdEndQuery*: proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32) {.stdcall.}
  vkCmdBeginConditionalRenderingEXT*: proc (commandBuffer: VkCommandBuffer, pConditionalRenderingBegin: ptr VkConditionalRenderingBeginInfoEXT) {.stdcall.}
  vkCmdEndConditionalRenderingEXT*: proc (commandBuffer: VkCommandBuffer) {.stdcall.}
  vkCmdResetQueryPool*: proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32) {.stdcall.}
  vkCmdWriteTimestamp*: proc (commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, queryPool: VkQueryPool, query: uint32) {.stdcall.}
  vkCmdCopyQueryPoolResults*: proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, stride: VkDeviceSize, flags: VkQueryResultFlags) {.stdcall.}
  vkCmdPushConstants*: proc (commandBuffer: VkCommandBuffer, layout: VkPipelineLayout, stageFlags: VkShaderStageFlags, offset: uint32, size: uint32, pValues: pointer) {.stdcall.}
  vkCmdBeginRenderPass*: proc (commandBuffer: VkCommandBuffer, pRenderPassBegin: ptr VkRenderPassBeginInfo, contents: VkSubpassContents) {.stdcall.}
  vkCmdNextSubpass*: proc (commandBuffer: VkCommandBuffer, contents: VkSubpassContents) {.stdcall.}
  vkCmdEndRenderPass*: proc (commandBuffer: VkCommandBuffer) {.stdcall.}
  vkCmdExecuteCommands*: proc (commandBuffer: VkCommandBuffer, commandBufferCount: uint32, pCommandBuffers: ptr VkCommandBuffer) {.stdcall.}
  vkCreateAndroidSurfaceKHR*: proc (instance: VkInstance, pCreateInfo: ptr VkAndroidSurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceDisplayPropertiesKHR*: proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayPropertiesKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceDisplayPlanePropertiesKHR*: proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayPlanePropertiesKHR): VkResult {.stdcall.}
  vkGetDisplayPlaneSupportedDisplaysKHR*: proc (physicalDevice: VkPhysicalDevice, planeIndex: uint32, pDisplayCount: ptr uint32, pDisplays: ptr VkDisplayKHR): VkResult {.stdcall.}
  vkGetDisplayModePropertiesKHR*: proc (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayModePropertiesKHR): VkResult {.stdcall.}
  vkCreateDisplayModeKHR*: proc (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pCreateInfo: ptr VkDisplayModeCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pMode: ptr VkDisplayModeKHR): VkResult {.stdcall.}
  vkGetDisplayPlaneCapabilitiesKHR*: proc (physicalDevice: VkPhysicalDevice, mode: VkDisplayModeKHR, planeIndex: uint32, pCapabilities: ptr VkDisplayPlaneCapabilitiesKHR): VkResult {.stdcall.}
  vkCreateDisplayPlaneSurfaceKHR*: proc (instance: VkInstance, pCreateInfo: ptr VkDisplaySurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreateSharedSwapchainsKHR*: proc (device: VkDevice, swapchainCount: uint32, pCreateInfos: ptr VkSwapchainCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSwapchains: ptr VkSwapchainKHR): VkResult {.stdcall.}
  vkDestroySurfaceKHR*: proc (instance: VkInstance, surface: VkSurfaceKHR, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkGetPhysicalDeviceSurfaceSupportKHR*: proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, surface: VkSurfaceKHR, pSupported: ptr VkBool32): VkResult {.stdcall.}
  vkGetPhysicalDeviceSurfaceCapabilitiesKHR*: proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: ptr VkSurfaceCapabilitiesKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceSurfaceFormatsKHR*: proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceFormatCount: ptr uint32, pSurfaceFormats: ptr VkSurfaceFormatKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceSurfacePresentModesKHR*: proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pPresentModeCount: ptr uint32, pPresentModes: ptr VkPresentModeKHR): VkResult {.stdcall.}
  vkCreateSwapchainKHR*: proc (device: VkDevice, pCreateInfo: ptr VkSwapchainCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSwapchain: ptr VkSwapchainKHR): VkResult {.stdcall.}
  vkDestroySwapchainKHR*: proc (device: VkDevice, swapchain: VkSwapchainKHR, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkGetSwapchainImagesKHR*: proc (device: VkDevice, swapchain: VkSwapchainKHR, pSwapchainImageCount: ptr uint32, pSwapchainImages: ptr VkImage): VkResult {.stdcall.}
  vkAcquireNextImageKHR*: proc (device: VkDevice, swapchain: VkSwapchainKHR, timeout: uint64, semaphore: VkSemaphore, fence: VkFence, pImageIndex: ptr uint32): VkResult {.stdcall.}
  vkQueuePresentKHR*: proc (queue: VkQueue, pPresentInfo: ptr VkPresentInfoKHR): VkResult {.stdcall.}
  vkCreateViSurfaceNN*: proc (instance: VkInstance, pCreateInfo: ptr VkViSurfaceCreateInfoNN, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreateWaylandSurfaceKHR*: proc (instance: VkInstance, pCreateInfo: ptr VkWaylandSurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceWaylandPresentationSupportKHR*: proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, display: ptr wl_display): VkBool32 {.stdcall.}
  vkCreateWin32SurfaceKHR*: proc (instance: VkInstance, pCreateInfo: ptr VkWin32SurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceWin32PresentationSupportKHR*: proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32): VkBool32 {.stdcall.}
  vkCreateXlibSurfaceKHR*: proc (instance: VkInstance, pCreateInfo: ptr VkXlibSurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceXlibPresentationSupportKHR*: proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, dpy: ptr Display, visualID: VisualID): VkBool32 {.stdcall.}
  vkCreateXcbSurfaceKHR*: proc (instance: VkInstance, pCreateInfo: ptr VkXcbSurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceXcbPresentationSupportKHR*: proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, connection: ptr xcb_connection_t, visual_id: xcb_visualid_t): VkBool32 {.stdcall.}
  vkCreateDirectFBSurfaceEXT*: proc (instance: VkInstance, pCreateInfo: ptr VkDirectFBSurfaceCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceDirectFBPresentationSupportEXT*: proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, dfb: ptr IDirectFB): VkBool32 {.stdcall.}
  vkCreateImagePipeSurfaceFUCHSIA*: proc (instance: VkInstance, pCreateInfo: ptr VkImagePipeSurfaceCreateInfoFUCHSIA, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreateStreamDescriptorSurfaceGGP*: proc (instance: VkInstance, pCreateInfo: ptr VkStreamDescriptorSurfaceCreateInfoGGP, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreateScreenSurfaceQNX*: proc (instance: VkInstance, pCreateInfo: ptr VkScreenSurfaceCreateInfoQNX, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceScreenPresentationSupportQNX*: proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, window: ptr screen_window): VkBool32 {.stdcall.}
  vkCreateDebugReportCallbackEXT*: proc (instance: VkInstance, pCreateInfo: ptr VkDebugReportCallbackCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pCallback: ptr VkDebugReportCallbackEXT): VkResult {.stdcall.}
  vkDestroyDebugReportCallbackEXT*: proc (instance: VkInstance, callback: VkDebugReportCallbackEXT, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkDebugReportMessageEXT*: proc (instance: VkInstance, flags: VkDebugReportFlagsEXT, objectType: VkDebugReportObjectTypeEXT, `object`: uint64, location: uint, messageCode: int32, pLayerPrefix: cstring, pMessage: cstring) {.stdcall.}
  vkDebugMarkerSetObjectNameEXT*: proc (device: VkDevice, pNameInfo: ptr VkDebugMarkerObjectNameInfoEXT): VkResult {.stdcall.}
  vkDebugMarkerSetObjectTagEXT*: proc (device: VkDevice, pTagInfo: ptr VkDebugMarkerObjectTagInfoEXT): VkResult {.stdcall.}
  vkCmdDebugMarkerBeginEXT*: proc (commandBuffer: VkCommandBuffer, pMarkerInfo: ptr VkDebugMarkerMarkerInfoEXT) {.stdcall.}
  vkCmdDebugMarkerEndEXT*: proc (commandBuffer: VkCommandBuffer) {.stdcall.}
  vkCmdDebugMarkerInsertEXT*: proc (commandBuffer: VkCommandBuffer, pMarkerInfo: ptr VkDebugMarkerMarkerInfoEXT) {.stdcall.}
  vkGetPhysicalDeviceExternalImageFormatPropertiesNV*: proc (physicalDevice: VkPhysicalDevice, format: VkFormat, `type`: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, externalHandleType: VkExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: ptr VkExternalImageFormatPropertiesNV): VkResult {.stdcall.}
  vkGetMemoryWin32HandleNV*: proc (device: VkDevice, memory: VkDeviceMemory, handleType: VkExternalMemoryHandleTypeFlagsNV, pHandle: ptr HANDLE): VkResult {.stdcall.}
  vkCmdExecuteGeneratedCommandsNV*: proc (commandBuffer: VkCommandBuffer, isPreprocessed: VkBool32, pGeneratedCommandsInfo: ptr VkGeneratedCommandsInfoNV) {.stdcall.}
  vkCmdPreprocessGeneratedCommandsNV*: proc (commandBuffer: VkCommandBuffer, pGeneratedCommandsInfo: ptr VkGeneratedCommandsInfoNV) {.stdcall.}
  vkCmdBindPipelineShaderGroupNV*: proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline, groupIndex: uint32) {.stdcall.}
  vkGetGeneratedCommandsMemoryRequirementsNV*: proc (device: VkDevice, pInfo: ptr VkGeneratedCommandsMemoryRequirementsInfoNV, pMemoryRequirements: ptr VkMemoryRequirements2) {.stdcall.}
  vkCreateIndirectCommandsLayoutNV*: proc (device: VkDevice, pCreateInfo: ptr VkIndirectCommandsLayoutCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pIndirectCommandsLayout: ptr VkIndirectCommandsLayoutNV): VkResult {.stdcall.}
  vkDestroyIndirectCommandsLayoutNV*: proc (device: VkDevice, indirectCommandsLayout: VkIndirectCommandsLayoutNV, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkGetPhysicalDeviceFeatures2*: proc (physicalDevice: VkPhysicalDevice, pFeatures: ptr VkPhysicalDeviceFeatures2) {.stdcall.}
  vkGetPhysicalDeviceProperties2*: proc (physicalDevice: VkPhysicalDevice, pProperties: ptr VkPhysicalDeviceProperties2) {.stdcall.}
  vkGetPhysicalDeviceFormatProperties2*: proc (physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: ptr VkFormatProperties2) {.stdcall.}
  vkGetPhysicalDeviceImageFormatProperties2*: proc (physicalDevice: VkPhysicalDevice, pImageFormatInfo: ptr VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: ptr VkImageFormatProperties2): VkResult {.stdcall.}
  vkGetPhysicalDeviceQueueFamilyProperties2*: proc (physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: ptr uint32, pQueueFamilyProperties: ptr VkQueueFamilyProperties2) {.stdcall.}
  vkGetPhysicalDeviceMemoryProperties2*: proc (physicalDevice: VkPhysicalDevice, pMemoryProperties: ptr VkPhysicalDeviceMemoryProperties2) {.stdcall.}
  vkGetPhysicalDeviceSparseImageFormatProperties2*: proc (physicalDevice: VkPhysicalDevice, pFormatInfo: ptr VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: ptr uint32, pProperties: ptr VkSparseImageFormatProperties2) {.stdcall.}
  vkCmdPushDescriptorSetKHR*: proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: uint32, descriptorWriteCount: uint32, pDescriptorWrites: ptr VkWriteDescriptorSet) {.stdcall.}
  vkTrimCommandPool*: proc (device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags) {.stdcall.}
  vkGetPhysicalDeviceExternalBufferProperties*: proc (physicalDevice: VkPhysicalDevice, pExternalBufferInfo: ptr VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: ptr VkExternalBufferProperties) {.stdcall.}
  vkGetMemoryWin32HandleKHR*: proc (device: VkDevice, pGetWin32HandleInfo: ptr VkMemoryGetWin32HandleInfoKHR, pHandle: ptr HANDLE): VkResult {.stdcall.}
  vkGetMemoryWin32HandlePropertiesKHR*: proc (device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, handle: HANDLE, pMemoryWin32HandleProperties: ptr VkMemoryWin32HandlePropertiesKHR): VkResult {.stdcall.}
  vkGetMemoryFdKHR*: proc (device: VkDevice, pGetFdInfo: ptr VkMemoryGetFdInfoKHR, pFd: ptr int): VkResult {.stdcall.}
  vkGetMemoryFdPropertiesKHR*: proc (device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, fd: int, pMemoryFdProperties: ptr VkMemoryFdPropertiesKHR): VkResult {.stdcall.}
  vkGetMemoryZirconHandleFUCHSIA*: proc (device: VkDevice, pGetZirconHandleInfo: ptr VkMemoryGetZirconHandleInfoFUCHSIA, pZirconHandle: ptr zx_handle_t): VkResult {.stdcall.}
  vkGetMemoryZirconHandlePropertiesFUCHSIA*: proc (device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, zirconHandle: zx_handle_t, pMemoryZirconHandleProperties: ptr VkMemoryZirconHandlePropertiesFUCHSIA): VkResult {.stdcall.}
  vkGetMemoryRemoteAddressNV*: proc (device: VkDevice, pMemoryGetRemoteAddressInfo: ptr VkMemoryGetRemoteAddressInfoNV, pAddress: ptr VkRemoteAddressNV): VkResult {.stdcall.}
  vkGetMemorySciBufNV*: proc (device: VkDevice, pGetSciBufInfo: ptr VkMemoryGetSciBufInfoNV, pHandle: ptr NvSciBufObj): VkResult {.stdcall.}
  vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV*: proc (physicalDevice: VkPhysicalDevice, handleType: VkExternalMemoryHandleTypeFlagBits, handle: NvSciBufObj, pMemorySciBufProperties: ptr VkMemorySciBufPropertiesNV): VkResult {.stdcall.}
  vkGetPhysicalDeviceSciBufAttributesNV*: proc (physicalDevice: VkPhysicalDevice, pAttributes: NvSciBufAttrList): VkResult {.stdcall.}
  vkGetPhysicalDeviceExternalSemaphoreProperties*: proc (physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: ptr VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: ptr VkExternalSemaphoreProperties) {.stdcall.}
  vkGetSemaphoreWin32HandleKHR*: proc (device: VkDevice, pGetWin32HandleInfo: ptr VkSemaphoreGetWin32HandleInfoKHR, pHandle: ptr HANDLE): VkResult {.stdcall.}
  vkImportSemaphoreWin32HandleKHR*: proc (device: VkDevice, pImportSemaphoreWin32HandleInfo: ptr VkImportSemaphoreWin32HandleInfoKHR): VkResult {.stdcall.}
  vkGetSemaphoreFdKHR*: proc (device: VkDevice, pGetFdInfo: ptr VkSemaphoreGetFdInfoKHR, pFd: ptr int): VkResult {.stdcall.}
  vkImportSemaphoreFdKHR*: proc (device: VkDevice, pImportSemaphoreFdInfo: ptr VkImportSemaphoreFdInfoKHR): VkResult {.stdcall.}
  vkGetSemaphoreZirconHandleFUCHSIA*: proc (device: VkDevice, pGetZirconHandleInfo: ptr VkSemaphoreGetZirconHandleInfoFUCHSIA, pZirconHandle: ptr zx_handle_t): VkResult {.stdcall.}
  vkImportSemaphoreZirconHandleFUCHSIA*: proc (device: VkDevice, pImportSemaphoreZirconHandleInfo: ptr VkImportSemaphoreZirconHandleInfoFUCHSIA): VkResult {.stdcall.}
  vkGetPhysicalDeviceExternalFenceProperties*: proc (physicalDevice: VkPhysicalDevice, pExternalFenceInfo: ptr VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: ptr VkExternalFenceProperties) {.stdcall.}
  vkGetFenceWin32HandleKHR*: proc (device: VkDevice, pGetWin32HandleInfo: ptr VkFenceGetWin32HandleInfoKHR, pHandle: ptr HANDLE): VkResult {.stdcall.}
  vkImportFenceWin32HandleKHR*: proc (device: VkDevice, pImportFenceWin32HandleInfo: ptr VkImportFenceWin32HandleInfoKHR): VkResult {.stdcall.}
  vkGetFenceFdKHR*: proc (device: VkDevice, pGetFdInfo: ptr VkFenceGetFdInfoKHR, pFd: ptr int): VkResult {.stdcall.}
  vkImportFenceFdKHR*: proc (device: VkDevice, pImportFenceFdInfo: ptr VkImportFenceFdInfoKHR): VkResult {.stdcall.}
  vkGetFenceSciSyncFenceNV*: proc (device: VkDevice, pGetSciSyncHandleInfo: ptr VkFenceGetSciSyncInfoNV, pHandle: pointer): VkResult {.stdcall.}
  vkGetFenceSciSyncObjNV*: proc (device: VkDevice, pGetSciSyncHandleInfo: ptr VkFenceGetSciSyncInfoNV, pHandle: pointer): VkResult {.stdcall.}
  vkImportFenceSciSyncFenceNV*: proc (device: VkDevice, pImportFenceSciSyncInfo: ptr VkImportFenceSciSyncInfoNV): VkResult {.stdcall.}
  vkImportFenceSciSyncObjNV*: proc (device: VkDevice, pImportFenceSciSyncInfo: ptr VkImportFenceSciSyncInfoNV): VkResult {.stdcall.}
  vkGetSemaphoreSciSyncObjNV*: proc (device: VkDevice, pGetSciSyncInfo: ptr VkSemaphoreGetSciSyncInfoNV, pHandle: pointer): VkResult {.stdcall.}
  vkImportSemaphoreSciSyncObjNV*: proc (device: VkDevice, pImportSemaphoreSciSyncInfo: ptr VkImportSemaphoreSciSyncInfoNV): VkResult {.stdcall.}
  vkGetPhysicalDeviceSciSyncAttributesNV*: proc (physicalDevice: VkPhysicalDevice, pSciSyncAttributesInfo: ptr VkSciSyncAttributesInfoNV, pAttributes: NvSciSyncAttrList): VkResult {.stdcall.}
  vkCreateSemaphoreSciSyncPoolNV*: proc (device: VkDevice, pCreateInfo: ptr VkSemaphoreSciSyncPoolCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pSemaphorePool: ptr VkSemaphoreSciSyncPoolNV): VkResult {.stdcall.}
  vkDestroySemaphoreSciSyncPoolNV*: proc (device: VkDevice, semaphorePool: VkSemaphoreSciSyncPoolNV, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkReleaseDisplayEXT*: proc (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR): VkResult {.stdcall.}
  vkAcquireXlibDisplayEXT*: proc (physicalDevice: VkPhysicalDevice, dpy: ptr Display, display: VkDisplayKHR): VkResult {.stdcall.}
  vkGetRandROutputDisplayEXT*: proc (physicalDevice: VkPhysicalDevice, dpy: ptr Display, rrOutput: RROutput, pDisplay: ptr VkDisplayKHR): VkResult {.stdcall.}
  vkAcquireWinrtDisplayNV*: proc (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR): VkResult {.stdcall.}
  vkGetWinrtDisplayNV*: proc (physicalDevice: VkPhysicalDevice, deviceRelativeId: uint32, pDisplay: ptr VkDisplayKHR): VkResult {.stdcall.}
  vkDisplayPowerControlEXT*: proc (device: VkDevice, display: VkDisplayKHR, pDisplayPowerInfo: ptr VkDisplayPowerInfoEXT): VkResult {.stdcall.}
  vkRegisterDeviceEventEXT*: proc (device: VkDevice, pDeviceEventInfo: ptr VkDeviceEventInfoEXT, pAllocator: ptr VkAllocationCallbacks, pFence: ptr VkFence): VkResult {.stdcall.}
  vkRegisterDisplayEventEXT*: proc (device: VkDevice, display: VkDisplayKHR, pDisplayEventInfo: ptr VkDisplayEventInfoEXT, pAllocator: ptr VkAllocationCallbacks, pFence: ptr VkFence): VkResult {.stdcall.}
  vkGetSwapchainCounterEXT*: proc (device: VkDevice, swapchain: VkSwapchainKHR, counter: VkSurfaceCounterFlagBitsEXT, pCounterValue: ptr uint64): VkResult {.stdcall.}
  vkGetPhysicalDeviceSurfaceCapabilities2EXT*: proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: ptr VkSurfaceCapabilities2EXT): VkResult {.stdcall.}
  vkEnumeratePhysicalDeviceGroups*: proc (instance: VkInstance, pPhysicalDeviceGroupCount: ptr uint32, pPhysicalDeviceGroupProperties: ptr VkPhysicalDeviceGroupProperties): VkResult {.stdcall.}
  vkGetDeviceGroupPeerMemoryFeatures*: proc (device: VkDevice, heapIndex: uint32, localDeviceIndex: uint32, remoteDeviceIndex: uint32, pPeerMemoryFeatures: ptr VkPeerMemoryFeatureFlags) {.stdcall.}
  vkBindBufferMemory2*: proc (device: VkDevice, bindInfoCount: uint32, pBindInfos: ptr VkBindBufferMemoryInfo): VkResult {.stdcall.}
  vkBindImageMemory2*: proc (device: VkDevice, bindInfoCount: uint32, pBindInfos: ptr VkBindImageMemoryInfo): VkResult {.stdcall.}
  vkCmdSetDeviceMask*: proc (commandBuffer: VkCommandBuffer, deviceMask: uint32) {.stdcall.}
  vkGetDeviceGroupPresentCapabilitiesKHR*: proc (device: VkDevice, pDeviceGroupPresentCapabilities: ptr VkDeviceGroupPresentCapabilitiesKHR): VkResult {.stdcall.}
  vkGetDeviceGroupSurfacePresentModesKHR*: proc (device: VkDevice, surface: VkSurfaceKHR, pModes: ptr VkDeviceGroupPresentModeFlagsKHR): VkResult {.stdcall.}
  vkAcquireNextImage2KHR*: proc (device: VkDevice, pAcquireInfo: ptr VkAcquireNextImageInfoKHR, pImageIndex: ptr uint32): VkResult {.stdcall.}
  vkCmdDispatchBase*: proc (commandBuffer: VkCommandBuffer, baseGroupX: uint32, baseGroupY: uint32, baseGroupZ: uint32, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32) {.stdcall.}
  vkGetPhysicalDevicePresentRectanglesKHR*: proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pRectCount: ptr uint32, pRects: ptr VkRect2D): VkResult {.stdcall.}
  vkCreateDescriptorUpdateTemplate*: proc (device: VkDevice, pCreateInfo: ptr VkDescriptorUpdateTemplateCreateInfo, pAllocator: ptr VkAllocationCallbacks, pDescriptorUpdateTemplate: ptr VkDescriptorUpdateTemplate): VkResult {.stdcall.}
  vkDestroyDescriptorUpdateTemplate*: proc (device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkUpdateDescriptorSetWithTemplate*: proc (device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: pointer) {.stdcall.}
  vkCmdPushDescriptorSetWithTemplateKHR*: proc (commandBuffer: VkCommandBuffer, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: uint32, pData: pointer) {.stdcall.}
  vkSetHdrMetadataEXT*: proc (device: VkDevice, swapchainCount: uint32, pSwapchains: ptr VkSwapchainKHR, pMetadata: ptr VkHdrMetadataEXT) {.stdcall.}
  vkGetSwapchainStatusKHR*: proc (device: VkDevice, swapchain: VkSwapchainKHR): VkResult {.stdcall.}
  vkGetRefreshCycleDurationGOOGLE*: proc (device: VkDevice, swapchain: VkSwapchainKHR, pDisplayTimingProperties: ptr VkRefreshCycleDurationGOOGLE): VkResult {.stdcall.}
  vkGetPastPresentationTimingGOOGLE*: proc (device: VkDevice, swapchain: VkSwapchainKHR, pPresentationTimingCount: ptr uint32, pPresentationTimings: ptr VkPastPresentationTimingGOOGLE): VkResult {.stdcall.}
  vkCreateIOSSurfaceMVK*: proc (instance: VkInstance, pCreateInfo: ptr VkIOSSurfaceCreateInfoMVK, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreateMacOSSurfaceMVK*: proc (instance: VkInstance, pCreateInfo: ptr VkMacOSSurfaceCreateInfoMVK, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCreateMetalSurfaceEXT*: proc (instance: VkInstance, pCreateInfo: ptr VkMetalSurfaceCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkCmdSetViewportWScalingNV*: proc (commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pViewportWScalings: ptr VkViewportWScalingNV) {.stdcall.}
  vkCmdSetDiscardRectangleEXT*: proc (commandBuffer: VkCommandBuffer, firstDiscardRectangle: uint32, discardRectangleCount: uint32, pDiscardRectangles: ptr VkRect2D) {.stdcall.}
  vkCmdSetDiscardRectangleEnableEXT*: proc (commandBuffer: VkCommandBuffer, discardRectangleEnable: VkBool32) {.stdcall.}
  vkCmdSetDiscardRectangleModeEXT*: proc (commandBuffer: VkCommandBuffer, discardRectangleMode: VkDiscardRectangleModeEXT) {.stdcall.}
  vkCmdSetSampleLocationsEXT*: proc (commandBuffer: VkCommandBuffer, pSampleLocationsInfo: ptr VkSampleLocationsInfoEXT) {.stdcall.}
  vkGetPhysicalDeviceMultisamplePropertiesEXT*: proc (physicalDevice: VkPhysicalDevice, samples: VkSampleCountFlagBits, pMultisampleProperties: ptr VkMultisamplePropertiesEXT) {.stdcall.}
  vkGetPhysicalDeviceSurfaceCapabilities2KHR*: proc (physicalDevice: VkPhysicalDevice, pSurfaceInfo: ptr VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: ptr VkSurfaceCapabilities2KHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceSurfaceFormats2KHR*: proc (physicalDevice: VkPhysicalDevice, pSurfaceInfo: ptr VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: ptr uint32, pSurfaceFormats: ptr VkSurfaceFormat2KHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceDisplayProperties2KHR*: proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayProperties2KHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceDisplayPlaneProperties2KHR*: proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayPlaneProperties2KHR): VkResult {.stdcall.}
  vkGetDisplayModeProperties2KHR*: proc (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayModeProperties2KHR): VkResult {.stdcall.}
  vkGetDisplayPlaneCapabilities2KHR*: proc (physicalDevice: VkPhysicalDevice, pDisplayPlaneInfo: ptr VkDisplayPlaneInfo2KHR, pCapabilities: ptr VkDisplayPlaneCapabilities2KHR): VkResult {.stdcall.}
  vkGetBufferMemoryRequirements2*: proc (device: VkDevice, pInfo: ptr VkBufferMemoryRequirementsInfo2, pMemoryRequirements: ptr VkMemoryRequirements2) {.stdcall.}
  vkGetImageMemoryRequirements2*: proc (device: VkDevice, pInfo: ptr VkImageMemoryRequirementsInfo2, pMemoryRequirements: ptr VkMemoryRequirements2) {.stdcall.}
  vkGetImageSparseMemoryRequirements2*: proc (device: VkDevice, pInfo: ptr VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: ptr uint32, pSparseMemoryRequirements: ptr VkSparseImageMemoryRequirements2) {.stdcall.}
  vkGetDeviceBufferMemoryRequirements*: proc (device: VkDevice, pInfo: ptr VkDeviceBufferMemoryRequirements, pMemoryRequirements: ptr VkMemoryRequirements2) {.stdcall.}
  vkGetDeviceImageMemoryRequirements*: proc (device: VkDevice, pInfo: ptr VkDeviceImageMemoryRequirements, pMemoryRequirements: ptr VkMemoryRequirements2) {.stdcall.}
  vkGetDeviceImageSparseMemoryRequirements*: proc (device: VkDevice, pInfo: ptr VkDeviceImageMemoryRequirements, pSparseMemoryRequirementCount: ptr uint32, pSparseMemoryRequirements: ptr VkSparseImageMemoryRequirements2) {.stdcall.}
  vkCreateSamplerYcbcrConversion*: proc (device: VkDevice, pCreateInfo: ptr VkSamplerYcbcrConversionCreateInfo, pAllocator: ptr VkAllocationCallbacks, pYcbcrConversion: ptr VkSamplerYcbcrConversion): VkResult {.stdcall.}
  vkDestroySamplerYcbcrConversion*: proc (device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkGetDeviceQueue2*: proc (device: VkDevice, pQueueInfo: ptr VkDeviceQueueInfo2, pQueue: ptr VkQueue) {.stdcall.}
  vkCreateValidationCacheEXT*: proc (device: VkDevice, pCreateInfo: ptr VkValidationCacheCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pValidationCache: ptr VkValidationCacheEXT): VkResult {.stdcall.}
  vkDestroyValidationCacheEXT*: proc (device: VkDevice, validationCache: VkValidationCacheEXT, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkGetValidationCacheDataEXT*: proc (device: VkDevice, validationCache: VkValidationCacheEXT, pDataSize: ptr uint, pData: pointer): VkResult {.stdcall.}
  vkMergeValidationCachesEXT*: proc (device: VkDevice, dstCache: VkValidationCacheEXT, srcCacheCount: uint32, pSrcCaches: ptr VkValidationCacheEXT): VkResult {.stdcall.}
  vkGetDescriptorSetLayoutSupport*: proc (device: VkDevice, pCreateInfo: ptr VkDescriptorSetLayoutCreateInfo, pSupport: ptr VkDescriptorSetLayoutSupport) {.stdcall.}
  vkGetSwapchainGrallocUsageANDROID*: proc (device: VkDevice, format: VkFormat, imageUsage: VkImageUsageFlags, grallocUsage: ptr int): VkResult {.stdcall.}
  vkGetSwapchainGrallocUsage2ANDROID*: proc (device: VkDevice, format: VkFormat, imageUsage: VkImageUsageFlags, swapchainImageUsage: VkSwapchainImageUsageFlagsANDROID, grallocConsumerUsage: ptr uint64, grallocProducerUsage: ptr uint64): VkResult {.stdcall.}
  vkAcquireImageANDROID*: proc (device: VkDevice, image: VkImage, nativeFenceFd: int, semaphore: VkSemaphore, fence: VkFence): VkResult {.stdcall.}
  vkQueueSignalReleaseImageANDROID*: proc (queue: VkQueue, waitSemaphoreCount: uint32, pWaitSemaphores: ptr VkSemaphore, image: VkImage, pNativeFenceFd: ptr int): VkResult {.stdcall.}
  vkGetShaderInfoAMD*: proc (device: VkDevice, pipeline: VkPipeline, shaderStage: VkShaderStageFlagBits, infoType: VkShaderInfoTypeAMD, pInfoSize: ptr uint, pInfo: pointer): VkResult {.stdcall.}
  vkSetLocalDimmingAMD*: proc (device: VkDevice, swapChain: VkSwapchainKHR, localDimmingEnable: VkBool32) {.stdcall.}
  vkGetPhysicalDeviceCalibrateableTimeDomainsKHR*: proc (physicalDevice: VkPhysicalDevice, pTimeDomainCount: ptr uint32, pTimeDomains: ptr VkTimeDomainKHR): VkResult {.stdcall.}
  vkGetCalibratedTimestampsKHR*: proc (device: VkDevice, timestampCount: uint32, pTimestampInfos: ptr VkCalibratedTimestampInfoKHR, pTimestamps: ptr uint64, pMaxDeviation: ptr uint64): VkResult {.stdcall.}
  vkSetDebugUtilsObjectNameEXT*: proc (device: VkDevice, pNameInfo: ptr VkDebugUtilsObjectNameInfoEXT): VkResult {.stdcall.}
  vkSetDebugUtilsObjectTagEXT*: proc (device: VkDevice, pTagInfo: ptr VkDebugUtilsObjectTagInfoEXT): VkResult {.stdcall.}
  vkQueueBeginDebugUtilsLabelEXT*: proc (queue: VkQueue, pLabelInfo: ptr VkDebugUtilsLabelEXT) {.stdcall.}
  vkQueueEndDebugUtilsLabelEXT*: proc (queue: VkQueue) {.stdcall.}
  vkQueueInsertDebugUtilsLabelEXT*: proc (queue: VkQueue, pLabelInfo: ptr VkDebugUtilsLabelEXT) {.stdcall.}
  vkCmdBeginDebugUtilsLabelEXT*: proc (commandBuffer: VkCommandBuffer, pLabelInfo: ptr VkDebugUtilsLabelEXT) {.stdcall.}
  vkCmdEndDebugUtilsLabelEXT*: proc (commandBuffer: VkCommandBuffer) {.stdcall.}
  vkCmdInsertDebugUtilsLabelEXT*: proc (commandBuffer: VkCommandBuffer, pLabelInfo: ptr VkDebugUtilsLabelEXT) {.stdcall.}
  vkCreateDebugUtilsMessengerEXT*: proc (instance: VkInstance, pCreateInfo: ptr VkDebugUtilsMessengerCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pMessenger: ptr VkDebugUtilsMessengerEXT): VkResult {.stdcall.}
  vkDestroyDebugUtilsMessengerEXT*: proc (instance: VkInstance, messenger: VkDebugUtilsMessengerEXT, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkSubmitDebugUtilsMessageEXT*: proc (instance: VkInstance, messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT, messageTypes: VkDebugUtilsMessageTypeFlagsEXT, pCallbackData: ptr VkDebugUtilsMessengerCallbackDataEXT) {.stdcall.}
  vkGetMemoryHostPointerPropertiesEXT*: proc (device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, pHostPointer: pointer, pMemoryHostPointerProperties: ptr VkMemoryHostPointerPropertiesEXT): VkResult {.stdcall.}
  vkCmdWriteBufferMarkerAMD*: proc (commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: uint32) {.stdcall.}
  vkCreateRenderPass2*: proc (device: VkDevice, pCreateInfo: ptr VkRenderPassCreateInfo2, pAllocator: ptr VkAllocationCallbacks, pRenderPass: ptr VkRenderPass): VkResult {.stdcall.}
  vkCmdBeginRenderPass2*: proc (commandBuffer: VkCommandBuffer, pRenderPassBegin: ptr VkRenderPassBeginInfo, pSubpassBeginInfo: ptr VkSubpassBeginInfo) {.stdcall.}
  vkCmdNextSubpass2*: proc (commandBuffer: VkCommandBuffer, pSubpassBeginInfo: ptr VkSubpassBeginInfo, pSubpassEndInfo: ptr VkSubpassEndInfo) {.stdcall.}
  vkCmdEndRenderPass2*: proc (commandBuffer: VkCommandBuffer, pSubpassEndInfo: ptr VkSubpassEndInfo) {.stdcall.}
  vkGetSemaphoreCounterValue*: proc (device: VkDevice, semaphore: VkSemaphore, pValue: ptr uint64): VkResult {.stdcall.}
  vkWaitSemaphores*: proc (device: VkDevice, pWaitInfo: ptr VkSemaphoreWaitInfo, timeout: uint64): VkResult {.stdcall.}
  vkSignalSemaphore*: proc (device: VkDevice, pSignalInfo: ptr VkSemaphoreSignalInfo): VkResult {.stdcall.}
  vkGetAndroidHardwareBufferPropertiesANDROID*: proc (device: VkDevice, buffer: ptr AHardwareBuffer, pProperties: ptr VkAndroidHardwareBufferPropertiesANDROID): VkResult {.stdcall.}
  vkGetMemoryAndroidHardwareBufferANDROID*: proc (device: VkDevice, pInfo: ptr VkMemoryGetAndroidHardwareBufferInfoANDROID, pBuffer: ptr ptr AHardwareBuffer): VkResult {.stdcall.}
  vkCmdDrawIndirectCount*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32) {.stdcall.}
  vkCmdDrawIndexedIndirectCount*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32) {.stdcall.}
  vkCmdSetCheckpointNV*: proc (commandBuffer: VkCommandBuffer, pCheckpointMarker: pointer) {.stdcall.}
  vkGetQueueCheckpointDataNV*: proc (queue: VkQueue, pCheckpointDataCount: ptr uint32, pCheckpointData: ptr VkCheckpointDataNV) {.stdcall.}
  vkCmdBindTransformFeedbackBuffersEXT*: proc (commandBuffer: VkCommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: ptr VkBuffer, pOffsets: ptr VkDeviceSize, pSizes: ptr VkDeviceSize) {.stdcall.}
  vkCmdBeginTransformFeedbackEXT*: proc (commandBuffer: VkCommandBuffer, firstCounterBuffer: uint32, counterBufferCount: uint32, pCounterBuffers: ptr VkBuffer, pCounterBufferOffsets: ptr VkDeviceSize) {.stdcall.}
  vkCmdEndTransformFeedbackEXT*: proc (commandBuffer: VkCommandBuffer, firstCounterBuffer: uint32, counterBufferCount: uint32, pCounterBuffers: ptr VkBuffer, pCounterBufferOffsets: ptr VkDeviceSize) {.stdcall.}
  vkCmdBeginQueryIndexedEXT*: proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32, flags: VkQueryControlFlags, index: uint32) {.stdcall.}
  vkCmdEndQueryIndexedEXT*: proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32, index: uint32) {.stdcall.}
  vkCmdDrawIndirectByteCountEXT*: proc (commandBuffer: VkCommandBuffer, instanceCount: uint32, firstInstance: uint32, counterBuffer: VkBuffer, counterBufferOffset: VkDeviceSize, counterOffset: uint32, vertexStride: uint32) {.stdcall.}
  vkCmdSetExclusiveScissorNV*: proc (commandBuffer: VkCommandBuffer, firstExclusiveScissor: uint32, exclusiveScissorCount: uint32, pExclusiveScissors: ptr VkRect2D) {.stdcall.}
  vkCmdSetExclusiveScissorEnableNV*: proc (commandBuffer: VkCommandBuffer, firstExclusiveScissor: uint32, exclusiveScissorCount: uint32, pExclusiveScissorEnables: ptr VkBool32) {.stdcall.}
  vkCmdBindShadingRateImageNV*: proc (commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout) {.stdcall.}
  vkCmdSetViewportShadingRatePaletteNV*: proc (commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pShadingRatePalettes: ptr VkShadingRatePaletteNV) {.stdcall.}
  vkCmdSetCoarseSampleOrderNV*: proc (commandBuffer: VkCommandBuffer, sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: uint32, pCustomSampleOrders: ptr VkCoarseSampleOrderCustomNV) {.stdcall.}
  vkCmdDrawMeshTasksNV*: proc (commandBuffer: VkCommandBuffer, taskCount: uint32, firstTask: uint32) {.stdcall.}
  vkCmdDrawMeshTasksIndirectNV*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: uint32, stride: uint32) {.stdcall.}
  vkCmdDrawMeshTasksIndirectCountNV*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32) {.stdcall.}
  vkCmdDrawMeshTasksEXT*: proc (commandBuffer: VkCommandBuffer, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32) {.stdcall.}
  vkCmdDrawMeshTasksIndirectEXT*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: uint32, stride: uint32) {.stdcall.}
  vkCmdDrawMeshTasksIndirectCountEXT*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32) {.stdcall.}
  vkCompileDeferredNV*: proc (device: VkDevice, pipeline: VkPipeline, shader: uint32): VkResult {.stdcall.}
  vkCreateAccelerationStructureNV*: proc (device: VkDevice, pCreateInfo: ptr VkAccelerationStructureCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pAccelerationStructure: ptr VkAccelerationStructureNV): VkResult {.stdcall.}
  vkCmdBindInvocationMaskHUAWEI*: proc (commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout) {.stdcall.}
  vkDestroyAccelerationStructureKHR*: proc (device: VkDevice, accelerationStructure: VkAccelerationStructureKHR, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkDestroyAccelerationStructureNV*: proc (device: VkDevice, accelerationStructure: VkAccelerationStructureNV, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkGetAccelerationStructureMemoryRequirementsNV*: proc (device: VkDevice, pInfo: ptr VkAccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: ptr VkMemoryRequirements2KHR) {.stdcall.}
  vkBindAccelerationStructureMemoryNV*: proc (device: VkDevice, bindInfoCount: uint32, pBindInfos: ptr VkBindAccelerationStructureMemoryInfoNV): VkResult {.stdcall.}
  vkCmdCopyAccelerationStructureNV*: proc (commandBuffer: VkCommandBuffer, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, mode: VkCopyAccelerationStructureModeKHR) {.stdcall.}
  vkCmdCopyAccelerationStructureKHR*: proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkCopyAccelerationStructureInfoKHR) {.stdcall.}
  vkCopyAccelerationStructureKHR*: proc (device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: ptr VkCopyAccelerationStructureInfoKHR): VkResult {.stdcall.}
  vkCmdCopyAccelerationStructureToMemoryKHR*: proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkCopyAccelerationStructureToMemoryInfoKHR) {.stdcall.}
  vkCopyAccelerationStructureToMemoryKHR*: proc (device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: ptr VkCopyAccelerationStructureToMemoryInfoKHR): VkResult {.stdcall.}
  vkCmdCopyMemoryToAccelerationStructureKHR*: proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkCopyMemoryToAccelerationStructureInfoKHR) {.stdcall.}
  vkCopyMemoryToAccelerationStructureKHR*: proc (device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: ptr VkCopyMemoryToAccelerationStructureInfoKHR): VkResult {.stdcall.}
  vkCmdWriteAccelerationStructuresPropertiesKHR*: proc (commandBuffer: VkCommandBuffer, accelerationStructureCount: uint32, pAccelerationStructures: ptr VkAccelerationStructureKHR, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: uint32) {.stdcall.}
  vkCmdWriteAccelerationStructuresPropertiesNV*: proc (commandBuffer: VkCommandBuffer, accelerationStructureCount: uint32, pAccelerationStructures: ptr VkAccelerationStructureNV, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: uint32) {.stdcall.}
  vkCmdBuildAccelerationStructureNV*: proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkAccelerationStructureInfoNV, instanceData: VkBuffer, instanceOffset: VkDeviceSize, update: VkBool32, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, scratch: VkBuffer, scratchOffset: VkDeviceSize) {.stdcall.}
  vkWriteAccelerationStructuresPropertiesKHR*: proc (device: VkDevice, accelerationStructureCount: uint32, pAccelerationStructures: ptr VkAccelerationStructureKHR, queryType: VkQueryType, dataSize: uint, pData: pointer, stride: uint): VkResult {.stdcall.}
  vkCmdTraceRaysKHR*: proc (commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: ptr VkStridedDeviceAddressRegionKHR, pMissShaderBindingTable: ptr VkStridedDeviceAddressRegionKHR, pHitShaderBindingTable: ptr VkStridedDeviceAddressRegionKHR, pCallableShaderBindingTable: ptr VkStridedDeviceAddressRegionKHR, width: uint32, height: uint32, depth: uint32) {.stdcall.}
  vkCmdTraceRaysNV*: proc (commandBuffer: VkCommandBuffer, raygenShaderBindingTableBuffer: VkBuffer, raygenShaderBindingOffset: VkDeviceSize, missShaderBindingTableBuffer: VkBuffer, missShaderBindingOffset: VkDeviceSize, missShaderBindingStride: VkDeviceSize, hitShaderBindingTableBuffer: VkBuffer, hitShaderBindingOffset: VkDeviceSize, hitShaderBindingStride: VkDeviceSize, callableShaderBindingTableBuffer: VkBuffer, callableShaderBindingOffset: VkDeviceSize, callableShaderBindingStride: VkDeviceSize, width: uint32, height: uint32, depth: uint32) {.stdcall.}
  vkGetRayTracingShaderGroupHandlesKHR*: proc (device: VkDevice, pipeline: VkPipeline, firstGroup: uint32, groupCount: uint32, dataSize: uint, pData: pointer): VkResult {.stdcall.}
  vkGetRayTracingCaptureReplayShaderGroupHandlesKHR*: proc (device: VkDevice, pipeline: VkPipeline, firstGroup: uint32, groupCount: uint32, dataSize: uint, pData: pointer): VkResult {.stdcall.}
  vkGetAccelerationStructureHandleNV*: proc (device: VkDevice, accelerationStructure: VkAccelerationStructureNV, dataSize: uint, pData: pointer): VkResult {.stdcall.}
  vkCreateRayTracingPipelinesNV*: proc (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: ptr VkRayTracingPipelineCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pPipelines: ptr VkPipeline): VkResult {.stdcall.}
  vkCreateRayTracingPipelinesKHR*: proc (device: VkDevice, deferredOperation: VkDeferredOperationKHR, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: ptr VkRayTracingPipelineCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pPipelines: ptr VkPipeline): VkResult {.stdcall.}
  vkGetPhysicalDeviceCooperativeMatrixPropertiesNV*: proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkCooperativeMatrixPropertiesNV): VkResult {.stdcall.}
  vkCmdTraceRaysIndirectKHR*: proc (commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: ptr VkStridedDeviceAddressRegionKHR, pMissShaderBindingTable: ptr VkStridedDeviceAddressRegionKHR, pHitShaderBindingTable: ptr VkStridedDeviceAddressRegionKHR, pCallableShaderBindingTable: ptr VkStridedDeviceAddressRegionKHR, indirectDeviceAddress: VkDeviceAddress) {.stdcall.}
  vkCmdTraceRaysIndirect2KHR*: proc (commandBuffer: VkCommandBuffer, indirectDeviceAddress: VkDeviceAddress) {.stdcall.}
  vkGetDeviceAccelerationStructureCompatibilityKHR*: proc (device: VkDevice, pVersionInfo: ptr VkAccelerationStructureVersionInfoKHR, pCompatibility: ptr VkAccelerationStructureCompatibilityKHR) {.stdcall.}
  vkGetRayTracingShaderGroupStackSizeKHR*: proc (device: VkDevice, pipeline: VkPipeline, group: uint32, groupShader: VkShaderGroupShaderKHR): VkDeviceSize {.stdcall.}
  vkCmdSetRayTracingPipelineStackSizeKHR*: proc (commandBuffer: VkCommandBuffer, pipelineStackSize: uint32) {.stdcall.}
  vkGetImageViewHandleNVX*: proc (device: VkDevice, pInfo: ptr VkImageViewHandleInfoNVX): uint32 {.stdcall.}
  vkGetImageViewAddressNVX*: proc (device: VkDevice, imageView: VkImageView, pProperties: ptr VkImageViewAddressPropertiesNVX): VkResult {.stdcall.}
  vkGetPhysicalDeviceSurfacePresentModes2EXT*: proc (physicalDevice: VkPhysicalDevice, pSurfaceInfo: ptr VkPhysicalDeviceSurfaceInfo2KHR, pPresentModeCount: ptr uint32, pPresentModes: ptr VkPresentModeKHR): VkResult {.stdcall.}
  vkGetDeviceGroupSurfacePresentModes2EXT*: proc (device: VkDevice, pSurfaceInfo: ptr VkPhysicalDeviceSurfaceInfo2KHR, pModes: ptr VkDeviceGroupPresentModeFlagsKHR): VkResult {.stdcall.}
  vkAcquireFullScreenExclusiveModeEXT*: proc (device: VkDevice, swapchain: VkSwapchainKHR): VkResult {.stdcall.}
  vkReleaseFullScreenExclusiveModeEXT*: proc (device: VkDevice, swapchain: VkSwapchainKHR): VkResult {.stdcall.}
  vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR*: proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, pCounterCount: ptr uint32, pCounters: ptr VkPerformanceCounterKHR, pCounterDescriptions: ptr VkPerformanceCounterDescriptionKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR*: proc (physicalDevice: VkPhysicalDevice, pPerformanceQueryCreateInfo: ptr VkQueryPoolPerformanceCreateInfoKHR, pNumPasses: ptr uint32) {.stdcall.}
  vkAcquireProfilingLockKHR*: proc (device: VkDevice, pInfo: ptr VkAcquireProfilingLockInfoKHR): VkResult {.stdcall.}
  vkReleaseProfilingLockKHR*: proc (device: VkDevice) {.stdcall.}
  vkGetImageDrmFormatModifierPropertiesEXT*: proc (device: VkDevice, image: VkImage, pProperties: ptr VkImageDrmFormatModifierPropertiesEXT): VkResult {.stdcall.}
  vkGetBufferOpaqueCaptureAddress*: proc (device: VkDevice, pInfo: ptr VkBufferDeviceAddressInfo): uint64 {.stdcall.}
  vkGetBufferDeviceAddress*: proc (device: VkDevice, pInfo: ptr VkBufferDeviceAddressInfo): VkDeviceAddress {.stdcall.}
  vkCreateHeadlessSurfaceEXT*: proc (instance: VkInstance, pCreateInfo: ptr VkHeadlessSurfaceCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV*: proc (physicalDevice: VkPhysicalDevice, pCombinationCount: ptr uint32, pCombinations: ptr VkFramebufferMixedSamplesCombinationNV): VkResult {.stdcall.}
  vkInitializePerformanceApiINTEL*: proc (device: VkDevice, pInitializeInfo: ptr VkInitializePerformanceApiInfoINTEL): VkResult {.stdcall.}
  vkUninitializePerformanceApiINTEL*: proc (device: VkDevice) {.stdcall.}
  vkCmdSetPerformanceMarkerINTEL*: proc (commandBuffer: VkCommandBuffer, pMarkerInfo: ptr VkPerformanceMarkerInfoINTEL): VkResult {.stdcall.}
  vkCmdSetPerformanceStreamMarkerINTEL*: proc (commandBuffer: VkCommandBuffer, pMarkerInfo: ptr VkPerformanceStreamMarkerInfoINTEL): VkResult {.stdcall.}
  vkCmdSetPerformanceOverrideINTEL*: proc (commandBuffer: VkCommandBuffer, pOverrideInfo: ptr VkPerformanceOverrideInfoINTEL): VkResult {.stdcall.}
  vkAcquirePerformanceConfigurationINTEL*: proc (device: VkDevice, pAcquireInfo: ptr VkPerformanceConfigurationAcquireInfoINTEL, pConfiguration: ptr VkPerformanceConfigurationINTEL): VkResult {.stdcall.}
  vkReleasePerformanceConfigurationINTEL*: proc (device: VkDevice, configuration: VkPerformanceConfigurationINTEL): VkResult {.stdcall.}
  vkQueueSetPerformanceConfigurationINTEL*: proc (queue: VkQueue, configuration: VkPerformanceConfigurationINTEL): VkResult {.stdcall.}
  vkGetPerformanceParameterINTEL*: proc (device: VkDevice, parameter: VkPerformanceParameterTypeINTEL, pValue: ptr VkPerformanceValueINTEL): VkResult {.stdcall.}
  vkGetDeviceMemoryOpaqueCaptureAddress*: proc (device: VkDevice, pInfo: ptr VkDeviceMemoryOpaqueCaptureAddressInfo): uint64 {.stdcall.}
  vkGetPipelineExecutablePropertiesKHR*: proc (device: VkDevice, pPipelineInfo: ptr VkPipelineInfoKHR, pExecutableCount: ptr uint32, pProperties: ptr VkPipelineExecutablePropertiesKHR): VkResult {.stdcall.}
  vkGetPipelineExecutableStatisticsKHR*: proc (device: VkDevice, pExecutableInfo: ptr VkPipelineExecutableInfoKHR, pStatisticCount: ptr uint32, pStatistics: ptr VkPipelineExecutableStatisticKHR): VkResult {.stdcall.}
  vkGetPipelineExecutableInternalRepresentationsKHR*: proc (device: VkDevice, pExecutableInfo: ptr VkPipelineExecutableInfoKHR, pInternalRepresentationCount: ptr uint32, pInternalRepresentations: ptr VkPipelineExecutableInternalRepresentationKHR): VkResult {.stdcall.}
  vkCmdSetLineStippleKHR*: proc (commandBuffer: VkCommandBuffer, lineStippleFactor: uint32, lineStipplePattern: uint16) {.stdcall.}
  vkGetFaultData*: proc (device: VkDevice, faultQueryBehavior: VkFaultQueryBehavior, pUnrecordedFaults: ptr VkBool32, pFaultCount: ptr uint32, pFaults: ptr VkFaultData): VkResult {.stdcall.}
  vkGetPhysicalDeviceToolProperties*: proc (physicalDevice: VkPhysicalDevice, pToolCount: ptr uint32, pToolProperties: ptr VkPhysicalDeviceToolProperties): VkResult {.stdcall.}
  vkCreateAccelerationStructureKHR*: proc (device: VkDevice, pCreateInfo: ptr VkAccelerationStructureCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pAccelerationStructure: ptr VkAccelerationStructureKHR): VkResult {.stdcall.}
  vkCmdBuildAccelerationStructuresKHR*: proc (commandBuffer: VkCommandBuffer, infoCount: uint32, pInfos: ptr VkAccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: ptr ptr VkAccelerationStructureBuildRangeInfoKHR) {.stdcall.}
  vkCmdBuildAccelerationStructuresIndirectKHR*: proc (commandBuffer: VkCommandBuffer, infoCount: uint32, pInfos: ptr VkAccelerationStructureBuildGeometryInfoKHR, pIndirectDeviceAddresses: ptr VkDeviceAddress, pIndirectStrides: ptr uint32, ppMaxPrimitiveCounts: ptr ptr uint32) {.stdcall.}
  vkBuildAccelerationStructuresKHR*: proc (device: VkDevice, deferredOperation: VkDeferredOperationKHR, infoCount: uint32, pInfos: ptr VkAccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: ptr ptr VkAccelerationStructureBuildRangeInfoKHR): VkResult {.stdcall.}
  vkGetAccelerationStructureDeviceAddressKHR*: proc (device: VkDevice, pInfo: ptr VkAccelerationStructureDeviceAddressInfoKHR): VkDeviceAddress {.stdcall.}
  vkCreateDeferredOperationKHR*: proc (device: VkDevice, pAllocator: ptr VkAllocationCallbacks, pDeferredOperation: ptr VkDeferredOperationKHR): VkResult {.stdcall.}
  vkDestroyDeferredOperationKHR*: proc (device: VkDevice, operation: VkDeferredOperationKHR, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkGetDeferredOperationMaxConcurrencyKHR*: proc (device: VkDevice, operation: VkDeferredOperationKHR): uint32 {.stdcall.}
  vkGetDeferredOperationResultKHR*: proc (device: VkDevice, operation: VkDeferredOperationKHR): VkResult {.stdcall.}
  vkDeferredOperationJoinKHR*: proc (device: VkDevice, operation: VkDeferredOperationKHR): VkResult {.stdcall.}
  vkGetPipelineIndirectMemoryRequirementsNV*: proc (device: VkDevice, pCreateInfo: ptr VkComputePipelineCreateInfo, pMemoryRequirements: ptr VkMemoryRequirements2) {.stdcall.}
  vkGetPipelineIndirectDeviceAddressNV*: proc (device: VkDevice, pInfo: ptr VkPipelineIndirectDeviceAddressInfoNV): VkDeviceAddress {.stdcall.}
  vkCmdSetCullMode*: proc (commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags) {.stdcall.}
  vkCmdSetFrontFace*: proc (commandBuffer: VkCommandBuffer, frontFace: VkFrontFace) {.stdcall.}
  vkCmdSetPrimitiveTopology*: proc (commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology) {.stdcall.}
  vkCmdSetViewportWithCount*: proc (commandBuffer: VkCommandBuffer, viewportCount: uint32, pViewports: ptr VkViewport) {.stdcall.}
  vkCmdSetScissorWithCount*: proc (commandBuffer: VkCommandBuffer, scissorCount: uint32, pScissors: ptr VkRect2D) {.stdcall.}
  vkCmdBindIndexBuffer2KHR*: proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, size: VkDeviceSize, indexType: VkIndexType) {.stdcall.}
  vkCmdBindVertexBuffers2*: proc (commandBuffer: VkCommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: ptr VkBuffer, pOffsets: ptr VkDeviceSize, pSizes: ptr VkDeviceSize, pStrides: ptr VkDeviceSize) {.stdcall.}
  vkCmdSetDepthTestEnable*: proc (commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32) {.stdcall.}
  vkCmdSetDepthWriteEnable*: proc (commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32) {.stdcall.}
  vkCmdSetDepthCompareOp*: proc (commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp) {.stdcall.}
  vkCmdSetDepthBoundsTestEnable*: proc (commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32) {.stdcall.}
  vkCmdSetStencilTestEnable*: proc (commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32) {.stdcall.}
  vkCmdSetStencilOp*: proc (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, failOp: VkStencilOp, passOp: VkStencilOp, depthFailOp: VkStencilOp, compareOp: VkCompareOp) {.stdcall.}
  vkCmdSetPatchControlPointsEXT*: proc (commandBuffer: VkCommandBuffer, patchControlPoints: uint32) {.stdcall.}
  vkCmdSetRasterizerDiscardEnable*: proc (commandBuffer: VkCommandBuffer, rasterizerDiscardEnable: VkBool32) {.stdcall.}
  vkCmdSetDepthBiasEnable*: proc (commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32) {.stdcall.}
  vkCmdSetLogicOpEXT*: proc (commandBuffer: VkCommandBuffer, logicOp: VkLogicOp) {.stdcall.}
  vkCmdSetPrimitiveRestartEnable*: proc (commandBuffer: VkCommandBuffer, primitiveRestartEnable: VkBool32) {.stdcall.}
  vkCmdSetTessellationDomainOriginEXT*: proc (commandBuffer: VkCommandBuffer, domainOrigin: VkTessellationDomainOrigin) {.stdcall.}
  vkCmdSetDepthClampEnableEXT*: proc (commandBuffer: VkCommandBuffer, depthClampEnable: VkBool32) {.stdcall.}
  vkCmdSetPolygonModeEXT*: proc (commandBuffer: VkCommandBuffer, polygonMode: VkPolygonMode) {.stdcall.}
  vkCmdSetRasterizationSamplesEXT*: proc (commandBuffer: VkCommandBuffer, rasterizationSamples: VkSampleCountFlagBits) {.stdcall.}
  vkCmdSetSampleMaskEXT*: proc (commandBuffer: VkCommandBuffer, samples: VkSampleCountFlagBits, pSampleMask: ptr VkSampleMask) {.stdcall.}
  vkCmdSetAlphaToCoverageEnableEXT*: proc (commandBuffer: VkCommandBuffer, alphaToCoverageEnable: VkBool32) {.stdcall.}
  vkCmdSetAlphaToOneEnableEXT*: proc (commandBuffer: VkCommandBuffer, alphaToOneEnable: VkBool32) {.stdcall.}
  vkCmdSetLogicOpEnableEXT*: proc (commandBuffer: VkCommandBuffer, logicOpEnable: VkBool32) {.stdcall.}
  vkCmdSetColorBlendEnableEXT*: proc (commandBuffer: VkCommandBuffer, firstAttachment: uint32, attachmentCount: uint32, pColorBlendEnables: ptr VkBool32) {.stdcall.}
  vkCmdSetColorBlendEquationEXT*: proc (commandBuffer: VkCommandBuffer, firstAttachment: uint32, attachmentCount: uint32, pColorBlendEquations: ptr VkColorBlendEquationEXT) {.stdcall.}
  vkCmdSetColorWriteMaskEXT*: proc (commandBuffer: VkCommandBuffer, firstAttachment: uint32, attachmentCount: uint32, pColorWriteMasks: ptr VkColorComponentFlags) {.stdcall.}
  vkCmdSetRasterizationStreamEXT*: proc (commandBuffer: VkCommandBuffer, rasterizationStream: uint32) {.stdcall.}
  vkCmdSetConservativeRasterizationModeEXT*: proc (commandBuffer: VkCommandBuffer, conservativeRasterizationMode: VkConservativeRasterizationModeEXT) {.stdcall.}
  vkCmdSetExtraPrimitiveOverestimationSizeEXT*: proc (commandBuffer: VkCommandBuffer, extraPrimitiveOverestimationSize: float32) {.stdcall.}
  vkCmdSetDepthClipEnableEXT*: proc (commandBuffer: VkCommandBuffer, depthClipEnable: VkBool32) {.stdcall.}
  vkCmdSetSampleLocationsEnableEXT*: proc (commandBuffer: VkCommandBuffer, sampleLocationsEnable: VkBool32) {.stdcall.}
  vkCmdSetColorBlendAdvancedEXT*: proc (commandBuffer: VkCommandBuffer, firstAttachment: uint32, attachmentCount: uint32, pColorBlendAdvanced: ptr VkColorBlendAdvancedEXT) {.stdcall.}
  vkCmdSetProvokingVertexModeEXT*: proc (commandBuffer: VkCommandBuffer, provokingVertexMode: VkProvokingVertexModeEXT) {.stdcall.}
  vkCmdSetLineRasterizationModeEXT*: proc (commandBuffer: VkCommandBuffer, lineRasterizationMode: VkLineRasterizationModeEXT) {.stdcall.}
  vkCmdSetLineStippleEnableEXT*: proc (commandBuffer: VkCommandBuffer, stippledLineEnable: VkBool32) {.stdcall.}
  vkCmdSetDepthClipNegativeOneToOneEXT*: proc (commandBuffer: VkCommandBuffer, negativeOneToOne: VkBool32) {.stdcall.}
  vkCmdSetViewportWScalingEnableNV*: proc (commandBuffer: VkCommandBuffer, viewportWScalingEnable: VkBool32) {.stdcall.}
  vkCmdSetViewportSwizzleNV*: proc (commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pViewportSwizzles: ptr VkViewportSwizzleNV) {.stdcall.}
  vkCmdSetCoverageToColorEnableNV*: proc (commandBuffer: VkCommandBuffer, coverageToColorEnable: VkBool32) {.stdcall.}
  vkCmdSetCoverageToColorLocationNV*: proc (commandBuffer: VkCommandBuffer, coverageToColorLocation: uint32) {.stdcall.}
  vkCmdSetCoverageModulationModeNV*: proc (commandBuffer: VkCommandBuffer, coverageModulationMode: VkCoverageModulationModeNV) {.stdcall.}
  vkCmdSetCoverageModulationTableEnableNV*: proc (commandBuffer: VkCommandBuffer, coverageModulationTableEnable: VkBool32) {.stdcall.}
  vkCmdSetCoverageModulationTableNV*: proc (commandBuffer: VkCommandBuffer, coverageModulationTableCount: uint32, pCoverageModulationTable: ptr float32) {.stdcall.}
  vkCmdSetShadingRateImageEnableNV*: proc (commandBuffer: VkCommandBuffer, shadingRateImageEnable: VkBool32) {.stdcall.}
  vkCmdSetCoverageReductionModeNV*: proc (commandBuffer: VkCommandBuffer, coverageReductionMode: VkCoverageReductionModeNV) {.stdcall.}
  vkCmdSetRepresentativeFragmentTestEnableNV*: proc (commandBuffer: VkCommandBuffer, representativeFragmentTestEnable: VkBool32) {.stdcall.}
  vkCreatePrivateDataSlot*: proc (device: VkDevice, pCreateInfo: ptr VkPrivateDataSlotCreateInfo, pAllocator: ptr VkAllocationCallbacks, pPrivateDataSlot: ptr VkPrivateDataSlot): VkResult {.stdcall.}
  vkDestroyPrivateDataSlot*: proc (device: VkDevice, privateDataSlot: VkPrivateDataSlot, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkSetPrivateData*: proc (device: VkDevice, objectType: VkObjectType, objectHandle: uint64, privateDataSlot: VkPrivateDataSlot, data: uint64): VkResult {.stdcall.}
  vkGetPrivateData*: proc (device: VkDevice, objectType: VkObjectType, objectHandle: uint64, privateDataSlot: VkPrivateDataSlot, pData: ptr uint64) {.stdcall.}
  vkCmdCopyBuffer2*: proc (commandBuffer: VkCommandBuffer, pCopyBufferInfo: ptr VkCopyBufferInfo2) {.stdcall.}
  vkCmdCopyImage2*: proc (commandBuffer: VkCommandBuffer, pCopyImageInfo: ptr VkCopyImageInfo2) {.stdcall.}
  vkCmdBlitImage2*: proc (commandBuffer: VkCommandBuffer, pBlitImageInfo: ptr VkBlitImageInfo2) {.stdcall.}
  vkCmdCopyBufferToImage2*: proc (commandBuffer: VkCommandBuffer, pCopyBufferToImageInfo: ptr VkCopyBufferToImageInfo2) {.stdcall.}
  vkCmdCopyImageToBuffer2*: proc (commandBuffer: VkCommandBuffer, pCopyImageToBufferInfo: ptr VkCopyImageToBufferInfo2) {.stdcall.}
  vkCmdResolveImage2*: proc (commandBuffer: VkCommandBuffer, pResolveImageInfo: ptr VkResolveImageInfo2) {.stdcall.}
  vkCmdRefreshObjectsKHR*: proc (commandBuffer: VkCommandBuffer, pRefreshObjects: ptr VkRefreshObjectListKHR) {.stdcall.}
  vkGetPhysicalDeviceRefreshableObjectTypesKHR*: proc (physicalDevice: VkPhysicalDevice, pRefreshableObjectTypeCount: ptr uint32, pRefreshableObjectTypes: ptr VkObjectType): VkResult {.stdcall.}
  vkCmdSetFragmentShadingRateKHR*: proc (commandBuffer: VkCommandBuffer, pFragmentSize: ptr VkExtent2D, combinerOps: array[2, VkFragmentShadingRateCombinerOpKHR]) {.stdcall.}
  vkGetPhysicalDeviceFragmentShadingRatesKHR*: proc (physicalDevice: VkPhysicalDevice, pFragmentShadingRateCount: ptr uint32, pFragmentShadingRates: ptr VkPhysicalDeviceFragmentShadingRateKHR): VkResult {.stdcall.}
  vkCmdSetFragmentShadingRateEnumNV*: proc (commandBuffer: VkCommandBuffer, shadingRate: VkFragmentShadingRateNV, combinerOps: array[2, VkFragmentShadingRateCombinerOpKHR]) {.stdcall.}
  vkGetAccelerationStructureBuildSizesKHR*: proc (device: VkDevice, buildType: VkAccelerationStructureBuildTypeKHR, pBuildInfo: ptr VkAccelerationStructureBuildGeometryInfoKHR, pMaxPrimitiveCounts: ptr uint32, pSizeInfo: ptr VkAccelerationStructureBuildSizesInfoKHR) {.stdcall.}
  vkCmdSetVertexInputEXT*: proc (commandBuffer: VkCommandBuffer, vertexBindingDescriptionCount: uint32, pVertexBindingDescriptions: ptr VkVertexInputBindingDescription2EXT, vertexAttributeDescriptionCount: uint32, pVertexAttributeDescriptions: ptr VkVertexInputAttributeDescription2EXT) {.stdcall.}
  vkCmdSetColorWriteEnableEXT*: proc (commandBuffer: VkCommandBuffer, attachmentCount: uint32, pColorWriteEnables: ptr VkBool32) {.stdcall.}
  vkCmdSetEvent2*: proc (commandBuffer: VkCommandBuffer, event: VkEvent, pDependencyInfo: ptr VkDependencyInfo) {.stdcall.}
  vkCmdResetEvent2*: proc (commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags2) {.stdcall.}
  vkCmdWaitEvents2*: proc (commandBuffer: VkCommandBuffer, eventCount: uint32, pEvents: ptr VkEvent, pDependencyInfos: ptr VkDependencyInfo) {.stdcall.}
  vkCmdPipelineBarrier2*: proc (commandBuffer: VkCommandBuffer, pDependencyInfo: ptr VkDependencyInfo) {.stdcall.}
  vkQueueSubmit2*: proc (queue: VkQueue, submitCount: uint32, pSubmits: ptr VkSubmitInfo2, fence: VkFence): VkResult {.stdcall.}
  vkCmdWriteTimestamp2*: proc (commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2, queryPool: VkQueryPool, query: uint32) {.stdcall.}
  vkCmdWriteBufferMarker2AMD*: proc (commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: uint32) {.stdcall.}
  vkGetQueueCheckpointData2NV*: proc (queue: VkQueue, pCheckpointDataCount: ptr uint32, pCheckpointData: ptr VkCheckpointData2NV) {.stdcall.}
  vkCopyMemoryToImageEXT*: proc (device: VkDevice, pCopyMemoryToImageInfo: ptr VkCopyMemoryToImageInfoEXT): VkResult {.stdcall.}
  vkCopyImageToMemoryEXT*: proc (device: VkDevice, pCopyImageToMemoryInfo: ptr VkCopyImageToMemoryInfoEXT): VkResult {.stdcall.}
  vkCopyImageToImageEXT*: proc (device: VkDevice, pCopyImageToImageInfo: ptr VkCopyImageToImageInfoEXT): VkResult {.stdcall.}
  vkTransitionImageLayoutEXT*: proc (device: VkDevice, transitionCount: uint32, pTransitions: ptr VkHostImageLayoutTransitionInfoEXT): VkResult {.stdcall.}
  vkGetCommandPoolMemoryConsumption*: proc (device: VkDevice, commandPool: VkCommandPool, commandBuffer: VkCommandBuffer, pConsumption: ptr VkCommandPoolMemoryConsumption) {.stdcall.}
  vkGetPhysicalDeviceVideoCapabilitiesKHR*: proc (physicalDevice: VkPhysicalDevice, pVideoProfile: ptr VkVideoProfileInfoKHR, pCapabilities: ptr VkVideoCapabilitiesKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceVideoFormatPropertiesKHR*: proc (physicalDevice: VkPhysicalDevice, pVideoFormatInfo: ptr VkPhysicalDeviceVideoFormatInfoKHR, pVideoFormatPropertyCount: ptr uint32, pVideoFormatProperties: ptr VkVideoFormatPropertiesKHR): VkResult {.stdcall.}
  vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR*: proc (physicalDevice: VkPhysicalDevice, pQualityLevelInfo: ptr VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR, pQualityLevelProperties: ptr VkVideoEncodeQualityLevelPropertiesKHR): VkResult {.stdcall.}
  vkCreateVideoSessionKHR*: proc (device: VkDevice, pCreateInfo: ptr VkVideoSessionCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pVideoSession: ptr VkVideoSessionKHR): VkResult {.stdcall.}
  vkDestroyVideoSessionKHR*: proc (device: VkDevice, videoSession: VkVideoSessionKHR, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkCreateVideoSessionParametersKHR*: proc (device: VkDevice, pCreateInfo: ptr VkVideoSessionParametersCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pVideoSessionParameters: ptr VkVideoSessionParametersKHR): VkResult {.stdcall.}
  vkUpdateVideoSessionParametersKHR*: proc (device: VkDevice, videoSessionParameters: VkVideoSessionParametersKHR, pUpdateInfo: ptr VkVideoSessionParametersUpdateInfoKHR): VkResult {.stdcall.}
  vkGetEncodedVideoSessionParametersKHR*: proc (device: VkDevice, pVideoSessionParametersInfo: ptr VkVideoEncodeSessionParametersGetInfoKHR, pFeedbackInfo: ptr VkVideoEncodeSessionParametersFeedbackInfoKHR, pDataSize: ptr uint, pData: pointer): VkResult {.stdcall.}
  vkDestroyVideoSessionParametersKHR*: proc (device: VkDevice, videoSessionParameters: VkVideoSessionParametersKHR, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkGetVideoSessionMemoryRequirementsKHR*: proc (device: VkDevice, videoSession: VkVideoSessionKHR, pMemoryRequirementsCount: ptr uint32, pMemoryRequirements: ptr VkVideoSessionMemoryRequirementsKHR): VkResult {.stdcall.}
  vkBindVideoSessionMemoryKHR*: proc (device: VkDevice, videoSession: VkVideoSessionKHR, bindSessionMemoryInfoCount: uint32, pBindSessionMemoryInfos: ptr VkBindVideoSessionMemoryInfoKHR): VkResult {.stdcall.}
  vkCmdDecodeVideoKHR*: proc (commandBuffer: VkCommandBuffer, pDecodeInfo: ptr VkVideoDecodeInfoKHR) {.stdcall.}
  vkCmdBeginVideoCodingKHR*: proc (commandBuffer: VkCommandBuffer, pBeginInfo: ptr VkVideoBeginCodingInfoKHR) {.stdcall.}
  vkCmdControlVideoCodingKHR*: proc (commandBuffer: VkCommandBuffer, pCodingControlInfo: ptr VkVideoCodingControlInfoKHR) {.stdcall.}
  vkCmdEndVideoCodingKHR*: proc (commandBuffer: VkCommandBuffer, pEndCodingInfo: ptr VkVideoEndCodingInfoKHR) {.stdcall.}
  vkCmdEncodeVideoKHR*: proc (commandBuffer: VkCommandBuffer, pEncodeInfo: ptr VkVideoEncodeInfoKHR) {.stdcall.}
  vkCmdDecompressMemoryNV*: proc (commandBuffer: VkCommandBuffer, decompressRegionCount: uint32, pDecompressMemoryRegions: ptr VkDecompressMemoryRegionNV) {.stdcall.}
  vkCmdDecompressMemoryIndirectCountNV*: proc (commandBuffer: VkCommandBuffer, indirectCommandsAddress: VkDeviceAddress, indirectCommandsCountAddress: VkDeviceAddress, stride: uint32) {.stdcall.}
  vkCreateCuModuleNVX*: proc (device: VkDevice, pCreateInfo: ptr VkCuModuleCreateInfoNVX, pAllocator: ptr VkAllocationCallbacks, pModule: ptr VkCuModuleNVX): VkResult {.stdcall.}
  vkCreateCuFunctionNVX*: proc (device: VkDevice, pCreateInfo: ptr VkCuFunctionCreateInfoNVX, pAllocator: ptr VkAllocationCallbacks, pFunction: ptr VkCuFunctionNVX): VkResult {.stdcall.}
  vkDestroyCuModuleNVX*: proc (device: VkDevice, module: VkCuModuleNVX, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkDestroyCuFunctionNVX*: proc (device: VkDevice, function: VkCuFunctionNVX, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkCmdCuLaunchKernelNVX*: proc (commandBuffer: VkCommandBuffer, pLaunchInfo: ptr VkCuLaunchInfoNVX) {.stdcall.}
  vkGetDescriptorSetLayoutSizeEXT*: proc (device: VkDevice, layout: VkDescriptorSetLayout, pLayoutSizeInBytes: ptr VkDeviceSize) {.stdcall.}
  vkGetDescriptorSetLayoutBindingOffsetEXT*: proc (device: VkDevice, layout: VkDescriptorSetLayout, binding: uint32, pOffset: ptr VkDeviceSize) {.stdcall.}
  vkGetDescriptorEXT*: proc (device: VkDevice, pDescriptorInfo: ptr VkDescriptorGetInfoEXT, dataSize: uint, pDescriptor: pointer) {.stdcall.}
  vkCmdBindDescriptorBuffersEXT*: proc (commandBuffer: VkCommandBuffer, bufferCount: uint32, pBindingInfos: ptr VkDescriptorBufferBindingInfoEXT) {.stdcall.}
  vkCmdSetDescriptorBufferOffsetsEXT*: proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: uint32, setCount: uint32, pBufferIndices: ptr uint32, pOffsets: ptr VkDeviceSize) {.stdcall.}
  vkCmdBindDescriptorBufferEmbeddedSamplersEXT*: proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: uint32) {.stdcall.}
  vkGetBufferOpaqueCaptureDescriptorDataEXT*: proc (device: VkDevice, pInfo: ptr VkBufferCaptureDescriptorDataInfoEXT, pData: pointer): VkResult {.stdcall.}
  vkGetImageOpaqueCaptureDescriptorDataEXT*: proc (device: VkDevice, pInfo: ptr VkImageCaptureDescriptorDataInfoEXT, pData: pointer): VkResult {.stdcall.}
  vkGetImageViewOpaqueCaptureDescriptorDataEXT*: proc (device: VkDevice, pInfo: ptr VkImageViewCaptureDescriptorDataInfoEXT, pData: pointer): VkResult {.stdcall.}
  vkGetSamplerOpaqueCaptureDescriptorDataEXT*: proc (device: VkDevice, pInfo: ptr VkSamplerCaptureDescriptorDataInfoEXT, pData: pointer): VkResult {.stdcall.}
  vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT*: proc (device: VkDevice, pInfo: ptr VkAccelerationStructureCaptureDescriptorDataInfoEXT, pData: pointer): VkResult {.stdcall.}
  vkSetDeviceMemoryPriorityEXT*: proc (device: VkDevice, memory: VkDeviceMemory, priority: float32) {.stdcall.}
  vkAcquireDrmDisplayEXT*: proc (physicalDevice: VkPhysicalDevice, drmFd: int32, display: VkDisplayKHR): VkResult {.stdcall.}
  vkGetDrmDisplayEXT*: proc (physicalDevice: VkPhysicalDevice, drmFd: int32, connectorId: uint32, display: ptr VkDisplayKHR): VkResult {.stdcall.}
  vkWaitForPresentKHR*: proc (device: VkDevice, swapchain: VkSwapchainKHR, presentId: uint64, timeout: uint64): VkResult {.stdcall.}
  vkCreateBufferCollectionFUCHSIA*: proc (device: VkDevice, pCreateInfo: ptr VkBufferCollectionCreateInfoFUCHSIA, pAllocator: ptr VkAllocationCallbacks, pCollection: ptr VkBufferCollectionFUCHSIA): VkResult {.stdcall.}
  vkSetBufferCollectionBufferConstraintsFUCHSIA*: proc (device: VkDevice, collection: VkBufferCollectionFUCHSIA, pBufferConstraintsInfo: ptr VkBufferConstraintsInfoFUCHSIA): VkResult {.stdcall.}
  vkSetBufferCollectionImageConstraintsFUCHSIA*: proc (device: VkDevice, collection: VkBufferCollectionFUCHSIA, pImageConstraintsInfo: ptr VkImageConstraintsInfoFUCHSIA): VkResult {.stdcall.}
  vkDestroyBufferCollectionFUCHSIA*: proc (device: VkDevice, collection: VkBufferCollectionFUCHSIA, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkGetBufferCollectionPropertiesFUCHSIA*: proc (device: VkDevice, collection: VkBufferCollectionFUCHSIA, pProperties: ptr VkBufferCollectionPropertiesFUCHSIA): VkResult {.stdcall.}
  vkCreateCudaModuleNV*: proc (device: VkDevice, pCreateInfo: ptr VkCudaModuleCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pModule: ptr VkCudaModuleNV): VkResult {.stdcall.}
  vkGetCudaModuleCacheNV*: proc (device: VkDevice, module: VkCudaModuleNV, pCacheSize: ptr uint, pCacheData: pointer): VkResult {.stdcall.}
  vkCreateCudaFunctionNV*: proc (device: VkDevice, pCreateInfo: ptr VkCudaFunctionCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pFunction: ptr VkCudaFunctionNV): VkResult {.stdcall.}
  vkDestroyCudaModuleNV*: proc (device: VkDevice, module: VkCudaModuleNV, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkDestroyCudaFunctionNV*: proc (device: VkDevice, function: VkCudaFunctionNV, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkCmdCudaLaunchKernelNV*: proc (commandBuffer: VkCommandBuffer, pLaunchInfo: ptr VkCudaLaunchInfoNV) {.stdcall.}
  vkCmdBeginRendering*: proc (commandBuffer: VkCommandBuffer, pRenderingInfo: ptr VkRenderingInfo) {.stdcall.}
  vkCmdEndRendering*: proc (commandBuffer: VkCommandBuffer) {.stdcall.}
  vkGetDescriptorSetLayoutHostMappingInfoVALVE*: proc (device: VkDevice, pBindingReference: ptr VkDescriptorSetBindingReferenceVALVE, pHostMapping: ptr VkDescriptorSetLayoutHostMappingInfoVALVE) {.stdcall.}
  vkGetDescriptorSetHostMappingVALVE*: proc (device: VkDevice, descriptorSet: VkDescriptorSet, ppData: ptr pointer) {.stdcall.}
  vkCreateMicromapEXT*: proc (device: VkDevice, pCreateInfo: ptr VkMicromapCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pMicromap: ptr VkMicromapEXT): VkResult {.stdcall.}
  vkCmdBuildMicromapsEXT*: proc (commandBuffer: VkCommandBuffer, infoCount: uint32, pInfos: ptr VkMicromapBuildInfoEXT) {.stdcall.}
  vkBuildMicromapsEXT*: proc (device: VkDevice, deferredOperation: VkDeferredOperationKHR, infoCount: uint32, pInfos: ptr VkMicromapBuildInfoEXT): VkResult {.stdcall.}
  vkDestroyMicromapEXT*: proc (device: VkDevice, micromap: VkMicromapEXT, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkCmdCopyMicromapEXT*: proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkCopyMicromapInfoEXT) {.stdcall.}
  vkCopyMicromapEXT*: proc (device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: ptr VkCopyMicromapInfoEXT): VkResult {.stdcall.}
  vkCmdCopyMicromapToMemoryEXT*: proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkCopyMicromapToMemoryInfoEXT) {.stdcall.}
  vkCopyMicromapToMemoryEXT*: proc (device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: ptr VkCopyMicromapToMemoryInfoEXT): VkResult {.stdcall.}
  vkCmdCopyMemoryToMicromapEXT*: proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkCopyMemoryToMicromapInfoEXT) {.stdcall.}
  vkCopyMemoryToMicromapEXT*: proc (device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: ptr VkCopyMemoryToMicromapInfoEXT): VkResult {.stdcall.}
  vkCmdWriteMicromapsPropertiesEXT*: proc (commandBuffer: VkCommandBuffer, micromapCount: uint32, pMicromaps: ptr VkMicromapEXT, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: uint32) {.stdcall.}
  vkWriteMicromapsPropertiesEXT*: proc (device: VkDevice, micromapCount: uint32, pMicromaps: ptr VkMicromapEXT, queryType: VkQueryType, dataSize: uint, pData: pointer, stride: uint): VkResult {.stdcall.}
  vkGetDeviceMicromapCompatibilityEXT*: proc (device: VkDevice, pVersionInfo: ptr VkMicromapVersionInfoEXT, pCompatibility: ptr VkAccelerationStructureCompatibilityKHR) {.stdcall.}
  vkGetMicromapBuildSizesEXT*: proc (device: VkDevice, buildType: VkAccelerationStructureBuildTypeKHR, pBuildInfo: ptr VkMicromapBuildInfoEXT, pSizeInfo: ptr VkMicromapBuildSizesInfoEXT) {.stdcall.}
  vkGetShaderModuleIdentifierEXT*: proc (device: VkDevice, shaderModule: VkShaderModule, pIdentifier: ptr VkShaderModuleIdentifierEXT) {.stdcall.}
  vkGetShaderModuleCreateInfoIdentifierEXT*: proc (device: VkDevice, pCreateInfo: ptr VkShaderModuleCreateInfo, pIdentifier: ptr VkShaderModuleIdentifierEXT) {.stdcall.}
  vkGetImageSubresourceLayout2KHR*: proc (device: VkDevice, image: VkImage, pSubresource: ptr VkImageSubresource2KHR, pLayout: ptr VkSubresourceLayout2KHR) {.stdcall.}
  vkGetPipelinePropertiesEXT*: proc (device: VkDevice, pPipelineInfo: ptr VkPipelineInfoEXT, pPipelineProperties: ptr VkBaseOutStructure): VkResult {.stdcall.}
  vkExportMetalObjectsEXT*: proc (device: VkDevice, pMetalObjectsInfo: ptr VkExportMetalObjectsInfoEXT) {.stdcall.}
  vkGetFramebufferTilePropertiesQCOM*: proc (device: VkDevice, framebuffer: VkFramebuffer, pPropertiesCount: ptr uint32, pProperties: ptr VkTilePropertiesQCOM): VkResult {.stdcall.}
  vkGetDynamicRenderingTilePropertiesQCOM*: proc (device: VkDevice, pRenderingInfo: ptr VkRenderingInfo, pProperties: ptr VkTilePropertiesQCOM): VkResult {.stdcall.}
  vkGetPhysicalDeviceOpticalFlowImageFormatsNV*: proc (physicalDevice: VkPhysicalDevice, pOpticalFlowImageFormatInfo: ptr VkOpticalFlowImageFormatInfoNV, pFormatCount: ptr uint32, pImageFormatProperties: ptr VkOpticalFlowImageFormatPropertiesNV): VkResult {.stdcall.}
  vkCreateOpticalFlowSessionNV*: proc (device: VkDevice, pCreateInfo: ptr VkOpticalFlowSessionCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pSession: ptr VkOpticalFlowSessionNV): VkResult {.stdcall.}
  vkDestroyOpticalFlowSessionNV*: proc (device: VkDevice, session: VkOpticalFlowSessionNV, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkBindOpticalFlowSessionImageNV*: proc (device: VkDevice, session: VkOpticalFlowSessionNV, bindingPoint: VkOpticalFlowSessionBindingPointNV, view: VkImageView, layout: VkImageLayout): VkResult {.stdcall.}
  vkCmdOpticalFlowExecuteNV*: proc (commandBuffer: VkCommandBuffer, session: VkOpticalFlowSessionNV, pExecuteInfo: ptr VkOpticalFlowExecuteInfoNV) {.stdcall.}
  vkGetDeviceFaultInfoEXT*: proc (device: VkDevice, pFaultCounts: ptr VkDeviceFaultCountsEXT, pFaultInfo: ptr VkDeviceFaultInfoEXT): VkResult {.stdcall.}
  vkCmdSetDepthBias2EXT*: proc (commandBuffer: VkCommandBuffer, pDepthBiasInfo: ptr VkDepthBiasInfoEXT) {.stdcall.}
  vkReleaseSwapchainImagesEXT*: proc (device: VkDevice, pReleaseInfo: ptr VkReleaseSwapchainImagesInfoEXT): VkResult {.stdcall.}
  vkGetDeviceImageSubresourceLayoutKHR*: proc (device: VkDevice, pInfo: ptr VkDeviceImageSubresourceInfoKHR, pLayout: ptr VkSubresourceLayout2KHR) {.stdcall.}
  vkMapMemory2KHR*: proc (device: VkDevice, pMemoryMapInfo: ptr VkMemoryMapInfoKHR, ppData: ptr pointer): VkResult {.stdcall.}
  vkUnmapMemory2KHR*: proc (device: VkDevice, pMemoryUnmapInfo: ptr VkMemoryUnmapInfoKHR): VkResult {.stdcall.}
  vkCreateShadersEXT*: proc (device: VkDevice, createInfoCount: uint32, pCreateInfos: ptr VkShaderCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pShaders: ptr VkShaderEXT): VkResult {.stdcall.}
  vkDestroyShaderEXT*: proc (device: VkDevice, shader: VkShaderEXT, pAllocator: ptr VkAllocationCallbacks) {.stdcall.}
  vkGetShaderBinaryDataEXT*: proc (device: VkDevice, shader: VkShaderEXT, pDataSize: ptr uint, pData: pointer): VkResult {.stdcall.}
  vkCmdBindShadersEXT*: proc (commandBuffer: VkCommandBuffer, stageCount: uint32, pStages: ptr VkShaderStageFlagBits, pShaders: ptr VkShaderEXT) {.stdcall.}
  vkGetScreenBufferPropertiesQNX*: proc (device: VkDevice, buffer: ptr screen_buffer, pProperties: ptr VkScreenBufferPropertiesQNX): VkResult {.stdcall.}
  vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR*: proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkCooperativeMatrixPropertiesKHR): VkResult {.stdcall.}
  vkGetExecutionGraphPipelineScratchSizeAMDX*: proc (device: VkDevice, executionGraph: VkPipeline, pSizeInfo: ptr VkExecutionGraphPipelineScratchSizeAMDX): VkResult {.stdcall.}
  vkGetExecutionGraphPipelineNodeIndexAMDX*: proc (device: VkDevice, executionGraph: VkPipeline, pNodeInfo: ptr VkPipelineShaderStageNodeCreateInfoAMDX, pNodeIndex: ptr uint32): VkResult {.stdcall.}
  vkCreateExecutionGraphPipelinesAMDX*: proc (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: ptr VkExecutionGraphPipelineCreateInfoAMDX, pAllocator: ptr VkAllocationCallbacks, pPipelines: ptr VkPipeline): VkResult {.stdcall.}
  vkCmdInitializeGraphScratchMemoryAMDX*: proc (commandBuffer: VkCommandBuffer, scratch: VkDeviceAddress) {.stdcall.}
  vkCmdDispatchGraphAMDX*: proc (commandBuffer: VkCommandBuffer, scratch: VkDeviceAddress, pCountInfo: ptr VkDispatchGraphCountInfoAMDX) {.stdcall.}
  vkCmdDispatchGraphIndirectAMDX*: proc (commandBuffer: VkCommandBuffer, scratch: VkDeviceAddress, pCountInfo: ptr VkDispatchGraphCountInfoAMDX) {.stdcall.}
  vkCmdDispatchGraphIndirectCountAMDX*: proc (commandBuffer: VkCommandBuffer, scratch: VkDeviceAddress, countInfo: VkDeviceAddress) {.stdcall.}
  vkCmdBindDescriptorSets2KHR*: proc (commandBuffer: VkCommandBuffer, pBindDescriptorSetsInfo: ptr VkBindDescriptorSetsInfoKHR) {.stdcall.}
  vkCmdPushConstants2KHR*: proc (commandBuffer: VkCommandBuffer, pPushConstantsInfo: ptr VkPushConstantsInfoKHR) {.stdcall.}
  vkCmdPushDescriptorSet2KHR*: proc (commandBuffer: VkCommandBuffer, pPushDescriptorSetInfo: ptr VkPushDescriptorSetInfoKHR) {.stdcall.}
  vkCmdPushDescriptorSetWithTemplate2KHR*: proc (commandBuffer: VkCommandBuffer, pPushDescriptorSetWithTemplateInfo: ptr VkPushDescriptorSetWithTemplateInfoKHR) {.stdcall.}
  vkCmdSetDescriptorBufferOffsets2EXT*: proc (commandBuffer: VkCommandBuffer, pSetDescriptorBufferOffsetsInfo: ptr VkSetDescriptorBufferOffsetsInfoEXT) {.stdcall.}
  vkCmdBindDescriptorBufferEmbeddedSamplers2EXT*: proc (commandBuffer: VkCommandBuffer, pBindDescriptorBufferEmbeddedSamplersInfo: ptr VkBindDescriptorBufferEmbeddedSamplersInfoEXT) {.stdcall.}
  vkSetLatencySleepModeNV*: proc (device: VkDevice, swapchain: VkSwapchainKHR, pSleepModeInfo: ptr VkLatencySleepModeInfoNV): VkResult {.stdcall.}
  vkLatencySleepNV*: proc (device: VkDevice, swapchain: VkSwapchainKHR, pSleepInfo: ptr VkLatencySleepInfoNV): VkResult {.stdcall.}
  vkSetLatencyMarkerNV*: proc (device: VkDevice, swapchain: VkSwapchainKHR, pLatencyMarkerInfo: ptr VkSetLatencyMarkerInfoNV) {.stdcall.}
  vkGetLatencyTimingsNV*: proc (device: VkDevice, swapchain: VkSwapchainKHR, pLatencyMarkerInfo: ptr VkGetLatencyMarkerInfoNV) {.stdcall.}
  vkQueueNotifyOutOfBandNV*: proc (queue: VkQueue, pQueueTypeInfo: ptr VkOutOfBandQueueTypeInfoNV) {.stdcall.}
  vkCmdSetRenderingAttachmentLocationsKHR*: proc (commandBuffer: VkCommandBuffer, pLocationInfo: ptr VkRenderingAttachmentLocationInfoKHR) {.stdcall.}
  vkCmdSetRenderingInputAttachmentIndicesKHR*: proc (commandBuffer: VkCommandBuffer, pLocationInfo: ptr VkRenderingInputAttachmentIndexInfoKHR) {.stdcall.}

# Vulkan 1_0
proc vkLoad1_0*() =
  vkDestroyInstance = cast[proc (instance: VkInstance, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyInstance"))
  vkEnumeratePhysicalDevices = cast[proc (instance: VkInstance, pPhysicalDeviceCount: ptr uint32, pPhysicalDevices: ptr VkPhysicalDevice): VkResult {.stdcall.}](vkGetProc("vkEnumeratePhysicalDevices"))
  vkGetPhysicalDeviceFeatures = cast[proc (physicalDevice: VkPhysicalDevice, pFeatures: ptr VkPhysicalDeviceFeatures): void {.stdcall.}](vkGetProc("vkGetPhysicalDeviceFeatures"))
  vkGetPhysicalDeviceFormatProperties = cast[proc (physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: ptr VkFormatProperties): void {.stdcall.}](vkGetProc("vkGetPhysicalDeviceFormatProperties"))
  vkGetPhysicalDeviceImageFormatProperties = cast[proc (physicalDevice: VkPhysicalDevice, format: VkFormat, `type`: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, pImageFormatProperties: ptr VkImageFormatProperties): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceImageFormatProperties"))
  vkGetPhysicalDeviceProperties = cast[proc (physicalDevice: VkPhysicalDevice, pProperties: ptr VkPhysicalDeviceProperties): void {.stdcall.}](vkGetProc("vkGetPhysicalDeviceProperties"))
  vkGetPhysicalDeviceQueueFamilyProperties = cast[proc (physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: ptr uint32, pQueueFamilyProperties: ptr VkQueueFamilyProperties): void {.stdcall.}](vkGetProc("vkGetPhysicalDeviceQueueFamilyProperties"))
  vkGetPhysicalDeviceMemoryProperties = cast[proc (physicalDevice: VkPhysicalDevice, pMemoryProperties: ptr VkPhysicalDeviceMemoryProperties): void {.stdcall.}](vkGetProc("vkGetPhysicalDeviceMemoryProperties"))
  vkGetInstanceProcAddr = cast[proc (instance: VkInstance, pName: cstring): PFN_vkVoidFunction {.stdcall.}](vkGetProc("vkGetInstanceProcAddr"))
  vkGetDeviceProcAddr = cast[proc (device: VkDevice, pName: cstring): PFN_vkVoidFunction {.stdcall.}](vkGetProc("vkGetDeviceProcAddr"))
  vkCreateDevice = cast[proc (physicalDevice: VkPhysicalDevice, pCreateInfo: ptr VkDeviceCreateInfo, pAllocator: ptr VkAllocationCallbacks, pDevice: ptr VkDevice): VkResult {.stdcall.}](vkGetProc("vkCreateDevice"))
  vkDestroyDevice = cast[proc (device: VkDevice, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyDevice"))
  vkEnumerateDeviceExtensionProperties = cast[proc (physicalDevice: VkPhysicalDevice, pLayerName: cstring, pPropertyCount: ptr uint32, pProperties: ptr VkExtensionProperties): VkResult {.stdcall.}](vkGetProc("vkEnumerateDeviceExtensionProperties"))
  vkEnumerateDeviceLayerProperties = cast[proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkLayerProperties): VkResult {.stdcall.}](vkGetProc("vkEnumerateDeviceLayerProperties"))
  vkGetDeviceQueue = cast[proc (device: VkDevice, queueFamilyIndex: uint32, queueIndex: uint32, pQueue: ptr VkQueue): void {.stdcall.}](vkGetProc("vkGetDeviceQueue"))
  vkQueueSubmit = cast[proc (queue: VkQueue, submitCount: uint32, pSubmits: ptr VkSubmitInfo, fence: VkFence): VkResult {.stdcall.}](vkGetProc("vkQueueSubmit"))
  vkQueueWaitIdle = cast[proc (queue: VkQueue): VkResult {.stdcall.}](vkGetProc("vkQueueWaitIdle"))
  vkDeviceWaitIdle = cast[proc (device: VkDevice): VkResult {.stdcall.}](vkGetProc("vkDeviceWaitIdle"))
  vkAllocateMemory = cast[proc (device: VkDevice, pAllocateInfo: ptr VkMemoryAllocateInfo, pAllocator: ptr VkAllocationCallbacks, pMemory: ptr VkDeviceMemory): VkResult {.stdcall.}](vkGetProc("vkAllocateMemory"))
  vkFreeMemory = cast[proc (device: VkDevice, memory: VkDeviceMemory, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkFreeMemory"))
  vkMapMemory = cast[proc (device: VkDevice, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize, flags: VkMemoryMapFlags, ppData: ptr pointer): VkResult {.stdcall.}](vkGetProc("vkMapMemory"))
  vkUnmapMemory = cast[proc (device: VkDevice, memory: VkDeviceMemory): void {.stdcall.}](vkGetProc("vkUnmapMemory"))
  vkFlushMappedMemoryRanges = cast[proc (device: VkDevice, memoryRangeCount: uint32, pMemoryRanges: ptr VkMappedMemoryRange): VkResult {.stdcall.}](vkGetProc("vkFlushMappedMemoryRanges"))
  vkInvalidateMappedMemoryRanges = cast[proc (device: VkDevice, memoryRangeCount: uint32, pMemoryRanges: ptr VkMappedMemoryRange): VkResult {.stdcall.}](vkGetProc("vkInvalidateMappedMemoryRanges"))
  vkGetDeviceMemoryCommitment = cast[proc (device: VkDevice, memory: VkDeviceMemory, pCommittedMemoryInBytes: ptr VkDeviceSize): void {.stdcall.}](vkGetProc("vkGetDeviceMemoryCommitment"))
  vkBindBufferMemory = cast[proc (device: VkDevice, buffer: VkBuffer, memory: VkDeviceMemory, memoryOffset: VkDeviceSize): VkResult {.stdcall.}](vkGetProc("vkBindBufferMemory"))
  vkBindImageMemory = cast[proc (device: VkDevice, image: VkImage, memory: VkDeviceMemory, memoryOffset: VkDeviceSize): VkResult {.stdcall.}](vkGetProc("vkBindImageMemory"))
  vkGetBufferMemoryRequirements = cast[proc (device: VkDevice, buffer: VkBuffer, pMemoryRequirements: ptr VkMemoryRequirements): void {.stdcall.}](vkGetProc("vkGetBufferMemoryRequirements"))
  vkGetImageMemoryRequirements = cast[proc (device: VkDevice, image: VkImage, pMemoryRequirements: ptr VkMemoryRequirements): void {.stdcall.}](vkGetProc("vkGetImageMemoryRequirements"))
  vkGetImageSparseMemoryRequirements = cast[proc (device: VkDevice, image: VkImage, pSparseMemoryRequirementCount: ptr uint32, pSparseMemoryRequirements: ptr VkSparseImageMemoryRequirements): void {.stdcall.}](vkGetProc("vkGetImageSparseMemoryRequirements"))
  vkGetPhysicalDeviceSparseImageFormatProperties = cast[proc (physicalDevice: VkPhysicalDevice, format: VkFormat, `type`: VkImageType, samples: VkSampleCountFlagBits, usage: VkImageUsageFlags, tiling: VkImageTiling, pPropertyCount: ptr uint32, pProperties: ptr VkSparseImageFormatProperties): void {.stdcall.}](vkGetProc("vkGetPhysicalDeviceSparseImageFormatProperties"))
  vkQueueBindSparse = cast[proc (queue: VkQueue, bindInfoCount: uint32, pBindInfo: ptr VkBindSparseInfo, fence: VkFence): VkResult {.stdcall.}](vkGetProc("vkQueueBindSparse"))
  vkCreateFence = cast[proc (device: VkDevice, pCreateInfo: ptr VkFenceCreateInfo, pAllocator: ptr VkAllocationCallbacks, pFence: ptr VkFence): VkResult {.stdcall.}](vkGetProc("vkCreateFence"))
  vkDestroyFence = cast[proc (device: VkDevice, fence: VkFence, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyFence"))
  vkResetFences = cast[proc (device: VkDevice, fenceCount: uint32, pFences: ptr VkFence): VkResult {.stdcall.}](vkGetProc("vkResetFences"))
  vkGetFenceStatus = cast[proc (device: VkDevice, fence: VkFence): VkResult {.stdcall.}](vkGetProc("vkGetFenceStatus"))
  vkWaitForFences = cast[proc (device: VkDevice, fenceCount: uint32, pFences: ptr VkFence, waitAll: VkBool32, timeout: uint64): VkResult {.stdcall.}](vkGetProc("vkWaitForFences"))
  vkCreateSemaphore = cast[proc (device: VkDevice, pCreateInfo: ptr VkSemaphoreCreateInfo, pAllocator: ptr VkAllocationCallbacks, pSemaphore: ptr VkSemaphore): VkResult {.stdcall.}](vkGetProc("vkCreateSemaphore"))
  vkDestroySemaphore = cast[proc (device: VkDevice, semaphore: VkSemaphore, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroySemaphore"))
  vkCreateEvent = cast[proc (device: VkDevice, pCreateInfo: ptr VkEventCreateInfo, pAllocator: ptr VkAllocationCallbacks, pEvent: ptr VkEvent): VkResult {.stdcall.}](vkGetProc("vkCreateEvent"))
  vkDestroyEvent = cast[proc (device: VkDevice, event: VkEvent, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyEvent"))
  vkGetEventStatus = cast[proc (device: VkDevice, event: VkEvent): VkResult {.stdcall.}](vkGetProc("vkGetEventStatus"))
  vkSetEvent = cast[proc (device: VkDevice, event: VkEvent): VkResult {.stdcall.}](vkGetProc("vkSetEvent"))
  vkResetEvent = cast[proc (device: VkDevice, event: VkEvent): VkResult {.stdcall.}](vkGetProc("vkResetEvent"))
  vkCreateQueryPool = cast[proc (device: VkDevice, pCreateInfo: ptr VkQueryPoolCreateInfo, pAllocator: ptr VkAllocationCallbacks, pQueryPool: ptr VkQueryPool): VkResult {.stdcall.}](vkGetProc("vkCreateQueryPool"))
  vkDestroyQueryPool = cast[proc (device: VkDevice, queryPool: VkQueryPool, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyQueryPool"))
  vkGetQueryPoolResults = cast[proc (device: VkDevice, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32, dataSize: uint, pData: pointer, stride: VkDeviceSize, flags: VkQueryResultFlags): VkResult {.stdcall.}](vkGetProc("vkGetQueryPoolResults"))
  vkCreateBuffer = cast[proc (device: VkDevice, pCreateInfo: ptr VkBufferCreateInfo, pAllocator: ptr VkAllocationCallbacks, pBuffer: ptr VkBuffer): VkResult {.stdcall.}](vkGetProc("vkCreateBuffer"))
  vkDestroyBuffer = cast[proc (device: VkDevice, buffer: VkBuffer, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyBuffer"))
  vkCreateBufferView = cast[proc (device: VkDevice, pCreateInfo: ptr VkBufferViewCreateInfo, pAllocator: ptr VkAllocationCallbacks, pView: ptr VkBufferView): VkResult {.stdcall.}](vkGetProc("vkCreateBufferView"))
  vkDestroyBufferView = cast[proc (device: VkDevice, bufferView: VkBufferView, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyBufferView"))
  vkCreateImage = cast[proc (device: VkDevice, pCreateInfo: ptr VkImageCreateInfo, pAllocator: ptr VkAllocationCallbacks, pImage: ptr VkImage): VkResult {.stdcall.}](vkGetProc("vkCreateImage"))
  vkDestroyImage = cast[proc (device: VkDevice, image: VkImage, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyImage"))
  vkGetImageSubresourceLayout = cast[proc (device: VkDevice, image: VkImage, pSubresource: ptr VkImageSubresource, pLayout: ptr VkSubresourceLayout): void {.stdcall.}](vkGetProc("vkGetImageSubresourceLayout"))
  vkCreateImageView = cast[proc (device: VkDevice, pCreateInfo: ptr VkImageViewCreateInfo, pAllocator: ptr VkAllocationCallbacks, pView: ptr VkImageView): VkResult {.stdcall.}](vkGetProc("vkCreateImageView"))
  vkDestroyImageView = cast[proc (device: VkDevice, imageView: VkImageView, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyImageView"))
  vkCreateShaderModule = cast[proc (device: VkDevice, pCreateInfo: ptr VkShaderModuleCreateInfo, pAllocator: ptr VkAllocationCallbacks, pShaderModule: ptr VkShaderModule): VkResult {.stdcall.}](vkGetProc("vkCreateShaderModule"))
  vkDestroyShaderModule = cast[proc (device: VkDevice, shaderModule: VkShaderModule, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyShaderModule"))
  vkCreatePipelineCache = cast[proc (device: VkDevice, pCreateInfo: ptr VkPipelineCacheCreateInfo, pAllocator: ptr VkAllocationCallbacks, pPipelineCache: ptr VkPipelineCache): VkResult {.stdcall.}](vkGetProc("vkCreatePipelineCache"))
  vkDestroyPipelineCache = cast[proc (device: VkDevice, pipelineCache: VkPipelineCache, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyPipelineCache"))
  vkGetPipelineCacheData = cast[proc (device: VkDevice, pipelineCache: VkPipelineCache, pDataSize: ptr uint, pData: pointer): VkResult {.stdcall.}](vkGetProc("vkGetPipelineCacheData"))
  vkMergePipelineCaches = cast[proc (device: VkDevice, dstCache: VkPipelineCache, srcCacheCount: uint32, pSrcCaches: ptr VkPipelineCache): VkResult {.stdcall.}](vkGetProc("vkMergePipelineCaches"))
  vkCreateGraphicsPipelines = cast[proc (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: ptr VkGraphicsPipelineCreateInfo, pAllocator: ptr VkAllocationCallbacks, pPipelines: ptr VkPipeline): VkResult {.stdcall.}](vkGetProc("vkCreateGraphicsPipelines"))
  vkCreateComputePipelines = cast[proc (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: ptr VkComputePipelineCreateInfo, pAllocator: ptr VkAllocationCallbacks, pPipelines: ptr VkPipeline): VkResult {.stdcall.}](vkGetProc("vkCreateComputePipelines"))
  vkDestroyPipeline = cast[proc (device: VkDevice, pipeline: VkPipeline, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyPipeline"))
  vkCreatePipelineLayout = cast[proc (device: VkDevice, pCreateInfo: ptr VkPipelineLayoutCreateInfo, pAllocator: ptr VkAllocationCallbacks, pPipelineLayout: ptr VkPipelineLayout): VkResult {.stdcall.}](vkGetProc("vkCreatePipelineLayout"))
  vkDestroyPipelineLayout = cast[proc (device: VkDevice, pipelineLayout: VkPipelineLayout, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyPipelineLayout"))
  vkCreateSampler = cast[proc (device: VkDevice, pCreateInfo: ptr VkSamplerCreateInfo, pAllocator: ptr VkAllocationCallbacks, pSampler: ptr VkSampler): VkResult {.stdcall.}](vkGetProc("vkCreateSampler"))
  vkDestroySampler = cast[proc (device: VkDevice, sampler: VkSampler, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroySampler"))
  vkCreateDescriptorSetLayout = cast[proc (device: VkDevice, pCreateInfo: ptr VkDescriptorSetLayoutCreateInfo, pAllocator: ptr VkAllocationCallbacks, pSetLayout: ptr VkDescriptorSetLayout): VkResult {.stdcall.}](vkGetProc("vkCreateDescriptorSetLayout"))
  vkDestroyDescriptorSetLayout = cast[proc (device: VkDevice, descriptorSetLayout: VkDescriptorSetLayout, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyDescriptorSetLayout"))
  vkCreateDescriptorPool = cast[proc (device: VkDevice, pCreateInfo: ptr VkDescriptorPoolCreateInfo, pAllocator: ptr VkAllocationCallbacks, pDescriptorPool: ptr VkDescriptorPool): VkResult {.stdcall.}](vkGetProc("vkCreateDescriptorPool"))
  vkDestroyDescriptorPool = cast[proc (device: VkDevice, descriptorPool: VkDescriptorPool, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyDescriptorPool"))
  vkResetDescriptorPool = cast[proc (device: VkDevice, descriptorPool: VkDescriptorPool, flags: VkDescriptorPoolResetFlags): VkResult {.stdcall.}](vkGetProc("vkResetDescriptorPool"))
  vkAllocateDescriptorSets = cast[proc (device: VkDevice, pAllocateInfo: ptr VkDescriptorSetAllocateInfo, pDescriptorSets: ptr VkDescriptorSet): VkResult {.stdcall.}](vkGetProc("vkAllocateDescriptorSets"))
  vkFreeDescriptorSets = cast[proc (device: VkDevice, descriptorPool: VkDescriptorPool, descriptorSetCount: uint32, pDescriptorSets: ptr VkDescriptorSet): VkResult {.stdcall.}](vkGetProc("vkFreeDescriptorSets"))
  vkUpdateDescriptorSets = cast[proc (device: VkDevice, descriptorWriteCount: uint32, pDescriptorWrites: ptr VkWriteDescriptorSet, descriptorCopyCount: uint32, pDescriptorCopies: ptr VkCopyDescriptorSet): void {.stdcall.}](vkGetProc("vkUpdateDescriptorSets"))
  vkCreateFramebuffer = cast[proc (device: VkDevice, pCreateInfo: ptr VkFramebufferCreateInfo, pAllocator: ptr VkAllocationCallbacks, pFramebuffer: ptr VkFramebuffer): VkResult {.stdcall.}](vkGetProc("vkCreateFramebuffer"))
  vkDestroyFramebuffer = cast[proc (device: VkDevice, framebuffer: VkFramebuffer, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyFramebuffer"))
  vkCreateRenderPass = cast[proc (device: VkDevice, pCreateInfo: ptr VkRenderPassCreateInfo, pAllocator: ptr VkAllocationCallbacks, pRenderPass: ptr VkRenderPass): VkResult {.stdcall.}](vkGetProc("vkCreateRenderPass"))
  vkDestroyRenderPass = cast[proc (device: VkDevice, renderPass: VkRenderPass, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyRenderPass"))
  vkGetRenderAreaGranularity = cast[proc (device: VkDevice, renderPass: VkRenderPass, pGranularity: ptr VkExtent2D): void {.stdcall.}](vkGetProc("vkGetRenderAreaGranularity"))
  vkCreateCommandPool = cast[proc (device: VkDevice, pCreateInfo: ptr VkCommandPoolCreateInfo, pAllocator: ptr VkAllocationCallbacks, pCommandPool: ptr VkCommandPool): VkResult {.stdcall.}](vkGetProc("vkCreateCommandPool"))
  vkDestroyCommandPool = cast[proc (device: VkDevice, commandPool: VkCommandPool, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyCommandPool"))
  vkResetCommandPool = cast[proc (device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolResetFlags): VkResult {.stdcall.}](vkGetProc("vkResetCommandPool"))
  vkAllocateCommandBuffers = cast[proc (device: VkDevice, pAllocateInfo: ptr VkCommandBufferAllocateInfo, pCommandBuffers: ptr VkCommandBuffer): VkResult {.stdcall.}](vkGetProc("vkAllocateCommandBuffers"))
  vkFreeCommandBuffers = cast[proc (device: VkDevice, commandPool: VkCommandPool, commandBufferCount: uint32, pCommandBuffers: ptr VkCommandBuffer): void {.stdcall.}](vkGetProc("vkFreeCommandBuffers"))
  vkBeginCommandBuffer = cast[proc (commandBuffer: VkCommandBuffer, pBeginInfo: ptr VkCommandBufferBeginInfo): VkResult {.stdcall.}](vkGetProc("vkBeginCommandBuffer"))
  vkEndCommandBuffer = cast[proc (commandBuffer: VkCommandBuffer): VkResult {.stdcall.}](vkGetProc("vkEndCommandBuffer"))
  vkResetCommandBuffer = cast[proc (commandBuffer: VkCommandBuffer, flags: VkCommandBufferResetFlags): VkResult {.stdcall.}](vkGetProc("vkResetCommandBuffer"))
  vkCmdBindPipeline = cast[proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline): void {.stdcall.}](vkGetProc("vkCmdBindPipeline"))
  vkCmdSetViewport = cast[proc (commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pViewports: ptr VkViewport): void {.stdcall.}](vkGetProc("vkCmdSetViewport"))
  vkCmdSetScissor = cast[proc (commandBuffer: VkCommandBuffer, firstScissor: uint32, scissorCount: uint32, pScissors: ptr VkRect2D): void {.stdcall.}](vkGetProc("vkCmdSetScissor"))
  vkCmdSetLineWidth = cast[proc (commandBuffer: VkCommandBuffer, lineWidth: float32): void {.stdcall.}](vkGetProc("vkCmdSetLineWidth"))
  vkCmdSetDepthBias = cast[proc (commandBuffer: VkCommandBuffer, depthBiasConstantFactor: float32, depthBiasClamp: float32, depthBiasSlopeFactor: float32): void {.stdcall.}](vkGetProc("vkCmdSetDepthBias"))
  vkCmdSetBlendConstants = cast[proc (commandBuffer: VkCommandBuffer, blendConstants: array[4, float32]): void {.stdcall.}](vkGetProc("vkCmdSetBlendConstants"))
  vkCmdSetDepthBounds = cast[proc (commandBuffer: VkCommandBuffer, minDepthBounds: float32, maxDepthBounds: float32): void {.stdcall.}](vkGetProc("vkCmdSetDepthBounds"))
  vkCmdSetStencilCompareMask = cast[proc (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, compareMask: uint32): void {.stdcall.}](vkGetProc("vkCmdSetStencilCompareMask"))
  vkCmdSetStencilWriteMask = cast[proc (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, writeMask: uint32): void {.stdcall.}](vkGetProc("vkCmdSetStencilWriteMask"))
  vkCmdSetStencilReference = cast[proc (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, reference: uint32): void {.stdcall.}](vkGetProc("vkCmdSetStencilReference"))
  vkCmdBindDescriptorSets = cast[proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: uint32, descriptorSetCount: uint32, pDescriptorSets: ptr VkDescriptorSet, dynamicOffsetCount: uint32, pDynamicOffsets: ptr uint32): void {.stdcall.}](vkGetProc("vkCmdBindDescriptorSets"))
  vkCmdBindIndexBuffer = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, indexType: VkIndexType): void {.stdcall.}](vkGetProc("vkCmdBindIndexBuffer"))
  vkCmdBindVertexBuffers = cast[proc (commandBuffer: VkCommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: ptr VkBuffer, pOffsets: ptr VkDeviceSize): void {.stdcall.}](vkGetProc("vkCmdBindVertexBuffers"))
  vkCmdDraw = cast[proc (commandBuffer: VkCommandBuffer, vertexCount: uint32, instanceCount: uint32, firstVertex: uint32, firstInstance: uint32): void {.stdcall.}](vkGetProc("vkCmdDraw"))
  vkCmdDrawIndexed = cast[proc (commandBuffer: VkCommandBuffer, indexCount: uint32, instanceCount: uint32, firstIndex: uint32, vertexOffset: int32, firstInstance: uint32): void {.stdcall.}](vkGetProc("vkCmdDrawIndexed"))
  vkCmdDrawIndirect = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: uint32, stride: uint32): void {.stdcall.}](vkGetProc("vkCmdDrawIndirect"))
  vkCmdDrawIndexedIndirect = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: uint32, stride: uint32): void {.stdcall.}](vkGetProc("vkCmdDrawIndexedIndirect"))
  vkCmdDispatch = cast[proc (commandBuffer: VkCommandBuffer, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32): void {.stdcall.}](vkGetProc("vkCmdDispatch"))
  vkCmdDispatchIndirect = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize): void {.stdcall.}](vkGetProc("vkCmdDispatchIndirect"))
  vkCmdCopyBuffer = cast[proc (commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstBuffer: VkBuffer, regionCount: uint32, pRegions: ptr VkBufferCopy): void {.stdcall.}](vkGetProc("vkCmdCopyBuffer"))
  vkCmdCopyImage = cast[proc (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkImageCopy): void {.stdcall.}](vkGetProc("vkCmdCopyImage"))
  vkCmdBlitImage = cast[proc (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkImageBlit, filter: VkFilter): void {.stdcall.}](vkGetProc("vkCmdBlitImage"))
  vkCmdCopyBufferToImage = cast[proc (commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkBufferImageCopy): void {.stdcall.}](vkGetProc("vkCmdCopyBufferToImage"))
  vkCmdCopyImageToBuffer = cast[proc (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer, regionCount: uint32, pRegions: ptr VkBufferImageCopy): void {.stdcall.}](vkGetProc("vkCmdCopyImageToBuffer"))
  vkCmdUpdateBuffer = cast[proc (commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, dataSize: VkDeviceSize, pData: pointer): void {.stdcall.}](vkGetProc("vkCmdUpdateBuffer"))
  vkCmdFillBuffer = cast[proc (commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, size: VkDeviceSize, data: uint32): void {.stdcall.}](vkGetProc("vkCmdFillBuffer"))
  vkCmdClearColorImage = cast[proc (commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pColor: ptr VkClearColorValue, rangeCount: uint32, pRanges: ptr VkImageSubresourceRange): void {.stdcall.}](vkGetProc("vkCmdClearColorImage"))
  vkCmdClearDepthStencilImage = cast[proc (commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pDepthStencil: ptr VkClearDepthStencilValue, rangeCount: uint32, pRanges: ptr VkImageSubresourceRange): void {.stdcall.}](vkGetProc("vkCmdClearDepthStencilImage"))
  vkCmdClearAttachments = cast[proc (commandBuffer: VkCommandBuffer, attachmentCount: uint32, pAttachments: ptr VkClearAttachment, rectCount: uint32, pRects: ptr VkClearRect): void {.stdcall.}](vkGetProc("vkCmdClearAttachments"))
  vkCmdResolveImage = cast[proc (commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: uint32, pRegions: ptr VkImageResolve): void {.stdcall.}](vkGetProc("vkCmdResolveImage"))
  vkCmdSetEvent = cast[proc (commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags): void {.stdcall.}](vkGetProc("vkCmdSetEvent"))
  vkCmdResetEvent = cast[proc (commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags): void {.stdcall.}](vkGetProc("vkCmdResetEvent"))
  vkCmdWaitEvents = cast[proc (commandBuffer: VkCommandBuffer, eventCount: uint32, pEvents: ptr VkEvent, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, memoryBarrierCount: uint32, pMemoryBarriers: ptr VkMemoryBarrier, bufferMemoryBarrierCount: uint32, pBufferMemoryBarriers: ptr VkBufferMemoryBarrier, imageMemoryBarrierCount: uint32, pImageMemoryBarriers: ptr VkImageMemoryBarrier): void {.stdcall.}](vkGetProc("vkCmdWaitEvents"))
  vkCmdPipelineBarrier = cast[proc (commandBuffer: VkCommandBuffer, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, dependencyFlags: VkDependencyFlags, memoryBarrierCount: uint32, pMemoryBarriers: ptr VkMemoryBarrier, bufferMemoryBarrierCount: uint32, pBufferMemoryBarriers: ptr VkBufferMemoryBarrier, imageMemoryBarrierCount: uint32, pImageMemoryBarriers: ptr VkImageMemoryBarrier): void {.stdcall.}](vkGetProc("vkCmdPipelineBarrier"))
  vkCmdBeginQuery = cast[proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32, flags: VkQueryControlFlags): void {.stdcall.}](vkGetProc("vkCmdBeginQuery"))
  vkCmdEndQuery = cast[proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32): void {.stdcall.}](vkGetProc("vkCmdEndQuery"))
  vkCmdResetQueryPool = cast[proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32): void {.stdcall.}](vkGetProc("vkCmdResetQueryPool"))
  vkCmdWriteTimestamp = cast[proc (commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, queryPool: VkQueryPool, query: uint32): void {.stdcall.}](vkGetProc("vkCmdWriteTimestamp"))
  vkCmdCopyQueryPoolResults = cast[proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, stride: VkDeviceSize, flags: VkQueryResultFlags): void {.stdcall.}](vkGetProc("vkCmdCopyQueryPoolResults"))
  vkCmdPushConstants = cast[proc (commandBuffer: VkCommandBuffer, layout: VkPipelineLayout, stageFlags: VkShaderStageFlags, offset: uint32, size: uint32, pValues: pointer): void {.stdcall.}](vkGetProc("vkCmdPushConstants"))
  vkCmdBeginRenderPass = cast[proc (commandBuffer: VkCommandBuffer, pRenderPassBegin: ptr VkRenderPassBeginInfo, contents: VkSubpassContents): void {.stdcall.}](vkGetProc("vkCmdBeginRenderPass"))
  vkCmdNextSubpass = cast[proc (commandBuffer: VkCommandBuffer, contents: VkSubpassContents): void {.stdcall.}](vkGetProc("vkCmdNextSubpass"))
  vkCmdEndRenderPass = cast[proc (commandBuffer: VkCommandBuffer): void {.stdcall.}](vkGetProc("vkCmdEndRenderPass"))
  vkCmdExecuteCommands = cast[proc (commandBuffer: VkCommandBuffer, commandBufferCount: uint32, pCommandBuffers: ptr VkCommandBuffer): void {.stdcall.}](vkGetProc("vkCmdExecuteCommands"))

# Vulkan 1_1
proc vkLoad1_1*() =
  vkBindBufferMemory2 = cast[proc (device: VkDevice, bindInfoCount: uint32, pBindInfos: ptr VkBindBufferMemoryInfo): VkResult {.stdcall.}](vkGetProc("vkBindBufferMemory2"))
  vkBindImageMemory2 = cast[proc (device: VkDevice, bindInfoCount: uint32, pBindInfos: ptr VkBindImageMemoryInfo): VkResult {.stdcall.}](vkGetProc("vkBindImageMemory2"))
  vkGetDeviceGroupPeerMemoryFeatures = cast[proc (device: VkDevice, heapIndex: uint32, localDeviceIndex: uint32, remoteDeviceIndex: uint32, pPeerMemoryFeatures: ptr VkPeerMemoryFeatureFlags): void {.stdcall.}](vkGetProc("vkGetDeviceGroupPeerMemoryFeatures"))
  vkCmdSetDeviceMask = cast[proc (commandBuffer: VkCommandBuffer, deviceMask: uint32): void {.stdcall.}](vkGetProc("vkCmdSetDeviceMask"))
  vkCmdDispatchBase = cast[proc (commandBuffer: VkCommandBuffer, baseGroupX: uint32, baseGroupY: uint32, baseGroupZ: uint32, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32): void {.stdcall.}](vkGetProc("vkCmdDispatchBase"))
  vkEnumeratePhysicalDeviceGroups = cast[proc (instance: VkInstance, pPhysicalDeviceGroupCount: ptr uint32, pPhysicalDeviceGroupProperties: ptr VkPhysicalDeviceGroupProperties): VkResult {.stdcall.}](vkGetProc("vkEnumeratePhysicalDeviceGroups"))
  vkGetImageMemoryRequirements2 = cast[proc (device: VkDevice, pInfo: ptr VkImageMemoryRequirementsInfo2, pMemoryRequirements: ptr VkMemoryRequirements2): void {.stdcall.}](vkGetProc("vkGetImageMemoryRequirements2"))
  vkGetBufferMemoryRequirements2 = cast[proc (device: VkDevice, pInfo: ptr VkBufferMemoryRequirementsInfo2, pMemoryRequirements: ptr VkMemoryRequirements2): void {.stdcall.}](vkGetProc("vkGetBufferMemoryRequirements2"))
  vkGetImageSparseMemoryRequirements2 = cast[proc (device: VkDevice, pInfo: ptr VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: ptr uint32, pSparseMemoryRequirements: ptr VkSparseImageMemoryRequirements2): void {.stdcall.}](vkGetProc("vkGetImageSparseMemoryRequirements2"))
  vkGetPhysicalDeviceFeatures2 = cast[proc (physicalDevice: VkPhysicalDevice, pFeatures: ptr VkPhysicalDeviceFeatures2): void {.stdcall.}](vkGetProc("vkGetPhysicalDeviceFeatures2"))
  vkGetPhysicalDeviceProperties2 = cast[proc (physicalDevice: VkPhysicalDevice, pProperties: ptr VkPhysicalDeviceProperties2): void {.stdcall.}](vkGetProc("vkGetPhysicalDeviceProperties2"))
  vkGetPhysicalDeviceFormatProperties2 = cast[proc (physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: ptr VkFormatProperties2): void {.stdcall.}](vkGetProc("vkGetPhysicalDeviceFormatProperties2"))
  vkGetPhysicalDeviceImageFormatProperties2 = cast[proc (physicalDevice: VkPhysicalDevice, pImageFormatInfo: ptr VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: ptr VkImageFormatProperties2): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceImageFormatProperties2"))
  vkGetPhysicalDeviceQueueFamilyProperties2 = cast[proc (physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: ptr uint32, pQueueFamilyProperties: ptr VkQueueFamilyProperties2): void {.stdcall.}](vkGetProc("vkGetPhysicalDeviceQueueFamilyProperties2"))
  vkGetPhysicalDeviceMemoryProperties2 = cast[proc (physicalDevice: VkPhysicalDevice, pMemoryProperties: ptr VkPhysicalDeviceMemoryProperties2): void {.stdcall.}](vkGetProc("vkGetPhysicalDeviceMemoryProperties2"))
  vkGetPhysicalDeviceSparseImageFormatProperties2 = cast[proc (physicalDevice: VkPhysicalDevice, pFormatInfo: ptr VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: ptr uint32, pProperties: ptr VkSparseImageFormatProperties2): void {.stdcall.}](vkGetProc("vkGetPhysicalDeviceSparseImageFormatProperties2"))
  vkTrimCommandPool = cast[proc (device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags): void {.stdcall.}](vkGetProc("vkTrimCommandPool"))
  vkGetDeviceQueue2 = cast[proc (device: VkDevice, pQueueInfo: ptr VkDeviceQueueInfo2, pQueue: ptr VkQueue): void {.stdcall.}](vkGetProc("vkGetDeviceQueue2"))
  vkCreateSamplerYcbcrConversion = cast[proc (device: VkDevice, pCreateInfo: ptr VkSamplerYcbcrConversionCreateInfo, pAllocator: ptr VkAllocationCallbacks, pYcbcrConversion: ptr VkSamplerYcbcrConversion): VkResult {.stdcall.}](vkGetProc("vkCreateSamplerYcbcrConversion"))
  vkDestroySamplerYcbcrConversion = cast[proc (device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroySamplerYcbcrConversion"))
  vkCreateDescriptorUpdateTemplate = cast[proc (device: VkDevice, pCreateInfo: ptr VkDescriptorUpdateTemplateCreateInfo, pAllocator: ptr VkAllocationCallbacks, pDescriptorUpdateTemplate: ptr VkDescriptorUpdateTemplate): VkResult {.stdcall.}](vkGetProc("vkCreateDescriptorUpdateTemplate"))
  vkDestroyDescriptorUpdateTemplate = cast[proc (device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyDescriptorUpdateTemplate"))
  vkUpdateDescriptorSetWithTemplate = cast[proc (device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: pointer): void {.stdcall.}](vkGetProc("vkUpdateDescriptorSetWithTemplate"))
  vkGetPhysicalDeviceExternalBufferProperties = cast[proc (physicalDevice: VkPhysicalDevice, pExternalBufferInfo: ptr VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: ptr VkExternalBufferProperties): void {.stdcall.}](vkGetProc("vkGetPhysicalDeviceExternalBufferProperties"))
  vkGetPhysicalDeviceExternalFenceProperties = cast[proc (physicalDevice: VkPhysicalDevice, pExternalFenceInfo: ptr VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: ptr VkExternalFenceProperties): void {.stdcall.}](vkGetProc("vkGetPhysicalDeviceExternalFenceProperties"))
  vkGetPhysicalDeviceExternalSemaphoreProperties = cast[proc (physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: ptr VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: ptr VkExternalSemaphoreProperties): void {.stdcall.}](vkGetProc("vkGetPhysicalDeviceExternalSemaphoreProperties"))
  vkGetDescriptorSetLayoutSupport = cast[proc (device: VkDevice, pCreateInfo: ptr VkDescriptorSetLayoutCreateInfo, pSupport: ptr VkDescriptorSetLayoutSupport): void {.stdcall.}](vkGetProc("vkGetDescriptorSetLayoutSupport"))

# Vulkan 1_2
proc vkLoad1_2*() =
  vkCmdDrawIndirectCount = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}](vkGetProc("vkCmdDrawIndirectCount"))
  vkCmdDrawIndexedIndirectCount = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}](vkGetProc("vkCmdDrawIndexedIndirectCount"))
  vkCreateRenderPass2 = cast[proc (device: VkDevice, pCreateInfo: ptr VkRenderPassCreateInfo2, pAllocator: ptr VkAllocationCallbacks, pRenderPass: ptr VkRenderPass): VkResult {.stdcall.}](vkGetProc("vkCreateRenderPass2"))
  vkCmdBeginRenderPass2 = cast[proc (commandBuffer: VkCommandBuffer, pRenderPassBegin: ptr VkRenderPassBeginInfo, pSubpassBeginInfo: ptr VkSubpassBeginInfo): void {.stdcall.}](vkGetProc("vkCmdBeginRenderPass2"))
  vkCmdNextSubpass2 = cast[proc (commandBuffer: VkCommandBuffer, pSubpassBeginInfo: ptr VkSubpassBeginInfo, pSubpassEndInfo: ptr VkSubpassEndInfo): void {.stdcall.}](vkGetProc("vkCmdNextSubpass2"))
  vkCmdEndRenderPass2 = cast[proc (commandBuffer: VkCommandBuffer, pSubpassEndInfo: ptr VkSubpassEndInfo): void {.stdcall.}](vkGetProc("vkCmdEndRenderPass2"))
  vkResetQueryPool = cast[proc (device: VkDevice, queryPool: VkQueryPool, firstQuery: uint32, queryCount: uint32): void {.stdcall.}](vkGetProc("vkResetQueryPool"))
  vkGetSemaphoreCounterValue = cast[proc (device: VkDevice, semaphore: VkSemaphore, pValue: ptr uint64): VkResult {.stdcall.}](vkGetProc("vkGetSemaphoreCounterValue"))
  vkWaitSemaphores = cast[proc (device: VkDevice, pWaitInfo: ptr VkSemaphoreWaitInfo, timeout: uint64): VkResult {.stdcall.}](vkGetProc("vkWaitSemaphores"))
  vkSignalSemaphore = cast[proc (device: VkDevice, pSignalInfo: ptr VkSemaphoreSignalInfo): VkResult {.stdcall.}](vkGetProc("vkSignalSemaphore"))
  vkGetBufferDeviceAddress = cast[proc (device: VkDevice, pInfo: ptr VkBufferDeviceAddressInfo): VkDeviceAddress {.stdcall.}](vkGetProc("vkGetBufferDeviceAddress"))
  vkGetBufferOpaqueCaptureAddress = cast[proc (device: VkDevice, pInfo: ptr VkBufferDeviceAddressInfo): uint64 {.stdcall.}](vkGetProc("vkGetBufferOpaqueCaptureAddress"))
  vkGetDeviceMemoryOpaqueCaptureAddress = cast[proc (device: VkDevice, pInfo: ptr VkDeviceMemoryOpaqueCaptureAddressInfo): uint64 {.stdcall.}](vkGetProc("vkGetDeviceMemoryOpaqueCaptureAddress"))

# Vulkan 1_3
proc vkLoad1_3*() =
  vkGetPhysicalDeviceToolProperties = cast[proc (physicalDevice: VkPhysicalDevice, pToolCount: ptr uint32, pToolProperties: ptr VkPhysicalDeviceToolProperties): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceToolProperties"))
  vkCreatePrivateDataSlot = cast[proc (device: VkDevice, pCreateInfo: ptr VkPrivateDataSlotCreateInfo, pAllocator: ptr VkAllocationCallbacks, pPrivateDataSlot: ptr VkPrivateDataSlot): VkResult {.stdcall.}](vkGetProc("vkCreatePrivateDataSlot"))
  vkDestroyPrivateDataSlot = cast[proc (device: VkDevice, privateDataSlot: VkPrivateDataSlot, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyPrivateDataSlot"))
  vkSetPrivateData = cast[proc (device: VkDevice, objectType: VkObjectType, objectHandle: uint64, privateDataSlot: VkPrivateDataSlot, data: uint64): VkResult {.stdcall.}](vkGetProc("vkSetPrivateData"))
  vkGetPrivateData = cast[proc (device: VkDevice, objectType: VkObjectType, objectHandle: uint64, privateDataSlot: VkPrivateDataSlot, pData: ptr uint64): void {.stdcall.}](vkGetProc("vkGetPrivateData"))
  vkCmdSetEvent2 = cast[proc (commandBuffer: VkCommandBuffer, event: VkEvent, pDependencyInfo: ptr VkDependencyInfo): void {.stdcall.}](vkGetProc("vkCmdSetEvent2"))
  vkCmdResetEvent2 = cast[proc (commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags2): void {.stdcall.}](vkGetProc("vkCmdResetEvent2"))
  vkCmdWaitEvents2 = cast[proc (commandBuffer: VkCommandBuffer, eventCount: uint32, pEvents: ptr VkEvent, pDependencyInfos: ptr VkDependencyInfo): void {.stdcall.}](vkGetProc("vkCmdWaitEvents2"))
  vkCmdPipelineBarrier2 = cast[proc (commandBuffer: VkCommandBuffer, pDependencyInfo: ptr VkDependencyInfo): void {.stdcall.}](vkGetProc("vkCmdPipelineBarrier2"))
  vkCmdWriteTimestamp2 = cast[proc (commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2, queryPool: VkQueryPool, query: uint32): void {.stdcall.}](vkGetProc("vkCmdWriteTimestamp2"))
  vkQueueSubmit2 = cast[proc (queue: VkQueue, submitCount: uint32, pSubmits: ptr VkSubmitInfo2, fence: VkFence): VkResult {.stdcall.}](vkGetProc("vkQueueSubmit2"))
  vkCmdCopyBuffer2 = cast[proc (commandBuffer: VkCommandBuffer, pCopyBufferInfo: ptr VkCopyBufferInfo2): void {.stdcall.}](vkGetProc("vkCmdCopyBuffer2"))
  vkCmdCopyImage2 = cast[proc (commandBuffer: VkCommandBuffer, pCopyImageInfo: ptr VkCopyImageInfo2): void {.stdcall.}](vkGetProc("vkCmdCopyImage2"))
  vkCmdCopyBufferToImage2 = cast[proc (commandBuffer: VkCommandBuffer, pCopyBufferToImageInfo: ptr VkCopyBufferToImageInfo2): void {.stdcall.}](vkGetProc("vkCmdCopyBufferToImage2"))
  vkCmdCopyImageToBuffer2 = cast[proc (commandBuffer: VkCommandBuffer, pCopyImageToBufferInfo: ptr VkCopyImageToBufferInfo2): void {.stdcall.}](vkGetProc("vkCmdCopyImageToBuffer2"))
  vkCmdBlitImage2 = cast[proc (commandBuffer: VkCommandBuffer, pBlitImageInfo: ptr VkBlitImageInfo2): void {.stdcall.}](vkGetProc("vkCmdBlitImage2"))
  vkCmdResolveImage2 = cast[proc (commandBuffer: VkCommandBuffer, pResolveImageInfo: ptr VkResolveImageInfo2): void {.stdcall.}](vkGetProc("vkCmdResolveImage2"))
  vkCmdBeginRendering = cast[proc (commandBuffer: VkCommandBuffer, pRenderingInfo: ptr VkRenderingInfo): void {.stdcall.}](vkGetProc("vkCmdBeginRendering"))
  vkCmdEndRendering = cast[proc (commandBuffer: VkCommandBuffer): void {.stdcall.}](vkGetProc("vkCmdEndRendering"))
  vkCmdSetCullMode = cast[proc (commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags): void {.stdcall.}](vkGetProc("vkCmdSetCullMode"))
  vkCmdSetFrontFace = cast[proc (commandBuffer: VkCommandBuffer, frontFace: VkFrontFace): void {.stdcall.}](vkGetProc("vkCmdSetFrontFace"))
  vkCmdSetPrimitiveTopology = cast[proc (commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology): void {.stdcall.}](vkGetProc("vkCmdSetPrimitiveTopology"))
  vkCmdSetViewportWithCount = cast[proc (commandBuffer: VkCommandBuffer, viewportCount: uint32, pViewports: ptr VkViewport): void {.stdcall.}](vkGetProc("vkCmdSetViewportWithCount"))
  vkCmdSetScissorWithCount = cast[proc (commandBuffer: VkCommandBuffer, scissorCount: uint32, pScissors: ptr VkRect2D): void {.stdcall.}](vkGetProc("vkCmdSetScissorWithCount"))
  vkCmdBindVertexBuffers2 = cast[proc (commandBuffer: VkCommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: ptr VkBuffer, pOffsets: ptr VkDeviceSize, pSizes: ptr VkDeviceSize, pStrides: ptr VkDeviceSize): void {.stdcall.}](vkGetProc("vkCmdBindVertexBuffers2"))
  vkCmdSetDepthTestEnable = cast[proc (commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetDepthTestEnable"))
  vkCmdSetDepthWriteEnable = cast[proc (commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetDepthWriteEnable"))
  vkCmdSetDepthCompareOp = cast[proc (commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp): void {.stdcall.}](vkGetProc("vkCmdSetDepthCompareOp"))
  vkCmdSetDepthBoundsTestEnable = cast[proc (commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetDepthBoundsTestEnable"))
  vkCmdSetStencilTestEnable = cast[proc (commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetStencilTestEnable"))
  vkCmdSetStencilOp = cast[proc (commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, failOp: VkStencilOp, passOp: VkStencilOp, depthFailOp: VkStencilOp, compareOp: VkCompareOp): void {.stdcall.}](vkGetProc("vkCmdSetStencilOp"))
  vkCmdSetRasterizerDiscardEnable = cast[proc (commandBuffer: VkCommandBuffer, rasterizerDiscardEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetRasterizerDiscardEnable"))
  vkCmdSetDepthBiasEnable = cast[proc (commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetDepthBiasEnable"))
  vkCmdSetPrimitiveRestartEnable = cast[proc (commandBuffer: VkCommandBuffer, primitiveRestartEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetPrimitiveRestartEnable"))
  vkGetDeviceBufferMemoryRequirements = cast[proc (device: VkDevice, pInfo: ptr VkDeviceBufferMemoryRequirements, pMemoryRequirements: ptr VkMemoryRequirements2): void {.stdcall.}](vkGetProc("vkGetDeviceBufferMemoryRequirements"))
  vkGetDeviceImageMemoryRequirements = cast[proc (device: VkDevice, pInfo: ptr VkDeviceImageMemoryRequirements, pMemoryRequirements: ptr VkMemoryRequirements2): void {.stdcall.}](vkGetProc("vkGetDeviceImageMemoryRequirements"))
  vkGetDeviceImageSparseMemoryRequirements = cast[proc (device: VkDevice, pInfo: ptr VkDeviceImageMemoryRequirements, pSparseMemoryRequirementCount: ptr uint32, pSparseMemoryRequirements: ptr VkSparseImageMemoryRequirements2): void {.stdcall.}](vkGetProc("vkGetDeviceImageSparseMemoryRequirements"))

# Load VK_KHR_surface
proc loadVK_KHR_surface*() =
  vkDestroySurfaceKHR = cast[proc (instance: VkInstance, surface: VkSurfaceKHR, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroySurfaceKHR"))
  vkGetPhysicalDeviceSurfaceSupportKHR = cast[proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, surface: VkSurfaceKHR, pSupported: ptr VkBool32): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceSurfaceSupportKHR"))
  vkGetPhysicalDeviceSurfaceCapabilitiesKHR = cast[proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: ptr VkSurfaceCapabilitiesKHR): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceSurfaceCapabilitiesKHR"))
  vkGetPhysicalDeviceSurfaceFormatsKHR = cast[proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceFormatCount: ptr uint32, pSurfaceFormats: ptr VkSurfaceFormatKHR): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceSurfaceFormatsKHR"))
  vkGetPhysicalDeviceSurfacePresentModesKHR = cast[proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pPresentModeCount: ptr uint32, pPresentModes: ptr VkPresentModeKHR): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceSurfacePresentModesKHR"))

# Load VK_KHR_swapchain
proc loadVK_KHR_swapchain*() =
  vkCreateSwapchainKHR = cast[proc (device: VkDevice, pCreateInfo: ptr VkSwapchainCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSwapchain: ptr VkSwapchainKHR): VkResult {.stdcall.}](vkGetProc("vkCreateSwapchainKHR"))
  vkDestroySwapchainKHR = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroySwapchainKHR"))
  vkGetSwapchainImagesKHR = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR, pSwapchainImageCount: ptr uint32, pSwapchainImages: ptr VkImage): VkResult {.stdcall.}](vkGetProc("vkGetSwapchainImagesKHR"))
  vkAcquireNextImageKHR = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR, timeout: uint64, semaphore: VkSemaphore, fence: VkFence, pImageIndex: ptr uint32): VkResult {.stdcall.}](vkGetProc("vkAcquireNextImageKHR"))
  vkQueuePresentKHR = cast[proc (queue: VkQueue, pPresentInfo: ptr VkPresentInfoKHR): VkResult {.stdcall.}](vkGetProc("vkQueuePresentKHR"))
  vkGetDeviceGroupPresentCapabilitiesKHR = cast[proc (device: VkDevice, pDeviceGroupPresentCapabilities: ptr VkDeviceGroupPresentCapabilitiesKHR): VkResult {.stdcall.}](vkGetProc("vkGetDeviceGroupPresentCapabilitiesKHR"))
  vkGetDeviceGroupSurfacePresentModesKHR = cast[proc (device: VkDevice, surface: VkSurfaceKHR, pModes: ptr VkDeviceGroupPresentModeFlagsKHR): VkResult {.stdcall.}](vkGetProc("vkGetDeviceGroupSurfacePresentModesKHR"))
  vkGetPhysicalDevicePresentRectanglesKHR = cast[proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pRectCount: ptr uint32, pRects: ptr VkRect2D): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDevicePresentRectanglesKHR"))
  vkAcquireNextImage2KHR = cast[proc (device: VkDevice, pAcquireInfo: ptr VkAcquireNextImageInfoKHR, pImageIndex: ptr uint32): VkResult {.stdcall.}](vkGetProc("vkAcquireNextImage2KHR"))

# Load VK_KHR_display
proc loadVK_KHR_display*() =
  vkGetPhysicalDeviceDisplayPropertiesKHR = cast[proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayPropertiesKHR): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceDisplayPropertiesKHR"))
  vkGetPhysicalDeviceDisplayPlanePropertiesKHR = cast[proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayPlanePropertiesKHR): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceDisplayPlanePropertiesKHR"))
  vkGetDisplayPlaneSupportedDisplaysKHR = cast[proc (physicalDevice: VkPhysicalDevice, planeIndex: uint32, pDisplayCount: ptr uint32, pDisplays: ptr VkDisplayKHR): VkResult {.stdcall.}](vkGetProc("vkGetDisplayPlaneSupportedDisplaysKHR"))
  vkGetDisplayModePropertiesKHR = cast[proc (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayModePropertiesKHR): VkResult {.stdcall.}](vkGetProc("vkGetDisplayModePropertiesKHR"))
  vkCreateDisplayModeKHR = cast[proc (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pCreateInfo: ptr VkDisplayModeCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pMode: ptr VkDisplayModeKHR): VkResult {.stdcall.}](vkGetProc("vkCreateDisplayModeKHR"))
  vkGetDisplayPlaneCapabilitiesKHR = cast[proc (physicalDevice: VkPhysicalDevice, mode: VkDisplayModeKHR, planeIndex: uint32, pCapabilities: ptr VkDisplayPlaneCapabilitiesKHR): VkResult {.stdcall.}](vkGetProc("vkGetDisplayPlaneCapabilitiesKHR"))
  vkCreateDisplayPlaneSurfaceKHR = cast[proc (instance: VkInstance, pCreateInfo: ptr VkDisplaySurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](vkGetProc("vkCreateDisplayPlaneSurfaceKHR"))

# Load VK_KHR_display_swapchain
proc loadVK_KHR_display_swapchain*() =
  vkCreateSharedSwapchainsKHR = cast[proc (device: VkDevice, swapchainCount: uint32, pCreateInfos: ptr VkSwapchainCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSwapchains: ptr VkSwapchainKHR): VkResult {.stdcall.}](vkGetProc("vkCreateSharedSwapchainsKHR"))

# Load VK_KHR_xlib_surface
proc loadVK_KHR_xlib_surface*() =
  vkCreateXlibSurfaceKHR = cast[proc (instance: VkInstance, pCreateInfo: ptr VkXlibSurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](vkGetProc("vkCreateXlibSurfaceKHR"))
  vkGetPhysicalDeviceXlibPresentationSupportKHR = cast[proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, dpy: ptr Display, visualID: VisualID): VkBool32 {.stdcall.}](vkGetProc("vkGetPhysicalDeviceXlibPresentationSupportKHR"))

# Load VK_KHR_xcb_surface
proc loadVK_KHR_xcb_surface*() =
  vkCreateXcbSurfaceKHR = cast[proc (instance: VkInstance, pCreateInfo: ptr VkXcbSurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](vkGetProc("vkCreateXcbSurfaceKHR"))
  vkGetPhysicalDeviceXcbPresentationSupportKHR = cast[proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, connection: ptr xcb_connection_t, visual_id: xcb_visualid_t): VkBool32 {.stdcall.}](vkGetProc("vkGetPhysicalDeviceXcbPresentationSupportKHR"))

# Load VK_KHR_wayland_surface
proc loadVK_KHR_wayland_surface*() =
  vkCreateWaylandSurfaceKHR = cast[proc (instance: VkInstance, pCreateInfo: ptr VkWaylandSurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](vkGetProc("vkCreateWaylandSurfaceKHR"))
  vkGetPhysicalDeviceWaylandPresentationSupportKHR = cast[proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, display: ptr wl_display): VkBool32 {.stdcall.}](vkGetProc("vkGetPhysicalDeviceWaylandPresentationSupportKHR"))

# Load VK_KHR_android_surface
proc loadVK_KHR_android_surface*() =
  vkCreateAndroidSurfaceKHR = cast[proc (instance: VkInstance, pCreateInfo: ptr VkAndroidSurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](vkGetProc("vkCreateAndroidSurfaceKHR"))

# Load VK_KHR_win32_surface
proc loadVK_KHR_win32_surface*() =
  vkCreateWin32SurfaceKHR = cast[proc (instance: VkInstance, pCreateInfo: ptr VkWin32SurfaceCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](vkGetProc("vkCreateWin32SurfaceKHR"))
  vkGetPhysicalDeviceWin32PresentationSupportKHR = cast[proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32): VkBool32 {.stdcall.}](vkGetProc("vkGetPhysicalDeviceWin32PresentationSupportKHR"))

# Load VK_ANDROID_native_buffer
proc loadVK_ANDROID_native_buffer*() =
  vkGetSwapchainGrallocUsageANDROID = cast[proc (device: VkDevice, format: VkFormat, imageUsage: VkImageUsageFlags, grallocUsage: ptr int): VkResult {.stdcall.}](vkGetProc("vkGetSwapchainGrallocUsageANDROID"))
  vkAcquireImageANDROID = cast[proc (device: VkDevice, image: VkImage, nativeFenceFd: int, semaphore: VkSemaphore, fence: VkFence): VkResult {.stdcall.}](vkGetProc("vkAcquireImageANDROID"))
  vkQueueSignalReleaseImageANDROID = cast[proc (queue: VkQueue, waitSemaphoreCount: uint32, pWaitSemaphores: ptr VkSemaphore, image: VkImage, pNativeFenceFd: ptr int): VkResult {.stdcall.}](vkGetProc("vkQueueSignalReleaseImageANDROID"))
  vkGetSwapchainGrallocUsage2ANDROID = cast[proc (device: VkDevice, format: VkFormat, imageUsage: VkImageUsageFlags, swapchainImageUsage: VkSwapchainImageUsageFlagsANDROID, grallocConsumerUsage: ptr uint64, grallocProducerUsage: ptr uint64): VkResult {.stdcall.}](vkGetProc("vkGetSwapchainGrallocUsage2ANDROID"))

# Load VK_EXT_debug_report
proc loadVK_EXT_debug_report*() =
  vkCreateDebugReportCallbackEXT = cast[proc (instance: VkInstance, pCreateInfo: ptr VkDebugReportCallbackCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pCallback: ptr VkDebugReportCallbackEXT): VkResult {.stdcall.}](vkGetProc("vkCreateDebugReportCallbackEXT"))
  vkDestroyDebugReportCallbackEXT = cast[proc (instance: VkInstance, callback: VkDebugReportCallbackEXT, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyDebugReportCallbackEXT"))
  vkDebugReportMessageEXT = cast[proc (instance: VkInstance, flags: VkDebugReportFlagsEXT, objectType: VkDebugReportObjectTypeEXT, `object`: uint64, location: uint, messageCode: int32, pLayerPrefix: cstring, pMessage: cstring): void {.stdcall.}](vkGetProc("vkDebugReportMessageEXT"))

# Load VK_EXT_debug_marker
proc loadVK_EXT_debug_marker*() =
  vkDebugMarkerSetObjectTagEXT = cast[proc (device: VkDevice, pTagInfo: ptr VkDebugMarkerObjectTagInfoEXT): VkResult {.stdcall.}](vkGetProc("vkDebugMarkerSetObjectTagEXT"))
  vkDebugMarkerSetObjectNameEXT = cast[proc (device: VkDevice, pNameInfo: ptr VkDebugMarkerObjectNameInfoEXT): VkResult {.stdcall.}](vkGetProc("vkDebugMarkerSetObjectNameEXT"))
  vkCmdDebugMarkerBeginEXT = cast[proc (commandBuffer: VkCommandBuffer, pMarkerInfo: ptr VkDebugMarkerMarkerInfoEXT): void {.stdcall.}](vkGetProc("vkCmdDebugMarkerBeginEXT"))
  vkCmdDebugMarkerEndEXT = cast[proc (commandBuffer: VkCommandBuffer): void {.stdcall.}](vkGetProc("vkCmdDebugMarkerEndEXT"))
  vkCmdDebugMarkerInsertEXT = cast[proc (commandBuffer: VkCommandBuffer, pMarkerInfo: ptr VkDebugMarkerMarkerInfoEXT): void {.stdcall.}](vkGetProc("vkCmdDebugMarkerInsertEXT"))

# Load VK_KHR_video_queue
proc loadVK_KHR_video_queue*() =
  vkGetPhysicalDeviceVideoCapabilitiesKHR = cast[proc (physicalDevice: VkPhysicalDevice, pVideoProfile: ptr VkVideoProfileInfoKHR, pCapabilities: ptr VkVideoCapabilitiesKHR): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceVideoCapabilitiesKHR"))
  vkGetPhysicalDeviceVideoFormatPropertiesKHR = cast[proc (physicalDevice: VkPhysicalDevice, pVideoFormatInfo: ptr VkPhysicalDeviceVideoFormatInfoKHR, pVideoFormatPropertyCount: ptr uint32, pVideoFormatProperties: ptr VkVideoFormatPropertiesKHR): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceVideoFormatPropertiesKHR"))
  vkCreateVideoSessionKHR = cast[proc (device: VkDevice, pCreateInfo: ptr VkVideoSessionCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pVideoSession: ptr VkVideoSessionKHR): VkResult {.stdcall.}](vkGetProc("vkCreateVideoSessionKHR"))
  vkDestroyVideoSessionKHR = cast[proc (device: VkDevice, videoSession: VkVideoSessionKHR, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyVideoSessionKHR"))
  vkGetVideoSessionMemoryRequirementsKHR = cast[proc (device: VkDevice, videoSession: VkVideoSessionKHR, pMemoryRequirementsCount: ptr uint32, pMemoryRequirements: ptr VkVideoSessionMemoryRequirementsKHR): VkResult {.stdcall.}](vkGetProc("vkGetVideoSessionMemoryRequirementsKHR"))
  vkBindVideoSessionMemoryKHR = cast[proc (device: VkDevice, videoSession: VkVideoSessionKHR, bindSessionMemoryInfoCount: uint32, pBindSessionMemoryInfos: ptr VkBindVideoSessionMemoryInfoKHR): VkResult {.stdcall.}](vkGetProc("vkBindVideoSessionMemoryKHR"))
  vkCreateVideoSessionParametersKHR = cast[proc (device: VkDevice, pCreateInfo: ptr VkVideoSessionParametersCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pVideoSessionParameters: ptr VkVideoSessionParametersKHR): VkResult {.stdcall.}](vkGetProc("vkCreateVideoSessionParametersKHR"))
  vkUpdateVideoSessionParametersKHR = cast[proc (device: VkDevice, videoSessionParameters: VkVideoSessionParametersKHR, pUpdateInfo: ptr VkVideoSessionParametersUpdateInfoKHR): VkResult {.stdcall.}](vkGetProc("vkUpdateVideoSessionParametersKHR"))
  vkDestroyVideoSessionParametersKHR = cast[proc (device: VkDevice, videoSessionParameters: VkVideoSessionParametersKHR, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyVideoSessionParametersKHR"))
  vkCmdBeginVideoCodingKHR = cast[proc (commandBuffer: VkCommandBuffer, pBeginInfo: ptr VkVideoBeginCodingInfoKHR): void {.stdcall.}](vkGetProc("vkCmdBeginVideoCodingKHR"))
  vkCmdEndVideoCodingKHR = cast[proc (commandBuffer: VkCommandBuffer, pEndCodingInfo: ptr VkVideoEndCodingInfoKHR): void {.stdcall.}](vkGetProc("vkCmdEndVideoCodingKHR"))
  vkCmdControlVideoCodingKHR = cast[proc (commandBuffer: VkCommandBuffer, pCodingControlInfo: ptr VkVideoCodingControlInfoKHR): void {.stdcall.}](vkGetProc("vkCmdControlVideoCodingKHR"))

# Load VK_KHR_video_decode_queue
proc loadVK_KHR_video_decode_queue*() =
  vkCmdDecodeVideoKHR = cast[proc (commandBuffer: VkCommandBuffer, pDecodeInfo: ptr VkVideoDecodeInfoKHR): void {.stdcall.}](vkGetProc("vkCmdDecodeVideoKHR"))

# Load VK_EXT_transform_feedback
proc loadVK_EXT_transform_feedback*() =
  vkCmdBindTransformFeedbackBuffersEXT = cast[proc (commandBuffer: VkCommandBuffer, firstBinding: uint32, bindingCount: uint32, pBuffers: ptr VkBuffer, pOffsets: ptr VkDeviceSize, pSizes: ptr VkDeviceSize): void {.stdcall.}](vkGetProc("vkCmdBindTransformFeedbackBuffersEXT"))
  vkCmdBeginTransformFeedbackEXT = cast[proc (commandBuffer: VkCommandBuffer, firstCounterBuffer: uint32, counterBufferCount: uint32, pCounterBuffers: ptr VkBuffer, pCounterBufferOffsets: ptr VkDeviceSize): void {.stdcall.}](vkGetProc("vkCmdBeginTransformFeedbackEXT"))
  vkCmdEndTransformFeedbackEXT = cast[proc (commandBuffer: VkCommandBuffer, firstCounterBuffer: uint32, counterBufferCount: uint32, pCounterBuffers: ptr VkBuffer, pCounterBufferOffsets: ptr VkDeviceSize): void {.stdcall.}](vkGetProc("vkCmdEndTransformFeedbackEXT"))
  vkCmdBeginQueryIndexedEXT = cast[proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32, flags: VkQueryControlFlags, index: uint32): void {.stdcall.}](vkGetProc("vkCmdBeginQueryIndexedEXT"))
  vkCmdEndQueryIndexedEXT = cast[proc (commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: uint32, index: uint32): void {.stdcall.}](vkGetProc("vkCmdEndQueryIndexedEXT"))
  vkCmdDrawIndirectByteCountEXT = cast[proc (commandBuffer: VkCommandBuffer, instanceCount: uint32, firstInstance: uint32, counterBuffer: VkBuffer, counterBufferOffset: VkDeviceSize, counterOffset: uint32, vertexStride: uint32): void {.stdcall.}](vkGetProc("vkCmdDrawIndirectByteCountEXT"))

# Load VK_NVX_binary_import
proc loadVK_NVX_binary_import*() =
  vkCreateCuModuleNVX = cast[proc (device: VkDevice, pCreateInfo: ptr VkCuModuleCreateInfoNVX, pAllocator: ptr VkAllocationCallbacks, pModule: ptr VkCuModuleNVX): VkResult {.stdcall.}](vkGetProc("vkCreateCuModuleNVX"))
  vkCreateCuFunctionNVX = cast[proc (device: VkDevice, pCreateInfo: ptr VkCuFunctionCreateInfoNVX, pAllocator: ptr VkAllocationCallbacks, pFunction: ptr VkCuFunctionNVX): VkResult {.stdcall.}](vkGetProc("vkCreateCuFunctionNVX"))
  vkDestroyCuModuleNVX = cast[proc (device: VkDevice, module: VkCuModuleNVX, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyCuModuleNVX"))
  vkDestroyCuFunctionNVX = cast[proc (device: VkDevice, function: VkCuFunctionNVX, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyCuFunctionNVX"))
  vkCmdCuLaunchKernelNVX = cast[proc (commandBuffer: VkCommandBuffer, pLaunchInfo: ptr VkCuLaunchInfoNVX): void {.stdcall.}](vkGetProc("vkCmdCuLaunchKernelNVX"))

# Load VK_NVX_image_view_handle
proc loadVK_NVX_image_view_handle*() =
  vkGetImageViewHandleNVX = cast[proc (device: VkDevice, pInfo: ptr VkImageViewHandleInfoNVX): uint32 {.stdcall.}](vkGetProc("vkGetImageViewHandleNVX"))
  vkGetImageViewAddressNVX = cast[proc (device: VkDevice, imageView: VkImageView, pProperties: ptr VkImageViewAddressPropertiesNVX): VkResult {.stdcall.}](vkGetProc("vkGetImageViewAddressNVX"))

# Load VK_AMD_shader_info
proc loadVK_AMD_shader_info*() =
  vkGetShaderInfoAMD = cast[proc (device: VkDevice, pipeline: VkPipeline, shaderStage: VkShaderStageFlagBits, infoType: VkShaderInfoTypeAMD, pInfoSize: ptr uint, pInfo: pointer): VkResult {.stdcall.}](vkGetProc("vkGetShaderInfoAMD"))

# Load VK_GGP_stream_descriptor_surface
proc loadVK_GGP_stream_descriptor_surface*() =
  vkCreateStreamDescriptorSurfaceGGP = cast[proc (instance: VkInstance, pCreateInfo: ptr VkStreamDescriptorSurfaceCreateInfoGGP, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](vkGetProc("vkCreateStreamDescriptorSurfaceGGP"))

# Load VK_NV_external_memory_capabilities
proc loadVK_NV_external_memory_capabilities*() =
  vkGetPhysicalDeviceExternalImageFormatPropertiesNV = cast[proc (physicalDevice: VkPhysicalDevice, format: VkFormat, `type`: VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, externalHandleType: VkExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: ptr VkExternalImageFormatPropertiesNV): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceExternalImageFormatPropertiesNV"))

# Load VK_NV_external_memory_win32
proc loadVK_NV_external_memory_win32*() =
  vkGetMemoryWin32HandleNV = cast[proc (device: VkDevice, memory: VkDeviceMemory, handleType: VkExternalMemoryHandleTypeFlagsNV, pHandle: ptr HANDLE): VkResult {.stdcall.}](vkGetProc("vkGetMemoryWin32HandleNV"))

# Load VK_KHR_device_group
proc loadVK_KHR_device_group*() =
  vkGetDeviceGroupPresentCapabilitiesKHR = cast[proc (device: VkDevice, pDeviceGroupPresentCapabilities: ptr VkDeviceGroupPresentCapabilitiesKHR): VkResult {.stdcall.}](vkGetProc("vkGetDeviceGroupPresentCapabilitiesKHR"))
  vkGetDeviceGroupSurfacePresentModesKHR = cast[proc (device: VkDevice, surface: VkSurfaceKHR, pModes: ptr VkDeviceGroupPresentModeFlagsKHR): VkResult {.stdcall.}](vkGetProc("vkGetDeviceGroupSurfacePresentModesKHR"))
  vkGetPhysicalDevicePresentRectanglesKHR = cast[proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pRectCount: ptr uint32, pRects: ptr VkRect2D): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDevicePresentRectanglesKHR"))
  vkAcquireNextImage2KHR = cast[proc (device: VkDevice, pAcquireInfo: ptr VkAcquireNextImageInfoKHR, pImageIndex: ptr uint32): VkResult {.stdcall.}](vkGetProc("vkAcquireNextImage2KHR"))

# Load VK_NN_vi_surface
proc loadVK_NN_vi_surface*() =
  vkCreateViSurfaceNN = cast[proc (instance: VkInstance, pCreateInfo: ptr VkViSurfaceCreateInfoNN, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](vkGetProc("vkCreateViSurfaceNN"))

# Load VK_KHR_external_memory_win32
proc loadVK_KHR_external_memory_win32*() =
  vkGetMemoryWin32HandleKHR = cast[proc (device: VkDevice, pGetWin32HandleInfo: ptr VkMemoryGetWin32HandleInfoKHR, pHandle: ptr HANDLE): VkResult {.stdcall.}](vkGetProc("vkGetMemoryWin32HandleKHR"))
  vkGetMemoryWin32HandlePropertiesKHR = cast[proc (device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, handle: HANDLE, pMemoryWin32HandleProperties: ptr VkMemoryWin32HandlePropertiesKHR): VkResult {.stdcall.}](vkGetProc("vkGetMemoryWin32HandlePropertiesKHR"))

# Load VK_KHR_external_memory_fd
proc loadVK_KHR_external_memory_fd*() =
  vkGetMemoryFdKHR = cast[proc (device: VkDevice, pGetFdInfo: ptr VkMemoryGetFdInfoKHR, pFd: ptr int): VkResult {.stdcall.}](vkGetProc("vkGetMemoryFdKHR"))
  vkGetMemoryFdPropertiesKHR = cast[proc (device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, fd: int, pMemoryFdProperties: ptr VkMemoryFdPropertiesKHR): VkResult {.stdcall.}](vkGetProc("vkGetMemoryFdPropertiesKHR"))

# Load VK_KHR_external_semaphore_win32
proc loadVK_KHR_external_semaphore_win32*() =
  vkImportSemaphoreWin32HandleKHR = cast[proc (device: VkDevice, pImportSemaphoreWin32HandleInfo: ptr VkImportSemaphoreWin32HandleInfoKHR): VkResult {.stdcall.}](vkGetProc("vkImportSemaphoreWin32HandleKHR"))
  vkGetSemaphoreWin32HandleKHR = cast[proc (device: VkDevice, pGetWin32HandleInfo: ptr VkSemaphoreGetWin32HandleInfoKHR, pHandle: ptr HANDLE): VkResult {.stdcall.}](vkGetProc("vkGetSemaphoreWin32HandleKHR"))

# Load VK_KHR_external_semaphore_fd
proc loadVK_KHR_external_semaphore_fd*() =
  vkImportSemaphoreFdKHR = cast[proc (device: VkDevice, pImportSemaphoreFdInfo: ptr VkImportSemaphoreFdInfoKHR): VkResult {.stdcall.}](vkGetProc("vkImportSemaphoreFdKHR"))
  vkGetSemaphoreFdKHR = cast[proc (device: VkDevice, pGetFdInfo: ptr VkSemaphoreGetFdInfoKHR, pFd: ptr int): VkResult {.stdcall.}](vkGetProc("vkGetSemaphoreFdKHR"))

# Load VK_KHR_push_descriptor
proc loadVK_KHR_push_descriptor*() =
  vkCmdPushDescriptorSetKHR = cast[proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: uint32, descriptorWriteCount: uint32, pDescriptorWrites: ptr VkWriteDescriptorSet): void {.stdcall.}](vkGetProc("vkCmdPushDescriptorSetKHR"))
  vkCmdPushDescriptorSetWithTemplateKHR = cast[proc (commandBuffer: VkCommandBuffer, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: uint32, pData: pointer): void {.stdcall.}](vkGetProc("vkCmdPushDescriptorSetWithTemplateKHR"))
  vkCmdPushDescriptorSetWithTemplateKHR = cast[proc (commandBuffer: VkCommandBuffer, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: uint32, pData: pointer): void {.stdcall.}](vkGetProc("vkCmdPushDescriptorSetWithTemplateKHR"))

# Load VK_EXT_conditional_rendering
proc loadVK_EXT_conditional_rendering*() =
  vkCmdBeginConditionalRenderingEXT = cast[proc (commandBuffer: VkCommandBuffer, pConditionalRenderingBegin: ptr VkConditionalRenderingBeginInfoEXT): void {.stdcall.}](vkGetProc("vkCmdBeginConditionalRenderingEXT"))
  vkCmdEndConditionalRenderingEXT = cast[proc (commandBuffer: VkCommandBuffer): void {.stdcall.}](vkGetProc("vkCmdEndConditionalRenderingEXT"))

# Load VK_KHR_descriptor_update_template
proc loadVK_KHR_descriptor_update_template*() =
  vkCmdPushDescriptorSetWithTemplateKHR = cast[proc (commandBuffer: VkCommandBuffer, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: uint32, pData: pointer): void {.stdcall.}](vkGetProc("vkCmdPushDescriptorSetWithTemplateKHR"))

# Load VK_NV_clip_space_w_scaling
proc loadVK_NV_clip_space_w_scaling*() =
  vkCmdSetViewportWScalingNV = cast[proc (commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pViewportWScalings: ptr VkViewportWScalingNV): void {.stdcall.}](vkGetProc("vkCmdSetViewportWScalingNV"))

# Load VK_EXT_direct_mode_display
proc loadVK_EXT_direct_mode_display*() =
  vkReleaseDisplayEXT = cast[proc (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR): VkResult {.stdcall.}](vkGetProc("vkReleaseDisplayEXT"))

# Load VK_EXT_acquire_xlib_display
proc loadVK_EXT_acquire_xlib_display*() =
  vkAcquireXlibDisplayEXT = cast[proc (physicalDevice: VkPhysicalDevice, dpy: ptr Display, display: VkDisplayKHR): VkResult {.stdcall.}](vkGetProc("vkAcquireXlibDisplayEXT"))
  vkGetRandROutputDisplayEXT = cast[proc (physicalDevice: VkPhysicalDevice, dpy: ptr Display, rrOutput: RROutput, pDisplay: ptr VkDisplayKHR): VkResult {.stdcall.}](vkGetProc("vkGetRandROutputDisplayEXT"))

# Load VK_EXT_display_surface_counter
proc loadVK_EXT_display_surface_counter*() =
  vkGetPhysicalDeviceSurfaceCapabilities2EXT = cast[proc (physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: ptr VkSurfaceCapabilities2EXT): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceSurfaceCapabilities2EXT"))

# Load VK_EXT_display_control
proc loadVK_EXT_display_control*() =
  vkDisplayPowerControlEXT = cast[proc (device: VkDevice, display: VkDisplayKHR, pDisplayPowerInfo: ptr VkDisplayPowerInfoEXT): VkResult {.stdcall.}](vkGetProc("vkDisplayPowerControlEXT"))
  vkRegisterDeviceEventEXT = cast[proc (device: VkDevice, pDeviceEventInfo: ptr VkDeviceEventInfoEXT, pAllocator: ptr VkAllocationCallbacks, pFence: ptr VkFence): VkResult {.stdcall.}](vkGetProc("vkRegisterDeviceEventEXT"))
  vkRegisterDisplayEventEXT = cast[proc (device: VkDevice, display: VkDisplayKHR, pDisplayEventInfo: ptr VkDisplayEventInfoEXT, pAllocator: ptr VkAllocationCallbacks, pFence: ptr VkFence): VkResult {.stdcall.}](vkGetProc("vkRegisterDisplayEventEXT"))
  vkGetSwapchainCounterEXT = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR, counter: VkSurfaceCounterFlagBitsEXT, pCounterValue: ptr uint64): VkResult {.stdcall.}](vkGetProc("vkGetSwapchainCounterEXT"))

# Load VK_GOOGLE_display_timing
proc loadVK_GOOGLE_display_timing*() =
  vkGetRefreshCycleDurationGOOGLE = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR, pDisplayTimingProperties: ptr VkRefreshCycleDurationGOOGLE): VkResult {.stdcall.}](vkGetProc("vkGetRefreshCycleDurationGOOGLE"))
  vkGetPastPresentationTimingGOOGLE = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR, pPresentationTimingCount: ptr uint32, pPresentationTimings: ptr VkPastPresentationTimingGOOGLE): VkResult {.stdcall.}](vkGetProc("vkGetPastPresentationTimingGOOGLE"))

# Load VK_EXT_discard_rectangles
proc loadVK_EXT_discard_rectangles*() =
  vkCmdSetDiscardRectangleEXT = cast[proc (commandBuffer: VkCommandBuffer, firstDiscardRectangle: uint32, discardRectangleCount: uint32, pDiscardRectangles: ptr VkRect2D): void {.stdcall.}](vkGetProc("vkCmdSetDiscardRectangleEXT"))
  vkCmdSetDiscardRectangleEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, discardRectangleEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetDiscardRectangleEnableEXT"))
  vkCmdSetDiscardRectangleModeEXT = cast[proc (commandBuffer: VkCommandBuffer, discardRectangleMode: VkDiscardRectangleModeEXT): void {.stdcall.}](vkGetProc("vkCmdSetDiscardRectangleModeEXT"))

# Load VK_EXT_hdr_metadata
proc loadVK_EXT_hdr_metadata*() =
  vkSetHdrMetadataEXT = cast[proc (device: VkDevice, swapchainCount: uint32, pSwapchains: ptr VkSwapchainKHR, pMetadata: ptr VkHdrMetadataEXT): void {.stdcall.}](vkGetProc("vkSetHdrMetadataEXT"))

# Load VK_KHR_shared_presentable_image
proc loadVK_KHR_shared_presentable_image*() =
  vkGetSwapchainStatusKHR = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR): VkResult {.stdcall.}](vkGetProc("vkGetSwapchainStatusKHR"))

# Load VK_KHR_external_fence_win32
proc loadVK_KHR_external_fence_win32*() =
  vkImportFenceWin32HandleKHR = cast[proc (device: VkDevice, pImportFenceWin32HandleInfo: ptr VkImportFenceWin32HandleInfoKHR): VkResult {.stdcall.}](vkGetProc("vkImportFenceWin32HandleKHR"))
  vkGetFenceWin32HandleKHR = cast[proc (device: VkDevice, pGetWin32HandleInfo: ptr VkFenceGetWin32HandleInfoKHR, pHandle: ptr HANDLE): VkResult {.stdcall.}](vkGetProc("vkGetFenceWin32HandleKHR"))

# Load VK_KHR_external_fence_fd
proc loadVK_KHR_external_fence_fd*() =
  vkImportFenceFdKHR = cast[proc (device: VkDevice, pImportFenceFdInfo: ptr VkImportFenceFdInfoKHR): VkResult {.stdcall.}](vkGetProc("vkImportFenceFdKHR"))
  vkGetFenceFdKHR = cast[proc (device: VkDevice, pGetFdInfo: ptr VkFenceGetFdInfoKHR, pFd: ptr int): VkResult {.stdcall.}](vkGetProc("vkGetFenceFdKHR"))

# Load VK_KHR_performance_query
proc loadVK_KHR_performance_query*() =
  vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = cast[proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, pCounterCount: ptr uint32, pCounters: ptr VkPerformanceCounterKHR, pCounterDescriptions: ptr VkPerformanceCounterDescriptionKHR): VkResult {.stdcall.}](vkGetProc("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR"))
  vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = cast[proc (physicalDevice: VkPhysicalDevice, pPerformanceQueryCreateInfo: ptr VkQueryPoolPerformanceCreateInfoKHR, pNumPasses: ptr uint32): void {.stdcall.}](vkGetProc("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR"))
  vkAcquireProfilingLockKHR = cast[proc (device: VkDevice, pInfo: ptr VkAcquireProfilingLockInfoKHR): VkResult {.stdcall.}](vkGetProc("vkAcquireProfilingLockKHR"))
  vkReleaseProfilingLockKHR = cast[proc (device: VkDevice): void {.stdcall.}](vkGetProc("vkReleaseProfilingLockKHR"))

# Load VK_KHR_get_surface_capabilities2
proc loadVK_KHR_get_surface_capabilities2*() =
  vkGetPhysicalDeviceSurfaceCapabilities2KHR = cast[proc (physicalDevice: VkPhysicalDevice, pSurfaceInfo: ptr VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: ptr VkSurfaceCapabilities2KHR): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceSurfaceCapabilities2KHR"))
  vkGetPhysicalDeviceSurfaceFormats2KHR = cast[proc (physicalDevice: VkPhysicalDevice, pSurfaceInfo: ptr VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: ptr uint32, pSurfaceFormats: ptr VkSurfaceFormat2KHR): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceSurfaceFormats2KHR"))

# Load VK_KHR_get_display_properties2
proc loadVK_KHR_get_display_properties2*() =
  vkGetPhysicalDeviceDisplayProperties2KHR = cast[proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayProperties2KHR): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceDisplayProperties2KHR"))
  vkGetPhysicalDeviceDisplayPlaneProperties2KHR = cast[proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayPlaneProperties2KHR): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceDisplayPlaneProperties2KHR"))
  vkGetDisplayModeProperties2KHR = cast[proc (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: ptr uint32, pProperties: ptr VkDisplayModeProperties2KHR): VkResult {.stdcall.}](vkGetProc("vkGetDisplayModeProperties2KHR"))
  vkGetDisplayPlaneCapabilities2KHR = cast[proc (physicalDevice: VkPhysicalDevice, pDisplayPlaneInfo: ptr VkDisplayPlaneInfo2KHR, pCapabilities: ptr VkDisplayPlaneCapabilities2KHR): VkResult {.stdcall.}](vkGetProc("vkGetDisplayPlaneCapabilities2KHR"))

# Load VK_MVK_ios_surface
proc loadVK_MVK_ios_surface*() =
  vkCreateIOSSurfaceMVK = cast[proc (instance: VkInstance, pCreateInfo: ptr VkIOSSurfaceCreateInfoMVK, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](vkGetProc("vkCreateIOSSurfaceMVK"))

# Load VK_MVK_macos_surface
proc loadVK_MVK_macos_surface*() =
  vkCreateMacOSSurfaceMVK = cast[proc (instance: VkInstance, pCreateInfo: ptr VkMacOSSurfaceCreateInfoMVK, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](vkGetProc("vkCreateMacOSSurfaceMVK"))

# Load VK_EXT_debug_utils
proc loadVK_EXT_debug_utils*() =
  vkSetDebugUtilsObjectNameEXT = cast[proc (device: VkDevice, pNameInfo: ptr VkDebugUtilsObjectNameInfoEXT): VkResult {.stdcall.}](vkGetProc("vkSetDebugUtilsObjectNameEXT"))
  vkSetDebugUtilsObjectTagEXT = cast[proc (device: VkDevice, pTagInfo: ptr VkDebugUtilsObjectTagInfoEXT): VkResult {.stdcall.}](vkGetProc("vkSetDebugUtilsObjectTagEXT"))
  vkQueueBeginDebugUtilsLabelEXT = cast[proc (queue: VkQueue, pLabelInfo: ptr VkDebugUtilsLabelEXT): void {.stdcall.}](vkGetProc("vkQueueBeginDebugUtilsLabelEXT"))
  vkQueueEndDebugUtilsLabelEXT = cast[proc (queue: VkQueue): void {.stdcall.}](vkGetProc("vkQueueEndDebugUtilsLabelEXT"))
  vkQueueInsertDebugUtilsLabelEXT = cast[proc (queue: VkQueue, pLabelInfo: ptr VkDebugUtilsLabelEXT): void {.stdcall.}](vkGetProc("vkQueueInsertDebugUtilsLabelEXT"))
  vkCmdBeginDebugUtilsLabelEXT = cast[proc (commandBuffer: VkCommandBuffer, pLabelInfo: ptr VkDebugUtilsLabelEXT): void {.stdcall.}](vkGetProc("vkCmdBeginDebugUtilsLabelEXT"))
  vkCmdEndDebugUtilsLabelEXT = cast[proc (commandBuffer: VkCommandBuffer): void {.stdcall.}](vkGetProc("vkCmdEndDebugUtilsLabelEXT"))
  vkCmdInsertDebugUtilsLabelEXT = cast[proc (commandBuffer: VkCommandBuffer, pLabelInfo: ptr VkDebugUtilsLabelEXT): void {.stdcall.}](vkGetProc("vkCmdInsertDebugUtilsLabelEXT"))
  vkCreateDebugUtilsMessengerEXT = cast[proc (instance: VkInstance, pCreateInfo: ptr VkDebugUtilsMessengerCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pMessenger: ptr VkDebugUtilsMessengerEXT): VkResult {.stdcall.}](vkGetProc("vkCreateDebugUtilsMessengerEXT"))
  vkDestroyDebugUtilsMessengerEXT = cast[proc (instance: VkInstance, messenger: VkDebugUtilsMessengerEXT, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyDebugUtilsMessengerEXT"))
  vkSubmitDebugUtilsMessageEXT = cast[proc (instance: VkInstance, messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT, messageTypes: VkDebugUtilsMessageTypeFlagsEXT, pCallbackData: ptr VkDebugUtilsMessengerCallbackDataEXT): void {.stdcall.}](vkGetProc("vkSubmitDebugUtilsMessageEXT"))

# Load VK_ANDROID_external_memory_android_hardware_buffer
proc loadVK_ANDROID_external_memory_android_hardware_buffer*() =
  vkGetAndroidHardwareBufferPropertiesANDROID = cast[proc (device: VkDevice, buffer: ptr AHardwareBuffer, pProperties: ptr VkAndroidHardwareBufferPropertiesANDROID): VkResult {.stdcall.}](vkGetProc("vkGetAndroidHardwareBufferPropertiesANDROID"))
  vkGetMemoryAndroidHardwareBufferANDROID = cast[proc (device: VkDevice, pInfo: ptr VkMemoryGetAndroidHardwareBufferInfoANDROID, pBuffer: ptr ptr AHardwareBuffer): VkResult {.stdcall.}](vkGetProc("vkGetMemoryAndroidHardwareBufferANDROID"))

# Load VK_AMDX_shader_enqueue
proc loadVK_AMDX_shader_enqueue*() =
  vkCreateExecutionGraphPipelinesAMDX = cast[proc (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: ptr VkExecutionGraphPipelineCreateInfoAMDX, pAllocator: ptr VkAllocationCallbacks, pPipelines: ptr VkPipeline): VkResult {.stdcall.}](vkGetProc("vkCreateExecutionGraphPipelinesAMDX"))
  vkGetExecutionGraphPipelineScratchSizeAMDX = cast[proc (device: VkDevice, executionGraph: VkPipeline, pSizeInfo: ptr VkExecutionGraphPipelineScratchSizeAMDX): VkResult {.stdcall.}](vkGetProc("vkGetExecutionGraphPipelineScratchSizeAMDX"))
  vkGetExecutionGraphPipelineNodeIndexAMDX = cast[proc (device: VkDevice, executionGraph: VkPipeline, pNodeInfo: ptr VkPipelineShaderStageNodeCreateInfoAMDX, pNodeIndex: ptr uint32): VkResult {.stdcall.}](vkGetProc("vkGetExecutionGraphPipelineNodeIndexAMDX"))
  vkCmdInitializeGraphScratchMemoryAMDX = cast[proc (commandBuffer: VkCommandBuffer, scratch: VkDeviceAddress): void {.stdcall.}](vkGetProc("vkCmdInitializeGraphScratchMemoryAMDX"))
  vkCmdDispatchGraphAMDX = cast[proc (commandBuffer: VkCommandBuffer, scratch: VkDeviceAddress, pCountInfo: ptr VkDispatchGraphCountInfoAMDX): void {.stdcall.}](vkGetProc("vkCmdDispatchGraphAMDX"))
  vkCmdDispatchGraphIndirectAMDX = cast[proc (commandBuffer: VkCommandBuffer, scratch: VkDeviceAddress, pCountInfo: ptr VkDispatchGraphCountInfoAMDX): void {.stdcall.}](vkGetProc("vkCmdDispatchGraphIndirectAMDX"))
  vkCmdDispatchGraphIndirectCountAMDX = cast[proc (commandBuffer: VkCommandBuffer, scratch: VkDeviceAddress, countInfo: VkDeviceAddress): void {.stdcall.}](vkGetProc("vkCmdDispatchGraphIndirectCountAMDX"))

# Load VK_EXT_sample_locations
proc loadVK_EXT_sample_locations*() =
  vkCmdSetSampleLocationsEXT = cast[proc (commandBuffer: VkCommandBuffer, pSampleLocationsInfo: ptr VkSampleLocationsInfoEXT): void {.stdcall.}](vkGetProc("vkCmdSetSampleLocationsEXT"))
  vkGetPhysicalDeviceMultisamplePropertiesEXT = cast[proc (physicalDevice: VkPhysicalDevice, samples: VkSampleCountFlagBits, pMultisampleProperties: ptr VkMultisamplePropertiesEXT): void {.stdcall.}](vkGetProc("vkGetPhysicalDeviceMultisamplePropertiesEXT"))

# Load VK_KHR_acceleration_structure
proc loadVK_KHR_acceleration_structure*() =
  vkCreateAccelerationStructureKHR = cast[proc (device: VkDevice, pCreateInfo: ptr VkAccelerationStructureCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pAccelerationStructure: ptr VkAccelerationStructureKHR): VkResult {.stdcall.}](vkGetProc("vkCreateAccelerationStructureKHR"))
  vkDestroyAccelerationStructureKHR = cast[proc (device: VkDevice, accelerationStructure: VkAccelerationStructureKHR, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyAccelerationStructureKHR"))
  vkCmdBuildAccelerationStructuresKHR = cast[proc (commandBuffer: VkCommandBuffer, infoCount: uint32, pInfos: ptr VkAccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: ptr ptr VkAccelerationStructureBuildRangeInfoKHR): void {.stdcall.}](vkGetProc("vkCmdBuildAccelerationStructuresKHR"))
  vkCmdBuildAccelerationStructuresIndirectKHR = cast[proc (commandBuffer: VkCommandBuffer, infoCount: uint32, pInfos: ptr VkAccelerationStructureBuildGeometryInfoKHR, pIndirectDeviceAddresses: ptr VkDeviceAddress, pIndirectStrides: ptr uint32, ppMaxPrimitiveCounts: ptr ptr uint32): void {.stdcall.}](vkGetProc("vkCmdBuildAccelerationStructuresIndirectKHR"))
  vkBuildAccelerationStructuresKHR = cast[proc (device: VkDevice, deferredOperation: VkDeferredOperationKHR, infoCount: uint32, pInfos: ptr VkAccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: ptr ptr VkAccelerationStructureBuildRangeInfoKHR): VkResult {.stdcall.}](vkGetProc("vkBuildAccelerationStructuresKHR"))
  vkCopyAccelerationStructureKHR = cast[proc (device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: ptr VkCopyAccelerationStructureInfoKHR): VkResult {.stdcall.}](vkGetProc("vkCopyAccelerationStructureKHR"))
  vkCopyAccelerationStructureToMemoryKHR = cast[proc (device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: ptr VkCopyAccelerationStructureToMemoryInfoKHR): VkResult {.stdcall.}](vkGetProc("vkCopyAccelerationStructureToMemoryKHR"))
  vkCopyMemoryToAccelerationStructureKHR = cast[proc (device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: ptr VkCopyMemoryToAccelerationStructureInfoKHR): VkResult {.stdcall.}](vkGetProc("vkCopyMemoryToAccelerationStructureKHR"))
  vkWriteAccelerationStructuresPropertiesKHR = cast[proc (device: VkDevice, accelerationStructureCount: uint32, pAccelerationStructures: ptr VkAccelerationStructureKHR, queryType: VkQueryType, dataSize: uint, pData: pointer, stride: uint): VkResult {.stdcall.}](vkGetProc("vkWriteAccelerationStructuresPropertiesKHR"))
  vkCmdCopyAccelerationStructureKHR = cast[proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkCopyAccelerationStructureInfoKHR): void {.stdcall.}](vkGetProc("vkCmdCopyAccelerationStructureKHR"))
  vkCmdCopyAccelerationStructureToMemoryKHR = cast[proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkCopyAccelerationStructureToMemoryInfoKHR): void {.stdcall.}](vkGetProc("vkCmdCopyAccelerationStructureToMemoryKHR"))
  vkCmdCopyMemoryToAccelerationStructureKHR = cast[proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkCopyMemoryToAccelerationStructureInfoKHR): void {.stdcall.}](vkGetProc("vkCmdCopyMemoryToAccelerationStructureKHR"))
  vkGetAccelerationStructureDeviceAddressKHR = cast[proc (device: VkDevice, pInfo: ptr VkAccelerationStructureDeviceAddressInfoKHR): VkDeviceAddress {.stdcall.}](vkGetProc("vkGetAccelerationStructureDeviceAddressKHR"))
  vkCmdWriteAccelerationStructuresPropertiesKHR = cast[proc (commandBuffer: VkCommandBuffer, accelerationStructureCount: uint32, pAccelerationStructures: ptr VkAccelerationStructureKHR, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: uint32): void {.stdcall.}](vkGetProc("vkCmdWriteAccelerationStructuresPropertiesKHR"))
  vkGetDeviceAccelerationStructureCompatibilityKHR = cast[proc (device: VkDevice, pVersionInfo: ptr VkAccelerationStructureVersionInfoKHR, pCompatibility: ptr VkAccelerationStructureCompatibilityKHR): void {.stdcall.}](vkGetProc("vkGetDeviceAccelerationStructureCompatibilityKHR"))
  vkGetAccelerationStructureBuildSizesKHR = cast[proc (device: VkDevice, buildType: VkAccelerationStructureBuildTypeKHR, pBuildInfo: ptr VkAccelerationStructureBuildGeometryInfoKHR, pMaxPrimitiveCounts: ptr uint32, pSizeInfo: ptr VkAccelerationStructureBuildSizesInfoKHR): void {.stdcall.}](vkGetProc("vkGetAccelerationStructureBuildSizesKHR"))

# Load VK_KHR_ray_tracing_pipeline
proc loadVK_KHR_ray_tracing_pipeline*() =
  vkCmdTraceRaysKHR = cast[proc (commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: ptr VkStridedDeviceAddressRegionKHR, pMissShaderBindingTable: ptr VkStridedDeviceAddressRegionKHR, pHitShaderBindingTable: ptr VkStridedDeviceAddressRegionKHR, pCallableShaderBindingTable: ptr VkStridedDeviceAddressRegionKHR, width: uint32, height: uint32, depth: uint32): void {.stdcall.}](vkGetProc("vkCmdTraceRaysKHR"))
  vkCreateRayTracingPipelinesKHR = cast[proc (device: VkDevice, deferredOperation: VkDeferredOperationKHR, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: ptr VkRayTracingPipelineCreateInfoKHR, pAllocator: ptr VkAllocationCallbacks, pPipelines: ptr VkPipeline): VkResult {.stdcall.}](vkGetProc("vkCreateRayTracingPipelinesKHR"))
  vkGetRayTracingShaderGroupHandlesKHR = cast[proc (device: VkDevice, pipeline: VkPipeline, firstGroup: uint32, groupCount: uint32, dataSize: uint, pData: pointer): VkResult {.stdcall.}](vkGetProc("vkGetRayTracingShaderGroupHandlesKHR"))
  vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = cast[proc (device: VkDevice, pipeline: VkPipeline, firstGroup: uint32, groupCount: uint32, dataSize: uint, pData: pointer): VkResult {.stdcall.}](vkGetProc("vkGetRayTracingCaptureReplayShaderGroupHandlesKHR"))
  vkCmdTraceRaysIndirectKHR = cast[proc (commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: ptr VkStridedDeviceAddressRegionKHR, pMissShaderBindingTable: ptr VkStridedDeviceAddressRegionKHR, pHitShaderBindingTable: ptr VkStridedDeviceAddressRegionKHR, pCallableShaderBindingTable: ptr VkStridedDeviceAddressRegionKHR, indirectDeviceAddress: VkDeviceAddress): void {.stdcall.}](vkGetProc("vkCmdTraceRaysIndirectKHR"))
  vkGetRayTracingShaderGroupStackSizeKHR = cast[proc (device: VkDevice, pipeline: VkPipeline, group: uint32, groupShader: VkShaderGroupShaderKHR): VkDeviceSize {.stdcall.}](vkGetProc("vkGetRayTracingShaderGroupStackSizeKHR"))
  vkCmdSetRayTracingPipelineStackSizeKHR = cast[proc (commandBuffer: VkCommandBuffer, pipelineStackSize: uint32): void {.stdcall.}](vkGetProc("vkCmdSetRayTracingPipelineStackSizeKHR"))

# Load VK_EXT_image_drm_format_modifier
proc loadVK_EXT_image_drm_format_modifier*() =
  vkGetImageDrmFormatModifierPropertiesEXT = cast[proc (device: VkDevice, image: VkImage, pProperties: ptr VkImageDrmFormatModifierPropertiesEXT): VkResult {.stdcall.}](vkGetProc("vkGetImageDrmFormatModifierPropertiesEXT"))

# Load VK_EXT_validation_cache
proc loadVK_EXT_validation_cache*() =
  vkCreateValidationCacheEXT = cast[proc (device: VkDevice, pCreateInfo: ptr VkValidationCacheCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pValidationCache: ptr VkValidationCacheEXT): VkResult {.stdcall.}](vkGetProc("vkCreateValidationCacheEXT"))
  vkDestroyValidationCacheEXT = cast[proc (device: VkDevice, validationCache: VkValidationCacheEXT, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyValidationCacheEXT"))
  vkMergeValidationCachesEXT = cast[proc (device: VkDevice, dstCache: VkValidationCacheEXT, srcCacheCount: uint32, pSrcCaches: ptr VkValidationCacheEXT): VkResult {.stdcall.}](vkGetProc("vkMergeValidationCachesEXT"))
  vkGetValidationCacheDataEXT = cast[proc (device: VkDevice, validationCache: VkValidationCacheEXT, pDataSize: ptr uint, pData: pointer): VkResult {.stdcall.}](vkGetProc("vkGetValidationCacheDataEXT"))

# Load VK_NV_shading_rate_image
proc loadVK_NV_shading_rate_image*() =
  vkCmdBindShadingRateImageNV = cast[proc (commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout): void {.stdcall.}](vkGetProc("vkCmdBindShadingRateImageNV"))
  vkCmdSetViewportShadingRatePaletteNV = cast[proc (commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pShadingRatePalettes: ptr VkShadingRatePaletteNV): void {.stdcall.}](vkGetProc("vkCmdSetViewportShadingRatePaletteNV"))
  vkCmdSetCoarseSampleOrderNV = cast[proc (commandBuffer: VkCommandBuffer, sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: uint32, pCustomSampleOrders: ptr VkCoarseSampleOrderCustomNV): void {.stdcall.}](vkGetProc("vkCmdSetCoarseSampleOrderNV"))

# Load VK_NV_ray_tracing
proc loadVK_NV_ray_tracing*() =
  vkCreateAccelerationStructureNV = cast[proc (device: VkDevice, pCreateInfo: ptr VkAccelerationStructureCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pAccelerationStructure: ptr VkAccelerationStructureNV): VkResult {.stdcall.}](vkGetProc("vkCreateAccelerationStructureNV"))
  vkDestroyAccelerationStructureNV = cast[proc (device: VkDevice, accelerationStructure: VkAccelerationStructureNV, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyAccelerationStructureNV"))
  vkGetAccelerationStructureMemoryRequirementsNV = cast[proc (device: VkDevice, pInfo: ptr VkAccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: ptr VkMemoryRequirements2KHR): void {.stdcall.}](vkGetProc("vkGetAccelerationStructureMemoryRequirementsNV"))
  vkBindAccelerationStructureMemoryNV = cast[proc (device: VkDevice, bindInfoCount: uint32, pBindInfos: ptr VkBindAccelerationStructureMemoryInfoNV): VkResult {.stdcall.}](vkGetProc("vkBindAccelerationStructureMemoryNV"))
  vkCmdBuildAccelerationStructureNV = cast[proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkAccelerationStructureInfoNV, instanceData: VkBuffer, instanceOffset: VkDeviceSize, update: VkBool32, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, scratch: VkBuffer, scratchOffset: VkDeviceSize): void {.stdcall.}](vkGetProc("vkCmdBuildAccelerationStructureNV"))
  vkCmdCopyAccelerationStructureNV = cast[proc (commandBuffer: VkCommandBuffer, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, mode: VkCopyAccelerationStructureModeKHR): void {.stdcall.}](vkGetProc("vkCmdCopyAccelerationStructureNV"))
  vkCmdTraceRaysNV = cast[proc (commandBuffer: VkCommandBuffer, raygenShaderBindingTableBuffer: VkBuffer, raygenShaderBindingOffset: VkDeviceSize, missShaderBindingTableBuffer: VkBuffer, missShaderBindingOffset: VkDeviceSize, missShaderBindingStride: VkDeviceSize, hitShaderBindingTableBuffer: VkBuffer, hitShaderBindingOffset: VkDeviceSize, hitShaderBindingStride: VkDeviceSize, callableShaderBindingTableBuffer: VkBuffer, callableShaderBindingOffset: VkDeviceSize, callableShaderBindingStride: VkDeviceSize, width: uint32, height: uint32, depth: uint32): void {.stdcall.}](vkGetProc("vkCmdTraceRaysNV"))
  vkCreateRayTracingPipelinesNV = cast[proc (device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: uint32, pCreateInfos: ptr VkRayTracingPipelineCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pPipelines: ptr VkPipeline): VkResult {.stdcall.}](vkGetProc("vkCreateRayTracingPipelinesNV"))
  vkGetAccelerationStructureHandleNV = cast[proc (device: VkDevice, accelerationStructure: VkAccelerationStructureNV, dataSize: uint, pData: pointer): VkResult {.stdcall.}](vkGetProc("vkGetAccelerationStructureHandleNV"))
  vkCmdWriteAccelerationStructuresPropertiesNV = cast[proc (commandBuffer: VkCommandBuffer, accelerationStructureCount: uint32, pAccelerationStructures: ptr VkAccelerationStructureNV, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: uint32): void {.stdcall.}](vkGetProc("vkCmdWriteAccelerationStructuresPropertiesNV"))
  vkCompileDeferredNV = cast[proc (device: VkDevice, pipeline: VkPipeline, shader: uint32): VkResult {.stdcall.}](vkGetProc("vkCompileDeferredNV"))

# Load VK_EXT_external_memory_host
proc loadVK_EXT_external_memory_host*() =
  vkGetMemoryHostPointerPropertiesEXT = cast[proc (device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, pHostPointer: pointer, pMemoryHostPointerProperties: ptr VkMemoryHostPointerPropertiesEXT): VkResult {.stdcall.}](vkGetProc("vkGetMemoryHostPointerPropertiesEXT"))

# Load VK_AMD_buffer_marker
proc loadVK_AMD_buffer_marker*() =
  vkCmdWriteBufferMarkerAMD = cast[proc (commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: uint32): void {.stdcall.}](vkGetProc("vkCmdWriteBufferMarkerAMD"))

# Load VK_NV_mesh_shader
proc loadVK_NV_mesh_shader*() =
  vkCmdDrawMeshTasksNV = cast[proc (commandBuffer: VkCommandBuffer, taskCount: uint32, firstTask: uint32): void {.stdcall.}](vkGetProc("vkCmdDrawMeshTasksNV"))
  vkCmdDrawMeshTasksIndirectNV = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: uint32, stride: uint32): void {.stdcall.}](vkGetProc("vkCmdDrawMeshTasksIndirectNV"))
  vkCmdDrawMeshTasksIndirectCountNV = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}](vkGetProc("vkCmdDrawMeshTasksIndirectCountNV"))

# Load VK_NV_scissor_exclusive
proc loadVK_NV_scissor_exclusive*() =
  vkCmdSetExclusiveScissorEnableNV = cast[proc (commandBuffer: VkCommandBuffer, firstExclusiveScissor: uint32, exclusiveScissorCount: uint32, pExclusiveScissorEnables: ptr VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetExclusiveScissorEnableNV"))
  vkCmdSetExclusiveScissorNV = cast[proc (commandBuffer: VkCommandBuffer, firstExclusiveScissor: uint32, exclusiveScissorCount: uint32, pExclusiveScissors: ptr VkRect2D): void {.stdcall.}](vkGetProc("vkCmdSetExclusiveScissorNV"))

# Load VK_NV_device_diagnostic_checkpoints
proc loadVK_NV_device_diagnostic_checkpoints*() =
  vkCmdSetCheckpointNV = cast[proc (commandBuffer: VkCommandBuffer, pCheckpointMarker: pointer): void {.stdcall.}](vkGetProc("vkCmdSetCheckpointNV"))
  vkGetQueueCheckpointDataNV = cast[proc (queue: VkQueue, pCheckpointDataCount: ptr uint32, pCheckpointData: ptr VkCheckpointDataNV): void {.stdcall.}](vkGetProc("vkGetQueueCheckpointDataNV"))

# Load VK_INTEL_performance_query
proc loadVK_INTEL_performance_query*() =
  vkInitializePerformanceApiINTEL = cast[proc (device: VkDevice, pInitializeInfo: ptr VkInitializePerformanceApiInfoINTEL): VkResult {.stdcall.}](vkGetProc("vkInitializePerformanceApiINTEL"))
  vkUninitializePerformanceApiINTEL = cast[proc (device: VkDevice): void {.stdcall.}](vkGetProc("vkUninitializePerformanceApiINTEL"))
  vkCmdSetPerformanceMarkerINTEL = cast[proc (commandBuffer: VkCommandBuffer, pMarkerInfo: ptr VkPerformanceMarkerInfoINTEL): VkResult {.stdcall.}](vkGetProc("vkCmdSetPerformanceMarkerINTEL"))
  vkCmdSetPerformanceStreamMarkerINTEL = cast[proc (commandBuffer: VkCommandBuffer, pMarkerInfo: ptr VkPerformanceStreamMarkerInfoINTEL): VkResult {.stdcall.}](vkGetProc("vkCmdSetPerformanceStreamMarkerINTEL"))
  vkCmdSetPerformanceOverrideINTEL = cast[proc (commandBuffer: VkCommandBuffer, pOverrideInfo: ptr VkPerformanceOverrideInfoINTEL): VkResult {.stdcall.}](vkGetProc("vkCmdSetPerformanceOverrideINTEL"))
  vkAcquirePerformanceConfigurationINTEL = cast[proc (device: VkDevice, pAcquireInfo: ptr VkPerformanceConfigurationAcquireInfoINTEL, pConfiguration: ptr VkPerformanceConfigurationINTEL): VkResult {.stdcall.}](vkGetProc("vkAcquirePerformanceConfigurationINTEL"))
  vkReleasePerformanceConfigurationINTEL = cast[proc (device: VkDevice, configuration: VkPerformanceConfigurationINTEL): VkResult {.stdcall.}](vkGetProc("vkReleasePerformanceConfigurationINTEL"))
  vkQueueSetPerformanceConfigurationINTEL = cast[proc (queue: VkQueue, configuration: VkPerformanceConfigurationINTEL): VkResult {.stdcall.}](vkGetProc("vkQueueSetPerformanceConfigurationINTEL"))
  vkGetPerformanceParameterINTEL = cast[proc (device: VkDevice, parameter: VkPerformanceParameterTypeINTEL, pValue: ptr VkPerformanceValueINTEL): VkResult {.stdcall.}](vkGetProc("vkGetPerformanceParameterINTEL"))

# Load VK_AMD_display_native_hdr
proc loadVK_AMD_display_native_hdr*() =
  vkSetLocalDimmingAMD = cast[proc (device: VkDevice, swapChain: VkSwapchainKHR, localDimmingEnable: VkBool32): void {.stdcall.}](vkGetProc("vkSetLocalDimmingAMD"))

# Load VK_FUCHSIA_imagepipe_surface
proc loadVK_FUCHSIA_imagepipe_surface*() =
  vkCreateImagePipeSurfaceFUCHSIA = cast[proc (instance: VkInstance, pCreateInfo: ptr VkImagePipeSurfaceCreateInfoFUCHSIA, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](vkGetProc("vkCreateImagePipeSurfaceFUCHSIA"))

# Load VK_EXT_metal_surface
proc loadVK_EXT_metal_surface*() =
  vkCreateMetalSurfaceEXT = cast[proc (instance: VkInstance, pCreateInfo: ptr VkMetalSurfaceCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](vkGetProc("vkCreateMetalSurfaceEXT"))

# Load VK_KHR_fragment_shading_rate
proc loadVK_KHR_fragment_shading_rate*() =
  vkGetPhysicalDeviceFragmentShadingRatesKHR = cast[proc (physicalDevice: VkPhysicalDevice, pFragmentShadingRateCount: ptr uint32, pFragmentShadingRates: ptr VkPhysicalDeviceFragmentShadingRateKHR): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceFragmentShadingRatesKHR"))
  vkCmdSetFragmentShadingRateKHR = cast[proc (commandBuffer: VkCommandBuffer, pFragmentSize: ptr VkExtent2D, combinerOps: array[2, VkFragmentShadingRateCombinerOpKHR]): void {.stdcall.}](vkGetProc("vkCmdSetFragmentShadingRateKHR"))

# Load VK_KHR_dynamic_rendering_local_read
proc loadVK_KHR_dynamic_rendering_local_read*() =
  vkCmdSetRenderingAttachmentLocationsKHR = cast[proc (commandBuffer: VkCommandBuffer, pLocationInfo: ptr VkRenderingAttachmentLocationInfoKHR): void {.stdcall.}](vkGetProc("vkCmdSetRenderingAttachmentLocationsKHR"))
  vkCmdSetRenderingInputAttachmentIndicesKHR = cast[proc (commandBuffer: VkCommandBuffer, pLocationInfo: ptr VkRenderingInputAttachmentIndexInfoKHR): void {.stdcall.}](vkGetProc("vkCmdSetRenderingInputAttachmentIndicesKHR"))

# Load VK_KHR_present_wait
proc loadVK_KHR_present_wait*() =
  vkWaitForPresentKHR = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR, presentId: uint64, timeout: uint64): VkResult {.stdcall.}](vkGetProc("vkWaitForPresentKHR"))

# Load VK_NV_cooperative_matrix
proc loadVK_NV_cooperative_matrix*() =
  vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = cast[proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkCooperativeMatrixPropertiesNV): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceCooperativeMatrixPropertiesNV"))

# Load VK_NV_coverage_reduction_mode
proc loadVK_NV_coverage_reduction_mode*() =
  vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = cast[proc (physicalDevice: VkPhysicalDevice, pCombinationCount: ptr uint32, pCombinations: ptr VkFramebufferMixedSamplesCombinationNV): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV"))

# Load VK_EXT_full_screen_exclusive
proc loadVK_EXT_full_screen_exclusive*() =
  vkGetPhysicalDeviceSurfacePresentModes2EXT = cast[proc (physicalDevice: VkPhysicalDevice, pSurfaceInfo: ptr VkPhysicalDeviceSurfaceInfo2KHR, pPresentModeCount: ptr uint32, pPresentModes: ptr VkPresentModeKHR): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceSurfacePresentModes2EXT"))
  vkAcquireFullScreenExclusiveModeEXT = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR): VkResult {.stdcall.}](vkGetProc("vkAcquireFullScreenExclusiveModeEXT"))
  vkReleaseFullScreenExclusiveModeEXT = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR): VkResult {.stdcall.}](vkGetProc("vkReleaseFullScreenExclusiveModeEXT"))
  vkGetDeviceGroupSurfacePresentModes2EXT = cast[proc (device: VkDevice, pSurfaceInfo: ptr VkPhysicalDeviceSurfaceInfo2KHR, pModes: ptr VkDeviceGroupPresentModeFlagsKHR): VkResult {.stdcall.}](vkGetProc("vkGetDeviceGroupSurfacePresentModes2EXT"))
  vkGetDeviceGroupSurfacePresentModes2EXT = cast[proc (device: VkDevice, pSurfaceInfo: ptr VkPhysicalDeviceSurfaceInfo2KHR, pModes: ptr VkDeviceGroupPresentModeFlagsKHR): VkResult {.stdcall.}](vkGetProc("vkGetDeviceGroupSurfacePresentModes2EXT"))

# Load VK_EXT_headless_surface
proc loadVK_EXT_headless_surface*() =
  vkCreateHeadlessSurfaceEXT = cast[proc (instance: VkInstance, pCreateInfo: ptr VkHeadlessSurfaceCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](vkGetProc("vkCreateHeadlessSurfaceEXT"))

# Load VK_KHR_deferred_host_operations
proc loadVK_KHR_deferred_host_operations*() =
  vkCreateDeferredOperationKHR = cast[proc (device: VkDevice, pAllocator: ptr VkAllocationCallbacks, pDeferredOperation: ptr VkDeferredOperationKHR): VkResult {.stdcall.}](vkGetProc("vkCreateDeferredOperationKHR"))
  vkDestroyDeferredOperationKHR = cast[proc (device: VkDevice, operation: VkDeferredOperationKHR, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyDeferredOperationKHR"))
  vkGetDeferredOperationMaxConcurrencyKHR = cast[proc (device: VkDevice, operation: VkDeferredOperationKHR): uint32 {.stdcall.}](vkGetProc("vkGetDeferredOperationMaxConcurrencyKHR"))
  vkGetDeferredOperationResultKHR = cast[proc (device: VkDevice, operation: VkDeferredOperationKHR): VkResult {.stdcall.}](vkGetProc("vkGetDeferredOperationResultKHR"))
  vkDeferredOperationJoinKHR = cast[proc (device: VkDevice, operation: VkDeferredOperationKHR): VkResult {.stdcall.}](vkGetProc("vkDeferredOperationJoinKHR"))

# Load VK_KHR_pipeline_executable_properties
proc loadVK_KHR_pipeline_executable_properties*() =
  vkGetPipelineExecutablePropertiesKHR = cast[proc (device: VkDevice, pPipelineInfo: ptr VkPipelineInfoKHR, pExecutableCount: ptr uint32, pProperties: ptr VkPipelineExecutablePropertiesKHR): VkResult {.stdcall.}](vkGetProc("vkGetPipelineExecutablePropertiesKHR"))
  vkGetPipelineExecutableStatisticsKHR = cast[proc (device: VkDevice, pExecutableInfo: ptr VkPipelineExecutableInfoKHR, pStatisticCount: ptr uint32, pStatistics: ptr VkPipelineExecutableStatisticKHR): VkResult {.stdcall.}](vkGetProc("vkGetPipelineExecutableStatisticsKHR"))
  vkGetPipelineExecutableInternalRepresentationsKHR = cast[proc (device: VkDevice, pExecutableInfo: ptr VkPipelineExecutableInfoKHR, pInternalRepresentationCount: ptr uint32, pInternalRepresentations: ptr VkPipelineExecutableInternalRepresentationKHR): VkResult {.stdcall.}](vkGetProc("vkGetPipelineExecutableInternalRepresentationsKHR"))

# Load VK_EXT_host_image_copy
proc loadVK_EXT_host_image_copy*() =
  vkCopyMemoryToImageEXT = cast[proc (device: VkDevice, pCopyMemoryToImageInfo: ptr VkCopyMemoryToImageInfoEXT): VkResult {.stdcall.}](vkGetProc("vkCopyMemoryToImageEXT"))
  vkCopyImageToMemoryEXT = cast[proc (device: VkDevice, pCopyImageToMemoryInfo: ptr VkCopyImageToMemoryInfoEXT): VkResult {.stdcall.}](vkGetProc("vkCopyImageToMemoryEXT"))
  vkCopyImageToImageEXT = cast[proc (device: VkDevice, pCopyImageToImageInfo: ptr VkCopyImageToImageInfoEXT): VkResult {.stdcall.}](vkGetProc("vkCopyImageToImageEXT"))
  vkTransitionImageLayoutEXT = cast[proc (device: VkDevice, transitionCount: uint32, pTransitions: ptr VkHostImageLayoutTransitionInfoEXT): VkResult {.stdcall.}](vkGetProc("vkTransitionImageLayoutEXT"))

# Load VK_KHR_map_memory2
proc loadVK_KHR_map_memory2*() =
  vkMapMemory2KHR = cast[proc (device: VkDevice, pMemoryMapInfo: ptr VkMemoryMapInfoKHR, ppData: ptr pointer): VkResult {.stdcall.}](vkGetProc("vkMapMemory2KHR"))
  vkUnmapMemory2KHR = cast[proc (device: VkDevice, pMemoryUnmapInfo: ptr VkMemoryUnmapInfoKHR): VkResult {.stdcall.}](vkGetProc("vkUnmapMemory2KHR"))

# Load VK_EXT_swapchain_maintenance1
proc loadVK_EXT_swapchain_maintenance1*() =
  vkReleaseSwapchainImagesEXT = cast[proc (device: VkDevice, pReleaseInfo: ptr VkReleaseSwapchainImagesInfoEXT): VkResult {.stdcall.}](vkGetProc("vkReleaseSwapchainImagesEXT"))

# Load VK_NV_device_generated_commands
proc loadVK_NV_device_generated_commands*() =
  vkGetGeneratedCommandsMemoryRequirementsNV = cast[proc (device: VkDevice, pInfo: ptr VkGeneratedCommandsMemoryRequirementsInfoNV, pMemoryRequirements: ptr VkMemoryRequirements2): void {.stdcall.}](vkGetProc("vkGetGeneratedCommandsMemoryRequirementsNV"))
  vkCmdPreprocessGeneratedCommandsNV = cast[proc (commandBuffer: VkCommandBuffer, pGeneratedCommandsInfo: ptr VkGeneratedCommandsInfoNV): void {.stdcall.}](vkGetProc("vkCmdPreprocessGeneratedCommandsNV"))
  vkCmdExecuteGeneratedCommandsNV = cast[proc (commandBuffer: VkCommandBuffer, isPreprocessed: VkBool32, pGeneratedCommandsInfo: ptr VkGeneratedCommandsInfoNV): void {.stdcall.}](vkGetProc("vkCmdExecuteGeneratedCommandsNV"))
  vkCmdBindPipelineShaderGroupNV = cast[proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline, groupIndex: uint32): void {.stdcall.}](vkGetProc("vkCmdBindPipelineShaderGroupNV"))
  vkCreateIndirectCommandsLayoutNV = cast[proc (device: VkDevice, pCreateInfo: ptr VkIndirectCommandsLayoutCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pIndirectCommandsLayout: ptr VkIndirectCommandsLayoutNV): VkResult {.stdcall.}](vkGetProc("vkCreateIndirectCommandsLayoutNV"))
  vkDestroyIndirectCommandsLayoutNV = cast[proc (device: VkDevice, indirectCommandsLayout: VkIndirectCommandsLayoutNV, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyIndirectCommandsLayoutNV"))

# Load VK_EXT_depth_bias_control
proc loadVK_EXT_depth_bias_control*() =
  vkCmdSetDepthBias2EXT = cast[proc (commandBuffer: VkCommandBuffer, pDepthBiasInfo: ptr VkDepthBiasInfoEXT): void {.stdcall.}](vkGetProc("vkCmdSetDepthBias2EXT"))

# Load VK_EXT_acquire_drm_display
proc loadVK_EXT_acquire_drm_display*() =
  vkAcquireDrmDisplayEXT = cast[proc (physicalDevice: VkPhysicalDevice, drmFd: int32, display: VkDisplayKHR): VkResult {.stdcall.}](vkGetProc("vkAcquireDrmDisplayEXT"))
  vkGetDrmDisplayEXT = cast[proc (physicalDevice: VkPhysicalDevice, drmFd: int32, connectorId: uint32, display: ptr VkDisplayKHR): VkResult {.stdcall.}](vkGetProc("vkGetDrmDisplayEXT"))

# Load VK_KHR_video_encode_queue
proc loadVK_KHR_video_encode_queue*() =
  vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR = cast[proc (physicalDevice: VkPhysicalDevice, pQualityLevelInfo: ptr VkPhysicalDeviceVideoEncodeQualityLevelInfoKHR, pQualityLevelProperties: ptr VkVideoEncodeQualityLevelPropertiesKHR): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceVideoEncodeQualityLevelPropertiesKHR"))
  vkGetEncodedVideoSessionParametersKHR = cast[proc (device: VkDevice, pVideoSessionParametersInfo: ptr VkVideoEncodeSessionParametersGetInfoKHR, pFeedbackInfo: ptr VkVideoEncodeSessionParametersFeedbackInfoKHR, pDataSize: ptr uint, pData: pointer): VkResult {.stdcall.}](vkGetProc("vkGetEncodedVideoSessionParametersKHR"))
  vkCmdEncodeVideoKHR = cast[proc (commandBuffer: VkCommandBuffer, pEncodeInfo: ptr VkVideoEncodeInfoKHR): void {.stdcall.}](vkGetProc("vkCmdEncodeVideoKHR"))

# Load VK_NV_cuda_kernel_launch
proc loadVK_NV_cuda_kernel_launch*() =
  vkCreateCudaModuleNV = cast[proc (device: VkDevice, pCreateInfo: ptr VkCudaModuleCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pModule: ptr VkCudaModuleNV): VkResult {.stdcall.}](vkGetProc("vkCreateCudaModuleNV"))
  vkGetCudaModuleCacheNV = cast[proc (device: VkDevice, module: VkCudaModuleNV, pCacheSize: ptr uint, pCacheData: pointer): VkResult {.stdcall.}](vkGetProc("vkGetCudaModuleCacheNV"))
  vkCreateCudaFunctionNV = cast[proc (device: VkDevice, pCreateInfo: ptr VkCudaFunctionCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pFunction: ptr VkCudaFunctionNV): VkResult {.stdcall.}](vkGetProc("vkCreateCudaFunctionNV"))
  vkDestroyCudaModuleNV = cast[proc (device: VkDevice, module: VkCudaModuleNV, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyCudaModuleNV"))
  vkDestroyCudaFunctionNV = cast[proc (device: VkDevice, function: VkCudaFunctionNV, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyCudaFunctionNV"))
  vkCmdCudaLaunchKernelNV = cast[proc (commandBuffer: VkCommandBuffer, pLaunchInfo: ptr VkCudaLaunchInfoNV): void {.stdcall.}](vkGetProc("vkCmdCudaLaunchKernelNV"))

# Load VK_KHR_object_refresh
proc loadVK_KHR_object_refresh*() =
  vkCmdRefreshObjectsKHR = cast[proc (commandBuffer: VkCommandBuffer, pRefreshObjects: ptr VkRefreshObjectListKHR): void {.stdcall.}](vkGetProc("vkCmdRefreshObjectsKHR"))
  vkGetPhysicalDeviceRefreshableObjectTypesKHR = cast[proc (physicalDevice: VkPhysicalDevice, pRefreshableObjectTypeCount: ptr uint32, pRefreshableObjectTypes: ptr VkObjectType): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceRefreshableObjectTypesKHR"))

# Load VK_EXT_metal_objects
proc loadVK_EXT_metal_objects*() =
  vkExportMetalObjectsEXT = cast[proc (device: VkDevice, pMetalObjectsInfo: ptr VkExportMetalObjectsInfoEXT): void {.stdcall.}](vkGetProc("vkExportMetalObjectsEXT"))

# Load VK_KHR_synchronization2
proc loadVK_KHR_synchronization2*() =
  vkCmdWriteBufferMarker2AMD = cast[proc (commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: uint32): void {.stdcall.}](vkGetProc("vkCmdWriteBufferMarker2AMD"))
  vkGetQueueCheckpointData2NV = cast[proc (queue: VkQueue, pCheckpointDataCount: ptr uint32, pCheckpointData: ptr VkCheckpointData2NV): void {.stdcall.}](vkGetProc("vkGetQueueCheckpointData2NV"))

# Load VK_EXT_descriptor_buffer
proc loadVK_EXT_descriptor_buffer*() =
  vkGetDescriptorSetLayoutSizeEXT = cast[proc (device: VkDevice, layout: VkDescriptorSetLayout, pLayoutSizeInBytes: ptr VkDeviceSize): void {.stdcall.}](vkGetProc("vkGetDescriptorSetLayoutSizeEXT"))
  vkGetDescriptorSetLayoutBindingOffsetEXT = cast[proc (device: VkDevice, layout: VkDescriptorSetLayout, binding: uint32, pOffset: ptr VkDeviceSize): void {.stdcall.}](vkGetProc("vkGetDescriptorSetLayoutBindingOffsetEXT"))
  vkGetDescriptorEXT = cast[proc (device: VkDevice, pDescriptorInfo: ptr VkDescriptorGetInfoEXT, dataSize: uint, pDescriptor: pointer): void {.stdcall.}](vkGetProc("vkGetDescriptorEXT"))
  vkCmdBindDescriptorBuffersEXT = cast[proc (commandBuffer: VkCommandBuffer, bufferCount: uint32, pBindingInfos: ptr VkDescriptorBufferBindingInfoEXT): void {.stdcall.}](vkGetProc("vkCmdBindDescriptorBuffersEXT"))
  vkCmdSetDescriptorBufferOffsetsEXT = cast[proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: uint32, setCount: uint32, pBufferIndices: ptr uint32, pOffsets: ptr VkDeviceSize): void {.stdcall.}](vkGetProc("vkCmdSetDescriptorBufferOffsetsEXT"))
  vkCmdBindDescriptorBufferEmbeddedSamplersEXT = cast[proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: uint32): void {.stdcall.}](vkGetProc("vkCmdBindDescriptorBufferEmbeddedSamplersEXT"))
  vkGetBufferOpaqueCaptureDescriptorDataEXT = cast[proc (device: VkDevice, pInfo: ptr VkBufferCaptureDescriptorDataInfoEXT, pData: pointer): VkResult {.stdcall.}](vkGetProc("vkGetBufferOpaqueCaptureDescriptorDataEXT"))
  vkGetImageOpaqueCaptureDescriptorDataEXT = cast[proc (device: VkDevice, pInfo: ptr VkImageCaptureDescriptorDataInfoEXT, pData: pointer): VkResult {.stdcall.}](vkGetProc("vkGetImageOpaqueCaptureDescriptorDataEXT"))
  vkGetImageViewOpaqueCaptureDescriptorDataEXT = cast[proc (device: VkDevice, pInfo: ptr VkImageViewCaptureDescriptorDataInfoEXT, pData: pointer): VkResult {.stdcall.}](vkGetProc("vkGetImageViewOpaqueCaptureDescriptorDataEXT"))
  vkGetSamplerOpaqueCaptureDescriptorDataEXT = cast[proc (device: VkDevice, pInfo: ptr VkSamplerCaptureDescriptorDataInfoEXT, pData: pointer): VkResult {.stdcall.}](vkGetProc("vkGetSamplerOpaqueCaptureDescriptorDataEXT"))
  vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT = cast[proc (device: VkDevice, pInfo: ptr VkAccelerationStructureCaptureDescriptorDataInfoEXT, pData: pointer): VkResult {.stdcall.}](vkGetProc("vkGetAccelerationStructureOpaqueCaptureDescriptorDataEXT"))

# Load VK_NV_fragment_shading_rate_enums
proc loadVK_NV_fragment_shading_rate_enums*() =
  vkCmdSetFragmentShadingRateEnumNV = cast[proc (commandBuffer: VkCommandBuffer, shadingRate: VkFragmentShadingRateNV, combinerOps: array[2, VkFragmentShadingRateCombinerOpKHR]): void {.stdcall.}](vkGetProc("vkCmdSetFragmentShadingRateEnumNV"))

# Load VK_EXT_mesh_shader
proc loadVK_EXT_mesh_shader*() =
  vkCmdDrawMeshTasksEXT = cast[proc (commandBuffer: VkCommandBuffer, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32): void {.stdcall.}](vkGetProc("vkCmdDrawMeshTasksEXT"))
  vkCmdDrawMeshTasksIndirectEXT = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: uint32, stride: uint32): void {.stdcall.}](vkGetProc("vkCmdDrawMeshTasksIndirectEXT"))
  vkCmdDrawMeshTasksIndirectCountEXT = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: uint32, stride: uint32): void {.stdcall.}](vkGetProc("vkCmdDrawMeshTasksIndirectCountEXT"))

# Load VK_EXT_device_fault
proc loadVK_EXT_device_fault*() =
  vkGetDeviceFaultInfoEXT = cast[proc (device: VkDevice, pFaultCounts: ptr VkDeviceFaultCountsEXT, pFaultInfo: ptr VkDeviceFaultInfoEXT): VkResult {.stdcall.}](vkGetProc("vkGetDeviceFaultInfoEXT"))

# Load VK_NV_acquire_winrt_display
proc loadVK_NV_acquire_winrt_display*() =
  vkAcquireWinrtDisplayNV = cast[proc (physicalDevice: VkPhysicalDevice, display: VkDisplayKHR): VkResult {.stdcall.}](vkGetProc("vkAcquireWinrtDisplayNV"))
  vkGetWinrtDisplayNV = cast[proc (physicalDevice: VkPhysicalDevice, deviceRelativeId: uint32, pDisplay: ptr VkDisplayKHR): VkResult {.stdcall.}](vkGetProc("vkGetWinrtDisplayNV"))

# Load VK_EXT_directfb_surface
proc loadVK_EXT_directfb_surface*() =
  vkCreateDirectFBSurfaceEXT = cast[proc (instance: VkInstance, pCreateInfo: ptr VkDirectFBSurfaceCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](vkGetProc("vkCreateDirectFBSurfaceEXT"))
  vkGetPhysicalDeviceDirectFBPresentationSupportEXT = cast[proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, dfb: ptr IDirectFB): VkBool32 {.stdcall.}](vkGetProc("vkGetPhysicalDeviceDirectFBPresentationSupportEXT"))

# Load VK_EXT_vertex_input_dynamic_state
proc loadVK_EXT_vertex_input_dynamic_state*() =
  vkCmdSetVertexInputEXT = cast[proc (commandBuffer: VkCommandBuffer, vertexBindingDescriptionCount: uint32, pVertexBindingDescriptions: ptr VkVertexInputBindingDescription2EXT, vertexAttributeDescriptionCount: uint32, pVertexAttributeDescriptions: ptr VkVertexInputAttributeDescription2EXT): void {.stdcall.}](vkGetProc("vkCmdSetVertexInputEXT"))

# Load VK_FUCHSIA_external_memory
proc loadVK_FUCHSIA_external_memory*() =
  vkGetMemoryZirconHandleFUCHSIA = cast[proc (device: VkDevice, pGetZirconHandleInfo: ptr VkMemoryGetZirconHandleInfoFUCHSIA, pZirconHandle: ptr zx_handle_t): VkResult {.stdcall.}](vkGetProc("vkGetMemoryZirconHandleFUCHSIA"))
  vkGetMemoryZirconHandlePropertiesFUCHSIA = cast[proc (device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, zirconHandle: zx_handle_t, pMemoryZirconHandleProperties: ptr VkMemoryZirconHandlePropertiesFUCHSIA): VkResult {.stdcall.}](vkGetProc("vkGetMemoryZirconHandlePropertiesFUCHSIA"))

# Load VK_FUCHSIA_external_semaphore
proc loadVK_FUCHSIA_external_semaphore*() =
  vkImportSemaphoreZirconHandleFUCHSIA = cast[proc (device: VkDevice, pImportSemaphoreZirconHandleInfo: ptr VkImportSemaphoreZirconHandleInfoFUCHSIA): VkResult {.stdcall.}](vkGetProc("vkImportSemaphoreZirconHandleFUCHSIA"))
  vkGetSemaphoreZirconHandleFUCHSIA = cast[proc (device: VkDevice, pGetZirconHandleInfo: ptr VkSemaphoreGetZirconHandleInfoFUCHSIA, pZirconHandle: ptr zx_handle_t): VkResult {.stdcall.}](vkGetProc("vkGetSemaphoreZirconHandleFUCHSIA"))

# Load VK_FUCHSIA_buffer_collection
proc loadVK_FUCHSIA_buffer_collection*() =
  vkCreateBufferCollectionFUCHSIA = cast[proc (device: VkDevice, pCreateInfo: ptr VkBufferCollectionCreateInfoFUCHSIA, pAllocator: ptr VkAllocationCallbacks, pCollection: ptr VkBufferCollectionFUCHSIA): VkResult {.stdcall.}](vkGetProc("vkCreateBufferCollectionFUCHSIA"))
  vkSetBufferCollectionImageConstraintsFUCHSIA = cast[proc (device: VkDevice, collection: VkBufferCollectionFUCHSIA, pImageConstraintsInfo: ptr VkImageConstraintsInfoFUCHSIA): VkResult {.stdcall.}](vkGetProc("vkSetBufferCollectionImageConstraintsFUCHSIA"))
  vkSetBufferCollectionBufferConstraintsFUCHSIA = cast[proc (device: VkDevice, collection: VkBufferCollectionFUCHSIA, pBufferConstraintsInfo: ptr VkBufferConstraintsInfoFUCHSIA): VkResult {.stdcall.}](vkGetProc("vkSetBufferCollectionBufferConstraintsFUCHSIA"))
  vkDestroyBufferCollectionFUCHSIA = cast[proc (device: VkDevice, collection: VkBufferCollectionFUCHSIA, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyBufferCollectionFUCHSIA"))
  vkGetBufferCollectionPropertiesFUCHSIA = cast[proc (device: VkDevice, collection: VkBufferCollectionFUCHSIA, pProperties: ptr VkBufferCollectionPropertiesFUCHSIA): VkResult {.stdcall.}](vkGetProc("vkGetBufferCollectionPropertiesFUCHSIA"))

# Load VK_HUAWEI_subpass_shading
proc loadVK_HUAWEI_subpass_shading*() =
  vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = cast[proc (device: VkDevice, renderpass: VkRenderPass, pMaxWorkgroupSize: ptr VkExtent2D): VkResult {.stdcall.}](vkGetProc("vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI"))
  vkCmdSubpassShadingHUAWEI = cast[proc (commandBuffer: VkCommandBuffer): void {.stdcall.}](vkGetProc("vkCmdSubpassShadingHUAWEI"))

# Load VK_HUAWEI_invocation_mask
proc loadVK_HUAWEI_invocation_mask*() =
  vkCmdBindInvocationMaskHUAWEI = cast[proc (commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout): void {.stdcall.}](vkGetProc("vkCmdBindInvocationMaskHUAWEI"))

# Load VK_NV_external_memory_rdma
proc loadVK_NV_external_memory_rdma*() =
  vkGetMemoryRemoteAddressNV = cast[proc (device: VkDevice, pMemoryGetRemoteAddressInfo: ptr VkMemoryGetRemoteAddressInfoNV, pAddress: ptr VkRemoteAddressNV): VkResult {.stdcall.}](vkGetProc("vkGetMemoryRemoteAddressNV"))

# Load VK_EXT_pipeline_properties
proc loadVK_EXT_pipeline_properties*() =
  vkGetPipelinePropertiesEXT = cast[proc (device: VkDevice, pPipelineInfo: ptr VkPipelineInfoEXT, pPipelineProperties: ptr VkBaseOutStructure): VkResult {.stdcall.}](vkGetProc("vkGetPipelinePropertiesEXT"))

# Load VK_NV_external_sci_sync
proc loadVK_NV_external_sci_sync*() =
  vkGetFenceSciSyncFenceNV = cast[proc (device: VkDevice, pGetSciSyncHandleInfo: ptr VkFenceGetSciSyncInfoNV, pHandle: pointer): VkResult {.stdcall.}](vkGetProc("vkGetFenceSciSyncFenceNV"))
  vkGetFenceSciSyncObjNV = cast[proc (device: VkDevice, pGetSciSyncHandleInfo: ptr VkFenceGetSciSyncInfoNV, pHandle: pointer): VkResult {.stdcall.}](vkGetProc("vkGetFenceSciSyncObjNV"))
  vkImportFenceSciSyncFenceNV = cast[proc (device: VkDevice, pImportFenceSciSyncInfo: ptr VkImportFenceSciSyncInfoNV): VkResult {.stdcall.}](vkGetProc("vkImportFenceSciSyncFenceNV"))
  vkImportFenceSciSyncObjNV = cast[proc (device: VkDevice, pImportFenceSciSyncInfo: ptr VkImportFenceSciSyncInfoNV): VkResult {.stdcall.}](vkGetProc("vkImportFenceSciSyncObjNV"))
  vkGetPhysicalDeviceSciSyncAttributesNV = cast[proc (physicalDevice: VkPhysicalDevice, pSciSyncAttributesInfo: ptr VkSciSyncAttributesInfoNV, pAttributes: NvSciSyncAttrList): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceSciSyncAttributesNV"))
  vkGetSemaphoreSciSyncObjNV = cast[proc (device: VkDevice, pGetSciSyncInfo: ptr VkSemaphoreGetSciSyncInfoNV, pHandle: pointer): VkResult {.stdcall.}](vkGetProc("vkGetSemaphoreSciSyncObjNV"))
  vkImportSemaphoreSciSyncObjNV = cast[proc (device: VkDevice, pImportSemaphoreSciSyncInfo: ptr VkImportSemaphoreSciSyncInfoNV): VkResult {.stdcall.}](vkGetProc("vkImportSemaphoreSciSyncObjNV"))

# Load VK_NV_external_memory_sci_buf
proc loadVK_NV_external_memory_sci_buf*() =
  vkGetMemorySciBufNV = cast[proc (device: VkDevice, pGetSciBufInfo: ptr VkMemoryGetSciBufInfoNV, pHandle: ptr NvSciBufObj): VkResult {.stdcall.}](vkGetProc("vkGetMemorySciBufNV"))
  vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV = cast[proc (physicalDevice: VkPhysicalDevice, handleType: VkExternalMemoryHandleTypeFlagBits, handle: NvSciBufObj, pMemorySciBufProperties: ptr VkMemorySciBufPropertiesNV): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceExternalMemorySciBufPropertiesNV"))
  vkGetPhysicalDeviceSciBufAttributesNV = cast[proc (physicalDevice: VkPhysicalDevice, pAttributes: NvSciBufAttrList): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceSciBufAttributesNV"))

# Load VK_EXT_extended_dynamic_state2
proc loadVK_EXT_extended_dynamic_state2*() =
  vkCmdSetPatchControlPointsEXT = cast[proc (commandBuffer: VkCommandBuffer, patchControlPoints: uint32): void {.stdcall.}](vkGetProc("vkCmdSetPatchControlPointsEXT"))
  vkCmdSetLogicOpEXT = cast[proc (commandBuffer: VkCommandBuffer, logicOp: VkLogicOp): void {.stdcall.}](vkGetProc("vkCmdSetLogicOpEXT"))

# Load VK_QNX_screen_surface
proc loadVK_QNX_screen_surface*() =
  vkCreateScreenSurfaceQNX = cast[proc (instance: VkInstance, pCreateInfo: ptr VkScreenSurfaceCreateInfoQNX, pAllocator: ptr VkAllocationCallbacks, pSurface: ptr VkSurfaceKHR): VkResult {.stdcall.}](vkGetProc("vkCreateScreenSurfaceQNX"))
  vkGetPhysicalDeviceScreenPresentationSupportQNX = cast[proc (physicalDevice: VkPhysicalDevice, queueFamilyIndex: uint32, window: ptr screen_window): VkBool32 {.stdcall.}](vkGetProc("vkGetPhysicalDeviceScreenPresentationSupportQNX"))

# Load VK_EXT_color_write_enable
proc loadVK_EXT_color_write_enable*() =
  vkCmdSetColorWriteEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, attachmentCount: uint32, pColorWriteEnables: ptr VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetColorWriteEnableEXT"))

# Load VK_KHR_ray_tracing_maintenance1
proc loadVK_KHR_ray_tracing_maintenance1*() =
  vkCmdTraceRaysIndirect2KHR = cast[proc (commandBuffer: VkCommandBuffer, indirectDeviceAddress: VkDeviceAddress): void {.stdcall.}](vkGetProc("vkCmdTraceRaysIndirect2KHR"))

# Load VK_EXT_multi_draw
proc loadVK_EXT_multi_draw*() =
  vkCmdDrawMultiEXT = cast[proc (commandBuffer: VkCommandBuffer, drawCount: uint32, pVertexInfo: ptr VkMultiDrawInfoEXT, instanceCount: uint32, firstInstance: uint32, stride: uint32): void {.stdcall.}](vkGetProc("vkCmdDrawMultiEXT"))
  vkCmdDrawMultiIndexedEXT = cast[proc (commandBuffer: VkCommandBuffer, drawCount: uint32, pIndexInfo: ptr VkMultiDrawIndexedInfoEXT, instanceCount: uint32, firstInstance: uint32, stride: uint32, pVertexOffset: ptr int32): void {.stdcall.}](vkGetProc("vkCmdDrawMultiIndexedEXT"))

# Load VK_EXT_opacity_micromap
proc loadVK_EXT_opacity_micromap*() =
  vkCreateMicromapEXT = cast[proc (device: VkDevice, pCreateInfo: ptr VkMicromapCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pMicromap: ptr VkMicromapEXT): VkResult {.stdcall.}](vkGetProc("vkCreateMicromapEXT"))
  vkDestroyMicromapEXT = cast[proc (device: VkDevice, micromap: VkMicromapEXT, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyMicromapEXT"))
  vkCmdBuildMicromapsEXT = cast[proc (commandBuffer: VkCommandBuffer, infoCount: uint32, pInfos: ptr VkMicromapBuildInfoEXT): void {.stdcall.}](vkGetProc("vkCmdBuildMicromapsEXT"))
  vkBuildMicromapsEXT = cast[proc (device: VkDevice, deferredOperation: VkDeferredOperationKHR, infoCount: uint32, pInfos: ptr VkMicromapBuildInfoEXT): VkResult {.stdcall.}](vkGetProc("vkBuildMicromapsEXT"))
  vkCopyMicromapEXT = cast[proc (device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: ptr VkCopyMicromapInfoEXT): VkResult {.stdcall.}](vkGetProc("vkCopyMicromapEXT"))
  vkCopyMicromapToMemoryEXT = cast[proc (device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: ptr VkCopyMicromapToMemoryInfoEXT): VkResult {.stdcall.}](vkGetProc("vkCopyMicromapToMemoryEXT"))
  vkCopyMemoryToMicromapEXT = cast[proc (device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: ptr VkCopyMemoryToMicromapInfoEXT): VkResult {.stdcall.}](vkGetProc("vkCopyMemoryToMicromapEXT"))
  vkWriteMicromapsPropertiesEXT = cast[proc (device: VkDevice, micromapCount: uint32, pMicromaps: ptr VkMicromapEXT, queryType: VkQueryType, dataSize: uint, pData: pointer, stride: uint): VkResult {.stdcall.}](vkGetProc("vkWriteMicromapsPropertiesEXT"))
  vkCmdCopyMicromapEXT = cast[proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkCopyMicromapInfoEXT): void {.stdcall.}](vkGetProc("vkCmdCopyMicromapEXT"))
  vkCmdCopyMicromapToMemoryEXT = cast[proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkCopyMicromapToMemoryInfoEXT): void {.stdcall.}](vkGetProc("vkCmdCopyMicromapToMemoryEXT"))
  vkCmdCopyMemoryToMicromapEXT = cast[proc (commandBuffer: VkCommandBuffer, pInfo: ptr VkCopyMemoryToMicromapInfoEXT): void {.stdcall.}](vkGetProc("vkCmdCopyMemoryToMicromapEXT"))
  vkCmdWriteMicromapsPropertiesEXT = cast[proc (commandBuffer: VkCommandBuffer, micromapCount: uint32, pMicromaps: ptr VkMicromapEXT, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: uint32): void {.stdcall.}](vkGetProc("vkCmdWriteMicromapsPropertiesEXT"))
  vkGetDeviceMicromapCompatibilityEXT = cast[proc (device: VkDevice, pVersionInfo: ptr VkMicromapVersionInfoEXT, pCompatibility: ptr VkAccelerationStructureCompatibilityKHR): void {.stdcall.}](vkGetProc("vkGetDeviceMicromapCompatibilityEXT"))
  vkGetMicromapBuildSizesEXT = cast[proc (device: VkDevice, buildType: VkAccelerationStructureBuildTypeKHR, pBuildInfo: ptr VkMicromapBuildInfoEXT, pSizeInfo: ptr VkMicromapBuildSizesInfoEXT): void {.stdcall.}](vkGetProc("vkGetMicromapBuildSizesEXT"))

# Load VK_HUAWEI_cluster_culling_shader
proc loadVK_HUAWEI_cluster_culling_shader*() =
  vkCmdDrawClusterHUAWEI = cast[proc (commandBuffer: VkCommandBuffer, groupCountX: uint32, groupCountY: uint32, groupCountZ: uint32): void {.stdcall.}](vkGetProc("vkCmdDrawClusterHUAWEI"))
  vkCmdDrawClusterIndirectHUAWEI = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize): void {.stdcall.}](vkGetProc("vkCmdDrawClusterIndirectHUAWEI"))

# Load VK_EXT_pageable_device_local_memory
proc loadVK_EXT_pageable_device_local_memory*() =
  vkSetDeviceMemoryPriorityEXT = cast[proc (device: VkDevice, memory: VkDeviceMemory, priority: float32): void {.stdcall.}](vkGetProc("vkSetDeviceMemoryPriorityEXT"))

# Load VK_VALVE_descriptor_set_host_mapping
proc loadVK_VALVE_descriptor_set_host_mapping*() =
  vkGetDescriptorSetLayoutHostMappingInfoVALVE = cast[proc (device: VkDevice, pBindingReference: ptr VkDescriptorSetBindingReferenceVALVE, pHostMapping: ptr VkDescriptorSetLayoutHostMappingInfoVALVE): void {.stdcall.}](vkGetProc("vkGetDescriptorSetLayoutHostMappingInfoVALVE"))
  vkGetDescriptorSetHostMappingVALVE = cast[proc (device: VkDevice, descriptorSet: VkDescriptorSet, ppData: ptr pointer): void {.stdcall.}](vkGetProc("vkGetDescriptorSetHostMappingVALVE"))

# Load VK_NV_copy_memory_indirect
proc loadVK_NV_copy_memory_indirect*() =
  vkCmdCopyMemoryIndirectNV = cast[proc (commandBuffer: VkCommandBuffer, copyBufferAddress: VkDeviceAddress, copyCount: uint32, stride: uint32): void {.stdcall.}](vkGetProc("vkCmdCopyMemoryIndirectNV"))
  vkCmdCopyMemoryToImageIndirectNV = cast[proc (commandBuffer: VkCommandBuffer, copyBufferAddress: VkDeviceAddress, copyCount: uint32, stride: uint32, dstImage: VkImage, dstImageLayout: VkImageLayout, pImageSubresources: ptr VkImageSubresourceLayers): void {.stdcall.}](vkGetProc("vkCmdCopyMemoryToImageIndirectNV"))

# Load VK_NV_memory_decompression
proc loadVK_NV_memory_decompression*() =
  vkCmdDecompressMemoryNV = cast[proc (commandBuffer: VkCommandBuffer, decompressRegionCount: uint32, pDecompressMemoryRegions: ptr VkDecompressMemoryRegionNV): void {.stdcall.}](vkGetProc("vkCmdDecompressMemoryNV"))
  vkCmdDecompressMemoryIndirectCountNV = cast[proc (commandBuffer: VkCommandBuffer, indirectCommandsAddress: VkDeviceAddress, indirectCommandsCountAddress: VkDeviceAddress, stride: uint32): void {.stdcall.}](vkGetProc("vkCmdDecompressMemoryIndirectCountNV"))

# Load VK_NV_device_generated_commands_compute
proc loadVK_NV_device_generated_commands_compute*() =
  vkGetPipelineIndirectMemoryRequirementsNV = cast[proc (device: VkDevice, pCreateInfo: ptr VkComputePipelineCreateInfo, pMemoryRequirements: ptr VkMemoryRequirements2): void {.stdcall.}](vkGetProc("vkGetPipelineIndirectMemoryRequirementsNV"))
  vkCmdUpdatePipelineIndirectBufferNV = cast[proc (commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline): void {.stdcall.}](vkGetProc("vkCmdUpdatePipelineIndirectBufferNV"))
  vkGetPipelineIndirectDeviceAddressNV = cast[proc (device: VkDevice, pInfo: ptr VkPipelineIndirectDeviceAddressInfoNV): VkDeviceAddress {.stdcall.}](vkGetProc("vkGetPipelineIndirectDeviceAddressNV"))

# Load VK_EXT_extended_dynamic_state3
proc loadVK_EXT_extended_dynamic_state3*() =
  vkCmdSetDepthClampEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, depthClampEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetDepthClampEnableEXT"))
  vkCmdSetPolygonModeEXT = cast[proc (commandBuffer: VkCommandBuffer, polygonMode: VkPolygonMode): void {.stdcall.}](vkGetProc("vkCmdSetPolygonModeEXT"))
  vkCmdSetRasterizationSamplesEXT = cast[proc (commandBuffer: VkCommandBuffer, rasterizationSamples: VkSampleCountFlagBits): void {.stdcall.}](vkGetProc("vkCmdSetRasterizationSamplesEXT"))
  vkCmdSetSampleMaskEXT = cast[proc (commandBuffer: VkCommandBuffer, samples: VkSampleCountFlagBits, pSampleMask: ptr VkSampleMask): void {.stdcall.}](vkGetProc("vkCmdSetSampleMaskEXT"))
  vkCmdSetAlphaToCoverageEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, alphaToCoverageEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetAlphaToCoverageEnableEXT"))
  vkCmdSetAlphaToOneEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, alphaToOneEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetAlphaToOneEnableEXT"))
  vkCmdSetLogicOpEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, logicOpEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetLogicOpEnableEXT"))
  vkCmdSetColorBlendEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, firstAttachment: uint32, attachmentCount: uint32, pColorBlendEnables: ptr VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetColorBlendEnableEXT"))
  vkCmdSetColorBlendEquationEXT = cast[proc (commandBuffer: VkCommandBuffer, firstAttachment: uint32, attachmentCount: uint32, pColorBlendEquations: ptr VkColorBlendEquationEXT): void {.stdcall.}](vkGetProc("vkCmdSetColorBlendEquationEXT"))
  vkCmdSetColorWriteMaskEXT = cast[proc (commandBuffer: VkCommandBuffer, firstAttachment: uint32, attachmentCount: uint32, pColorWriteMasks: ptr VkColorComponentFlags): void {.stdcall.}](vkGetProc("vkCmdSetColorWriteMaskEXT"))
  vkCmdSetTessellationDomainOriginEXT = cast[proc (commandBuffer: VkCommandBuffer, domainOrigin: VkTessellationDomainOrigin): void {.stdcall.}](vkGetProc("vkCmdSetTessellationDomainOriginEXT"))
  vkCmdSetRasterizationStreamEXT = cast[proc (commandBuffer: VkCommandBuffer, rasterizationStream: uint32): void {.stdcall.}](vkGetProc("vkCmdSetRasterizationStreamEXT"))
  vkCmdSetConservativeRasterizationModeEXT = cast[proc (commandBuffer: VkCommandBuffer, conservativeRasterizationMode: VkConservativeRasterizationModeEXT): void {.stdcall.}](vkGetProc("vkCmdSetConservativeRasterizationModeEXT"))
  vkCmdSetExtraPrimitiveOverestimationSizeEXT = cast[proc (commandBuffer: VkCommandBuffer, extraPrimitiveOverestimationSize: float32): void {.stdcall.}](vkGetProc("vkCmdSetExtraPrimitiveOverestimationSizeEXT"))
  vkCmdSetDepthClipEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, depthClipEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetDepthClipEnableEXT"))
  vkCmdSetSampleLocationsEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, sampleLocationsEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetSampleLocationsEnableEXT"))
  vkCmdSetColorBlendAdvancedEXT = cast[proc (commandBuffer: VkCommandBuffer, firstAttachment: uint32, attachmentCount: uint32, pColorBlendAdvanced: ptr VkColorBlendAdvancedEXT): void {.stdcall.}](vkGetProc("vkCmdSetColorBlendAdvancedEXT"))
  vkCmdSetProvokingVertexModeEXT = cast[proc (commandBuffer: VkCommandBuffer, provokingVertexMode: VkProvokingVertexModeEXT): void {.stdcall.}](vkGetProc("vkCmdSetProvokingVertexModeEXT"))
  vkCmdSetLineRasterizationModeEXT = cast[proc (commandBuffer: VkCommandBuffer, lineRasterizationMode: VkLineRasterizationModeEXT): void {.stdcall.}](vkGetProc("vkCmdSetLineRasterizationModeEXT"))
  vkCmdSetLineStippleEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, stippledLineEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetLineStippleEnableEXT"))
  vkCmdSetDepthClipNegativeOneToOneEXT = cast[proc (commandBuffer: VkCommandBuffer, negativeOneToOne: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetDepthClipNegativeOneToOneEXT"))
  vkCmdSetViewportWScalingEnableNV = cast[proc (commandBuffer: VkCommandBuffer, viewportWScalingEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetViewportWScalingEnableNV"))
  vkCmdSetViewportSwizzleNV = cast[proc (commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pViewportSwizzles: ptr VkViewportSwizzleNV): void {.stdcall.}](vkGetProc("vkCmdSetViewportSwizzleNV"))
  vkCmdSetCoverageToColorEnableNV = cast[proc (commandBuffer: VkCommandBuffer, coverageToColorEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetCoverageToColorEnableNV"))
  vkCmdSetCoverageToColorLocationNV = cast[proc (commandBuffer: VkCommandBuffer, coverageToColorLocation: uint32): void {.stdcall.}](vkGetProc("vkCmdSetCoverageToColorLocationNV"))
  vkCmdSetCoverageModulationModeNV = cast[proc (commandBuffer: VkCommandBuffer, coverageModulationMode: VkCoverageModulationModeNV): void {.stdcall.}](vkGetProc("vkCmdSetCoverageModulationModeNV"))
  vkCmdSetCoverageModulationTableEnableNV = cast[proc (commandBuffer: VkCommandBuffer, coverageModulationTableEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetCoverageModulationTableEnableNV"))
  vkCmdSetCoverageModulationTableNV = cast[proc (commandBuffer: VkCommandBuffer, coverageModulationTableCount: uint32, pCoverageModulationTable: ptr float32): void {.stdcall.}](vkGetProc("vkCmdSetCoverageModulationTableNV"))
  vkCmdSetShadingRateImageEnableNV = cast[proc (commandBuffer: VkCommandBuffer, shadingRateImageEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetShadingRateImageEnableNV"))
  vkCmdSetRepresentativeFragmentTestEnableNV = cast[proc (commandBuffer: VkCommandBuffer, representativeFragmentTestEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetRepresentativeFragmentTestEnableNV"))
  vkCmdSetCoverageReductionModeNV = cast[proc (commandBuffer: VkCommandBuffer, coverageReductionMode: VkCoverageReductionModeNV): void {.stdcall.}](vkGetProc("vkCmdSetCoverageReductionModeNV"))

# Load VK_EXT_shader_module_identifier
proc loadVK_EXT_shader_module_identifier*() =
  vkGetShaderModuleIdentifierEXT = cast[proc (device: VkDevice, shaderModule: VkShaderModule, pIdentifier: ptr VkShaderModuleIdentifierEXT): void {.stdcall.}](vkGetProc("vkGetShaderModuleIdentifierEXT"))
  vkGetShaderModuleCreateInfoIdentifierEXT = cast[proc (device: VkDevice, pCreateInfo: ptr VkShaderModuleCreateInfo, pIdentifier: ptr VkShaderModuleIdentifierEXT): void {.stdcall.}](vkGetProc("vkGetShaderModuleCreateInfoIdentifierEXT"))

# Load VK_NV_optical_flow
proc loadVK_NV_optical_flow*() =
  vkGetPhysicalDeviceOpticalFlowImageFormatsNV = cast[proc (physicalDevice: VkPhysicalDevice, pOpticalFlowImageFormatInfo: ptr VkOpticalFlowImageFormatInfoNV, pFormatCount: ptr uint32, pImageFormatProperties: ptr VkOpticalFlowImageFormatPropertiesNV): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceOpticalFlowImageFormatsNV"))
  vkCreateOpticalFlowSessionNV = cast[proc (device: VkDevice, pCreateInfo: ptr VkOpticalFlowSessionCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pSession: ptr VkOpticalFlowSessionNV): VkResult {.stdcall.}](vkGetProc("vkCreateOpticalFlowSessionNV"))
  vkDestroyOpticalFlowSessionNV = cast[proc (device: VkDevice, session: VkOpticalFlowSessionNV, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyOpticalFlowSessionNV"))
  vkBindOpticalFlowSessionImageNV = cast[proc (device: VkDevice, session: VkOpticalFlowSessionNV, bindingPoint: VkOpticalFlowSessionBindingPointNV, view: VkImageView, layout: VkImageLayout): VkResult {.stdcall.}](vkGetProc("vkBindOpticalFlowSessionImageNV"))
  vkCmdOpticalFlowExecuteNV = cast[proc (commandBuffer: VkCommandBuffer, session: VkOpticalFlowSessionNV, pExecuteInfo: ptr VkOpticalFlowExecuteInfoNV): void {.stdcall.}](vkGetProc("vkCmdOpticalFlowExecuteNV"))

# Load VK_KHR_maintenance5
proc loadVK_KHR_maintenance5*() =
  vkCmdBindIndexBuffer2KHR = cast[proc (commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, size: VkDeviceSize, indexType: VkIndexType): void {.stdcall.}](vkGetProc("vkCmdBindIndexBuffer2KHR"))
  vkGetRenderingAreaGranularityKHR = cast[proc (device: VkDevice, pRenderingAreaInfo: ptr VkRenderingAreaInfoKHR, pGranularity: ptr VkExtent2D): void {.stdcall.}](vkGetProc("vkGetRenderingAreaGranularityKHR"))
  vkGetDeviceImageSubresourceLayoutKHR = cast[proc (device: VkDevice, pInfo: ptr VkDeviceImageSubresourceInfoKHR, pLayout: ptr VkSubresourceLayout2KHR): void {.stdcall.}](vkGetProc("vkGetDeviceImageSubresourceLayoutKHR"))
  vkGetImageSubresourceLayout2KHR = cast[proc (device: VkDevice, image: VkImage, pSubresource: ptr VkImageSubresource2KHR, pLayout: ptr VkSubresourceLayout2KHR): void {.stdcall.}](vkGetProc("vkGetImageSubresourceLayout2KHR"))

# Load VK_EXT_shader_object
proc loadVK_EXT_shader_object*() =
  vkCreateShadersEXT = cast[proc (device: VkDevice, createInfoCount: uint32, pCreateInfos: ptr VkShaderCreateInfoEXT, pAllocator: ptr VkAllocationCallbacks, pShaders: ptr VkShaderEXT): VkResult {.stdcall.}](vkGetProc("vkCreateShadersEXT"))
  vkDestroyShaderEXT = cast[proc (device: VkDevice, shader: VkShaderEXT, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroyShaderEXT"))
  vkGetShaderBinaryDataEXT = cast[proc (device: VkDevice, shader: VkShaderEXT, pDataSize: ptr uint, pData: pointer): VkResult {.stdcall.}](vkGetProc("vkGetShaderBinaryDataEXT"))
  vkCmdBindShadersEXT = cast[proc (commandBuffer: VkCommandBuffer, stageCount: uint32, pStages: ptr VkShaderStageFlagBits, pShaders: ptr VkShaderEXT): void {.stdcall.}](vkGetProc("vkCmdBindShadersEXT"))
  vkCmdSetVertexInputEXT = cast[proc (commandBuffer: VkCommandBuffer, vertexBindingDescriptionCount: uint32, pVertexBindingDescriptions: ptr VkVertexInputBindingDescription2EXT, vertexAttributeDescriptionCount: uint32, pVertexAttributeDescriptions: ptr VkVertexInputAttributeDescription2EXT): void {.stdcall.}](vkGetProc("vkCmdSetVertexInputEXT"))
  vkCmdSetPatchControlPointsEXT = cast[proc (commandBuffer: VkCommandBuffer, patchControlPoints: uint32): void {.stdcall.}](vkGetProc("vkCmdSetPatchControlPointsEXT"))
  vkCmdSetLogicOpEXT = cast[proc (commandBuffer: VkCommandBuffer, logicOp: VkLogicOp): void {.stdcall.}](vkGetProc("vkCmdSetLogicOpEXT"))
  vkCmdSetTessellationDomainOriginEXT = cast[proc (commandBuffer: VkCommandBuffer, domainOrigin: VkTessellationDomainOrigin): void {.stdcall.}](vkGetProc("vkCmdSetTessellationDomainOriginEXT"))
  vkCmdSetDepthClampEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, depthClampEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetDepthClampEnableEXT"))
  vkCmdSetPolygonModeEXT = cast[proc (commandBuffer: VkCommandBuffer, polygonMode: VkPolygonMode): void {.stdcall.}](vkGetProc("vkCmdSetPolygonModeEXT"))
  vkCmdSetRasterizationSamplesEXT = cast[proc (commandBuffer: VkCommandBuffer, rasterizationSamples: VkSampleCountFlagBits): void {.stdcall.}](vkGetProc("vkCmdSetRasterizationSamplesEXT"))
  vkCmdSetSampleMaskEXT = cast[proc (commandBuffer: VkCommandBuffer, samples: VkSampleCountFlagBits, pSampleMask: ptr VkSampleMask): void {.stdcall.}](vkGetProc("vkCmdSetSampleMaskEXT"))
  vkCmdSetAlphaToCoverageEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, alphaToCoverageEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetAlphaToCoverageEnableEXT"))
  vkCmdSetAlphaToOneEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, alphaToOneEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetAlphaToOneEnableEXT"))
  vkCmdSetLogicOpEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, logicOpEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetLogicOpEnableEXT"))
  vkCmdSetColorBlendEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, firstAttachment: uint32, attachmentCount: uint32, pColorBlendEnables: ptr VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetColorBlendEnableEXT"))
  vkCmdSetColorBlendEquationEXT = cast[proc (commandBuffer: VkCommandBuffer, firstAttachment: uint32, attachmentCount: uint32, pColorBlendEquations: ptr VkColorBlendEquationEXT): void {.stdcall.}](vkGetProc("vkCmdSetColorBlendEquationEXT"))
  vkCmdSetColorWriteMaskEXT = cast[proc (commandBuffer: VkCommandBuffer, firstAttachment: uint32, attachmentCount: uint32, pColorWriteMasks: ptr VkColorComponentFlags): void {.stdcall.}](vkGetProc("vkCmdSetColorWriteMaskEXT"))
  vkCmdSetRasterizationStreamEXT = cast[proc (commandBuffer: VkCommandBuffer, rasterizationStream: uint32): void {.stdcall.}](vkGetProc("vkCmdSetRasterizationStreamEXT"))
  vkCmdSetConservativeRasterizationModeEXT = cast[proc (commandBuffer: VkCommandBuffer, conservativeRasterizationMode: VkConservativeRasterizationModeEXT): void {.stdcall.}](vkGetProc("vkCmdSetConservativeRasterizationModeEXT"))
  vkCmdSetExtraPrimitiveOverestimationSizeEXT = cast[proc (commandBuffer: VkCommandBuffer, extraPrimitiveOverestimationSize: float32): void {.stdcall.}](vkGetProc("vkCmdSetExtraPrimitiveOverestimationSizeEXT"))
  vkCmdSetDepthClipEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, depthClipEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetDepthClipEnableEXT"))
  vkCmdSetSampleLocationsEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, sampleLocationsEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetSampleLocationsEnableEXT"))
  vkCmdSetColorBlendAdvancedEXT = cast[proc (commandBuffer: VkCommandBuffer, firstAttachment: uint32, attachmentCount: uint32, pColorBlendAdvanced: ptr VkColorBlendAdvancedEXT): void {.stdcall.}](vkGetProc("vkCmdSetColorBlendAdvancedEXT"))
  vkCmdSetProvokingVertexModeEXT = cast[proc (commandBuffer: VkCommandBuffer, provokingVertexMode: VkProvokingVertexModeEXT): void {.stdcall.}](vkGetProc("vkCmdSetProvokingVertexModeEXT"))
  vkCmdSetLineRasterizationModeEXT = cast[proc (commandBuffer: VkCommandBuffer, lineRasterizationMode: VkLineRasterizationModeEXT): void {.stdcall.}](vkGetProc("vkCmdSetLineRasterizationModeEXT"))
  vkCmdSetLineStippleEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, stippledLineEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetLineStippleEnableEXT"))
  vkCmdSetDepthClipNegativeOneToOneEXT = cast[proc (commandBuffer: VkCommandBuffer, negativeOneToOne: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetDepthClipNegativeOneToOneEXT"))
  vkCmdSetViewportWScalingEnableNV = cast[proc (commandBuffer: VkCommandBuffer, viewportWScalingEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetViewportWScalingEnableNV"))
  vkCmdSetViewportSwizzleNV = cast[proc (commandBuffer: VkCommandBuffer, firstViewport: uint32, viewportCount: uint32, pViewportSwizzles: ptr VkViewportSwizzleNV): void {.stdcall.}](vkGetProc("vkCmdSetViewportSwizzleNV"))
  vkCmdSetCoverageToColorEnableNV = cast[proc (commandBuffer: VkCommandBuffer, coverageToColorEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetCoverageToColorEnableNV"))
  vkCmdSetCoverageToColorLocationNV = cast[proc (commandBuffer: VkCommandBuffer, coverageToColorLocation: uint32): void {.stdcall.}](vkGetProc("vkCmdSetCoverageToColorLocationNV"))
  vkCmdSetCoverageModulationModeNV = cast[proc (commandBuffer: VkCommandBuffer, coverageModulationMode: VkCoverageModulationModeNV): void {.stdcall.}](vkGetProc("vkCmdSetCoverageModulationModeNV"))
  vkCmdSetCoverageModulationTableEnableNV = cast[proc (commandBuffer: VkCommandBuffer, coverageModulationTableEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetCoverageModulationTableEnableNV"))
  vkCmdSetCoverageModulationTableNV = cast[proc (commandBuffer: VkCommandBuffer, coverageModulationTableCount: uint32, pCoverageModulationTable: ptr float32): void {.stdcall.}](vkGetProc("vkCmdSetCoverageModulationTableNV"))
  vkCmdSetShadingRateImageEnableNV = cast[proc (commandBuffer: VkCommandBuffer, shadingRateImageEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetShadingRateImageEnableNV"))
  vkCmdSetRepresentativeFragmentTestEnableNV = cast[proc (commandBuffer: VkCommandBuffer, representativeFragmentTestEnable: VkBool32): void {.stdcall.}](vkGetProc("vkCmdSetRepresentativeFragmentTestEnableNV"))
  vkCmdSetCoverageReductionModeNV = cast[proc (commandBuffer: VkCommandBuffer, coverageReductionMode: VkCoverageReductionModeNV): void {.stdcall.}](vkGetProc("vkCmdSetCoverageReductionModeNV"))

# Load VK_QCOM_tile_properties
proc loadVK_QCOM_tile_properties*() =
  vkGetFramebufferTilePropertiesQCOM = cast[proc (device: VkDevice, framebuffer: VkFramebuffer, pPropertiesCount: ptr uint32, pProperties: ptr VkTilePropertiesQCOM): VkResult {.stdcall.}](vkGetProc("vkGetFramebufferTilePropertiesQCOM"))
  vkGetDynamicRenderingTilePropertiesQCOM = cast[proc (device: VkDevice, pRenderingInfo: ptr VkRenderingInfo, pProperties: ptr VkTilePropertiesQCOM): VkResult {.stdcall.}](vkGetProc("vkGetDynamicRenderingTilePropertiesQCOM"))

# Load VK_NV_external_sci_sync2
proc loadVK_NV_external_sci_sync2*() =
  vkCreateSemaphoreSciSyncPoolNV = cast[proc (device: VkDevice, pCreateInfo: ptr VkSemaphoreSciSyncPoolCreateInfoNV, pAllocator: ptr VkAllocationCallbacks, pSemaphorePool: ptr VkSemaphoreSciSyncPoolNV): VkResult {.stdcall.}](vkGetProc("vkCreateSemaphoreSciSyncPoolNV"))
  vkDestroySemaphoreSciSyncPoolNV = cast[proc (device: VkDevice, semaphorePool: VkSemaphoreSciSyncPoolNV, pAllocator: ptr VkAllocationCallbacks): void {.stdcall.}](vkGetProc("vkDestroySemaphoreSciSyncPoolNV"))
  vkGetFenceSciSyncFenceNV = cast[proc (device: VkDevice, pGetSciSyncHandleInfo: ptr VkFenceGetSciSyncInfoNV, pHandle: pointer): VkResult {.stdcall.}](vkGetProc("vkGetFenceSciSyncFenceNV"))
  vkGetFenceSciSyncObjNV = cast[proc (device: VkDevice, pGetSciSyncHandleInfo: ptr VkFenceGetSciSyncInfoNV, pHandle: pointer): VkResult {.stdcall.}](vkGetProc("vkGetFenceSciSyncObjNV"))
  vkImportFenceSciSyncFenceNV = cast[proc (device: VkDevice, pImportFenceSciSyncInfo: ptr VkImportFenceSciSyncInfoNV): VkResult {.stdcall.}](vkGetProc("vkImportFenceSciSyncFenceNV"))
  vkImportFenceSciSyncObjNV = cast[proc (device: VkDevice, pImportFenceSciSyncInfo: ptr VkImportFenceSciSyncInfoNV): VkResult {.stdcall.}](vkGetProc("vkImportFenceSciSyncObjNV"))
  vkGetPhysicalDeviceSciSyncAttributesNV = cast[proc (physicalDevice: VkPhysicalDevice, pSciSyncAttributesInfo: ptr VkSciSyncAttributesInfoNV, pAttributes: NvSciSyncAttrList): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceSciSyncAttributesNV"))

# Load VK_NV_low_latency2
proc loadVK_NV_low_latency2*() =
  vkSetLatencySleepModeNV = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR, pSleepModeInfo: ptr VkLatencySleepModeInfoNV): VkResult {.stdcall.}](vkGetProc("vkSetLatencySleepModeNV"))
  vkLatencySleepNV = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR, pSleepInfo: ptr VkLatencySleepInfoNV): VkResult {.stdcall.}](vkGetProc("vkLatencySleepNV"))
  vkSetLatencyMarkerNV = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR, pLatencyMarkerInfo: ptr VkSetLatencyMarkerInfoNV): void {.stdcall.}](vkGetProc("vkSetLatencyMarkerNV"))
  vkGetLatencyTimingsNV = cast[proc (device: VkDevice, swapchain: VkSwapchainKHR, pLatencyMarkerInfo: ptr VkGetLatencyMarkerInfoNV): void {.stdcall.}](vkGetProc("vkGetLatencyTimingsNV"))
  vkQueueNotifyOutOfBandNV = cast[proc (queue: VkQueue, pQueueTypeInfo: ptr VkOutOfBandQueueTypeInfoNV): void {.stdcall.}](vkGetProc("vkQueueNotifyOutOfBandNV"))

# Load VK_KHR_cooperative_matrix
proc loadVK_KHR_cooperative_matrix*() =
  vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR = cast[proc (physicalDevice: VkPhysicalDevice, pPropertyCount: ptr uint32, pProperties: ptr VkCooperativeMatrixPropertiesKHR): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceCooperativeMatrixPropertiesKHR"))

# Load VK_EXT_attachment_feedback_loop_dynamic_state
proc loadVK_EXT_attachment_feedback_loop_dynamic_state*() =
  vkCmdSetAttachmentFeedbackLoopEnableEXT = cast[proc (commandBuffer: VkCommandBuffer, aspectMask: VkImageAspectFlags): void {.stdcall.}](vkGetProc("vkCmdSetAttachmentFeedbackLoopEnableEXT"))

# Load VK_QNX_external_memory_screen_buffer
proc loadVK_QNX_external_memory_screen_buffer*() =
  vkGetScreenBufferPropertiesQNX = cast[proc (device: VkDevice, buffer: ptr screen_buffer, pProperties: ptr VkScreenBufferPropertiesQNX): VkResult {.stdcall.}](vkGetProc("vkGetScreenBufferPropertiesQNX"))

# Load VK_KHR_line_rasterization
proc loadVK_KHR_line_rasterization*() =
  vkCmdSetLineStippleKHR = cast[proc (commandBuffer: VkCommandBuffer, lineStippleFactor: uint32, lineStipplePattern: uint16): void {.stdcall.}](vkGetProc("vkCmdSetLineStippleKHR"))

# Load VK_KHR_calibrated_timestamps
proc loadVK_KHR_calibrated_timestamps*() =
  vkGetPhysicalDeviceCalibrateableTimeDomainsKHR = cast[proc (physicalDevice: VkPhysicalDevice, pTimeDomainCount: ptr uint32, pTimeDomains: ptr VkTimeDomainKHR): VkResult {.stdcall.}](vkGetProc("vkGetPhysicalDeviceCalibrateableTimeDomainsKHR"))
  vkGetCalibratedTimestampsKHR = cast[proc (device: VkDevice, timestampCount: uint32, pTimestampInfos: ptr VkCalibratedTimestampInfoKHR, pTimestamps: ptr uint64, pMaxDeviation: ptr uint64): VkResult {.stdcall.}](vkGetProc("vkGetCalibratedTimestampsKHR"))

# Load VK_KHR_maintenance6
proc loadVK_KHR_maintenance6*() =
  vkCmdBindDescriptorSets2KHR = cast[proc (commandBuffer: VkCommandBuffer, pBindDescriptorSetsInfo: ptr VkBindDescriptorSetsInfoKHR): void {.stdcall.}](vkGetProc("vkCmdBindDescriptorSets2KHR"))
  vkCmdPushConstants2KHR = cast[proc (commandBuffer: VkCommandBuffer, pPushConstantsInfo: ptr VkPushConstantsInfoKHR): void {.stdcall.}](vkGetProc("vkCmdPushConstants2KHR"))
  vkCmdPushDescriptorSet2KHR = cast[proc (commandBuffer: VkCommandBuffer, pPushDescriptorSetInfo: ptr VkPushDescriptorSetInfoKHR): void {.stdcall.}](vkGetProc("vkCmdPushDescriptorSet2KHR"))
  vkCmdPushDescriptorSetWithTemplate2KHR = cast[proc (commandBuffer: VkCommandBuffer, pPushDescriptorSetWithTemplateInfo: ptr VkPushDescriptorSetWithTemplateInfoKHR): void {.stdcall.}](vkGetProc("vkCmdPushDescriptorSetWithTemplate2KHR"))
  vkCmdSetDescriptorBufferOffsets2EXT = cast[proc (commandBuffer: VkCommandBuffer, pSetDescriptorBufferOffsetsInfo: ptr VkSetDescriptorBufferOffsetsInfoEXT): void {.stdcall.}](vkGetProc("vkCmdSetDescriptorBufferOffsets2EXT"))
  vkCmdBindDescriptorBufferEmbeddedSamplers2EXT = cast[proc (commandBuffer: VkCommandBuffer, pBindDescriptorBufferEmbeddedSamplersInfo: ptr VkBindDescriptorBufferEmbeddedSamplersInfoEXT): void {.stdcall.}](vkGetProc("vkCmdBindDescriptorBufferEmbeddedSamplers2EXT"))

var
  vkCreateInstance*: proc (pCreateInfo: ptr VkInstanceCreateInfo, pAllocator: ptr VkAllocationCallbacks, pInstance: ptr VkInstance): VkResult {.stdcall.}
  vkEnumerateInstanceExtensionProperties*: proc (pLayerName: cstring, pPropertyCount: ptr uint32, pProperties: ptr VkExtensionProperties): VkResult {.stdcall.}
  vkEnumerateInstanceLayerProperties*: proc (pPropertyCount: ptr uint32, pProperties: ptr VkLayerProperties): VkResult {.stdcall.}
  vkEnumerateInstanceVersion*: proc (pApiVersion: ptr uint32): VkResult {.stdcall.}

proc vkPreload*(load1_1: bool = true) =
  vkGetInstanceProcAddr = cast[proc (instance: VkInstance, pName: cstring): PFN_vkVoidFunction {.stdcall.}](symAddr(vkHandleDLL, "vkGetInstanceProcAddr"))

  vkCreateInstance = cast[proc (pCreateInfo: ptr VkInstanceCreateInfo, pAllocator: ptr VkAllocationCallbacks, pInstance: ptr VkInstance): VkResult {.stdcall.}](vkGetProc("vkCreateInstance"))
  vkEnumerateInstanceExtensionProperties = cast[proc (pLayerName: cstring, pPropertyCount: ptr uint32, pProperties: ptr VkExtensionProperties): VkResult {.stdcall.}](vkGetProc("vkEnumerateInstanceExtensionProperties"))
  vkEnumerateInstanceLayerProperties = cast[proc (pPropertyCount: ptr uint32, pProperties: ptr VkLayerProperties): VkResult {.stdcall.}](vkGetProc("vkEnumerateInstanceLayerProperties"))

  if load1_1:
    vkEnumerateInstanceVersion = cast[proc (pApiVersion: ptr uint32): VkResult {.stdcall.}](vkGetProc("vkEnumerateInstanceVersion"))

proc vkInit*(instance: VkInstance, load1_0: bool = true, load1_1: bool = true): bool =
  currInst = cast[pointer](instance)
  if load1_0:
    vkLoad1_0()
  when not defined(macosx):
    if load1_1:
      vkLoad1_1()
  return true
